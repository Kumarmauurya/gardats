using Bhim;
using BhimAXIS;
using BhimGood;
using Ionic.Zip;
using IRCommDLL;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using MReget;

using WebSocketSharp;
using NativeCSharpJWTToken;
using Newtonsoft.Json;
using OpenQA.Selenium.DevTools;
using Org.BouncyCastle.Utilities;
using Org.BouncyCastle.Utilities.Encoders;
using PDFService;
using QRCoder;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Cache;
using System.Net.NetworkInformation;
using System.Net.Security;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;
using System.Web;
using System.Windows.Forms;
using System.Xml.Linq;
using static System.Net.Mime.MediaTypeNames;
using Application = System.Windows.Forms.Application;
using Bank = IRCommDLL.Bank;
using Image = System.Drawing.Image;
using Strings = Microsoft.VisualBasic.Strings;
using WebSocketSharp;
using System.Runtime.Remoting.Messaging;
using BunifuAnimatorNS;
using OpenQA.Selenium;
using Cookie = System.Net.Cookie;
using Newtonsoft.Json.Linq;
using System.Data;
using System.Data.SQLite;
using System.Web.UI.WebControls;
using CheckBox = System.Windows.Forms.CheckBox;
using static System.Net.WebRequestMethods;
using File = System.IO.File;
using System.Collections;
using System.ComponentModel;
using OpenQA.Selenium.DevTools.V101.CSS;
using Anti;

internal class clsMain
{
    public sealed class GClass5
    {
        public Random object_0;

        public char method_0(string A_1)
        {
            return A_1[object_0.Next(A_1.Length)];
        }
    }

    public delegate string GetOTPDelegate(object obj);

    public class BookingHistoryRootObject
    {
        
        public BookingList[] bookingResponseList { get; set; }

        public string eligibleForCancel { get; set; }

        public string serverId { get; set; }

        public string showLastTxn { get; set; }

        public DateTime timeStamp { get; set; }
    }

    public class SingleBookingHistoryRootObject
    {
        public BookingList bookingResponseList { get; set; }

        public string eligibleForCancel { get; set; }

        public string serverId { get; set; }

        public string showLastTxn { get; set; }

        public DateTime timeStamp { get; set; }
    }

    public class BookingList
    {
        public string boardingDate { get; set; }

        public string boardingStn { get; set; }

        public string journeyDate { get; set; }

        public string trainName { get; set; }

        public string bookingDate { get; set; }

        public string destArrvDate { get; set; }

        public string destStn { get; set; }

        public string fromStn { get; set; }

        public string journeyLap { get; set; }

        public string pnrNumber { get; set; }

        public string reservationId { get; set; }

        public string reservationStatus { get; set; }

        public string sai { get; set; }

        public string scheduleArrivalFlag { get; set; }

        public string scheduleDepartureFlag { get; set; }

        public string ticketType { get; set; }

        public string tktBookedFrom { get; set; }

        public string trainNumber { get; set; }

        public string vikalpStatus { get; set; }
    }

    public class Root
    {
        public List<TrainBtwnStnsList> trainBtwnStnsList { get; set; }
        public List<string> quotaList { get; set; }
        public string serverId { get; set; }
        public DateTime timeStamp { get; set; }
        public string vikalpInSpecialTrainsAccomFlag { get; set; }
        public string oneStopJourny { get; set; }
        public string serveyFlag { get; set; }
        public string alternateEnquiryFlag { get; set; }
    }

    public class TrainBtwnStnsList
    {
        public string trainNumber { get; set; }
        public string trainName { get; set; }
        public string fromStnCode { get; set; }
        public string toStnCode { get; set; }
        public string arrivalTime { get; set; }
        public string departureTime { get; set; }
        public string distance { get; set; }
        public string duration { get; set; }
        public string runningMon { get; set; }
        public string runningTue { get; set; }
        public string runningWed { get; set; }
        public string runningThu { get; set; }
        public string runningFri { get; set; }
        public string runningSat { get; set; }
        public string runningSun { get; set; }
        public List<string> avlClasses { get; set; }
        public List<string> trainType { get; set; }
        public string atasOpted { get; set; }
        public string flexiFlag { get; set; }
        public string trainOwner { get; set; }
        public string trainsiteId { get; set; }
    }

    public static System.Timers.Timer aTimer;

    public static bool Chrome_Found;

    public static clsSbiOTP2 SbiOTP2;

    public static int windowCount;

    public static int L_success;

    internal string sensor_data;

    public static bool isPremium;

    private string xcrf;

    private bool isPremium_p;

    private string Pri_x_acf;

    private string x_acf;
    //
    [DllImport("user32.dll", SetLastError = true)]
    private static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll", SetLastError = true)]
    private static extern int GetWindowTextLengthA(IntPtr HWND);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern int GetWindowTextA(IntPtr HWND, StringBuilder WindowText, int nMaxCount);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool IsDebuggerPresent();

    [DllImport("kernel32.dll", ExactSpelling = true, SetLastError = true)]
    private static extern bool CheckRemoteDebuggerPresent(IntPtr hProcess, ref bool isDebuggerPresent);

    private static bool isDebuggerPresent = false;
    //


    private static Random random;

    public static int akmint;

    public static string edata;

    private string s_Data_Private;

    private string uriPNR;

    private CookieContainer cookieBmsk_0 = null;

    private CookieContainer cookieBmsk_2 = null;

    private CookieContainer cookieBmsk_3 = null;

    internal bool isFinalCaptcha;

    private string captext;

    private bool cpCancell;

    private string clientID;

    private string mac;

    public static bool isDemo;

    private JWTUtils jwtutils = new JWTUtils();

    private CngKey randomGeneratedKey;

    private string keyFromServer;

    private string greq;

    internal string _Authrization;

    private string access_token;

    private string jwtToken;

    private string mup;
    internal double double_1 = 0.0;

    private string Request_Type;

    private DateTime dateTimePayStart;

    private DateTime dateTimePayStartM;

    internal string LoginType;

    public static bool isReal;

    public static bool isRealsikka;

    internal bool isAPP;


    internal bool bmk;

    internal string bmikey;

    internal bool isbot;

    internal bool isserver;

    internal bool failissuefix;

    internal bool webadvlogin;

    internal bool vpn;

    internal bool bkgnt;
    private bool autorelogin;
    internal string vpnip;
    internal bool useragenttrue;



    [ThreadStatic]
    public static X509Certificate2Collection x509Certificate2Collection_0;

    internal static int int_0;

    internal bool bool_0;

    internal string TktName_;

    private int AC_AvailibalityTime;

    private int SL_AvailibalityTime;

    private UpdateTStatus updateTStatus_0;

    private Bitmap bitmap_0;

    private Bitmap bitmap_1;

    public static bool bool_12;

    internal bool bool_13;

    private bool bool_14;

    private bool bool_15;

    private Class19 class19_0;

    private clsPostData class3_0;

    private string cxtoken;

    private Bank bank;

    internal Control control_0;

    internal Rectangle rectangle_0;

    private UpdateTStatus updateTStatus_1;

    public static bool SpeedUP;

    public static bool bool_16;

    public static bool bool_17;

    public static int int_1;

    private CookieContainer cookieContainer_0 = new CookieContainer();

    internal static bool bool_18;

    public static WebProxy webProxy_0;

    internal WebProxy Proxy_;

    internal WebProxy Proxy_C;

    internal WebProxy webProxy_2;

    internal WebProxy webProxy_3;

    internal static WebProxy webProxy_4;
    private string TKT_QUOTAGN;
    private string url = "";

    private string postdata = "";

    private string dishabemail = "";//emaildomain

    private string dsed = "";

    private string emaildomain = "";

    private string Reffral = "";



    private string Status = "";

    internal static string string_22;

    internal static string string_23;

    internal static string string_24;

    internal static string string_25;

    internal static string base64 = "iVBORw0KGgoAAAANSUhEUgAAAeAAAAHgAQAAAABVr4M4AAADeklEQVR42u2cPXbqQAyFxaFI6SWwFJZmL42lsARKCg6KZ/Q7wEuTaF5zXTnGnysd5V6NJOJfXAQYMOBP8IPsOj1ovRGd23N/ytcjb3To79KR+eavr4ABT4BXjdSTEOf7/p3979uBL1/M1/3Rwv2W5SnL1wEDngK3eP1iIXpstyjeFnlrj23mZwT//km9BQx4Jqy3e77ViL+QKAdLyBrxgAH/B5h3DSCvNTmwPHuYW8TvCbkrA8CA58KmDLgn2bOKhJZ67+G7Av4sKwADLoEHX9XV6k+3P5kywID/GE6Xhvk95MB+a76K+u36z5IWYMAFsJaiJLM2OeDC9dn0Qru0KtUtVku9d/0OYMD1sJai7LemSyl5/dFXqdvqxQDAgOth+2+ffBWLHOhqlUZlyx9MGWDARbAQJPWnnmSTgxKYlle3JcEPGPAEWOSAvMY5oC8iEhK8akIGDHgK3JRBiFHVpfzwY1AzU+K2rJSaagaAAdfCNISumSmKKA7bnwpUgAGXw37KKb+Rh+4tiQQvUNnxVBRNAQMuhgdfpb+ZSDj52b2V9wfhChhwJewnSlJp4mgLPVg/SXNbFwtol7MrYMATYFcG3Fvw+mtHaxa1Y/yuF/xMKvsqwIDrYCXIbZP313utSrtMvOs+jpwAA66FtegUJ6LWaq+Efr2fiKYD+wdgwBPgFLrJNsmJ6FkKVGl8yeCrq17AgEthTb2pFzSZqdzWnIQrYMBT4Ajd+MefR5JoeOrFAAYMeBqcSlHqq7rXJ3prwFdlSy9jJIABV8Dh6q9j5wj5xCe/lfdTxRUw4EI4tYsk2085islSr9b/TdkCBlwNKxGxTbat4VOHsybksP2AAVfCQ5LdYu1NWjGSepmHshVgwNWw9tfHxJyf0kfnU4p4TvVTwICr4Rgy7kWn1Nacavo+s7TZ0wdgwBNgtok5ybepQ/TpvoqHY3yvqgIGXA/bckXNt772xiUq2RQyxU5GAgx4Cpx2OJA0i9okiA+FpEEljs49wICr4WEDjs8sxSqmWDFiDfi29A4w4Alw2l27xhpQelsO6jsZc2wDBlwMp921SaKOu5rIRILkZsCAZ8M6hzSsVh40rO8gyYNKgAHPgkPF2hTyaTh92nJVFTDgCfC4u9aqUjH8mbMw65ETYMBz4OyrlojtFzOl7XppESNgwOXwLy7AgAH/NfwNbCnxiptXUPUAAAAASUVORK5CYII=";


    private string _abck;

    private string bm_sv;

    public static bool isLogin;

    private bool isLogin_Self;

    public static int CountL;

    public static int failCount;

    private string Task_response;

    private string Task_errormsg;

    private WebException Task_Exception_;

    private string response;

    private string curavl;

    private string weba;

    private string webb;

    private string webc;

    private string webd;

    private string webf;

    private string webz;

    private string responseCl;

    private string errormsg;

    private string string_27;

    public static bool unable;

    internal CookieContainer cookie_;
    internal CookieContainer cookie_l;

    internal CookieContainer cookie_bkp;

    internal CookieContainer cookieContainer_2;

    public static CookieContainer cookie_M;

    private WebException Exception_;

    private WebException Exception_W = null;

    private HttpStatusCode httpStatusCode_0;

    internal IPAddress ipaddress_0;

    internal IPAddress ipaddress_1;

    internal string string_29;

    private static StreamWriter streamWriter_0;

    internal static object object_0;

    private static int int_2;

    internal static GetOTPDelegate getOTPDelegate_0;

    private static object object_1;

    internal static List<string> list_Log;

    internal static List<string> trnbtw;

    private static object object_2;

    private static List<string> list_1;

    public static List<string> list_SensorData;

    public static List<string> list_SensorData_ADV;

    private static Dictionary<string, Class18> dictionary_1;

    private static object object_3;

    private static List<string> list_IrctcID;//list_SERVERID

    private static List<string> list_SERVERID;
    private static List<string> list_3;

    private static object object_4;

    private static object object_5;

    private static object object_5U;

    private static Dictionary<string, int> dictionary_2;

    private static Dictionary<string, int> dictionary_Pair_Process;

    private static object object_6;

    private static Dictionary<string, double> dictionary_4;

    private static object object_7;

    internal static Dictionary<string, string> dictionary_5;

    internal Dictionary<string, string> dictionary_TimeP;

    public static Dictionary<string, string> dictionary_7;

    public static Dictionary<string, string> dictionary_8;

    public static Dictionary<string, int> dictionary_PaxStart;

    private static List<string> list_PaySTART;

    public static List<string> list_6;

    internal static List<string> list_7;

    private static object object_8;

    private static List<string> list_PaySUCCESS;

    internal Dictionary<string, string> dictionary_header;

    private static Dictionary<string, bool> dictionary_10;

    private static object object_9;

    internal static object object_b;

    private static List<string> list_PNR;

    private static object object_10;

    private static List<string> list_11;

    private static object object_11;

    private static List<string> list_12;

    private static object object_13;

    internal static string string_31;

    internal static string string_33;

    public long long_0;

    public long long_1;

    public long long_2;

    internal string ConnectionGroupName_;

    private static int int_3;

    private static int int_4;

    public static X509Certificate2 x509Certificate2_0;

    internal string tCntrlName_ = "";

    public string string_38 = "";

    public string string_39 = "";

    public string string_40 = "";

    public string string_41 = "";

    public string string_42 = "UnavilBnk.nxt";

    public string string_43;

    public int int_5 = 5;

    public int int_6;

    internal static string string_44;

    internal static string string_45;

    internal static string string_46;

    internal double double_0;

    internal double minmPsgnInputTime2;

    internal double minmPsgnInputTime4;

    internal double minmPsgnInputTime6;

    internal double minmPaymentTime;

    private static object object_16;

    internal int int_AvlHRS;

    internal int int_BookHRS;

    internal int int_Pair;

    public static string string_49;

    public DateTime dateTime_0;

    private DateTime dateTime_1;

    private DateTime dateTime_2;

    private DateTime dateTime_3;

    private bool bool_19;

    private bool bool_21;

    private bool bool_22;

    private bool bool_23;

    private bool bool_24;

    private bool bool_ptSL;

    private bool bool_29;

    private bool bool_30;

    internal bool bool_RedirectToBank;

    private bool bool_36;

    private bool bool_37;

    private bool bool_38;

    private bool bool_40;

    private bool bool_41;

    public static bool bool_46;

    internal string string_52 = "Ssl3";

    internal string string_53 = "https://www.irctc.co.in";

    private static string string_54;

    private static string string_56;

    internal static string string_59;

    public static SecureString secureString_0;

    public static int int_21;

    public static int int_22;

    private static WaitCallback waitCallback_0;

    public static string string_64;

    private string string_68 = "";

    private string string_70;

    internal string string_71;

    private static int[] encryptionIndexes = new int[] { 1, 9, 18, 16, 1, 25 };

    public static string string_72;

    public static string string_75;

    public static bool bool_47;

    internal Stopwatch stopwatch_0;

    internal bool bool_48;

    private int int_TimeDiff;

    private bool bool_51;

    internal bool bool_52;

    internal Control control_1;

    public static bool bool_54;

    public static bool boolotp;


    private static Dictionary<string, int> dictionary_11;

    public static int int_27;

    internal static string string_84;

    internal static string string_85;

    internal bool bool_ADV;

    internal bool paxminus;

    internal static bool BankSuccess;

    public static bool staticWEB;

    private bool SensorDataSend;

    public static string Demo { get; private set; }

    [DllImport("kernel32.dll")]
    internal static extern void ExitProcess(uint uint_0);

    internal static string ocrlink = "";

    internal static string phonepeid = "";

    internal static string PAYZAPDCID = "";

    internal static string validationstart = "";
    internal static string paymenthold = "";
    private string emailp1;

    private string emailp2;
    private DateTime newdate;

    static clsMain()
    {

        aTimer = new System.Timers.Timer();
        random = new Random();
        int_27 = -1;
        string_84 = "IMRANENCRYPTION";
        string_85 = "";
        string text = Path.Combine("IRLOG", "cd_Version.txt");
        if (File.Exists(text))
        {
            FileInfo fileInfo = new FileInfo(text);
            DateTime creationTime = fileInfo.CreationTime;
            if (fileInfo.LastWriteTime.Date != DateTime.Now.Date)
            {
                File.Delete(text);
            }
        }
        int_0 = 1;
        bool_16 = false;
        bool_17 = false;
        bool_18 = false;
        webProxy_4 = null;
        string_22 = "";
        string_23 = "";
        string_24 = "";
        string_25 = "";
        list_IrctcID = new List<string>(500);
        list_SERVERID = new List<string>(500);
        list_3 = new List<string>(500);
        object_4 = new object();
        object_5 = new object();
        dictionary_2 = new Dictionary<string, int>(4);
        object_6 = new object();
        dictionary_4 = new Dictionary<string, double>(2);
        object_7 = new object();
        dictionary_5 = new Dictionary<string, string>();
        dictionary_7 = new Dictionary<string, string>();
        dictionary_8 = new Dictionary<string, string>();
        list_PaySTART = new List<string>(50);
        list_6 = new List<string>(50);
        list_7 = new List<string>(50);
        object_8 = new object();
        list_PaySUCCESS = new List<string>(50);
        dictionary_PaxStart = new Dictionary<string, int>(50);
        dictionary_Pair_Process = new Dictionary<string, int>(50);
        dictionary_10 = new Dictionary<string, bool>();
        object_9 = new object();
        list_PNR = new List<string>(20);
        object_10 = new object();
        list_11 = new List<string>(50);
        object_11 = new object();
        list_12 = new List<string>(50);
        object_13 = new object();
        string_31 = "";
        int_3 = 2;
        int_4 = 0;
        string_44 = "";
        string_45 = "";
        string_46 = "";
        object_16 = new object();
        string_49 = "";
        bool_46 = false;
        string_56 = "";
        secureString_0 = new SecureString();
        int_21 = 0;
        int_22 = 0;
        dictionary_11 = new Dictionary<string, int>(4);
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
        ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
        ServicePointManager.Expect100Continue = false;
        ServicePointManager.UseNagleAlgorithm = true;
        ServicePointManager.CheckCertificateRevocationList = true;
        ServicePointManager.MaxServicePoints = 10000;
        ServicePointManager.DefaultConnectionLimit = int.MaxValue;
        try
        {
            object_2 = new object();
            list_1 = new List<string>();
            dictionary_1 = new Dictionary<string, Class18>();
            object_3 = new object();
            object obj = object_16;
            object obj2 = obj;
            lock (obj2)
            {
                string_54 = "https://https://sikkav2.somee.com/";
                string_54 += "auth/";
                if (DateTime.Now.Hour < 12)
                {
                    dictionary_5.Add("BookingCaptchaTime", "25500");
                }
                else
                {
                    dictionary_5.Add("BookingCaptchaTime", "0");
                }
                dictionary_5.Add("ScreenShotURL", string_54 + "ScreenShot");
                dictionary_5.Add("ChromeDriver", "https://https://sikkav2.somee.com/Downloads/Chromedriver.zip");
                dictionary_5.Add("ChromeDriver91", "https://https://sikkav2.somee.com/Downloads/Chromedriver.zip");
                dictionary_5.Add("NOCRLink", string_54 + "B4UData.zip");
                dictionary_5.Add("NWOCRLink", string_54 + "B4UData.zip");
                dictionary_5.Add("OCRLink64", string_54 + "B4UData.zip");
                dictionary_5.Add("Static5GbLink", string_54 + "http://regetdx.5gbfree.com");
                dictionary_5.Add("StaticLinks", string_54 + "http://ser355.somee.com/TUT");
                dictionary_5.Add("dKey", "_&^12$&@");
                dictionary_5.Add("RumURL", string_54 + "rum.aspx");
                dictionary_5.Add("analyserURL", string_54 + "vld.aspx");
                dictionary_5.Add("WinZipanalyserURL", string_54 + "vld.aspx");
                dictionary_5.Add("NewsURL", string_54 + "ViewNews");
                dictionary_5.Add("WNewsURL", string_54 + "news125.htm");
                dictionary_5.Add("ResultLink", "https://sikkav2.somee.com");
                dictionary_5.Add("EmailAdd", "emergency2online@gmail.com");
                dictionary_5.Add("EDomain", "smtp.neosup.somee.com");
                string environmentVariable = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
                string pairnumber = "100";//PairNumber();
                if ((environmentVariable == "MAURYA") | (environmentVariable == "PRAGYAA"))
                {
                    dictionary_5.Add("paidpair", pairnumber);
                }
                else
                {
                    dictionary_5.Add("paidpair", pairnumber);
                }
                try
                {
                    validationstart = irctcocr();
                }
                catch
                {
                    validationstart = "http://185.172.64.80/home/IRCTCOCR#false#false#true#false#111#120#false#false#true#4#true#true#false#false#DK9tcF7yrzMWJsi1PTAtLaT6WnNSMSxVgoIFFr51g26vER0SYHr+oEFhKtGA2NTs#false#true#true";//"http://185.172.64.80/home/IRCTCOCR#false#true#true#false#111#120#false#false#true#4#false#true#false#false#DK9tcF7yrzMWJsi1PTAtLaT6WnNSMSxVgoIFFr51g26vER0SYHr+oEFhKtGA2NTs#false#true#true";
                }

                if (DateTime.Now.Minute < 40)
                {
                    try
                    {
                        deleteallotp();
                    }
                    catch
                    {

                    }
                }
                //phonepeid = 
                dictionary_5.Add("unpaidpair", pairnumber);
                dictionary_5.Add("WindowCount", "30");
            }
            string text2 = Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Microsoft"), "Mvog");
            if (!Directory.Exists(text2))
            {
                Directory.CreateDirectory(text2);
            }
            string_33 = Path.Combine(text2, "Mobi_Jx.lgn");
            ThreadPool.SetMinThreads(40, 10);
            string startupPath = Application.StartupPath;
            OperatingSystem oSVersion = Environment.OSVersion;
            Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            try
            {
                string_31 = Path.Combine(startupPath, "Logs");
                if (!Directory.Exists(string_31))
                {
                    Directory.CreateDirectory(string_31);
                }
                streamWriter_0 = new StreamWriter(Path.Combine(string_31, "Iclgs_" + DateTime.Now.ToString("ddMMyyyy") + ".lg"), true);
                Class12.smethod_0(secureString_0, 5, "Nothing");
            }
            catch (Exception)
            {
            }
            object_0 = new object();
            list_Log = new List<string>(500);
            int_2 = 0;
            object_1 = new object();
        }
        catch (Exception ex2)
        {
            MessageBox.Show(smethod_4(), "Support Class Initialization Fail!! \r\n" + ex2.Message);
            throw ex2;
        }
        SbiOTP2 = new clsSbiOTP2();
        frmCaptcha.pks = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        frmCaptcha.pks = Path.Combine(frmCaptcha.pks, "Microsoft");
        ThreadPool.QueueUserWorkItem(frmCaptcha.smethod_12);
        ThreadPool.QueueUserWorkItem(frmCaptcha.ExtractFile0);
    }

    private void method_0(object object_18)
    {
        try
        {
            string string_ = object_18.ToString();
            string string_2 = GetString_(string_, "timeStamp", "\"");
            string string_3 = GetString_(string_, "timeStamp", "\"");
            DateTime dateTime = DateTime.Parse(string_3);
            string_3 = dateTime.ToString("dd-MM-yyyy");
            string_2 = dateTime.ToString("hh:mm:ss tt");
            method_20(string_3);
            method_21(string_2);
        }
        catch
        {
            MessageBox.Show(new Form
            {
                TopMost = true
            }, "Time Synchronization Failed! IRCTC Server is UNDER MAINTENANCE", "Server Error", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
    }

    private static void OnTimedEvent(object source, ElapsedEventArgs e)
    {
        if (DateTime.Now.Minute == 35)
        {
            aTimer.Enabled = false;
            //ExitProcess(0u);
        }
    }

    internal clsMain()
    {
        ConnectionGroupName_ = smethod_6();
        updateTStatus_1 = null;
        method_1();
        if ((DateTime.Now.Minute < 35) & !aTimer.Enabled)
        {
            aTimer.Elapsed += OnTimedEvent;
            aTimer.Interval = 5000.0;
            aTimer.Enabled = true;
        }
    }

    internal static bool checkInstalled(string c_name)
    {
        bool result = false;
        try
        {
            string name = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall";
            RegistryKey key = Registry.LocalMachine.OpenSubKey(name);
            if (key != null)
            {
                foreach (RegistryKey item in from keyName in key.GetSubKeyNames()
                                             select key.OpenSubKey(keyName))
                {
                    if (item.GetValue("DisplayName") is string text && text.Contains(c_name))
                    {
                        result = true;
                        return result;
                    }
                }
                key.Close();
            }
            name = "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall";
            key = Registry.LocalMachine.OpenSubKey(name);
            if (key != null)
            {
                IEnumerable<string> subKeyNames = key.GetSubKeyNames();
                Func<string, RegistryKey> func = null;
                Func<string, RegistryKey> selector;
                if ((selector = func) == null)
                {
                    selector = (func = (string keyName) => key.OpenSubKey(keyName));
                }
                foreach (RegistryKey item2 in subKeyNames.Select(selector))
                {
                    if (item2.GetValue("DisplayName") is string text2 && text2.Contains(c_name))
                    {
                        result = true;
                        return result;
                    }
                }
                key.Close();
            }
        }
        catch
        {
        }
        return result;
    }

    private void method_1()
    {
        try
        {
            if (x509Certificate2Collection_0 != null)
            {
                return;
            }
            string password = "mobile";
            string name = "IRCommDLL.include.irctc.p12";
            x509Certificate2_0 = new X509Certificate2();
            x509Certificate2Collection_0 = new X509Certificate2Collection();
            string s = "MIID1zCCAr+gAwIBAgIEME5DLDANBgkqhkiG9w0BAQsFADCBmzELMAkGA1UEBhMCSU4xDjAMBgNVBAgTBURlbGhpMRIwEAYDVQQHEwlOZXcgRGVsaGkxQDA+BgNVBAoTN0luZGlhbiBSYWlsd2F5IENhdGVyaW5nIGFuZCBUb3VyaXNtIENvcnBvcmF0aW9uIExpbWl0ZWQxDjAMBgNVBAsTBUlSQ1RDMRYwFAYDVQQDEw1JUkNUQyBDb25uZWN0MB4XDTE2MTIxOTA4MDE0OVoXDTQ2MTIxMjA4MDE0OVowgZsxCzAJBgNVBAYTAklOMQ4wDAYDVQQIEwVEZWxoaTESMBAGA1UEBxMJTmV3IERlbGhpMUAwPgYDVQQKEzdJbmRpYW4gUmFpbHdheSBDYXRlcmluZyBhbmQgVG91cmlzbSBDb3Jwb3JhdGlvbiBMaW1pdGVkMQ4wDAYDVQQLEwVJUkNUQzEWMBQGA1UEAxMNSVJDVEMgQ29ubmVjdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJ2QagzGhkvSxapek3fMulpvBu4AnncOJKRrRH1OiC46E96ODISWtcMEP7kiaoEc/BqUduItFhLlFS/3S8Jg5FlHnHU4/KH3a+OxNMdH5+XBPnB5/2jBkNEiIuPsMpiud39Ri2Dde5YcFpTp27TsKbp5AWDiHEG+byAlXocp545w1TEIrxjOl3XPgefIYp+hKXRbZWW6MTfYIjLRuB+J70w7jHKYpf0BPHkQ/LPqoDQlMohkydffQAEkOWYxq5Dx8t4kpuPdN/eIIFABwBtTuhPbVQ49hb0iRAUlVsQlmw9x9SIel0BypLqYuDz5GizamAZA5LtjfxDvRlXk+fiLv90CAwEAAaMhMB8wHQYDVR0OBBYEFL3Vs7Xfe4Ebl/AdoHTVcOchdUfZMA0GCSqGSIb3DQEBCwUAA4IBAQB18atVKhr7Y0SwkE39ejcAbRytlku+HHreQKWZ6iPimybhXBpprUfKbdNSqD0ILAb7ovhPnzYjAaMv8g6+pWMfqUABPsRRyDsVP4F6/whKWG8ZhH3Hq9YIf9yO2NRAfV6JBH8f9Mo2kJ4XuvOIUsdDXRh3K8F90aXT5OislXW9nA0s3we4sk6mwdPVw2VE4jYc6DYPznSDYLR2JSRLoNL4Cu1LwlfyBEKwNCaYnVFSbPnnt+Z70TjrKOJf65xQf8rluywrJIW4u17wsk59TuRQGlVaid+320H5Pt9KNots5X9mgLhqKsYm+qFDLCwxGAa7EQLk1wHpWQ/tnekhJS0/";
            Encoding.ASCII.GetBytes(s);
            Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name);
            if (manifestResourceStream != null)
            {
                byte[] array = new byte[manifestResourceStream.Length];
                for (int i = 0; i < manifestResourceStream.Length; i++)
                {
                    array[i] = (byte)manifestResourceStream.ReadByte();
                }
                x509Certificate2_0.Import(array, password, X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.PersistKeySet);
                x509Certificate2Collection_0.Import(array, password, X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.PersistKeySet);
            }
        }
        catch
        {
        }
    }

    internal bool SleepCountDown(int int_28, string string_86)
    {
        Application.DoEvents();
        int num = int_28 / 1000;
        DateTime dateTime = DateTime.Now.AddSeconds(num);
        while (DateTime.Now < dateTime)
        {
            Thread.Sleep(50);
            Application.DoEvents();
            TimeSpan timeSpan = dateTime - DateTime.Now;
            if (updateTStatus_1 != null)
            {
                updateTStatus_1.BeginInvoke(1, string_86 + "_" + timeSpan.Seconds + ":" + timeSpan.Milliseconds, tCntrlName_, null, null);
            }
        }
        return true;
    }

    private static bool CheckCertificate(object object_18, X509Certificate x509Certificate_0, X509Chain x509Chain_0, SslPolicyErrors sslPolicyErrors_0)
    {
        //if (Environment.GetEnvironmentVariable("clientID") == "AFZAL0007" || (Environment.GetEnvironmentVariable("clientID") == "PRAGYAA") || (Environment.GetEnvironmentVariable("clientID") == "dreamm"))
        //{
        //    return true;
        //}
        //try
        //{
        //    HttpWebRequest httpWebRequest = object_18 as HttpWebRequest;
        //    bool flag = httpWebRequest != null && httpWebRequest.Address.ToString().ToLower().Contains("https://www.google.co.in") && !x509Certificate_0.Issuer.StartsWith("CN=Google");
        //    bool flag2 = httpWebRequest != null && httpWebRequest.Address.ToString().ToLower().Contains("irctc.co.in") && !x509Certificate_0.Issuer.StartsWith("CN=DigiCert");
        //    //if (flag || flag2)
        //    //{
        //    //    return false;
        //    //}
        //    if (!x509Certificate_0.Issuer.ToLower().Contains("httpanalyze") && !x509Certificate_0.Issuer.ToLower().Contains("fiddler") && !x509Certificate_0.Issuer.ToLower().Contains("commview") && !x509Certificate_0.Issuer.ToLower().Contains("debugger") && !x509Certificate_0.Issuer.ToLower().Contains("debug") && !x509Certificate_0.Issuer.ToLower().Contains("sniffer") && !x509Certificate_0.Issuer.ToUpper().Contains("IEINSPECTOR"))
        //    {
        //        return true;
        //    }
        //    return false;
        //}
        //catch (Exception)
        //{
            return true;
        //}
    }

    private static void ExecuteAntiVirtualizationTricks()
    {
        while (true)
        {
            
            if (GetForegroundWindowAntiDebug())
            {
                Environment.Exit(1);
            }
            if (GetForegroundWindowAntiDebug())
            {
                Environment.Exit(1);
            }
            if (DebuggerIsAttached())
            {
                Environment.Exit(1);
            }
            if (IsDebuggerPresentCheck())
            {
                Environment.Exit(1);
            }
            if (CheckForBlacklistedNames())
            {
                Environment.Exit(1);
            }
        }
    }

    public static bool GetForegroundWindowAntiDebug()
    {
        string[] array = new string[13]
        {
                "x32dbg", "x64dbg", "windbg", "ollydbg", "dnspy", "immunity debugger", "hyperdbg", "debug", "debugger", "cheat engine", "cheatengine", "ida", "http analyzer"
        };
        IntPtr foregroundWindow = GetForegroundWindow();
        int windowTextLengthA = GetWindowTextLengthA(foregroundWindow);
        if (windowTextLengthA != 0)
        {
            StringBuilder stringBuilder = new StringBuilder(windowTextLengthA + 1);
            GetWindowTextA(foregroundWindow, stringBuilder, windowTextLengthA + 1);
            string[] array2 = array;
            foreach (string value in array2)
            {
                if (stringBuilder.ToString().ToLower().Contains(value))
                {
                    return true;
                }
            }
        }
        return false;
    }

    public static bool DebuggerIsAttached()
    {
        return Debugger.IsAttached;
    }

    public static bool IsDebuggerPresentCheck()
    {
        if (IsDebuggerPresent())
        {
            return true;
        }
        return false;
    }

    public static bool CheckForBlacklistedNames()
    {
        string[] array = new string[11]
        {
                "Johnson", "Miller", "malware", "maltest", "CurrentUser", "Sandbox", "virus", "John Doe", "test user", "sand box", "WDAGUtilityAccount"
        };
        string text = Environment.UserName.ToLower();
        string[] array2 = array;
        foreach (string text2 in array2)
        {
            if (text == text2.ToLower())
            {
                return true;
            }
        }
        return false;
    }

    public static void AntiDebugger()
    {
        while (true)
        {
            Process process = Process.GetCurrentProcess();
            CheckRemoteDebuggerPresent(Process.GetCurrentProcess().Handle, ref isDebuggerPresent);
            //if (isDebuggerPresent)
            //{
            //    Process.GetCurrentProcess().Kill();
            //}
            //if (Debugger.IsAttached || Debugger.IsLogging())
            //{
            //    Environment.Exit(0);
            //}
            Thread.Sleep(500);
        }
    }

    public static void CheckDGProcesses()
    {
        while (true)
        {
            
            Process[] processes = Process.GetProcesses();
            foreach (Process process in processes)
            {
                if (process.ProcessName.Contains("HTTPAnalyzerStdV7"))
                {

                }
                if (string.IsNullOrEmpty(process.MainWindowTitle))
                {
                    continue;
                }
                if (DG.debuggertitles.Contains(process.MainWindowTitle.ToLower()))
                {
                    Console.WriteLine("Exited due to {0}", process.MainWindowTitle.ToLower());
                    Environment.Exit(1);
                }
                if (DG.debuggertitles2.Contains(process.MainWindowTitle.ToLower()))
                {
                    Console.WriteLine("Exited due to {0}", process.MainWindowTitle.ToLower());
                    Environment.Exit(1);
                }
                if (DG.debuggertitles.Contains(process.MainWindowTitle))
                {
                    Console.WriteLine("Exited due to {0}", process.MainWindowTitle);
                    Environment.Exit(1);
                }
                if (DG.debuggertitles2.Contains(process.MainWindowTitle))
                {
                    Console.WriteLine("Exited due to {0}", process.MainWindowTitle);
                    Environment.Exit(1);
                }
            }
            Thread.Sleep(1000);
        }
    }

    internal void SetData(string string_86, string string_87)
    {
        try
        {
            switch (string_86)
            {
                case "edata":
                    edata = string_87;
                    return;
                case "sdata":
                    {
                        list_SensorData = new List<string>();
                        list_SensorData_ADV = new List<string>();
                        long num = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
                        if ((num >= 93155 && num <= 95959) || (num >= 103159 && num <= 105959))
                        {
                            if (string_87.Contains("|--|"))
                            {
                                string[] array3 = string_87.Split(new string[1] { "|--|" }, StringSplitOptions.None);
                                string[] array4 = array3;
                                string[] array5 = array4;
                                foreach (string text3 in array5)
                                {
                                    if (text3.Length > 100)
                                    {
                                        list_SensorData_ADV.Add(text3);
                                    }
                                }
                            }
                            else
                            {
                                Sensor_Data_offline();
                            }
                        }
                        else
                        {
                            ThreadPool.QueueUserWorkItem(Akamai_Sensor_Data_Test);
                        }
                        return;
                    }
                case "PrivateIP":
                    {
                        string[] array2 = string_87.Split(new string[1] { "||" }, StringSplitOptions.RemoveEmptyEntries);
                        webProxy_0 = new WebProxy(array2[0], int.Parse(array2[1]));
                        webProxy_0.Credentials = new NetworkCredential(array2[2], array2[3]);
                        return;
                    }
                case "CaptchaService":
                    if (string_87.Length > 4)
                    {
                        bool_46 = true;
                        string_46 = string_87;
                        string[] array = string_46.Split(new string[1] { "||" }, StringSplitOptions.RemoveEmptyEntries);
                        frmCaptcha.string_13 = array[0];
                        string text = array[0];
                        string text2 = text;
                        if (!(text2 == "1") && !(text2 == "4") && !(text == "5"))
                        {
                            if (!(text == "2"))
                            {
                                if (text == "3")
                                {
                                    frmCaptcha.string_14 = array[3];
                                }
                            }
                            else
                            {
                                frmCaptcha.string_9 = array[1];
                            }
                        }
                        else
                        {
                            frmCaptcha.string_11 = array[1];
                            frmCaptcha.string_12 = array[2];
                        }
                    }
                    else
                    {
                        bool_46 = false;
                        string_46 = "";
                    }
                    return;
                case "WebLoggerService":
                    string_24 = string_87;
                    return;
                case "BHIMService":
                    string_22 = string_87;
                    return;
                case "AutoSubmitCp":
                    bool_17 = Convert.ToBoolean(string_87);
                    return;
                case "set_Time":
                    ThreadPool.QueueUserWorkItem(method_0, "");
                    return;
                case "PDFService":
                    string_23 = string_87;
                    return;
                case "AutofillCp":
                    bool_16 = Convert.ToBoolean(string_87);
                    return;
                case "CaptchaOcr":
                    string_25 = string_87;
                    return;
                case "Advanve":
                    isPremium = Convert.ToBoolean(string_87);
                    return;
            }
            object obj = object_16;
            lock (obj)
            {
                if (dictionary_5.ContainsKey(string_86))
                {
                    dictionary_5[string_86] = string_87;
                }
                else
                {
                    dictionary_5.Add(string_86, string_87);
                }
            }
        }
        catch
        {
        }
    }

    private string method_5(string string_86, ref string string_87)
    {
        string text = "<html>\n<head>\n<script type=\"text/javascript\">\n\t/*-----------------------------------------------------------------------------\n\tThis source is part of the FLEXCUBE@ Java App Server Software System and is\n\tcopyrighted by i-flex Solutions Limited.\n\tAll rights reserved. No part of this work may be reproduced, stored in a\n\tretrieval system, adopted or transmitted in any form or by any means,\n\telectronic, mechanical, photographic, graphic, optic recording or otherwise,\n\ttranslated in any language or computer language, without the prior written\n\tpermission of i-flex Solutions Limited.\n\ti-flex Solutions Limited.\n\t10-11, SDF I, SEEPZ, Andheri (East),\n\tMumbai - 400 096.\n\tIndia\n\tCopyright 2004 i-flex Solutions Limited.\n\tModification History\n\tDate Version Author Description\n\t__________ ___________ _______________ ________________________________________\n\t22/11/2012 1.0 Sandeep Saxena Des algo\n\t------------------------------------------------------------------------------*/\n\t//des\n\t//this takes the key, the message, and whether to encrypt or decrypt\n\tfunction des (key, message, encrypt, mode, iv, padding) {\n\t//declaring this locally speeds things up a bit\n\tvar spfunction1 = new Array (0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004);\n\tvar spfunction2 = new Array (-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000);\n\tvar spfunction3 = new Array (0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200);\n\tvar spfunction4 = new Array (0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080);\n\tvar spfunction5 = new Array (0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100);\n\tvar spfunction6 = new Array (0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010);\n\tvar spfunction7 = new Array (0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002);\n\tvar spfunction8 = new Array (0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000);\n\t//create the 16 or 48 subkeys we will need\n\tvar keys = des_createKeys (key);\n\tvar m=0, i, j, temp, temp2, right1, right2, left, right, looping;\n\tvar cbcleft, cbcleft2, cbcright, cbcright2\n\tvar endloop, loopinc;\n\tvar len = message.length;\n\tvar chunk = 0;\n\t//set up the loops for single and triple des\n\tvar iterations = keys.length == 32 ? 3 : 9; //single or triple des\n\tif (iterations == 3) {looping = encrypt ? new Array (0, 32, 2) : new Array (30, -2, -2);}\n\telse {looping = encrypt ? new Array (0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array (94, 62, -2, 32, 64, 2, 30, -2, -2);}\n\t//pad the message depending on the padding parameter\n\tif (padding == 2) message += \" \"; //pad the message with spaces\n\telse if (padding == 1) {temp = 8-(len%8); message += String.fromCharCode (temp,temp,temp,temp,temp,temp,temp,temp); if (temp==8) len+=8;} //PKCS7 padding\n\telse if (!padding) message += \"\\0\\0\\0\\0\\0\\0\\0\\0\"; //pad the message out with null bytes\n\t//store the result here\n\tresult = \"\";\n\ttempresult = \"\";\n\tif (mode == 1) { //CBC mode\n\tcbcleft = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n\tcbcright = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n\tm=0;\n\t}\n\t//loop through each 64 bit chunk of the message\n\twhile (m < len) {\n\tleft = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);\n\tright = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);\n\t//for Cipher Block Chaining mode, xor the message with the previous result\n\tif (mode == 1) {if (encrypt) {left ^= cbcleft; right ^= cbcright;} else {cbcleft2 = cbcleft; cbcright2 = cbcright; cbcleft = left; cbcright = right;}}\n\t//first each 64 but chunk of the message must be permuted according to IP\n\ttemp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n\ttemp = ((left >>> 16) ^ right) & 0x0000ffff; right ^= temp; left ^= (temp << 16);\n\ttemp = ((right >>> 2) ^ left) & 0x33333333; left ^= temp; right ^= (temp << 2);\n\ttemp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\tleft = ((left << 1) | (left >>> 31));\n\tright = ((right << 1) | (right >>> 31));\n\t//do this either 1 or 3 times for each chunk of the message\n\tfor (j=0; j<iterations; j+=3) {\n\tendloop = looping[j+1];\n\tloopinc = looping[j+2];\n\t//now go through and perform the encryption or decryption\n\tfor (i=looping[j]; i!=endloop; i+=loopinc) { //for efficiency\n\tright1 = right ^ keys[i];\n\tright2 = ((right >>> 4) | (right << 28)) ^ keys[i+1];\n\t//the result is attained by passing these bytes through the S selection functions\n\ttemp = left;\n\tleft = right;\n\tright = temp ^ (spfunction2[(right1 >>> 24) & 0x3f] | spfunction4[(right1 >>> 16) & 0x3f]\n\t| spfunction6[(right1 >>> 8) & 0x3f] | spfunction8[right1 & 0x3f]\n\t| spfunction1[(right2 >>> 24) & 0x3f] | spfunction3[(right2 >>> 16) & 0x3f]\n\t| spfunction5[(right2 >>> 8) & 0x3f] | spfunction7[right2 & 0x3f]);\n\t}\n\ttemp = left; left = right; right = temp; //unreverse left and right\n\t} //for either 1 or 3 iterations\n\t//move then each one bit to the right\n\tleft = ((left >>> 1) | (left << 31));\n\tright = ((right >>> 1) | (right << 31));\n\t//now perform IP-1, which is IP in the opposite direction\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\ttemp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n\ttemp = ((right >>> 2) ^ left) & 0x33333333; left ^= temp; right ^= (temp << 2);\n\ttemp = ((left >>> 16) ^ right) & 0x0000ffff; right ^= temp; left ^= (temp << 16);\n\ttemp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n\t//for Cipher Block Chaining mode, xor the message with the previous result\n\tif (mode == 1) {if (encrypt) {cbcleft = left; cbcright = right;} else {left ^= cbcleft2; right ^= cbcright2;}}\n\ttempresult += String.fromCharCode ((left>>>24), ((left>>>16) & 0xff), ((left>>>8) & 0xff), (left & 0xff), (right>>>24), ((right>>>16) & 0xff), ((right>>>8) & 0xff), (right & 0xff));\n\tchunk += 8;\n\tif (chunk == 512) {result += tempresult; tempresult = \"\"; chunk = 0;}\n\t} //for every 8 characters, or 64 bits in the message\n\t//return the result as an array\n\treturn result + tempresult;\n\t} //end of des\n\t//des_createKeys\n\t//this takes as input a 64 bit key (even though only 56 bits are used)\n\t//as an array of 2 integers, and returns 16 48 bit keys\n\tfunction des_createKeys (key) {\n\t//declaring this locally speeds things up a bit\n\tpc2bytes0 = new Array (0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204);\n\tpc2bytes1 = new Array (0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101);\n\tpc2bytes2 = new Array (0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808);\n\tpc2bytes3 = new Array (0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000);\n\tpc2bytes4 = new Array (0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010);\n\tpc2bytes5 = new Array (0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420);\n\tpc2bytes6 = new Array (0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002);\n\tpc2bytes7 = new Array (0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800);\n\tpc2bytes8 = new Array (0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002);\n\tpc2bytes9 = new Array (0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408);\n\tpc2bytes10 = new Array (0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020);\n\tpc2bytes11 = new Array (0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200);\n\tpc2bytes12 = new Array (0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010);\n\tpc2bytes13 = new Array (0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105);\n\t//how many iterations (1 for des, 3 for triple des)\n\tvar iterations = key.length > 8 ? 3 : 1; //changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n\t//stores the return keys\n\tvar keys = new Array (32 * iterations);\n\t//now define the left shifts which need to be done\n\tvar shifts = new Array (0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0);\n\t//other variables\n\tvar lefttemp, righttemp, m=0, n=0, temp;\n\tfor (var j=0; j<iterations; j++) { //either 1 or 3 iterations\n\tleft = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n\tright = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n\ttemp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n\ttemp = ((right >>> -16) ^ left) & 0x0000ffff; left ^= temp; right ^= (temp << -16);\n\ttemp = ((left >>> 2) ^ right) & 0x33333333; right ^= temp; left ^= (temp << 2);\n\ttemp = ((right >>> -16) ^ left) & 0x0000ffff; left ^= temp; right ^= (temp << -16);\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\ttemp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\t//the right side needs to be shifted and to get the last four bits of the left side\n\ttemp = (left << 8) | ((right >>> 20) & 0x000000f0);\n\t//left needs to be put upside down\n\tleft = (right << 24) | ((right << 8) & 0xff0000) | ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0);\n\tright = temp;\n\t//now go through and perform these shifts on the left and right keys\n\tfor (var i=0; i < shifts.length; i++) {\n\t//shift the keys either one or two bits to the left\n\tif (shifts[i]) {left = (left << 2) | (left >>> 26); right = (right << 2) | (right >>> 26);}\n\telse {left = (left << 1) | (left >>> 27); right = (right << 1) | (right >>> 27);}\n\tleft &= -0xf; right &= -0xf;\n\t//now apply PC-2, in such a way that E is easier when encrypting or decrypting\n\t//this conversion will look like PC-2 except only the last 6 bits of each byte are used\n\t//rather than 48 consecutive bits and the order of lines will be according to\n\t//how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7\n\tlefttemp = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf]\n\t| pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf]\n\t| pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf]\n\t| pc2bytes6[(left >>> 4) & 0xf];\n\trighttemp = pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf]\n\t| pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf]\n\t| pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf]\n\t| pc2bytes13[(right >>> 4) & 0xf];\n\ttemp = ((righttemp >>> 16) ^ lefttemp) & 0x0000ffff;\n\tkeys[n++] = lefttemp ^ temp; keys[n++] = righttemp ^ (temp << 16);\n\t}\n\t} //for each iterations\n\t//return the keys we've created\n\treturn keys;\n\t} //end of des_createKeys\n\t////////////////////////////// TEST //////////////////////////////\n\tfunction stringToHex (s) {\n\tvar r = \"0x\";\n\tvar hexes = new Array (\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\");\n\tfor (var i=0; i<s.length; i++) {r += hexes [s.charCodeAt(i) >> 4] + hexes [s.charCodeAt(i) & 0xf];}\n\treturn r;\n\t}\n\tfunction hexToString (h) {\n\tvar r = \"\";\n\tfor (var i= (h.substr(0, 2)==\"0x\")?2:0; i<h.length; i+=2) {r += String.fromCharCode (parseInt (h.substr (i, 2), 16));}\n\treturn r;\n\t}\n\t//-----------------------------------------------------------------------------------------------------\n\t</script>\n\n</head>\n\n<body>\n\n\n\n</body>\n\n</html> \n\n";
        WebBrowser webBrowser = new WebBrowser();
        webBrowser.Navigate("about:blank");
        webBrowser.Document.Write(text);
        string text2 = webBrowser.Document.InvokeScript("des", new object[4]
        {
            string_86.Substring(0, 8),
            string_86,
            1,
            0
        }).ToString();
        string text3 = webBrowser.Document.InvokeScript("stringToHex", new object[1] { text2 }).ToString();
        int length = text3.Length;
        text3 = text3.ToUpper().Substring(2);
        while (text3.Length < 32)
        {
            text3 += "0";
        }
        webBrowser.Dispose();
        string text4 = "<html>\n<head>\n<script type=\"text/javascript\">\n/*\n\t* jssha256 version 0.1 - Copyright 2006 B. Poettering\n\t*\n\t* This program is free software; you can redistribute it and/or\n\t* modify it under the terms of the GNU General Public License as\n\t* published by the Free Software Foundation; either version 2 of the\n\t* License, or (at your option) any later version.\n\t*\n\t* This program is distributed in the hope that it will be useful,\n\t* but WITHOUT ANY WARRANTY; without even the implied warranty of\n\t* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t* General Public License for more details.\n\t*\n\t* You should have received a copy of the GNU General Public License\n\t* along with this program; if not, write to the Free Software\n\t* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n\t* 02111-1307 USA\n\t*/\n\t/*\n\t* http://point-at-infinity.org/jssha256/\n\t*\n\t\n\t* This is a JavaScript implementation of the SHA256 secure hash function\n\t* and the HMAC-SHA256 message authentication code (MAC).\n\t*\n\t* The routines' well-functioning has been verified with the test vectors\n\t* given in FIPS-180-2, Appendix B and IETF RFC 4231. The HMAC algorithm\n\t* conforms to IETF RFC 2104.\n\t*\n\t* The following code example computes the hash value of the string \"abc\".\n\t*\n\t* SHA256_init();\n\t* SHA256_write(\"abc\");\n\t* digest = SHA256_finalize();\n\t* digest_hex = array_to_hex_string(digest);\n\t*\n\t* Get the same result by calling the shortcut function SHA256_hash:\n\t*\n\t* digest_hex = SHA256_hash(\"abc\");\n\t*\n\t* In the following example the calculation of the HMAC of the string \"abc\"\n\t* using the key \"secret key\" is shown:\n\t*\n\t* HMAC_SHA256_init(\"secret key\");\n\t* HMAC_SHA256_write(\"abc\");\n\t* mac = HMAC_SHA256_finalize();\n\t* mac_hex = array_to_hex_string(mac);\n\t*\n\t* Again, the same can be done more conveniently:\n\t*\n\t* mac_hex = HMAC_SHA256_MAC(\"secret key\", \"abc\");\n\t*\n\t* Note that the internal state of the hash function is held in global\n\t* variables. Therefore one hash value calculation has to be completed\n\t* before the next is begun. The same applies the the HMAC routines.\n\t*\n\t* Report bugs to: jssha256 AT point-at-infinity.org\n\t*\n\t*/\n\t/******************************************************************************/\n\t/* Two all purpose helper functions follow */\n\t/* string_to_array: convert a string to a character (byte) array */\n\tfunction string_to_array(str) {\n\tvar len = str.length;\n\tvar res = new Array(len);\n\tfor(var i = 0; i < len; i++)\n\tres[i] = str.charCodeAt(i);\n\treturn res;\n\t}\n\t/* array_to_hex_string: convert a byte array to a hexadecimal string */\n\tfunction array_to_hex_string(ary) {\n\tvar res = \"\";\n\tfor(var i = 0; i < ary.length; i++)\n\tres += SHA256_hexchars[ary[i] >> 4] + SHA256_hexchars[ary[i] & 0x0f];\n\treturn res;\n\t}\n\t/******************************************************************************/\n\t/* The following are the SHA256 routines */\n\t/*\n\tSHA256_init: initialize the internal state of the hash function. Call this\n\tfunction before calling the SHA256_write function.\n\t*/\n\t\n\tfunction SHA256_init() {\n\tSHA256_H = new Array(0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n\t0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19);\n\tSHA256_buf = new Array();\n\tSHA256_len = 0;\n\t}\n\t/*\n\tSHA256_write: add a message fragment to the hash function's internal state.\n\t'msg' may be given as string or as byte array and may have arbitrary length.\n\t*/\n\tfunction SHA256_write(msg) {\n\tif (typeof(msg) == \"string\")\n\tSHA256_buf = SHA256_buf.concat(string_to_array(msg));\n\telse\n\tSHA256_buf = SHA256_buf.concat(msg);\n\tfor(var i = 0; i + 64 <= SHA256_buf.length; i += 64)\n\tSHA256_Hash_Byte_Block(SHA256_H, SHA256_buf.slice(i, i + 64));\n\tSHA256_buf = SHA256_buf.slice(i);\n\tSHA256_len += msg.length;\n\t}\n\t/*\n\tSHA256_finalize: finalize the hash value calculation. Call this function\n\tafter the last call to SHA256_write. An array of 32 bytes (= 256 bits)\n\tis returned.\n\t*/\n\tfunction SHA256_finalize() {\n\tSHA256_buf[SHA256_buf.length] = 0x80;\n\tif (SHA256_buf.length > 64 - 8) {\n\tfor(var i = SHA256_buf.length; i < 64; i++)\n\tSHA256_buf[i] = 0;\n\tSHA256_Hash_Byte_Block(SHA256_H, SHA256_buf);\n\tSHA256_buf.length = 0;\n\t}\n\tfor(var i = SHA256_buf.length; i < 64 - 5; i++)\n\tSHA256_buf[i] = 0;\n\tSHA256_buf[59] = (SHA256_len >>> 29) & 0xff;\n\tSHA256_buf[60] = (SHA256_len >>> 21) & 0xff;\n\tSHA256_buf[61] = (SHA256_len >>> 13) & 0xff;\n\tSHA256_buf[62] = (SHA256_len >>> 5) & 0xff;\n\tSHA256_buf[63] = (SHA256_len << 3) & 0xff;\n\tSHA256_Hash_Byte_Block(SHA256_H, SHA256_buf);\n\tvar res = new Array(32);\n\tfor(var i = 0; i < 8; i++) {\n\tres[4 * i + 0] = SHA256_H[i] >>> 24;\n\tres[4 * i + 1] = (SHA256_H[i] >> 16) & 0xff;\n\tres[4 * i + 2] = (SHA256_H[i] >> 8) & 0xff;\n\tres[4 * i + 3] = SHA256_H[i] & 0xff;\n\t}\n\tdelete SHA256_H;\n\tdelete SHA256_buf;\n\tdelete SHA256_len;\n\treturn res;\n\t}\n\t/*\n\tSHA256_hash: calculate the hash value of the string or byte array 'msg'\n\tand return it as hexadecimal string. This shortcut function may be more\n\tconvenient than calling SHA256_init, SHA256_write, SHA256_finalize\n\tand array_to_hex_string explicitly.\n\t*/\n\tfunction SHA256_hash(msg) {\n\tvar res;\n\tSHA256_init();\n\tSHA256_write(msg);\n\tres = SHA256_finalize();\n\treturn array_to_hex_string(res);\n\t}\n\t/******************************************************************************/\n\t/* The following are the HMAC-SHA256 routines */\n\t/*\n\tHMAC_SHA256_init: initialize the MAC's internal state. The MAC key 'key'\n\tmay be given as string or as byte array and may have arbitrary length.\n\t*/\n\tfunction HMAC_SHA256_init(key) {\n\tif (typeof(key) == \"string\")\n\tHMAC_SHA256_key = string_to_array(key);\n\telse\n\tHMAC_SHA256_key = new Array().concat(key);\n\tif (HMAC_SHA256_key.length > 64) {\n\tSHA256_init();\n\tSHA256_write(HMAC_SHA256_key);\n\tHMAC_SHA256_key = SHA256_finalize();\n\t}\n\tfor(var i = HMAC_SHA256_key.length; i < 64; i++)\n\tHMAC_SHA256_key[i] = 0;\n\tfor(var i = 0; i < 64; i++)\n\tHMAC_SHA256_key[i] ^= 0x36;\n\tSHA256_init();\n\tSHA256_write(HMAC_SHA256_key);\n\t}\n\t/*\n\tHMAC_SHA256_write: process a message fragment. 'msg' may be given as\n\tstring or as byte array and may have arbitrary length.\n\t*/\n\tfunction HMAC_SHA256_write(msg) {\n\tSHA256_write(msg);\n\t}\n\t/*\n\tHMAC_SHA256_finalize: finalize the HMAC calculation. An array of 32 bytes\n\t(= 256 bits) is returned.\n\t*/\n\tfunction HMAC_SHA256_finalize() {\n\tvar md = SHA256_finalize();\n\tfor(var i = 0; i < 64; i++)\n\tHMAC_SHA256_key[i] ^= 0x36 ^ 0x5c;\n\tSHA256_init();\n\tSHA256_write(HMAC_SHA256_key);\n\tSHA256_write(md);\n\tfor(var i = 0; i < 64; i++)\n\tHMAC_SHA256_key[i] = 0;\n\tdelete HMAC_SHA256_key;\n\treturn SHA256_finalize();\n\t}\n\t/*\n\tHMAC_SHA256_MAC: calculate the HMAC value of message 'msg' under key 'key'\n\t(both may be of type string or byte array); return the MAC as hexadecimal\n\tstring. This shortcut function may be more convenient than calling\n\tHMAC_SHA256_init, HMAC_SHA256_write, HMAC_SHA256_finalize and\n\tarray_to_hex_string explicitly.\n\t*/\n\tfunction HMAC_SHA256_MAC(key, msg) {\n\tvar res;\n\tHMAC_SHA256_init(key);\n\tHMAC_SHA256_write(msg);\n\tres = HMAC_SHA256_finalize()\n\treturn array_to_hex_string(res);\n\t}\n\t/******************************************************************************/\n\t/* The following lookup tables and functions are for internal use only! */\n\tSHA256_hexchars = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n\t'a', 'b', 'c', 'd', 'e', 'f');\n\tSHA256_K = new Array(\n\t0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,\n\t0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n\t0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,\n\t0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n\t0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n\t0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n\t0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,\n\t0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n\t0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,\n\t0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n\t0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n\t);\n\tfunction SHA256_sigma0(x) {\n\treturn ((x >>> 7) | (x << 25)) ^ ((x >>> 18) | (x << 14)) ^ (x >>> 3);\n\t}\n\tfunction SHA256_sigma1(x) {\n\treturn ((x >>> 17) | (x << 15)) ^ ((x >>> 19) | (x << 13)) ^ (x >>> 10);\n\t}\n\tfunction SHA256_Sigma0(x) {\n\t\n\treturn ((x >>> 2) | (x << 30)) ^ ((x >>> 13) | (x << 19)) ^\n\t((x >>> 22) | (x << 10));\n\t}\n\tfunction SHA256_Sigma1(x) {\n\treturn ((x >>> 6) | (x << 26)) ^ ((x >>> 11) | (x << 21)) ^\n\t((x >>> 25) | (x << 7));\n\t}\n\tfunction SHA256_Ch(x, y, z) {\n\treturn z ^ (x & (y ^ z));\n\t}\n\tfunction SHA256_Maj(x, y, z) {\n\treturn (x & y) ^ (z & (x ^ y));\n\t}\n\tfunction SHA256_Hash_Word_Block(H, W) {\n\tfor(var i = 16; i < 64; i++)\n\tW[i] = (SHA256_sigma1(W[i - 2]) + W[i - 7] +\n\tSHA256_sigma0(W[i - 15]) + W[i - 16]) & 0xffffffff;\n\tvar state = new Array().concat(H);\n\tfor(var i = 0; i < 64; i++) {\n\tvar T1 = state[7] + SHA256_Sigma1(state[4]) +\n\tSHA256_Ch(state[4], state[5], state[6]) + SHA256_K[i] + W[i];\n\tvar T2 = SHA256_Sigma0(state[0]) + SHA256_Maj(state[0], state[1], state[2]);\n\tstate.pop();\n\tstate.unshift((T1 + T2) & 0xffffffff);\n\tstate[4] = (state[4] + T1) & 0xffffffff;\n\t}\n\tfor(var i = 0; i < 8; i++)\n\tH[i] = (H[i] + state[i]) & 0xffffffff;\n\t}\n\t\n\tfunction SHA256_Hash_Byte_Block(H, w) {\n\tvar W = new Array(16);\n\tfor(var i = 0; i < 16; i++)\n\tW[i] = w[4 * i + 0] << 24 | w[4 * i + 1] << 16 |\n\tw[4 * i + 2] << 8 | w[4 * i + 3];\n\tSHA256_Hash_Word_Block(H, W);\n\t}\n\t/*\n\tPreparing a genric function to be used for generating HMAC_SHA256_MAC.\n\t*/\n\tfunction hex_hmac(key, data)\n\t{\n\treturn HMAC_SHA256_MAC(key, data);\n\t}\n\t\n</script>\n\n<script>\n\nfunction random()\n\t{\n\tvar Pass= Math.floor(10000000 + (Math.random() * (100000000 - 10000000 + 1))); \n\treturn Pass;\n\n}\n\t</script>\n\n</head>\n\n<body>\n\n\n\n</body>\n\n</html> \n\n";
        WebBrowser webBrowser2 = new WebBrowser();
        webBrowser2.Navigate("about:blank");
        webBrowser2.Document.Write(text4);
        string text5 = Conversions.ToString(webBrowser2.Document.InvokeScript("random")) + string_87;
        string result = webBrowser2.Document.InvokeScript("hex_hmac", new object[2] { text5, text3 }).ToString();
        webBrowser2.Dispose();
        string_87 = text5;
        return result;
    }

    private bool HdfcByPass_(string string_86, ref string string_87)
    {
        if (class3_0 == null)
        {
            class3_0 = new clsPostData();
        }
        if (class19_0 == null)
        {
            class19_0 = new Class19();
        }
        bool result = false;
        string_87 = "";
        int num = 90000;
        Status = "Enter ProcessHDFCOTP.";
        string string_88 = "https://netbanking.hdfcbank.com/netbanking/?_ga=1.67743385.968282051.1482163954";
        string[] array = string_86.Split(new string[1] { "||" }, StringSplitOptions.None);
        string text = array[0].Trim();
        string string_89 = array[1];
        string text2 = array[2];
        string text3 = array[3];
        text3 = text3.Substring(2, 2);
        string text4 = array[4];
        string string_90 = "";
        string string_91 = "";
        DateTime now = DateTime.Now;
        try
        {
            string text5 = HttpUtility.UrlEncode("version=2&pm_fpua=Godzila/5.0 (windows nt 6.1) applewebkit/537.36 (khtml, like gecko) chrome/44.0.2403.157 safari/537.36|5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36|Win32&pm_fpsc=24|1600|900|856&pm_fpsw=&pm_fptz=5.5&pm_fpln=lang=en-US|syslang=|userlang=&pm_fpjv=1&pm_fpco=1&pm_fpasw=widevinecdmadapter|mhjfbmdgcfjbbpaeojofohoefgiehjai|pepflashplayer|internal-remoting-viewer|internal-nacl-plugin|internal-pdf-viewer&pm_fpan=Netscape&pm_fpacn=Mozilla&pm_fpol=true&pm_fposp=&pm_fpup=&pm_fpsaw=1600&pm_fpspd=24&pm_fpsbd=&pm_fpsdx=&pm_fpsdy=&pm_fpslx=&pm_fpsly=&pm_fpsfse=&pm_fpsui=");
            string text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
            string text7 = "fldpwdtmp=&fldAppId=RS&fldDevicePrint=" + text5 + "&fldTxnId=RGN&fldScrnSeqNbr=01&fldLangId=eng&fldDeviceId=01&fldWebServerId=YG&fldAppServerId=ZZ&fldRandomNumber=&fldRefPage=rsloginhtml&fldRefVal=" + text + "--NETBANKING--&fldLoginUserId=" + text;
            CookieContainer cookieContainer = null;
            Status = "First Hit : Inp = " + text7;
            if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
            {
                Status = "First Hit Failed. err = " + string_90;
                string_87 = "HDFC Not Working";
                return false;
            }
            Status = "First Output htm = " + string_91;
            if (!string.IsNullOrEmpty(string_91.Trim()) && (string_91.Contains("NetBanking Login") || string_91.Contains("Welcome")))
            {
                string string_92 = "";
                string text8 = method_5(string_89, ref string_92);
                text7 = "fldTemp=*&fldAppId=RS&fldTxnId=LGN&fldScrnSeqNbr=01&fldLangId=eng&fldDeviceId=01&fldWebServerId=YG&fldAppServerId=ZZ&fldLoginUserId=" + text + "&fldSessionId=&fldDevicePrint=" + text5 + "&fldTptCustomer=" + method_139("fldRsaImageId", string_91) + "&fldRsaEnrollRequired=" + method_139("fldRsaEnrollRequired", string_91) + "&fldRsaUserStatus=" + method_139("fldRsaUserStatus", string_91) + "&fldRsaImageId=" + method_139("fldRsaImageId", string_91) + "&fldRsaImageHeight=" + method_139("fldRsaImageHeight", string_91) + "&fldRsaImageWidth=" + method_139("fldRsaImageWidth", string_91) + "&fldRsaImagePath=" + method_139("fldRsaImagePath", string_91) + "&fldRsaImageText=" + method_139("fldRsaImageText", string_91) + "&fldRsaUserPhrase=" + method_139("fldRsaUserPhrase", string_91) + "&fldRandomNumber=" + string_92 + "&fldCustId=" + text + "&fldPassword=" + text8 + "&chkrsastu=" + method_139("chkrsastu", string_91);
                string_88 = text6;
                text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
                Status = "Second Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Second Hit Failed. err = " + string_90;
                    string_87 = "Failed while Login";
                    return false;
                }
                Status = "Second Hit Output = " + string_91;
                if (string_91.Contains("A One Time Password (OTP) will be sent to your registered Mobile Number."))
                {
                    text7 = clsPostData.smethod_4(string_91, ref text6);
                    int startIndex = string_91.IndexOf("l_rsaTxnId");
                    startIndex = string_91.IndexOf("\"", startIndex) + 1;
                    int length = string_91.IndexOf("\"", startIndex) - startIndex;
                    string string_93 = string_91.Substring(startIndex, length).Trim();
                    text7 = clsPostData.SetPost(text7, "fldRsaAuthTxnId", string_93);
                    text7 = clsPostData.SetPost(text7, "fldRsaAuthAction", "OTPRELAY");
                    text7 = clsPostData.SetPost(text7, "fldPinSequence", "2");
                    text7 = clsPostData.SetPost(text7, "fldMsgSentMode", "M");
                    text7 = clsPostData.SetPost(text7, "fldTptCustomer", "true");
                    text7 = clsPostData.SetPost(text7, "fldMobile", "on");
                    text7 = clsPostData.SetPost(text7, "chkrsastu", "on");
                    string_88 = text6;
                    text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
                    Status = "Second Hit : Inp = " + text7;
                    if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                    {
                        Status = "Second Hit Failed. err = " + string_90;
                        string_87 = "Failed while Login";
                        return false;
                    }
                    Status = "Second Hit Output = " + string_91;
                    text7 = clsPostData.smethod_4(string_91, ref text6);
                    string string_94 = Interaction.InputBox("Enter Login OTP Received on your Mobile.", "Enter HDFC OTP");
                    text7 = clsPostData.SetPost(text7, "fldOtpToken", string_94);
                    text7 = clsPostData.SetPost(text7, "fldRsaAuthTxnId", string_93);
                    text7 = clsPostData.SetPost(text7, "fldRsaAuthAction", "OTP");
                    text7 = clsPostData.SetPost(text7, "fldPinSequence", "3");
                    string_88 = text6;
                    text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
                    Status = "Second Hit : Inp = " + text7;
                    if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                    {
                        Status = "Second Hit Failed. err = " + string_90;
                        string_87 = "Failed while Login";
                        return false;
                    }
                    Status = "Second Hit Output = " + string_91;
                    if (!string_91.Contains("return sendReq"))
                    {
                        Status = "Second Hit Failed. err = " + string_90;
                        string_87 = "Failed while Processing 2. Invalid OTP";
                        return false;
                    }
                }
                text7 = clsPostData.smethod_4(string_91, ref text6);
                string string_95 = method_139("fldRsaAuthTxnId", string_91);
                text7 = clsPostData.SetPost(text7, "fldRsaAuthTxnId", string_95);
                text7 = clsPostData.SetPost(text7, "fldTxnId", "MNU");
                text7 = clsPostData.SetPost(text7, "fldScrnSeqNbr", "09");
                int startIndex2;
                int length2;
                if (!string_91.Contains("return sendReq"))
                {
                    if (string_91.Contains("errormessage='"))
                    {
                        startIndex2 = string_91.IndexOf("errormessage='");
                        startIndex2 = string_91.IndexOf("'", startIndex2) + 1;
                        length2 = string_91.IndexOf("'", startIndex2) - startIndex2;
                        string_87 = string_91.Substring(startIndex2, length2).Trim();
                        if (string_87.Contains("16001"))
                        {
                            string_87 = "You are not registered for NetBanking.";
                        }
                    }
                    Status = "Second Hit, Not valid HTML err = " + string_87;
                    return false;
                }
                string text9 = method_139("fldSessionId", string_91);
                string_88 = text6;
                text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
                Status = "Third Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Third Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 3.";
                    return false;
                }
                Status = "Third Hit Output = " + string_91;
                if (!string_91.Contains("fldAppId"))
                {
                    Status = "Third Hit, Not valid HTML err = " + string_87;
                    string_87 = "Failed while Processing 3.";
                    return false;
                }
                text6 = "https://netbanking.hdfcbank.com/netbanking/entry?fldAppId=RS&fldTxnId=MNU&fldScrnSeqNbr=01&fldSessionId=" + text9 + "&fldTxnRequest=accounts";
                Status = "Fourth Hit : Inp = " + text6;
                if (!method_100(text6, string_88, webProxy_3, ref cookieContainer, true, true, 60000, ref string_91, ref bool_19, ref Exception_, ref httpStatusCode_0, ref string_90))
                {
                    Status = "Failed While Booking PNR : err = " + string_90 + " :: Htm = " + response;
                    string_87 = "Failed while Processing 4.";
                    return false;
                }
                Status = "Fourth Hit Output = " + string_91;
                string text10 = method_139("fldRequestId", string_91);
                if (text10.Length < 5)
                {
                    Status = "Fourth Hit, Not valid HTML err = " + string_87;
                    string_87 = "Failed while Processing 4.";
                    return false;
                }
                text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
                text7 = "fldAppId=RS&fldTxnId=RSP&fldScrnSeqNbr=01&fldSessionId=" + text9 + "&fldSwitchAppId=&fldLogoffReq=N&fldRequestId=" + text10 + "&fldOrgTxn=&fldTxnType=&fldModule=CH&fldRoleId=&fldBenefType=FCNR";
                Status = "Fifth Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Fifth Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 5.";
                    return false;
                }
                Status = "Fifth Hit Output = " + string_91;
                if (!string_91.Contains("Select Transaction Type"))
                {
                    string_87 = "Failed while Processing 5.";
                    if (string_91.Contains("To modify your Secure Access profile, you will have to register for Secure Access"))
                    {
                        string_87 = "Before ByPassing HDFC OTP Please register for Secure Access, Kindly click on the Funds Transfer Tab to register for Secure Access.\r\n\r\nOTP ByPass se pahele HDFC Bank me login karke Funds Transfer tab se Secure Access ke liye register kijiye.";
                    }
                    Status = "Fifth Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                text7 = "fldTxnReq=RSA&fldAppId=RS&fldTxnId=CPQ&fldScrnSeqNbr=01&fldSessionId=" + text9 + "&fldTxnType=CPQ";
                text7 = "fldTxnReq=RSA&fldAppId=RS&fldTxnId=CPQ&fldScrnSeqNbr=01&fldSessionId=" + text9 + "&fldTxnType=CPQ";
                Status = "Sixth Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Sixth Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 6.";
                    return false;
                }
                Status = "Sixth Hit Output = " + string_91;
                if (!string_91.Contains("Answer five secret questions of your choice"))
                {
                    string_87 = "Failed while Processing 6.";
                    Status = "Sixth Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                startIndex2 = string_91.IndexOf("questionGrp[quesCnt]", 0);
                string text11 = "";
                int num2 = 0;
                List<string> list = new List<string>();
                while (startIndex2 > 0)
                {
                    string text12 = string_91;
                    string value = "\"";
                    int startIndex3 = startIndex2;
                    startIndex2 = text12.IndexOf(value, startIndex3) + 1;
                    length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                    string text13 = string_91.Substring(startIndex2, length2);
                    startIndex2 += length2 + 2;
                    startIndex2 = string_91.IndexOf("\"", startIndex2) + 1;
                    length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                    string text14 = string_91.Substring(startIndex2, length2);
                    startIndex2 += length2 + 2;
                    startIndex2 = string_91.IndexOf("\"", startIndex2) + 1;
                    length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                    string text15 = string_91.Substring(startIndex2, length2);
                    if (num2 % 6 == 0)
                    {
                        list.Add(text13 + "|" + text14 + "|" + text15);
                    }
                    object obj = text11;
                    text11 = string.Concat(obj, "&fldQuestionGrpList", num2, "=", text13, "&fldQuestionList", num2, "=", text14, "&fldQuestionTextList", num2, "=", HttpUtility.UrlEncode(text15));
                    num2++;
                    startIndex2 = string_91.IndexOf("questionGrp[quesCnt]", startIndex2);
                }
                int num3 = num2;
                for (num2 = 0; num2 < list.Count; num2++)
                {
                    string[] array2 = list[num2].Split('|');
                    string text16 = array2[2];
                    startIndex2 = text16.IndexOf("(") + 1;
                    length2 = text16.IndexOf(",", startIndex2);
                    if (length2 < 0)
                    {
                        length2 = text16.IndexOf("/", startIndex2);
                    }
                    startIndex2 = text16.LastIndexOf(" ", length2);
                    length2 -= startIndex2;
                    text16 = text16.Substring(startIndex2, length2).Trim();
                    list[num2] = list[num2] + "|" + text16;
                    object obj2 = text11;
                    text11 = string.Concat(obj2, "&fldUserQuestionGroup", num2, "=", array2[0], "&fldUserQuestionList", num2, "=", array2[1], "&fldUserQuestionTextList", num2, "=", HttpUtility.UrlEncode(array2[2]), "&fldUserAnswerList", num2, "=", HttpUtility.UrlEncode(text16));
                }
                text7 = "fldActionType=Verify&fldTxnReq=RSA&fldIdUser=" + method_139("fldIdUser", string_91) + "&fldIdCust=" + method_139("fldIdCust", string_91) + "&fldRsaUserStatus=&fldQuestionGroupCnt=5&fldQuestionCnt=" + num3 + text11 + "&fldAppId=RS&fldScrnSeqNbr=03&fldTxnId=CPQ&fldSessionId=" + text9 + "&fldRequestId=" + method_139("fldRequestId", string_91);
                Status = "Seventh Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Seventh Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 7.";
                    return false;
                }
                Status = "Seventh Hit Output = " + string_91;
                if (!string_91.Contains("Your chosen answers are as shown below"))
                {
                    string_87 = "Failed while Processing 7.";
                    if (string_91.IndexOf("We regret to inform you that your Secure Access is blocked.", StringComparison.CurrentCultureIgnoreCase) > 0)
                    {
                        startIndex2 = string_91.IndexOf("We regret to inform you that your Secure Access is blocked.", StringComparison.CurrentCultureIgnoreCase);
                        startIndex2 = string_91.LastIndexOf("<", startIndex2) + 1;
                        length2 = string_91.IndexOf(">", startIndex2) - startIndex2;
                        string_87 = "HDFC ERROR MESSAGE: " + string_91.Substring(startIndex2, length2);
                    }
                    Status = "Seventh Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                text11 = "";
                for (num2 = 0; num2 < list.Count; num2++)
                {
                    string[] array3 = list[num2].Split('|');
                    string str = array3[3];
                    object obj3 = text11;
                    text11 = string.Concat(obj3, "&fldUserQuestionList", num2, "=", array3[1], "&fldUserQuestionTextList", num2, "=&fldUserAnswerList", num2, "=", HttpUtility.UrlEncode(str), "&fldUserQuestionGroup", num2, "=");
                }
                text7 = "fldDCValRequired=Y&fldActionType=SET_USER_QUESTION&fldTxnReq=RSA&fldIdUser=" + method_139("fldIdUser", string_91) + "&fldIdCust=" + method_139("fldIdCust", string_91) + "&fldRsaUserStatus=&fldUserRefNo=&fldDateTime=&fldRsaTxnId=&fldClientSessionId=&fldFcatSessionId=&fldDevicePrint=" + text5 + "&fldQuestionList0=&fldQuestionTextList0=&fldQuestionGrpList1=&fldQuestionList1=&fldQuestionTextList1=&fldQuestionGrpList2=&fldQuestionList2=&fldQuestionTextList2=&fldQuestionGrpList3=&fldQuestionList3=&fldQuestionTextList3=&fldQuestionGrpList4=&fldQuestionList4=&fldQuestionTextList4=&fldQuestionGrpList5=&fldQuestionList5=&fldQuestionTextList5=&fldQuestionGrpList6=&fldQuestionList6=&fldQuestionTextList6=&fldQuestionGrpList7=&fldQuestionList7=&fldQuestionTextList7=&fldQuestionGrpList8=&fldQuestionList8=&fldQuestionTextList8=&fldQuestionGrpList9=&fldQuestionList9=&fldQuestionTextList9=&fldQuestionGrpList10=&fldQuestionList10=&fldQuestionTextList10=&fldQuestionGrpList11=&fldQuestionList11=&fldQuestionTextList11=&fldQuestionGrpList12=&fldQuestionList12=&fldQuestionTextList12=&fldQuestionGrpList13=&fldQuestionList13=&fldQuestionTextList13=&fldQuestionGrpList14=&fldQuestionList14=&fldQuestionTextList14=&fldQuestionGrpList15=&fldQuestionList15=&fldQuestionTextList15=&fldQuestionGrpList16=&fldQuestionList16=&fldQuestionTextList16=&fldQuestionGrpList17=&fldQuestionList17=&fldQuestionTextList17=&fldQuestionGrpList18=&fldQuestionList18=&fldQuestionTextList18=&fldQuestionGrpList19=&fldQuestionList19=&fldQuestionTextList19=&fldQuestionGrpList20=&fldQuestionList20=&fldQuestionTextList20=&fldQuestionGrpList21=&fldQuestionList21=&fldQuestionTextList21=&fldQuestionGrpList22=&fldQuestionList22=&fldQuestionTextList22=&fldQuestionGrpList23=&fldQuestionList23=&fldQuestionTextList23=&fldQuestionGrpList24=&fldQuestionList24=&fldQuestionTextList24=&fldQuestionGrpList25=&fldQuestionList25=&fldQuestionTextList25=&fldQuestionGrpList26=&fldQuestionList26=&fldQuestionTextList26=&fldQuestionGrpList27=&fldQuestionList27=&fldQuestionTextList27=&fldQuestionGrpList28=&fldQuestionList28=&fldQuestionTextList28=&fldQuestionGrpList29=&fldQuestionList29=&fldQuestionTextList29=&fldUserQuestionGroup0=" + text11 + "&fldQuestionGroupCnt=5&fldQuestionCnt=&fldExtSessionID=&fldAppId=RS&fldScrnSeqNbr=05&fldTxnId=CPQ&fldOrgTxnId=CPQ&fldSessionId=" + text9 + "&fldRequestId=" + method_139("fldRequestId", string_91);
                Status = "Eight Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Eight Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 8.";
                    return false;
                }
                Status = "Eight Hit Output = " + string_91;
                if (!string_91.Contains("We need more authentication"))
                {
                    string_87 = "Failed while Processing 8.";
                    Status = "Eight Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                startIndex2 = string_91.IndexOf("lightrow");
                startIndex2 = string_91.IndexOf("sendReq", startIndex2);
                startIndex2 = string_91.IndexOf("'", startIndex2) + 1;
                length2 = string_91.IndexOf("'", startIndex2) - startIndex2;
                string text17 = string_91.Substring(startIndex2, length2);
                startIndex2 += length2 + 1;
                startIndex2 = string_91.IndexOf("'", startIndex2) + 1;
                length2 = string_91.IndexOf("'", startIndex2) - startIndex2;
                string text18 = string_91.Substring(startIndex2, length2);
                text7 = "fldDebitCardNo=" + text17 + "&fldUnqId=" + text18 + "&fldOrgTxnId=CPQ&fldTxnLimitFlag=N&fldLoginUserGroupBaseType=" + method_139("fldLoginUserGroupBaseType", string_91) + "&fldClientSessionId=&fldExtSessionId=" + method_139("fldExtSessionId", string_91) + "&fldQuestionList29=&fldQuestionList28=&fldQuestionList27=&fldQuestionList26=&fldQuestionList25=&fldQuestionList24=&fldQuestionList23=&fldExtSessionID=&fldQuestionGrpList29=&fldQuestionList22=&fldQuestionGrpList28=&fldQuestionList21=&fldQuestionGrpList27=&fldQuestionList20=&fldQuestionGrpList26=&fldQuestionGrpList25=&fldQuestionGrpList24=&fldQuestionGrpList23=&fldQuestionGrpList22=&fldQuestionGrpList21=&fldQuestionGrpList20=&fldQuestionList19=&fldQuestionList18=&fldQuestionList17=&fldQuestionList16=&fldQuestionList15=&fldQuestionList14=&fldQuestionList13=&fldQuestionGrpList19=&fldQuestionList12=&fldQuestionGrpList18=&fldQuestionList11=&fldQuestionGrpList17=&fldQuestionList10=&fldQuestionGrpList16=&fldQuestionGrpList15=&fldQuestionGrpList14=&fldQuestionGrpList13=&fldQuestionGrpList12=&fldQuestionGrpList11=&fldQuestionGrpList10=&fldQuestionGroupCnt=5&fldFcatSessionId=&fldRsaTxnId=&fldProxyUserFlag=N&fldRemoteAddress=" + method_139("fldRemoteAddress", string_91) + "&fldUserRefNo=&fldIdCust=" + method_139("fldIdCust", string_91) + "&fldIdUser=" + method_139("fldIdUser", string_91) + "&fldQuestionCnt=&fldQuestionTextList29=&fldQuestionTextList28=&fldQuestionTextList27=&fldQuestionTextList26=&fldQuestionTextList25=&fldQuestionTextList24=&fldQuestionTextList23=&fldQuestionTextList22=&fldQuestionTextList21=&fldQuestionTextList20=&fldDateTime=&fldAccountMapFlag=N&fldDCValRequired=Y&fldQuestionTextList19=&fldQuestionTextList18=&fldQuestionTextList17=&fldQuestionTextList16=&fldQuestionTextList15=&fldQuestionTextList14=&fldQuestionTextList13=&fldQuestionTextList12=&fldUserQuestionTextList4=&fldQuestionTextList11=&fldUserQuestionTextList3=&fldQuestionTextList10=&fldUserQuestionTextList2=&fldUserQuestionTextList1=&fldUserQuestionTextList0=&fldRsaUserStatus=&fldActionType=SET_USER_QUESTION&fldUserQuestionGroup4=&fldUserQuestionGroup3=&fldUserQuestionGroup2=&fldUserQuestionGroup1=&fldUserQuestionGroup0=&fldLoginUserGroupType=N&fldQuestionList9=&fldUserQuestionList4=" + method_139("fldUserQuestionList4", string_91) + "&fldQuestionList8=&fldUserQuestionList3=" + method_139("fldUserQuestionList3", string_91) + "&fldQuestionList7=&fldUserQuestionList2=" + method_139("fldUserQuestionList2", string_91) + "&fldQuestionList6=&fldUserQuestionList1=" + method_139("fldUserQuestionList1", string_91) + "&fldQuestionList5=&fldUserQuestionList0=" + method_139("fldUserQuestionList0", string_91) + "&fldQuestionList4=&fldQuestionList3=&fldQuestionList2=&fldQuestionList1=&fldQuestionList0=&fldQuestionGrpList9=&fldQuestionTextList9=&fldQuestionGrpList8=&fldQuestionTextList8=&fldQuestionGrpList7=&fldQuestionTextList7=&fldQuestionGrpList6=&fldUserAnswerList4=" + method_139("fldUserAnswerList4", string_91) + "&fldQuestionTextList6=&fldQuestionGrpList5=&fldUserAnswerList3=" + method_139("fldUserAnswerList3", string_91) + "&fldQuestionTextList5=&fldQuestionGrpList4=&fldUserAnswerList2=" + method_139("fldUserAnswerList2", string_91) + "&fldQuestionTextList4=&fldQuestionGrpList3=&fldUserAnswerList1=" + method_139("fldUserAnswerList1", string_91) + "&fldQuestionTextList3=&fldTxnReq=RSA&fldQuestionGrpList2=&fldUserAnswerList0=" + method_139("fldUserAnswerList0", string_91) + "&fldQuestionTextList2=&fldQuestionGrpList1=&fldQuestionTextList1=&fldQuestionTextList0=&fldIdChannel=1&fldDevicePrint=" + text5 + "&fldTxnId=CPQ&fldScrnSeqNbr=06&fldRsaUserStatus=&fldAppId=RS&fldDeviceId=01&fldSessionId=" + text9;
                Status = "Ninth Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Ninth Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 9.";
                    return false;
                }
                Status = "Ninth Hit Output = " + string_91;
                if (!string_91.Contains("We need more authentication"))
                {
                    string_87 = "Failed while Processing 9.";
                    Status = "Ninth Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                string text19 = Math.Ceiling(10000000.0 + (double)new Random().Next(90000001)).ToString();
                string text20 = "<html>\n<head>\n<script type=\"text/javascript\">\n\t/*-----------------------------------------------------------------------------\n\tThis source is part of the FLEXCUBE@ Java App Server Software System and is\n\tcopyrighted by i-flex Solutions Limited.\n\tAll rights reserved. No part of this work may be reproduced, stored in a\n\tretrieval system, adopted or transmitted in any form or by any means,\n\telectronic, mechanical, photographic, graphic, optic recording or otherwise,\n\ttranslated in any language or computer language, without the prior written\n\tpermission of i-flex Solutions Limited.\n\ti-flex Solutions Limited.\n\t10-11, SDF I, SEEPZ, Andheri (East),\n\tMumbai - 400 096.\n\tIndia\n\tCopyright 2004 i-flex Solutions Limited.\n\tModification History\n\tDate Version Author Description\n\t__________ ___________ _______________ ________________________________________\n\t22/11/2012 1.0 Sandeep Saxena Des algo\n\t------------------------------------------------------------------------------*/\n\t//des\n\t//this takes the key, the message, and whether to encrypt or decrypt\n\tfunction des (key, message, encrypt, mode, iv, padding) {\n\t//declaring this locally speeds things up a bit\n\tvar spfunction1 = new Array (0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004);\n\tvar spfunction2 = new Array (-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000);\n\tvar spfunction3 = new Array (0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200);\n\tvar spfunction4 = new Array (0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080);\n\tvar spfunction5 = new Array (0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100);\n\tvar spfunction6 = new Array (0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010);\n\tvar spfunction7 = new Array (0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002);\n\tvar spfunction8 = new Array (0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000);\n\t//create the 16 or 48 subkeys we will need\n\tvar keys = des_createKeys (key);\n\tvar m=0, i, j, temp, temp2, right1, right2, left, right, looping;\n\tvar cbcleft, cbcleft2, cbcright, cbcright2\n\tvar endloop, loopinc;\n\tvar len = message.length;\n\tvar chunk = 0;\n\t//set up the loops for single and triple des\n\tvar iterations = keys.length == 32 ? 3 : 9; //single or triple des\n\tif (iterations == 3) {looping = encrypt ? new Array (0, 32, 2) : new Array (30, -2, -2);}\n\telse {looping = encrypt ? new Array (0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array (94, 62, -2, 32, 64, 2, 30, -2, -2);}\n\t//pad the message depending on the padding parameter\n\tif (padding == 2) message += \" \"; //pad the message with spaces\n\telse if (padding == 1) {temp = 8-(len%8); message += String.fromCharCode (temp,temp,temp,temp,temp,temp,temp,temp); if (temp==8) len+=8;} //PKCS7 padding\n\telse if (!padding) message += \"\\0\\0\\0\\0\\0\\0\\0\\0\"; //pad the message out with null bytes\n\t//store the result here\n\tresult = \"\";\n\ttempresult = \"\";\n\tif (mode == 1) { //CBC mode\n\tcbcleft = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n\tcbcright = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n\tm=0;\n\t}\n\t//loop through each 64 bit chunk of the message\n\twhile (m < len) {\n\tleft = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);\n\tright = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);\n\t//for Cipher Block Chaining mode, xor the message with the previous result\n\tif (mode == 1) {if (encrypt) {left ^= cbcleft; right ^= cbcright;} else {cbcleft2 = cbcleft; cbcright2 = cbcright; cbcleft = left; cbcright = right;}}\n\t//first each 64 but chunk of the message must be permuted according to IP\n\ttemp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n\ttemp = ((left >>> 16) ^ right) & 0x0000ffff; right ^= temp; left ^= (temp << 16);\n\ttemp = ((right >>> 2) ^ left) & 0x33333333; left ^= temp; right ^= (temp << 2);\n\ttemp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\tleft = ((left << 1) | (left >>> 31));\n\tright = ((right << 1) | (right >>> 31));\n\t//do this either 1 or 3 times for each chunk of the message\n\tfor (j=0; j<iterations; j+=3) {\n\tendloop = looping[j+1];\n\tloopinc = looping[j+2];\n\t//now go through and perform the encryption or decryption\n\tfor (i=looping[j]; i!=endloop; i+=loopinc) { //for efficiency\n\tright1 = right ^ keys[i];\n\tright2 = ((right >>> 4) | (right << 28)) ^ keys[i+1];\n\t//the result is attained by passing these bytes through the S selection functions\n\ttemp = left;\n\tleft = right;\n\tright = temp ^ (spfunction2[(right1 >>> 24) & 0x3f] | spfunction4[(right1 >>> 16) & 0x3f]\n\t| spfunction6[(right1 >>> 8) & 0x3f] | spfunction8[right1 & 0x3f]\n\t| spfunction1[(right2 >>> 24) & 0x3f] | spfunction3[(right2 >>> 16) & 0x3f]\n\t| spfunction5[(right2 >>> 8) & 0x3f] | spfunction7[right2 & 0x3f]);\n\t}\n\ttemp = left; left = right; right = temp; //unreverse left and right\n\t} //for either 1 or 3 iterations\n\t//move then each one bit to the right\n\tleft = ((left >>> 1) | (left << 31));\n\tright = ((right >>> 1) | (right << 31));\n\t//now perform IP-1, which is IP in the opposite direction\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\ttemp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n\ttemp = ((right >>> 2) ^ left) & 0x33333333; left ^= temp; right ^= (temp << 2);\n\ttemp = ((left >>> 16) ^ right) & 0x0000ffff; right ^= temp; left ^= (temp << 16);\n\ttemp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n\t//for Cipher Block Chaining mode, xor the message with the previous result\n\tif (mode == 1) {if (encrypt) {cbcleft = left; cbcright = right;} else {left ^= cbcleft2; right ^= cbcright2;}}\n\ttempresult += String.fromCharCode ((left>>>24), ((left>>>16) & 0xff), ((left>>>8) & 0xff), (left & 0xff), (right>>>24), ((right>>>16) & 0xff), ((right>>>8) & 0xff), (right & 0xff));\n\tchunk += 8;\n\tif (chunk == 512) {result += tempresult; tempresult = \"\"; chunk = 0;}\n\t} //for every 8 characters, or 64 bits in the message\n\t//return the result as an array\n\treturn result + tempresult;\n\t} //end of des\n\t//des_createKeys\n\t//this takes as input a 64 bit key (even though only 56 bits are used)\n\t//as an array of 2 integers, and returns 16 48 bit keys\n\tfunction des_createKeys (key) {\n\t//declaring this locally speeds things up a bit\n\tpc2bytes0 = new Array (0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204);\n\tpc2bytes1 = new Array (0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101);\n\tpc2bytes2 = new Array (0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808);\n\tpc2bytes3 = new Array (0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000);\n\tpc2bytes4 = new Array (0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010);\n\tpc2bytes5 = new Array (0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420);\n\tpc2bytes6 = new Array (0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002);\n\tpc2bytes7 = new Array (0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800);\n\tpc2bytes8 = new Array (0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002);\n\tpc2bytes9 = new Array (0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408);\n\tpc2bytes10 = new Array (0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020);\n\tpc2bytes11 = new Array (0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200);\n\tpc2bytes12 = new Array (0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010);\n\tpc2bytes13 = new Array (0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105);\n\t//how many iterations (1 for des, 3 for triple des)\n\tvar iterations = key.length > 8 ? 3 : 1; //changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n\t//stores the return keys\n\tvar keys = new Array (32 * iterations);\n\t//now define the left shifts which need to be done\n\tvar shifts = new Array (0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0);\n\t//other variables\n\tvar lefttemp, righttemp, m=0, n=0, temp;\n\tfor (var j=0; j<iterations; j++) { //either 1 or 3 iterations\n\tleft = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n\tright = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n\ttemp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n\ttemp = ((right >>> -16) ^ left) & 0x0000ffff; left ^= temp; right ^= (temp << -16);\n\ttemp = ((left >>> 2) ^ right) & 0x33333333; right ^= temp; left ^= (temp << 2);\n\ttemp = ((right >>> -16) ^ left) & 0x0000ffff; left ^= temp; right ^= (temp << -16);\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\ttemp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\t//the right side needs to be shifted and to get the last four bits of the left side\n\ttemp = (left << 8) | ((right >>> 20) & 0x000000f0);\n\t//left needs to be put upside down\n\tleft = (right << 24) | ((right << 8) & 0xff0000) | ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0);\n\tright = temp;\n\t//now go through and perform these shifts on the left and right keys\n\tfor (var i=0; i < shifts.length; i++) {\n\t//shift the keys either one or two bits to the left\n\tif (shifts[i]) {left = (left << 2) | (left >>> 26); right = (right << 2) | (right >>> 26);}\n\telse {left = (left << 1) | (left >>> 27); right = (right << 1) | (right >>> 27);}\n\tleft &= -0xf; right &= -0xf;\n\t//now apply PC-2, in such a way that E is easier when encrypting or decrypting\n\t//this conversion will look like PC-2 except only the last 6 bits of each byte are used\n\t//rather than 48 consecutive bits and the order of lines will be according to\n\t//how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7\n\tlefttemp = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf]\n\t| pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf]\n\t| pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf]\n\t| pc2bytes6[(left >>> 4) & 0xf];\n\trighttemp = pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf]\n\t| pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf]\n\t| pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf]\n\t| pc2bytes13[(right >>> 4) & 0xf];\n\ttemp = ((righttemp >>> 16) ^ lefttemp) & 0x0000ffff;\n\tkeys[n++] = lefttemp ^ temp; keys[n++] = righttemp ^ (temp << 16);\n\t}\n\t} //for each iterations\n\t//return the keys we've created\n\treturn keys;\n\t} //end of des_createKeys\n\t////////////////////////////// TEST //////////////////////////////\n\tfunction stringToHex (s) {\n\tvar r = \"0x\";\n\tvar hexes = new Array (\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\");\n\tfor (var i=0; i<s.length; i++) {r += hexes [s.charCodeAt(i) >> 4] + hexes [s.charCodeAt(i) & 0xf];}\n\treturn r;\n\t}\n\tfunction hexToString (h) {\n\tvar r = \"\";\n\tfor (var i= (h.substr(0, 2)==\"0x\")?2:0; i<h.length; i+=2) {r += String.fromCharCode (parseInt (h.substr (i, 2), 16));}\n\treturn r;\n\t}\n\t//-----------------------------------------------------------------------------------------------------\n\t</script>\n\n</head>\n\n<body>\n\n\n\n</body>\n\n</html> \n\n";
                WebBrowser webBrowser = new WebBrowser();
                webBrowser.Navigate("about:blank");
                webBrowser.Document.Write(text20);
                string text21 = webBrowser.Document.InvokeScript("des", new object[4]
                {
                    text19,
                    text2 + text3,
                    1,
                    0
                }).ToString();
                string text22 = webBrowser.Document.InvokeScript("stringToHex", new object[1] { text21 }).ToString();
                text22 = text22.ToUpper().Substring(2);
                while (text22.Length < 32)
                {
                    text22 += "0";
                }
                text2 = text22;
                string text23 = webBrowser.Document.InvokeScript("des", new object[4] { text19, text4, 1, 0 }).ToString();
                string text24 = webBrowser.Document.InvokeScript("stringToHex", new object[1] { text23 }).ToString();
                text24 = text24.ToUpper().Substring(2);
                while (text24.Length < 32)
                {
                    text24 += "0";
                }
                text4 = text24;
                webBrowser.Dispose();
                text7 = string.Concat("fldExpiryDate=", text2, "&fldPassword=&fldSelRadio=N&fldDCPin=", text4, "&fldRandomNumber=" + text19 + "&fldAppId=RS&fldTxnId=CPQ&fldScrnSeqNbr=07&fldSessionId=", text9, "&fldRequestId=", method_139("fldRequestId", string_91), "&fldOrgTxnId=CPQ&fldTxnLimitFlag=N&fldLoginUserGroupBaseType=", method_139("fldLoginUserGroupBaseType", string_91), "&fldClientSessionId=&fldExtSessionId=", method_139("fldExtSessionId", string_91), "&fldExtSessionId=", method_139("fldExtSessionId", string_91), "&fldQuestionList29=&fldQuestionList28=&fldQuestionList27=&fldUnqId=", text18, "&fldQuestionList26=&fldQuestionList25=&fldQuestionList24=&fldQuestionList23=&fldExtSessionID=&fldQuestionGrpList29=&fldQuestionList22=&fldQuestionGrpList28=&fldQuestionList21=&fldQuestionGrpList27=&fldQuestionList20=&fldQuestionGrpList26=&fldQuestionGrpList25=&fldQuestionGrpList24=&fldQuestionGrpList23=&fldQuestionGrpList22=&fldQuestionGrpList21=&fldQuestionGrpList20=&fldQuestionList19=&fldQuestionList18=&fldQuestionList17=&fldQuestionList16=&fldQuestionList15=&fldQuestionList14=&fldQuestionList13=&fldQuestionGrpList19=&fldQuestionList12=&fldQuestionGrpList18=&fldQuestionList11=&fldQuestionGrpList17=&fldQuestionList10=&fldQuestionGrpList16=&fldQuestionGrpList15=&fldQuestionGrpList14=&fldQuestionGrpList13=&fldQuestionGrpList12=&fldQuestionGrpList11=&fldQuestionGrpList10=&fldQuestionGroupCnt=5&fldFcatSessionId=&fldRsaTxnId=&fldProxyUserFlag=N&fldRemoteAddress=", method_139("fldRemoteAddress", string_91), "&fldRemoteAddress=", method_139("fldRemoteAddress", string_91), "&fldUserRefNo=&fldIdCust=", method_139("fldIdCust", string_91), "&fldIdUser=", method_139("fldIdUser", string_91), "&fldQuestionCnt=&fldQuestionTextList29=&fldQuestionTextList28=&fldQuestionTextList27=&fldQuestionTextList26=&fldQuestionTextList25=&fldQuestionTextList24=&fldQuestionTextList23=&fldQuestionTextList22=&fldQuestionTextList21=&fldQuestionTextList20=&fldDateTime=&fldAccountMapFlag=N&fldDCValRequired=Y&fldQuestionTextList19=&fldQuestionTextList18=&fldQuestionTextList17=&fldQuestionTextList16=&fldQuestionTextList15=&fldQuestionTextList14=&fldQuestionTextList13=&fldQuestionTextList12=&fldUserQuestionTextList4=&fldQuestionTextList11=&fldUserQuestionTextList3=&fldQuestionTextList10=&fldUserQuestionTextList2=&fldUserQuestionTextList1=&fldUserQuestionTextList0=&fldRsaUserStatus=&fldRsaUserStatus=&fldActionType=SET_USER_QUESTION&fldDebitCardNo=", text17, "&fldUserQuestionGroup4=&fldUserQuestionGroup3=&fldUserQuestionGroup2=&fldUserQuestionGroup1=&fldUserQuestionGroup0=&fldLoginUserGroupType=N&fldQuestionList9=&fldUserQuestionList4=", method_139("fldUserQuestionList4", string_91), "&fldQuestionList8=&fldUserQuestionList3=", method_139("fldUserQuestionList3", string_91), "&fldQuestionList7=&fldUserQuestionList2=", method_139("fldUserQuestionList2", string_91), "&fldQuestionList6=&fldUserQuestionList1=", method_139("fldUserQuestionList1", string_91), "&fldQuestionList5=&fldUserQuestionList0=", method_139("fldUserQuestionList0", string_91), "&fldQuestionList4=&fldQuestionList3=&fldQuestionList2=&fldQuestionList1=&fldQuestionList0=&fldQuestionGrpList9=&fldQuestionTextList9=&fldQuestionGrpList8=&fldQuestionTextList8=&fldQuestionGrpList7=&fldQuestionTextList7=&fldQuestionGrpList6=&fldUserAnswerList4=", method_139("fldUserAnswerList4", string_91), "&fldQuestionTextList6=&fldQuestionGrpList5=&fldUserAnswerList3=", method_139("fldUserAnswerList3", string_91), "&fldQuestionTextList5=&fldQuestionGrpList4=&fldUserAnswerList2=", method_139("fldUserAnswerList2", string_91), "&fldQuestionTextList4=&fldQuestionGrpList3=&fldUserAnswerList1=", method_139("fldUserAnswerList1", string_91), "&fldQuestionTextList3=&fldTxnReq=RSA&fldQuestionGrpList2=&fldUserAnswerList0=", method_139("fldUserAnswerList0", string_91), "&fldQuestionTextList2=&fldQuestionGrpList1=&fldQuestionTextList1=&fldQuestionTextList0=&fldIdChannel=1&fldDeviceId=01&fldDevicePrint=", text5, "&fldPin=");
                Status = "Tenth Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Tenth Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 10.";
                    return false;
                }
                Status = "Tenth Hit Output = " + string_91;
                if (!string_91.Contains("Please wait while your page loads"))
                {
                    string_87 = "Failed while Processing 10.";
                    Status = "Tenth Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                string text25 = text7.Substring(text7.IndexOf("fldExtSessionId")).Replace("&fldPin=", "") + "&fldExpiryDate=" + text2 + "&fldSelRadio=N&fldDCPin=" + text4;
                text7 = "fldTxnId=CPQ&fldScrnSeqNbr=04&fldRsaUserStatus=&fldAppId=RS&fldSessionId=" + text9 + "&fldPassword=&fldOrgTxnId=CPQ&fldTxnLimitFlag=N&fldLoginUserGroupBaseType=" + method_139("fldLoginUserGroupBaseType", string_91) + "&fldClientSessionId=&" + text25;
                Status = "Eleventh Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Eleventh Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 11.";
                    return false;
                }
                Status = "Eleventh Hit Output = " + string_91;
                if (!string_91.Contains("Kindly re-authenticate yourself") && !string_91.Contains("more authentication"))
                {
                    string_87 = "Failed while Processing 11.";
                    if (string_91.IndexOf("We regret to inform you that your Secure Access is blocked", StringComparison.CurrentCultureIgnoreCase) > 0)
                    {
                        startIndex2 = string_91.IndexOf("We regret to inform you that your Secure Access is blocked.", StringComparison.CurrentCultureIgnoreCase);
                        startIndex2 = string_91.LastIndexOf("<", startIndex2) + 1;
                        length2 = string_91.IndexOf(">", startIndex2) - startIndex2;
                        string_87 = "HDFC ERROR MESSAGE: " + string_91.Substring(startIndex2, length2);
                    }
                    Status = "Eleventh Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                startIndex2 = string_91.IndexOf("l_rsaTxnId");
                startIndex2 = string_91.IndexOf("\"", startIndex2) + 1;
                length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                string text26 = string_91.Substring(startIndex2, length2).Trim();
                text7 = "fldAppId=RS&fldTxnId=CPQ&fldScrnSeqNbr=04&fldSessionId=" + text9 + "&fldRequestId=" + method_139("fldRequestId", string_91) + "&fldPinRequired=Y&fldPin=Y&fldPinSequence=2&fldRsaAuthRetry=&fldRsaAuthTxnId=" + text26 + "&fldRsaAuthAction=OTPRELAY&fldOOBPhoneToken=&fldOOBPhoneRequest=&fldRsaQAAuthAvailable=N&fldRsaOOBPhoneAvailable=N&fldRsaOTPAvailable=Y&fldRsaSessionId=&fldOOBPhoneCountry=&fldOOBPhoneArea=&fldOOBPhoneNumber=&fldOOBPhoneExtn=&fldOOBPhoneLabel=&fldOOBPhoneCountryList=&fldOOBPhoneAreaList=&fldOOBPhoneNumberList=&fldOOBPhoneExtnList=&fldOOBPhoneLabelList=&fldUserRefNo=&fldDateTime=&fldOrgTxnId=&enstageid=&fldOtpTypeInp=&OTPTestValue=&fld_digital=&fldMsgSentMode=M&fldMobile=on&fldPassword=&fldOrgTxnId=CPQ&fldTxnLimitFlag=N&fldLoginUserGroupBaseType=" + method_139("fldLoginUserGroupBaseType", string_91) + "&fldClientSessionId=&" + text25;
                Status = "Twelth Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Twelth Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 12.";
                    return false;
                }
                Status = "Twelth Hit Output = " + string_91;
                if (!string_91.Contains("Please input the One Time Password"))
                {
                    string_87 = "Failed while Processing 12.";
                    Status = "Twelth Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                string text27 = ((!bool_18) ? Interaction.InputBox("Enter Final OTP Received on your Mobile for ByPass.", "Enter OTP", "", 100, 100) : Interaction.InputBox("Enter Final OTP Received on your Mobile for ByPass.", "Enter HDFC OTP"));
                if (text27.Length >= 4)
                {
                    startIndex2 = string_91.IndexOf("l_rsaTxnId");
                    startIndex2 = string_91.IndexOf("\"", startIndex2) + 1;
                    length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                    text26 = string_91.Substring(startIndex2, length2).Trim();
                    startIndex2 = string_91.IndexOf("name=\"fldRsaOTPAvailable");
                    startIndex2 = string_91.IndexOf("lue=\"", startIndex2) + 5;
                    length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                    string text28 = string_91.Substring(startIndex2, length2).Trim();
                    text7 = "fldAppId=RS&fldTxnId=CPQ&fldScrnSeqNbr=04&fldSessionId=" + text9 + "&fldRequestId=" + method_139("fldRequestId", string_91) + "&fldPinRequired=Y&fldPin=Y&fldPinSequence=3&fldRsaAuthRetry=&fldRsaAuthTxnId=" + text26 + "&fldRsaAuthAction=OTP&fldOOBPhoneToken=&fldOOBPhoneRequest=&fldRsaQAAuthAvailable=N&fldRsaOOBPhoneAvailable=N&fldRsaOTPAvailable=Y&fldRsaSessionId=" + text28 + "&fldOOBPhoneCountry=&fldOOBPhoneArea=&fldOOBPhoneNumber=&fldOOBPhoneExtn=&fldOOBPhoneLabel=&fldOOBPhoneCountryList=&fldOOBPhoneAreaList=&fldOOBPhoneNumberList=&fldOOBPhoneExtnList=&fldOOBPhoneLabelList=&fldUserRefNo=&fldDateTime=&fldOrgTxnId=&enstageid=&fldOtpTypeInp=&OTPTestValue=&fld_digital=&fldOtpToken=" + text27 + "&fldDCPin=" + text4 + "&fldQuestionTextList19=&fldQuestionTextList18=&fldQuestionTextList17=&fldQuestionTextList16=&fldQuestionTextList15=&fldQuestionTextList14=&fldQuestionTextList13=&OTPTestValue=&fldQuestionTextList12=&fldQuestionCnt=&" + text25;
                    Status = "Thirteen Hit : Inp = " + text7;
                    if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer, false, true, num, num, ref string_91, ref string_90, ref Exception_))
                    {
                        Status = "Thirteen Hit Failed. err = " + string_90;
                        string_87 = "Failed while Processing 13.";
                        return false;
                    }
                    Status = "Thirteen Hit Output = " + string_91;
                    if (!string_91.Contains("You have successfully changed your profile for Secure Access"))
                    {
                        string_87 = "Failed while Processing 14.";
                        Status = "Thirteen Hit Failed, Not valid HTML err = " + string_87;
                        return false;
                    }
                    string text29 = "";
                    int num4 = 0;
                    foreach (string item in list)
                    {
                        if (num4 != 0)
                        {
                            text29 += "&&";
                        }
                        num4++;
                        string[] array4 = item.Split('|');
                        string text30 = array4[2];
                        string text31 = array4[3];
                        text29 = text29 + text30 + "=" + text31;
                    }
                    string_87 = text29;
                    MessageBox.Show("Your OTP Bypassed Successfully! Please use HDFC after 15 minutes.\r\n\r\nAapka OTP bypass ho gaya he par kam se kam 15 minutes ke baad HDFC use kijiye.");
                    return true;
                }
            }
            else if (string_91.Contains("Account locked for user."))
            {
                string_87 = "Account locked for user.";
            }
            else
            {
                string_87 = "There is issue with your HDFC User ID";
            }
        }
        catch (Exception ex)
        {
            method_74("ProcessHDFCOTP", ex.Message);
            result = false;
        }
        return result;
    }

    private bool HdfcByPass(string string_86, ref string string_87)
    {
        if (class3_0 == null)
        {
            class3_0 = new clsPostData();
        }
        if (class19_0 == null)
        {
            class19_0 = new Class19();
        }
        bool result = false;
        string_87 = "";
        int num = 90000;
        Status = "Enter ProcessHDFCOTP.";
        string string_88 = "https://netbanking.hdfcbank.com/netbanking/?_ga=1.67743385.968282051.1482163954";
        string[] array = string_86.Split(new string[1] { "||" }, StringSplitOptions.None);
        string text = array[0].Trim();
        string string_89 = array[1];
        string text2 = array[2];
        string text3 = array[3];
        text3 = text3.Substring(2, 2);
        string text4 = array[4];
        string string_90 = "";
        string string_91 = "";
        DateTime now = DateTime.Now;
        try
        {
            string text5 = HttpUtility.UrlEncode("version=2&pm_fpua=Godzila/5.0 (windows nt 6.1) applewebkit/537.36 (khtml, like gecko) chrome/44.0.2403.157 safari/537.36|5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36|Win32&pm_fpsc=24|1600|900|856&pm_fpsw=&pm_fptz=5.5&pm_fpln=lang=en-US|syslang=|userlang=&pm_fpjv=1&pm_fpco=1&pm_fpasw=widevinecdmadapter|mhjfbmdgcfjbbpaeojofohoefgiehjai|pepflashplayer|internal-remoting-viewer|internal-nacl-plugin|internal-pdf-viewer&pm_fpan=Netscape&pm_fpacn=Mozilla&pm_fpol=true&pm_fposp=&pm_fpup=&pm_fpsaw=1600&pm_fpspd=24&pm_fpsbd=&pm_fpsdx=&pm_fpsdy=&pm_fpslx=&pm_fpsly=&pm_fpsfse=&pm_fpsui=");
            string text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
            string text7 = "fldpwdtmp=&fldAppId=RS&fldDevicePrint=" + text5 + "&fldTxnId=RGN&fldScrnSeqNbr=01&fldLangId=eng&fldDeviceId=01&fldWebServerId=YG&fldAppServerId=ZZ&fldRandomNumber=&fldRefPage=rsloginhtml&fldRefVal=" + text + "--NETBANKING--&fldLoginUserId=" + text;
            CookieContainer cookieContainer_ = null;
            Status = "First Hit : Inp = " + text7;
            if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
            {
                Status = "First Hit Failed. err = " + string_90;
                string_87 = "HDFC Not Working";
                return false;
            }
            Status = "First Output htm = " + string_91;
            if (!string.IsNullOrEmpty(string_91.Trim()) && (string_91.Contains("NetBanking Login") || string_91.Contains("Welcome")))
            {
                string string_92 = "";
                string text8 = method_5(string_89, ref string_92);
                text7 = "fldTemp=*&fldAppId=RS&fldTxnId=LGN&fldScrnSeqNbr=01&fldLangId=eng&fldDeviceId=01&fldWebServerId=YG&fldAppServerId=ZZ&fldLoginUserId=" + text + "&fldSessionId=&fldDevicePrint=" + text5 + "&fldTptCustomer=" + method_139("fldRsaImageId", string_91) + "&fldRsaEnrollRequired=" + method_139("fldRsaEnrollRequired", string_91) + "&fldRsaUserStatus=" + method_139("fldRsaUserStatus", string_91) + "&fldRsaImageId=" + method_139("fldRsaImageId", string_91) + "&fldRsaImageHeight=" + method_139("fldRsaImageHeight", string_91) + "&fldRsaImageWidth=" + method_139("fldRsaImageWidth", string_91) + "&fldRsaImagePath=" + method_139("fldRsaImagePath", string_91) + "&fldRsaImageText=" + method_139("fldRsaImageText", string_91) + "&fldRsaUserPhrase=" + method_139("fldRsaUserPhrase", string_91) + "&fldRandomNumber=" + string_92 + "&fldCustId=" + text + "&fldPassword=" + text8 + "&chkrsastu=" + method_139("chkrsastu", string_91);
                string_88 = text6;
                text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
                Status = "Second Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Second Hit Failed. err = " + string_90;
                    string_87 = "Failed while Login";
                    return false;
                }
                Status = "Second Hit Output = " + string_91;
                if (string_91.Contains("A One Time Password (OTP) will be sent to your registered Mobile Number."))
                {
                    text7 = clsPostData.smethod_4(string_91, ref text6);
                    int startIndex = string_91.IndexOf("l_rsaTxnId");
                    startIndex = string_91.IndexOf("\"", startIndex) + 1;
                    int length = string_91.IndexOf("\"", startIndex) - startIndex;
                    string string_93 = string_91.Substring(startIndex, length).Trim();
                    text7 = clsPostData.SetPost(text7, "fldRsaAuthTxnId", string_93);
                    text7 = clsPostData.SetPost(text7, "fldRsaAuthAction", "OTPRELAY");
                    text7 = clsPostData.SetPost(text7, "fldPinSequence", "2");
                    text7 = clsPostData.SetPost(text7, "fldMsgSentMode", "M");
                    text7 = clsPostData.SetPost(text7, "fldTptCustomer", "true");
                    text7 = clsPostData.SetPost(text7, "fldMobile", "on");
                    text7 = clsPostData.SetPost(text7, "chkrsastu", "on");
                    string_88 = text6;
                    text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
                    Status = "Second Hit : Inp = " + text7;
                    if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                    {
                        Status = "Second Hit Failed. err = " + string_90;
                        string_87 = "Failed while Login";
                        return false;
                    }
                    Status = "Second Hit Output = " + string_91;
                    text7 = clsPostData.smethod_4(string_91, ref text6);
                    string string_94 = Interaction.InputBox("Enter Login OTP Received on your Mobile.", "Enter HDFC OTP");
                    text7 = clsPostData.SetPost(text7, "fldOtpToken", string_94);
                    text7 = clsPostData.SetPost(text7, "fldRsaAuthTxnId", string_93);
                    text7 = clsPostData.SetPost(text7, "fldRsaAuthAction", "OTP");
                    text7 = clsPostData.SetPost(text7, "fldPinSequence", "3");
                    string_88 = text6;
                    text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
                    Status = "Second Hit : Inp = " + text7;
                    if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                    {
                        Status = "Second Hit Failed. err = " + string_90;
                        string_87 = "Failed while Login";
                        return false;
                    }
                    Status = "Second Hit Output = " + string_91;
                    if (!string_91.Contains("return sendReq"))
                    {
                        Status = "Second Hit Failed. err = " + string_90;
                        string_87 = "Failed while Processing 2. Invalid OTP";
                        return false;
                    }
                }
                text7 = clsPostData.smethod_4(string_91, ref text6);
                string string_95 = method_139("fldRsaAuthTxnId", string_91);
                text7 = clsPostData.SetPost(text7, "fldRsaAuthTxnId", string_95);
                text7 = clsPostData.SetPost(text7, "fldTxnId", "MNU");
                text7 = clsPostData.SetPost(text7, "fldScrnSeqNbr", "09");
                int startIndex2;
                int length2;
                if (!string_91.Contains("return sendReq"))
                {
                    if (string_91.Contains("errormessage='"))
                    {
                        startIndex2 = string_91.IndexOf("errormessage='");
                        startIndex2 = string_91.IndexOf("'", startIndex2) + 1;
                        length2 = string_91.IndexOf("'", startIndex2) - startIndex2;
                        string_87 = string_91.Substring(startIndex2, length2).Trim();
                        if (string_87.Contains("16001"))
                        {
                            string_87 = "You are not registered for NetBanking.";
                        }
                    }
                    Status = "Second Hit, Not valid HTML err = " + string_87;
                    return false;
                }
                string text9 = method_139("fldSessionId", string_91);
                string_88 = text6;
                text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
                Status = "Third Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Third Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 3.";
                    return false;
                }
                Status = "Third Hit Output = " + string_91;
                if (!string_91.Contains("fldAppId"))
                {
                    Status = "Third Hit, Not valid HTML err = " + string_87;
                    string_87 = "Failed while Processing 3.";
                    return false;
                }
                text6 = "https://netbanking.hdfcbank.com/netbanking/entry?fldAppId=RS&fldTxnId=MNU&fldScrnSeqNbr=01&fldSessionId=" + text9 + "&fldTxnRequest=accounts";
                Status = "Fourth Hit : Inp = " + text6;
                if (!method_100(text6, string_88, webProxy_3, ref cookieContainer_, bool_63: true, bool_64: true, 60000, ref string_91, ref bool_19, ref Exception_, ref httpStatusCode_0, ref string_90))
                {
                    Status = "Failed While Booking PNR : err = " + string_90 + " :: Htm = " + response;
                    string_87 = "Failed while Processing 4.";
                    return false;
                }
                Status = "Fourth Hit Output = " + string_91;
                string text10 = method_139("fldRequestId", string_91);
                if (text10.Length < 5)
                {
                    Status = "Fourth Hit, Not valid HTML err = " + string_87;
                    string_87 = "Failed while Processing 4.";
                    return false;
                }
                text6 = "https://netbanking.hdfcbank.com/netbanking/entry";
                text7 = "fldAppId=RS&fldTxnId=RSP&fldScrnSeqNbr=01&fldSessionId=" + text9 + "&fldSwitchAppId=&fldLogoffReq=N&fldRequestId=" + text10 + "&fldOrgTxn=&fldTxnType=&fldModule=CH&fldRoleId=&fldBenefType=FCNR";
                Status = "Fifth Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Fifth Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 5.";
                    return false;
                }
                Status = "Fifth Hit Output = " + string_91;
                if (!string_91.Contains("Select Transaction Type"))
                {
                    string_87 = "Failed while Processing 5.";
                    if (string_91.Contains("To modify your Secure Access profile, you will have to register for Secure Access"))
                    {
                        string_87 = "Before ByPassing HDFC OTP Please register for Secure Access, Kindly click on the Funds Transfer Tab to register for Secure Access.\r\n\r\nOTP ByPass se pahele HDFC Bank me login karke Funds Transfer tab se Secure Access ke liye register kijiye.";
                    }
                    Status = "Fifth Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                text7 = "fldTxnReq=RSA&fldAppId=RS&fldTxnId=CPQ&fldScrnSeqNbr=01&fldSessionId=" + text9 + "&fldTxnType=CPQ";
                text7 = "fldTxnReq=RSA&fldAppId=RS&fldTxnId=CPQ&fldScrnSeqNbr=01&fldSessionId=" + text9 + "&fldTxnType=CPQ";
                Status = "Sixth Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Sixth Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 6.";
                    return false;
                }
                Status = "Sixth Hit Output = " + string_91;
                if (!string_91.Contains("Answer five secret questions of your choice"))
                {
                    string_87 = "Failed while Processing 6.";
                    Status = "Sixth Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                startIndex2 = string_91.IndexOf("questionGrp[quesCnt]", 0);
                string text11 = "";
                int num2 = 0;
                List<string> list = new List<string>();
                while (startIndex2 > 0)
                {
                    string text12 = string_91;
                    string value = "\"";
                    int startIndex3 = startIndex2;
                    startIndex2 = text12.IndexOf(value, startIndex3) + 1;
                    length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                    string text13 = string_91.Substring(startIndex2, length2);
                    startIndex2 += length2 + 2;
                    startIndex2 = string_91.IndexOf("\"", startIndex2) + 1;
                    length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                    string text14 = string_91.Substring(startIndex2, length2);
                    startIndex2 += length2 + 2;
                    startIndex2 = string_91.IndexOf("\"", startIndex2) + 1;
                    length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                    string text15 = string_91.Substring(startIndex2, length2);
                    if (num2 % 6 == 0)
                    {
                        list.Add(text13 + "|" + text14 + "|" + text15);
                    }
                    object obj = text11;
                    text11 = string.Concat(obj, "&fldQuestionGrpList", num2, "=", text13, "&fldQuestionList", num2, "=", text14, "&fldQuestionTextList", num2, "=", HttpUtility.UrlEncode(text15));
                    num2++;
                    startIndex2 = string_91.IndexOf("questionGrp[quesCnt]", startIndex2);
                }
                int num3 = num2;
                for (num2 = 0; num2 < list.Count; num2++)
                {
                    string[] array2 = list[num2].Split('|');
                    string text16 = array2[2];
                    startIndex2 = text16.IndexOf("(") + 1;
                    length2 = text16.IndexOf(",", startIndex2);
                    if (length2 < 0)
                    {
                        length2 = text16.IndexOf("/", startIndex2);
                    }
                    startIndex2 = text16.LastIndexOf(" ", length2);
                    length2 -= startIndex2;
                    text16 = text16.Substring(startIndex2, length2).Trim();
                    list[num2] = list[num2] + "|" + text16;
                    object obj2 = text11;
                    text11 = string.Concat(obj2, "&fldUserQuestionGroup", num2, "=", array2[0], "&fldUserQuestionList", num2, "=", array2[1], "&fldUserQuestionTextList", num2, "=", HttpUtility.UrlEncode(array2[2]), "&fldUserAnswerList", num2, "=", HttpUtility.UrlEncode(text16));
                }
                text7 = "fldActionType=Verify&fldTxnReq=RSA&fldIdUser=" + method_139("fldIdUser", string_91) + "&fldIdCust=" + method_139("fldIdCust", string_91) + "&fldRsaUserStatus=&fldQuestionGroupCnt=5&fldQuestionCnt=" + num3 + text11 + "&fldAppId=RS&fldScrnSeqNbr=03&fldTxnId=CPQ&fldSessionId=" + text9 + "&fldRequestId=" + method_139("fldRequestId", string_91);
                Status = "Seventh Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Seventh Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 7.";
                    return false;
                }
                Status = "Seventh Hit Output = " + string_91;
                if (!string_91.Contains("Your chosen answers are as shown below"))
                {
                    string_87 = "Failed while Processing 7.";
                    if (string_91.IndexOf("We regret to inform you that your Secure Access is blocked.", StringComparison.CurrentCultureIgnoreCase) > 0)
                    {
                        startIndex2 = string_91.IndexOf("We regret to inform you that your Secure Access is blocked.", StringComparison.CurrentCultureIgnoreCase);
                        startIndex2 = string_91.LastIndexOf("<", startIndex2) + 1;
                        length2 = string_91.IndexOf(">", startIndex2) - startIndex2;
                        string_87 = "HDFC ERROR MESSAGE: " + string_91.Substring(startIndex2, length2);
                    }
                    Status = "Seventh Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                text11 = "";
                for (num2 = 0; num2 < list.Count; num2++)
                {
                    string[] array3 = list[num2].Split('|');
                    string str = array3[3];
                    object obj3 = text11;
                    text11 = string.Concat(obj3, "&fldUserQuestionList", num2, "=", array3[1], "&fldUserQuestionTextList", num2, "=&fldUserAnswerList", num2, "=", HttpUtility.UrlEncode(str), "&fldUserQuestionGroup", num2, "=");
                }
                text7 = "fldDCValRequired=Y&fldActionType=SET_USER_QUESTION&fldTxnReq=RSA&fldIdUser=" + method_139("fldIdUser", string_91) + "&fldIdCust=" + method_139("fldIdCust", string_91) + "&fldRsaUserStatus=&fldUserRefNo=&fldDateTime=&fldRsaTxnId=&fldClientSessionId=&fldFcatSessionId=&fldDevicePrint=" + text5 + "&fldQuestionList0=&fldQuestionTextList0=&fldQuestionGrpList1=&fldQuestionList1=&fldQuestionTextList1=&fldQuestionGrpList2=&fldQuestionList2=&fldQuestionTextList2=&fldQuestionGrpList3=&fldQuestionList3=&fldQuestionTextList3=&fldQuestionGrpList4=&fldQuestionList4=&fldQuestionTextList4=&fldQuestionGrpList5=&fldQuestionList5=&fldQuestionTextList5=&fldQuestionGrpList6=&fldQuestionList6=&fldQuestionTextList6=&fldQuestionGrpList7=&fldQuestionList7=&fldQuestionTextList7=&fldQuestionGrpList8=&fldQuestionList8=&fldQuestionTextList8=&fldQuestionGrpList9=&fldQuestionList9=&fldQuestionTextList9=&fldQuestionGrpList10=&fldQuestionList10=&fldQuestionTextList10=&fldQuestionGrpList11=&fldQuestionList11=&fldQuestionTextList11=&fldQuestionGrpList12=&fldQuestionList12=&fldQuestionTextList12=&fldQuestionGrpList13=&fldQuestionList13=&fldQuestionTextList13=&fldQuestionGrpList14=&fldQuestionList14=&fldQuestionTextList14=&fldQuestionGrpList15=&fldQuestionList15=&fldQuestionTextList15=&fldQuestionGrpList16=&fldQuestionList16=&fldQuestionTextList16=&fldQuestionGrpList17=&fldQuestionList17=&fldQuestionTextList17=&fldQuestionGrpList18=&fldQuestionList18=&fldQuestionTextList18=&fldQuestionGrpList19=&fldQuestionList19=&fldQuestionTextList19=&fldQuestionGrpList20=&fldQuestionList20=&fldQuestionTextList20=&fldQuestionGrpList21=&fldQuestionList21=&fldQuestionTextList21=&fldQuestionGrpList22=&fldQuestionList22=&fldQuestionTextList22=&fldQuestionGrpList23=&fldQuestionList23=&fldQuestionTextList23=&fldQuestionGrpList24=&fldQuestionList24=&fldQuestionTextList24=&fldQuestionGrpList25=&fldQuestionList25=&fldQuestionTextList25=&fldQuestionGrpList26=&fldQuestionList26=&fldQuestionTextList26=&fldQuestionGrpList27=&fldQuestionList27=&fldQuestionTextList27=&fldQuestionGrpList28=&fldQuestionList28=&fldQuestionTextList28=&fldQuestionGrpList29=&fldQuestionList29=&fldQuestionTextList29=&fldUserQuestionGroup0=" + text11 + "&fldQuestionGroupCnt=5&fldQuestionCnt=&fldExtSessionID=&fldAppId=RS&fldScrnSeqNbr=05&fldTxnId=CPQ&fldOrgTxnId=CPQ&fldSessionId=" + text9 + "&fldRequestId=" + method_139("fldRequestId", string_91);
                Status = "Eight Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Eight Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 8.";
                    return false;
                }
                Status = "Eight Hit Output = " + string_91;
                if (!string_91.Contains("We need more authentication"))
                {
                    string_87 = "Failed while Processing 8.";
                    Status = "Eight Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                startIndex2 = string_91.IndexOf("lightrow");
                startIndex2 = string_91.IndexOf("sendReq", startIndex2);
                startIndex2 = string_91.IndexOf("'", startIndex2) + 1;
                length2 = string_91.IndexOf("'", startIndex2) - startIndex2;
                string text17 = string_91.Substring(startIndex2, length2);
                startIndex2 += length2 + 1;
                startIndex2 = string_91.IndexOf("'", startIndex2) + 1;
                length2 = string_91.IndexOf("'", startIndex2) - startIndex2;
                string text18 = string_91.Substring(startIndex2, length2);
                text7 = "fldDebitCardNo=" + text17 + "&fldUnqId=" + text18 + "&fldOrgTxnId=CPQ&fldTxnLimitFlag=N&fldLoginUserGroupBaseType=" + method_139("fldLoginUserGroupBaseType", string_91) + "&fldClientSessionId=&fldExtSessionId=" + method_139("fldExtSessionId", string_91) + "&fldQuestionList29=&fldQuestionList28=&fldQuestionList27=&fldQuestionList26=&fldQuestionList25=&fldQuestionList24=&fldQuestionList23=&fldExtSessionID=&fldQuestionGrpList29=&fldQuestionList22=&fldQuestionGrpList28=&fldQuestionList21=&fldQuestionGrpList27=&fldQuestionList20=&fldQuestionGrpList26=&fldQuestionGrpList25=&fldQuestionGrpList24=&fldQuestionGrpList23=&fldQuestionGrpList22=&fldQuestionGrpList21=&fldQuestionGrpList20=&fldQuestionList19=&fldQuestionList18=&fldQuestionList17=&fldQuestionList16=&fldQuestionList15=&fldQuestionList14=&fldQuestionList13=&fldQuestionGrpList19=&fldQuestionList12=&fldQuestionGrpList18=&fldQuestionList11=&fldQuestionGrpList17=&fldQuestionList10=&fldQuestionGrpList16=&fldQuestionGrpList15=&fldQuestionGrpList14=&fldQuestionGrpList13=&fldQuestionGrpList12=&fldQuestionGrpList11=&fldQuestionGrpList10=&fldQuestionGroupCnt=5&fldFcatSessionId=&fldRsaTxnId=&fldProxyUserFlag=N&fldRemoteAddress=" + method_139("fldRemoteAddress", string_91) + "&fldUserRefNo=&fldIdCust=" + method_139("fldIdCust", string_91) + "&fldIdUser=" + method_139("fldIdUser", string_91) + "&fldQuestionCnt=&fldQuestionTextList29=&fldQuestionTextList28=&fldQuestionTextList27=&fldQuestionTextList26=&fldQuestionTextList25=&fldQuestionTextList24=&fldQuestionTextList23=&fldQuestionTextList22=&fldQuestionTextList21=&fldQuestionTextList20=&fldDateTime=&fldAccountMapFlag=N&fldDCValRequired=Y&fldQuestionTextList19=&fldQuestionTextList18=&fldQuestionTextList17=&fldQuestionTextList16=&fldQuestionTextList15=&fldQuestionTextList14=&fldQuestionTextList13=&fldQuestionTextList12=&fldUserQuestionTextList4=&fldQuestionTextList11=&fldUserQuestionTextList3=&fldQuestionTextList10=&fldUserQuestionTextList2=&fldUserQuestionTextList1=&fldUserQuestionTextList0=&fldRsaUserStatus=&fldActionType=SET_USER_QUESTION&fldUserQuestionGroup4=&fldUserQuestionGroup3=&fldUserQuestionGroup2=&fldUserQuestionGroup1=&fldUserQuestionGroup0=&fldLoginUserGroupType=N&fldQuestionList9=&fldUserQuestionList4=" + method_139("fldUserQuestionList4", string_91) + "&fldQuestionList8=&fldUserQuestionList3=" + method_139("fldUserQuestionList3", string_91) + "&fldQuestionList7=&fldUserQuestionList2=" + method_139("fldUserQuestionList2", string_91) + "&fldQuestionList6=&fldUserQuestionList1=" + method_139("fldUserQuestionList1", string_91) + "&fldQuestionList5=&fldUserQuestionList0=" + method_139("fldUserQuestionList0", string_91) + "&fldQuestionList4=&fldQuestionList3=&fldQuestionList2=&fldQuestionList1=&fldQuestionList0=&fldQuestionGrpList9=&fldQuestionTextList9=&fldQuestionGrpList8=&fldQuestionTextList8=&fldQuestionGrpList7=&fldQuestionTextList7=&fldQuestionGrpList6=&fldUserAnswerList4=" + method_139("fldUserAnswerList4", string_91) + "&fldQuestionTextList6=&fldQuestionGrpList5=&fldUserAnswerList3=" + method_139("fldUserAnswerList3", string_91) + "&fldQuestionTextList5=&fldQuestionGrpList4=&fldUserAnswerList2=" + method_139("fldUserAnswerList2", string_91) + "&fldQuestionTextList4=&fldQuestionGrpList3=&fldUserAnswerList1=" + method_139("fldUserAnswerList1", string_91) + "&fldQuestionTextList3=&fldTxnReq=RSA&fldQuestionGrpList2=&fldUserAnswerList0=" + method_139("fldUserAnswerList0", string_91) + "&fldQuestionTextList2=&fldQuestionGrpList1=&fldQuestionTextList1=&fldQuestionTextList0=&fldIdChannel=1&fldDevicePrint=" + text5 + "&fldTxnId=CPQ&fldScrnSeqNbr=06&fldRsaUserStatus=&fldAppId=RS&fldDeviceId=01&fldSessionId=" + text9;
                Status = "Ninth Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Ninth Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 9.";
                    return false;
                }
                Status = "Ninth Hit Output = " + string_91;
                if (!string_91.Contains("We need more authentication"))
                {
                    string_87 = "Failed while Processing 9.";
                    Status = "Ninth Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                string text19 = Math.Ceiling(10000000.0 + (double)new Random().Next(90000001)).ToString();
                string text20 = "<html>\n<head>\n<script type=\"text/javascript\">\n\t/*-----------------------------------------------------------------------------\n\tThis source is part of the FLEXCUBE@ Java App Server Software System and is\n\tcopyrighted by i-flex Solutions Limited.\n\tAll rights reserved. No part of this work may be reproduced, stored in a\n\tretrieval system, adopted or transmitted in any form or by any means,\n\telectronic, mechanical, photographic, graphic, optic recording or otherwise,\n\ttranslated in any language or computer language, without the prior written\n\tpermission of i-flex Solutions Limited.\n\ti-flex Solutions Limited.\n\t10-11, SDF I, SEEPZ, Andheri (East),\n\tMumbai - 400 096.\n\tIndia\n\tCopyright 2004 i-flex Solutions Limited.\n\tModification History\n\tDate Version Author Description\n\t__________ ___________ _______________ ________________________________________\n\t22/11/2012 1.0 Sandeep Saxena Des algo\n\t------------------------------------------------------------------------------*/\n\t//des\n\t//this takes the key, the message, and whether to encrypt or decrypt\n\tfunction des (key, message, encrypt, mode, iv, padding) {\n\t//declaring this locally speeds things up a bit\n\tvar spfunction1 = new Array (0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004);\n\tvar spfunction2 = new Array (-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000);\n\tvar spfunction3 = new Array (0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200);\n\tvar spfunction4 = new Array (0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080);\n\tvar spfunction5 = new Array (0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100);\n\tvar spfunction6 = new Array (0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010);\n\tvar spfunction7 = new Array (0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002);\n\tvar spfunction8 = new Array (0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000);\n\t//create the 16 or 48 subkeys we will need\n\tvar keys = des_createKeys (key);\n\tvar m=0, i, j, temp, temp2, right1, right2, left, right, looping;\n\tvar cbcleft, cbcleft2, cbcright, cbcright2\n\tvar endloop, loopinc;\n\tvar len = message.length;\n\tvar chunk = 0;\n\t//set up the loops for single and triple des\n\tvar iterations = keys.length == 32 ? 3 : 9; //single or triple des\n\tif (iterations == 3) {looping = encrypt ? new Array (0, 32, 2) : new Array (30, -2, -2);}\n\telse {looping = encrypt ? new Array (0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array (94, 62, -2, 32, 64, 2, 30, -2, -2);}\n\t//pad the message depending on the padding parameter\n\tif (padding == 2) message += \" \"; //pad the message with spaces\n\telse if (padding == 1) {temp = 8-(len%8); message += String.fromCharCode (temp,temp,temp,temp,temp,temp,temp,temp); if (temp==8) len+=8;} //PKCS7 padding\n\telse if (!padding) message += \"\\0\\0\\0\\0\\0\\0\\0\\0\"; //pad the message out with null bytes\n\t//store the result here\n\tresult = \"\";\n\ttempresult = \"\";\n\tif (mode == 1) { //CBC mode\n\tcbcleft = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n\tcbcright = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);\n\tm=0;\n\t}\n\t//loop through each 64 bit chunk of the message\n\twhile (m < len) {\n\tleft = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);\n\tright = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);\n\t//for Cipher Block Chaining mode, xor the message with the previous result\n\tif (mode == 1) {if (encrypt) {left ^= cbcleft; right ^= cbcright;} else {cbcleft2 = cbcleft; cbcright2 = cbcright; cbcleft = left; cbcright = right;}}\n\t//first each 64 but chunk of the message must be permuted according to IP\n\ttemp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n\ttemp = ((left >>> 16) ^ right) & 0x0000ffff; right ^= temp; left ^= (temp << 16);\n\ttemp = ((right >>> 2) ^ left) & 0x33333333; left ^= temp; right ^= (temp << 2);\n\ttemp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\tleft = ((left << 1) | (left >>> 31));\n\tright = ((right << 1) | (right >>> 31));\n\t//do this either 1 or 3 times for each chunk of the message\n\tfor (j=0; j<iterations; j+=3) {\n\tendloop = looping[j+1];\n\tloopinc = looping[j+2];\n\t//now go through and perform the encryption or decryption\n\tfor (i=looping[j]; i!=endloop; i+=loopinc) { //for efficiency\n\tright1 = right ^ keys[i];\n\tright2 = ((right >>> 4) | (right << 28)) ^ keys[i+1];\n\t//the result is attained by passing these bytes through the S selection functions\n\ttemp = left;\n\tleft = right;\n\tright = temp ^ (spfunction2[(right1 >>> 24) & 0x3f] | spfunction4[(right1 >>> 16) & 0x3f]\n\t| spfunction6[(right1 >>> 8) & 0x3f] | spfunction8[right1 & 0x3f]\n\t| spfunction1[(right2 >>> 24) & 0x3f] | spfunction3[(right2 >>> 16) & 0x3f]\n\t| spfunction5[(right2 >>> 8) & 0x3f] | spfunction7[right2 & 0x3f]);\n\t}\n\ttemp = left; left = right; right = temp; //unreverse left and right\n\t} //for either 1 or 3 iterations\n\t//move then each one bit to the right\n\tleft = ((left >>> 1) | (left << 31));\n\tright = ((right >>> 1) | (right << 31));\n\t//now perform IP-1, which is IP in the opposite direction\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\ttemp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n\ttemp = ((right >>> 2) ^ left) & 0x33333333; left ^= temp; right ^= (temp << 2);\n\ttemp = ((left >>> 16) ^ right) & 0x0000ffff; right ^= temp; left ^= (temp << 16);\n\ttemp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n\t//for Cipher Block Chaining mode, xor the message with the previous result\n\tif (mode == 1) {if (encrypt) {cbcleft = left; cbcright = right;} else {left ^= cbcleft2; right ^= cbcright2;}}\n\ttempresult += String.fromCharCode ((left>>>24), ((left>>>16) & 0xff), ((left>>>8) & 0xff), (left & 0xff), (right>>>24), ((right>>>16) & 0xff), ((right>>>8) & 0xff), (right & 0xff));\n\tchunk += 8;\n\tif (chunk == 512) {result += tempresult; tempresult = \"\"; chunk = 0;}\n\t} //for every 8 characters, or 64 bits in the message\n\t//return the result as an array\n\treturn result + tempresult;\n\t} //end of des\n\t//des_createKeys\n\t//this takes as input a 64 bit key (even though only 56 bits are used)\n\t//as an array of 2 integers, and returns 16 48 bit keys\n\tfunction des_createKeys (key) {\n\t//declaring this locally speeds things up a bit\n\tpc2bytes0 = new Array (0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204);\n\tpc2bytes1 = new Array (0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101);\n\tpc2bytes2 = new Array (0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808);\n\tpc2bytes3 = new Array (0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000);\n\tpc2bytes4 = new Array (0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010);\n\tpc2bytes5 = new Array (0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420);\n\tpc2bytes6 = new Array (0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002);\n\tpc2bytes7 = new Array (0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800);\n\tpc2bytes8 = new Array (0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002);\n\tpc2bytes9 = new Array (0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408);\n\tpc2bytes10 = new Array (0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020);\n\tpc2bytes11 = new Array (0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200);\n\tpc2bytes12 = new Array (0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010);\n\tpc2bytes13 = new Array (0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105);\n\t//how many iterations (1 for des, 3 for triple des)\n\tvar iterations = key.length > 8 ? 3 : 1; //changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n\t//stores the return keys\n\tvar keys = new Array (32 * iterations);\n\t//now define the left shifts which need to be done\n\tvar shifts = new Array (0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0);\n\t//other variables\n\tvar lefttemp, righttemp, m=0, n=0, temp;\n\tfor (var j=0; j<iterations; j++) { //either 1 or 3 iterations\n\tleft = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n\tright = (key.charCodeAt(m++) << 24) | (key.charCodeAt(m++) << 16) | (key.charCodeAt(m++) << 8) | key.charCodeAt(m++);\n\ttemp = ((left >>> 4) ^ right) & 0x0f0f0f0f; right ^= temp; left ^= (temp << 4);\n\ttemp = ((right >>> -16) ^ left) & 0x0000ffff; left ^= temp; right ^= (temp << -16);\n\ttemp = ((left >>> 2) ^ right) & 0x33333333; right ^= temp; left ^= (temp << 2);\n\ttemp = ((right >>> -16) ^ left) & 0x0000ffff; left ^= temp; right ^= (temp << -16);\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\ttemp = ((right >>> 8) ^ left) & 0x00ff00ff; left ^= temp; right ^= (temp << 8);\n\ttemp = ((left >>> 1) ^ right) & 0x55555555; right ^= temp; left ^= (temp << 1);\n\t//the right side needs to be shifted and to get the last four bits of the left side\n\ttemp = (left << 8) | ((right >>> 20) & 0x000000f0);\n\t//left needs to be put upside down\n\tleft = (right << 24) | ((right << 8) & 0xff0000) | ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0);\n\tright = temp;\n\t//now go through and perform these shifts on the left and right keys\n\tfor (var i=0; i < shifts.length; i++) {\n\t//shift the keys either one or two bits to the left\n\tif (shifts[i]) {left = (left << 2) | (left >>> 26); right = (right << 2) | (right >>> 26);}\n\telse {left = (left << 1) | (left >>> 27); right = (right << 1) | (right >>> 27);}\n\tleft &= -0xf; right &= -0xf;\n\t//now apply PC-2, in such a way that E is easier when encrypting or decrypting\n\t//this conversion will look like PC-2 except only the last 6 bits of each byte are used\n\t//rather than 48 consecutive bits and the order of lines will be according to\n\t//how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7\n\tlefttemp = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf]\n\t| pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf]\n\t| pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf]\n\t| pc2bytes6[(left >>> 4) & 0xf];\n\trighttemp = pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf]\n\t| pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf]\n\t| pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf]\n\t| pc2bytes13[(right >>> 4) & 0xf];\n\ttemp = ((righttemp >>> 16) ^ lefttemp) & 0x0000ffff;\n\tkeys[n++] = lefttemp ^ temp; keys[n++] = righttemp ^ (temp << 16);\n\t}\n\t} //for each iterations\n\t//return the keys we've created\n\treturn keys;\n\t} //end of des_createKeys\n\t////////////////////////////// TEST //////////////////////////////\n\tfunction stringToHex (s) {\n\tvar r = \"0x\";\n\tvar hexes = new Array (\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\");\n\tfor (var i=0; i<s.length; i++) {r += hexes [s.charCodeAt(i) >> 4] + hexes [s.charCodeAt(i) & 0xf];}\n\treturn r;\n\t}\n\tfunction hexToString (h) {\n\tvar r = \"\";\n\tfor (var i= (h.substr(0, 2)==\"0x\")?2:0; i<h.length; i+=2) {r += String.fromCharCode (parseInt (h.substr (i, 2), 16));}\n\treturn r;\n\t}\n\t//-----------------------------------------------------------------------------------------------------\n\t</script>\n\n</head>\n\n<body>\n\n\n\n</body>\n\n</html> \n\n";
                WebBrowser webBrowser = new WebBrowser();
                webBrowser.Navigate("about:blank");
                webBrowser.Document.Write(text20);
                string text21 = webBrowser.Document.InvokeScript("des", new object[4]
                {
                    text19,
                    text2 + text3,
                    1,
                    0
                }).ToString();
                string text22 = webBrowser.Document.InvokeScript("stringToHex", new object[1] { text21 }).ToString();
                text22 = text22.ToUpper().Substring(2);
                while (text22.Length < 32)
                {
                    text22 += "0";
                }
                text2 = text22;
                string text23 = webBrowser.Document.InvokeScript("des", new object[4] { text19, text4, 1, 0 }).ToString();
                string text24 = webBrowser.Document.InvokeScript("stringToHex", new object[1] { text23 }).ToString();
                text24 = text24.ToUpper().Substring(2);
                while (text24.Length < 32)
                {
                    text24 += "0";
                }
                text4 = text24;
                webBrowser.Dispose();
                text7 = string.Concat("fldExpiryDate=", text2, "&fldPassword=&fldSelRadio=N&fldDCPin=", text4, "&fldRandomNumber=" + text19 + "&fldAppId=RS&fldTxnId=CPQ&fldScrnSeqNbr=07&fldSessionId=", text9, "&fldRequestId=", method_139("fldRequestId", string_91), "&fldOrgTxnId=CPQ&fldTxnLimitFlag=N&fldLoginUserGroupBaseType=", method_139("fldLoginUserGroupBaseType", string_91), "&fldClientSessionId=&fldExtSessionId=", method_139("fldExtSessionId", string_91), "&fldExtSessionId=", method_139("fldExtSessionId", string_91), "&fldQuestionList29=&fldQuestionList28=&fldQuestionList27=&fldUnqId=", text18, "&fldQuestionList26=&fldQuestionList25=&fldQuestionList24=&fldQuestionList23=&fldExtSessionID=&fldQuestionGrpList29=&fldQuestionList22=&fldQuestionGrpList28=&fldQuestionList21=&fldQuestionGrpList27=&fldQuestionList20=&fldQuestionGrpList26=&fldQuestionGrpList25=&fldQuestionGrpList24=&fldQuestionGrpList23=&fldQuestionGrpList22=&fldQuestionGrpList21=&fldQuestionGrpList20=&fldQuestionList19=&fldQuestionList18=&fldQuestionList17=&fldQuestionList16=&fldQuestionList15=&fldQuestionList14=&fldQuestionList13=&fldQuestionGrpList19=&fldQuestionList12=&fldQuestionGrpList18=&fldQuestionList11=&fldQuestionGrpList17=&fldQuestionList10=&fldQuestionGrpList16=&fldQuestionGrpList15=&fldQuestionGrpList14=&fldQuestionGrpList13=&fldQuestionGrpList12=&fldQuestionGrpList11=&fldQuestionGrpList10=&fldQuestionGroupCnt=5&fldFcatSessionId=&fldRsaTxnId=&fldProxyUserFlag=N&fldRemoteAddress=", method_139("fldRemoteAddress", string_91), "&fldRemoteAddress=", method_139("fldRemoteAddress", string_91), "&fldUserRefNo=&fldIdCust=", method_139("fldIdCust", string_91), "&fldIdUser=", method_139("fldIdUser", string_91), "&fldQuestionCnt=&fldQuestionTextList29=&fldQuestionTextList28=&fldQuestionTextList27=&fldQuestionTextList26=&fldQuestionTextList25=&fldQuestionTextList24=&fldQuestionTextList23=&fldQuestionTextList22=&fldQuestionTextList21=&fldQuestionTextList20=&fldDateTime=&fldAccountMapFlag=N&fldDCValRequired=Y&fldQuestionTextList19=&fldQuestionTextList18=&fldQuestionTextList17=&fldQuestionTextList16=&fldQuestionTextList15=&fldQuestionTextList14=&fldQuestionTextList13=&fldQuestionTextList12=&fldUserQuestionTextList4=&fldQuestionTextList11=&fldUserQuestionTextList3=&fldQuestionTextList10=&fldUserQuestionTextList2=&fldUserQuestionTextList1=&fldUserQuestionTextList0=&fldRsaUserStatus=&fldRsaUserStatus=&fldActionType=SET_USER_QUESTION&fldDebitCardNo=", text17, "&fldUserQuestionGroup4=&fldUserQuestionGroup3=&fldUserQuestionGroup2=&fldUserQuestionGroup1=&fldUserQuestionGroup0=&fldLoginUserGroupType=N&fldQuestionList9=&fldUserQuestionList4=", method_139("fldUserQuestionList4", string_91), "&fldQuestionList8=&fldUserQuestionList3=", method_139("fldUserQuestionList3", string_91), "&fldQuestionList7=&fldUserQuestionList2=", method_139("fldUserQuestionList2", string_91), "&fldQuestionList6=&fldUserQuestionList1=", method_139("fldUserQuestionList1", string_91), "&fldQuestionList5=&fldUserQuestionList0=", method_139("fldUserQuestionList0", string_91), "&fldQuestionList4=&fldQuestionList3=&fldQuestionList2=&fldQuestionList1=&fldQuestionList0=&fldQuestionGrpList9=&fldQuestionTextList9=&fldQuestionGrpList8=&fldQuestionTextList8=&fldQuestionGrpList7=&fldQuestionTextList7=&fldQuestionGrpList6=&fldUserAnswerList4=", method_139("fldUserAnswerList4", string_91), "&fldQuestionTextList6=&fldQuestionGrpList5=&fldUserAnswerList3=", method_139("fldUserAnswerList3", string_91), "&fldQuestionTextList5=&fldQuestionGrpList4=&fldUserAnswerList2=", method_139("fldUserAnswerList2", string_91), "&fldQuestionTextList4=&fldQuestionGrpList3=&fldUserAnswerList1=", method_139("fldUserAnswerList1", string_91), "&fldQuestionTextList3=&fldTxnReq=RSA&fldQuestionGrpList2=&fldUserAnswerList0=", method_139("fldUserAnswerList0", string_91), "&fldQuestionTextList2=&fldQuestionGrpList1=&fldQuestionTextList1=&fldQuestionTextList0=&fldIdChannel=1&fldDeviceId=01&fldDevicePrint=", text5, "&fldPin=");
                Status = "Tenth Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Tenth Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 10.";
                    return false;
                }
                Status = "Tenth Hit Output = " + string_91;
                if (!string_91.Contains("Please wait while your page loads"))
                {
                    string_87 = "Failed while Processing 10.";
                    Status = "Tenth Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                string text25 = text7.Substring(text7.IndexOf("fldExtSessionId")).Replace("&fldPin=", "") + "&fldExpiryDate=" + text2 + "&fldSelRadio=N&fldDCPin=" + text4;
                text7 = "fldTxnId=CPQ&fldScrnSeqNbr=04&fldRsaUserStatus=&fldAppId=RS&fldSessionId=" + text9 + "&fldPassword=&fldOrgTxnId=CPQ&fldTxnLimitFlag=N&fldLoginUserGroupBaseType=" + method_139("fldLoginUserGroupBaseType", string_91) + "&fldClientSessionId=&" + text25;
                Status = "Eleventh Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Eleventh Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 11.";
                    return false;
                }
                Status = "Eleventh Hit Output = " + string_91;
                if (!string_91.Contains("Kindly re-authenticate yourself") && !string_91.Contains("more authentication"))
                {
                    string_87 = "Failed while Processing 11.";
                    if (string_91.IndexOf("We regret to inform you that your Secure Access is blocked", StringComparison.CurrentCultureIgnoreCase) > 0)
                    {
                        startIndex2 = string_91.IndexOf("We regret to inform you that your Secure Access is blocked.", StringComparison.CurrentCultureIgnoreCase);
                        startIndex2 = string_91.LastIndexOf("<", startIndex2) + 1;
                        length2 = string_91.IndexOf(">", startIndex2) - startIndex2;
                        string_87 = "HDFC ERROR MESSAGE: " + string_91.Substring(startIndex2, length2);
                    }
                    Status = "Eleventh Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                startIndex2 = string_91.IndexOf("l_rsaTxnId");
                startIndex2 = string_91.IndexOf("\"", startIndex2) + 1;
                length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                string text26 = string_91.Substring(startIndex2, length2).Trim();
                text7 = "fldAppId=RS&fldTxnId=CPQ&fldScrnSeqNbr=04&fldSessionId=" + text9 + "&fldRequestId=" + method_139("fldRequestId", string_91) + "&fldPinRequired=Y&fldPin=Y&fldPinSequence=2&fldRsaAuthRetry=&fldRsaAuthTxnId=" + text26 + "&fldRsaAuthAction=OTPRELAY&fldOOBPhoneToken=&fldOOBPhoneRequest=&fldRsaQAAuthAvailable=N&fldRsaOOBPhoneAvailable=N&fldRsaOTPAvailable=Y&fldRsaSessionId=&fldOOBPhoneCountry=&fldOOBPhoneArea=&fldOOBPhoneNumber=&fldOOBPhoneExtn=&fldOOBPhoneLabel=&fldOOBPhoneCountryList=&fldOOBPhoneAreaList=&fldOOBPhoneNumberList=&fldOOBPhoneExtnList=&fldOOBPhoneLabelList=&fldUserRefNo=&fldDateTime=&fldOrgTxnId=&enstageid=&fldOtpTypeInp=&OTPTestValue=&fld_digital=&fldMsgSentMode=M&fldMobile=on&fldPassword=&fldOrgTxnId=CPQ&fldTxnLimitFlag=N&fldLoginUserGroupBaseType=" + method_139("fldLoginUserGroupBaseType", string_91) + "&fldClientSessionId=&" + text25;
                Status = "Twelth Hit : Inp = " + text7;
                if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                {
                    Status = "Twelth Hit Failed. err = " + string_90;
                    string_87 = "Failed while Processing 12.";
                    return false;
                }
                Status = "Twelth Hit Output = " + string_91;
                if (!string_91.Contains("Please input the One Time Password"))
                {
                    string_87 = "Failed while Processing 12.";
                    Status = "Twelth Hit Failed, Not valid HTML err = " + string_87;
                    return false;
                }
                string text27 = ((!bool_18) ? Interaction.InputBox("Enter Final OTP Received on your Mobile for ByPass.", "Enter OTP", "", 100, 100) : Interaction.InputBox("Enter Final OTP Received on your Mobile for ByPass.", "Enter HDFC OTP"));
                if (text27.Length >= 4)
                {
                    startIndex2 = string_91.IndexOf("l_rsaTxnId");
                    startIndex2 = string_91.IndexOf("\"", startIndex2) + 1;
                    length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                    text26 = string_91.Substring(startIndex2, length2).Trim();
                    startIndex2 = string_91.IndexOf("name=\"fldRsaOTPAvailable");
                    startIndex2 = string_91.IndexOf("lue=\"", startIndex2) + 5;
                    length2 = string_91.IndexOf("\"", startIndex2) - startIndex2;
                    string text28 = string_91.Substring(startIndex2, length2).Trim();
                    text7 = "fldAppId=RS&fldTxnId=CPQ&fldScrnSeqNbr=04&fldSessionId=" + text9 + "&fldRequestId=" + method_139("fldRequestId", string_91) + "&fldPinRequired=Y&fldPin=Y&fldPinSequence=3&fldRsaAuthRetry=&fldRsaAuthTxnId=" + text26 + "&fldRsaAuthAction=OTP&fldOOBPhoneToken=&fldOOBPhoneRequest=&fldRsaQAAuthAvailable=N&fldRsaOOBPhoneAvailable=N&fldRsaOTPAvailable=Y&fldRsaSessionId=" + text28 + "&fldOOBPhoneCountry=&fldOOBPhoneArea=&fldOOBPhoneNumber=&fldOOBPhoneExtn=&fldOOBPhoneLabel=&fldOOBPhoneCountryList=&fldOOBPhoneAreaList=&fldOOBPhoneNumberList=&fldOOBPhoneExtnList=&fldOOBPhoneLabelList=&fldUserRefNo=&fldDateTime=&fldOrgTxnId=&enstageid=&fldOtpTypeInp=&OTPTestValue=&fld_digital=&fldOtpToken=" + text27 + "&fldDCPin=" + text4 + "&fldQuestionTextList19=&fldQuestionTextList18=&fldQuestionTextList17=&fldQuestionTextList16=&fldQuestionTextList15=&fldQuestionTextList14=&fldQuestionTextList13=&OTPTestValue=&fldQuestionTextList12=&fldQuestionCnt=&" + text25;
                    Status = "Thirteen Hit : Inp = " + text7;
                    if (!method_85(text6, text7, string_88, webProxy_3, ref cookieContainer_, bool_63: false, bool_64: true, num, num, ref string_91, ref string_90, ref Exception_))
                    {
                        Status = "Thirteen Hit Failed. err = " + string_90;
                        string_87 = "Failed while Processing 13.";
                        return false;
                    }
                    Status = "Thirteen Hit Output = " + string_91;
                    if (!string_91.Contains("You have successfully changed your profile for Secure Access"))
                    {
                        string_87 = "Failed while Processing 14.";
                        Status = "Thirteen Hit Failed, Not valid HTML err = " + string_87;
                        return false;
                    }
                    string text29 = "";
                    int num4 = 0;
                    foreach (string item in list)
                    {
                        if (num4 != 0)
                        {
                            text29 += "&&";
                        }
                        num4++;
                        string[] array4 = item.Split('|');
                        string text30 = array4[2];
                        string text31 = array4[3];
                        text29 = text29 + text30 + "=" + text31;
                    }
                    string_87 = text29;
                    MessageBox.Show("Your OTP Bypassed Successfully! Please use HDFC after 15 minutes.\r\n\r\nAapka OTP bypass ho gaya he par kam se kam 15 minutes ke baad HDFC use kijiye.");
                    return true;
                }
            }
            else if (string_91.Contains("Account locked for user."))
            {
                string_87 = "Account locked for user.";
            }
            else
            {
                string_87 = "There is issue with your HDFC User ID";
            }
        }
        catch (Exception ex)
        {
            method_74("ProcessHDFCOTP", ex.Message);
            result = false;
        }
        return result;
    }

    internal string GetData(string str)
    {
        try
        {
            if (!Directory.Exists("IRLOG"))
            {
                Directory.CreateDirectory("IRLOG");
            }
            BhimUser.VERSION_NETWORK_FLOW = "2.2";
            string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            folderPath = Path.Combine(folderPath, "Google\\Chrome\\User Data");
            //if (!Directory.Exists(folderPath))
            //{
            //	MessageBox.Show("Please Install Google Chrome First");
            //	Chrome_Found = false;
            //}
            if (str.Contains("GetSMS"))
            {
                string[] array = str.Split(new string[1] { "|" }, StringSplitOptions.None);
                return GetSMS(array[1]);
            }
            if (str == "appbank")
            {
                return "SBI||HDFC||PAYTM";
            }
            //if (str.Contains("Close ChromeDriver"))
            //{
            //	class4_0.method_9(0);
            //}
            if (str.Contains("check_reCaptcha"))
            {
                return "Success";
            }
            if (str.Contains("test"))
            {
                return "Success";
            }
            if (str.Contains("activate_reCaptcha"))
            {
                return "Success";
            }
            if (str.Contains("PAYTMBYPASS||"))
            {
                if (str.Split(new string[1] { "||" }, StringSplitOptions.RemoveEmptyEntries).Length != 3)
                {
                    return "";
                }
                return new Class31().method_0(str);
            }
            if (str.Contains("ICICI||"))
            {
                string[] array2 = str.Split(new string[1] { "||" }, StringSplitOptions.RemoveEmptyEntries);
                if (array2.Length != 4)
                {
                    return "";
                }
                string string_ = array2[2];
                string string_2 = array2[1];
                string string_3 = array2[3];
                return Class12.smethod_5(string_2, string_, string_3);
            }
            if (str.Contains("MobiKwik||"))
            {
                if (str.Split(new string[1] { "||" }, StringSplitOptions.RemoveEmptyEntries).Length != 3)
                {
                    return "";
                }
                string result = "";
                method_70(str);
                return result;
            }
            if (str.Contains("HDFC||"))
            {
                if (str.Split(new string[1] { "||" }, StringSplitOptions.RemoveEmptyEntries).Length != 6)
                {
                    return "";
                }
                str = str.Substring(6);
                string string_4 = "";
                if (!HdfcByPass(str, ref string_4))
                {
                    MessageBox.Show("Error: " + string_4 + "\r\n\r\nTry again after some minutes", "Failed", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return "";
                }
                return string_4;
            }
            if (!str.Contains("TIME||"))
            {
                if (str.Contains("YES||"))
                {
                    return method_13(str);
                }
                if (str.Contains("COPYFILE"))
                {
                    try
                    {
                        string text = string_31 + "Iclgs_" + DateTime.Now.ToString("ddMMyyyy") + ".lg";
                        string destFileName = text.Replace(".lg", ".lgg");
                        streamWriter_0.Close();
                        File.Copy(text, destFileName);
                        streamWriter_0 = new StreamWriter(text, true);
                        return "";
                    }
                    catch
                    {
                    }
                }
                else
                {
                    str.Contains("SBIIP");
                }
                if (dictionary_5.ContainsKey(str))
                {
                    return dictionary_5[str];
                }
                return "";
            }
            string_49 = str.Split(new string[1] { "||" }, StringSplitOptions.RemoveEmptyEntries)[1].ToString();
        }
        catch (Exception)
        {
        }
        return "";
    }

    private string GetSMS(string str)
    {
        CookieContainer cookieContainer = new CookieContainer();
        string result = "";
        try
        {
            mac = Environment.GetEnvironmentVariable("mac", EnvironmentVariableTarget.Process);
            clientID = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
            string text = "{\"androidId\":\"" + str + "\",\"user\":\"" + clientID + "\",\"mac\":\"" + mac + "\"}";
            HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create("http://nexus-app.net/apaaa/nexus/GetSMS");
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
            httpWebRequest.ContentType = "application/json";
            httpWebRequest.Method = "POST";
            using (StreamWriter streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
            {
                string value = text;
                streamWriter.Write(value);
            }
            using (StreamReader streamReader = new StreamReader(((HttpWebResponse)httpWebRequest.GetResponse()).GetResponseStream()))
            {
                string text2 = streamReader.ReadToEnd();
                if (text2.Length > 20)
                {
                    text2 = text2.Replace("\"", "");
                    result = text2;
                }
            }
        }
        catch (WebException)
        {
        }
        return result;
    }

    private string method_13(string string_86)
    {
        string[] array = string_86.Split(new string[1] { "||" }, StringSplitOptions.RemoveEmptyEntries);
        if (array.Length != 2)
        {
            string string_87 = array[3];
            string_87 = Class12.smethod_26(string_87);
            string string_88 = array[4];
            string string_89 = array[5];
            return Class12.smethod_4(string_88, string_89, string_87);
        }
        string path = array[1];
        byte[] array2 = File.ReadAllBytes(path);
        File.Delete(path);
        int num = 0;
        for (int i = 0; i < array2.Length; i++)
        {
            if (array2[i] == 0)
            {
                num = 0;
                continue;
            }
            byte[] array3 = array2;
            int num2 = i;
            int num3 = num2;
            int num4 = num3;
            byte[] array4 = array3;
            int num5 = num4;
            array4[num5] ^= (byte)(num + 2);
            num++;
        }
        string @string = Encoding.Default.GetString(array2, 0, 20);
        string string2 = Encoding.Default.GetString(array2, 21, 6);
        string string3 = Encoding.Default.GetString(array2, 28, array2.Length - 28);
        string text = Class12.smethod_4(string2, string3, @string);
        @string = Class12.smethod_25(@string);
        if (MessageBox.Show("Your generated first OTP was: " + text + "\r\n\r\nIf this is correct Click Yes", "First OTP", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
        {
            return @string + "||" + string2;
        }
        return "";
    }

    private string method_14()
    {
        DateTime utcNow = DateTime.UtcNow;
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        return ((long)(utcNow - dateTime).TotalMilliseconds).ToString();
    }

    public void method_CheckForAdvance()
    {
        class3_0.bool_SL_TQ = false;
        class3_0.bool_AC_TQ = false;
        class3_0.bool_opening = false;
        if ((class3_0.TKT_CLASS == "SL" || class3_0.TKT_CLASS == "2S") & (class3_0.TKT_QUOTA == "TQ" || class3_0.TKT_QUOTA == "PT"))
        {
            class3_0.bool_SL_TQ = true;
        }
        else if ((class3_0.TKT_CLASS == "1A" || class3_0.TKT_CLASS == "EC" || class3_0.TKT_CLASS == "2A" || class3_0.TKT_CLASS == "3A" || class3_0.TKT_CLASS == "3E" || class3_0.TKT_CLASS == "CC") & (class3_0.TKT_QUOTA == "TQ" || class3_0.TKT_QUOTA == "PT"))
        {
            class3_0.bool_AC_TQ = true;
        }
        else
        {
            class3_0.bool_opening = true;
        }
        class3_0.TKT_ISADV = false;
        class3_0.int_3 = Convert.ToInt32(DateAndTime.DateDiff(DateInterval.Day, DateAndTime.Now.Date, class3_0.dateTime_0)) - Convert.ToInt32(class3_0.string_11);
        if (class3_0.bool_SL_TQ)
        {
            if (class3_0.int_3 == 0 && DateAndTime.Now.Hour == 10 && DateAndTime.Now.Minute >= 30)
            {
                class3_0.TKT_ISADV = true;
            }
            if (class3_0.int_3 == 1 && DateAndTime.Now.Hour == 10 && DateAndTime.Now.Minute >= 30)
            {
                class3_0.TKT_ISADV = true;
            }
        }
        if (class3_0.bool_AC_TQ)
        {
            if (class3_0.int_3 == 0 && DateAndTime.Now.Hour == 9 && DateAndTime.Now.Minute >= 30)
            {
                class3_0.TKT_ISADV = true;
            }
            if (class3_0.int_3 == 1 && DateAndTime.Now.Hour == 9 && DateAndTime.Now.Minute >= 30)
            {
                class3_0.TKT_ISADV = true;
            }
        }
        else if (class3_0.int_3 > 118 && DateAndTime.Now.Hour == 7 && DateAndTime.Now.Minute >= 30)
        {
            class3_0.TKT_ISADV = true;
        }
        else if (class3_0.int_3 == 30 && DateAndTime.Now.Hour == 7 && DateAndTime.Now.Minute >= 30)
        {
            class3_0.TKT_ISADV = true;
        }
        else if (DateTime.Now.Hour == 7 && DateTime.Now.Minute >= 30 && MessageBox.Show("Kya Ye Speical Train Ka Ticket h? If it is then Click YES.\r\n\r\nKya ye Speical Train ki Ticket he? agar haan to YES Click karen.", "Opening Ticket", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
        {
            class3_0.TKT_ISADV = true;
            class3_0.bool_1 = true;
        }
    }

    private void StartUPI_(object object_18)
    {
        string text = object_18.ToString();
        if (text != "")
        {
            text.Split(new string[1] { "||" }, StringSplitOptions.None);
        }
        if (bool_47)
        {
            return;
        }
        try
        {
            bool_47 = true;
            if (class3_0.TKT_ISADV)
            {
                while (DateTime.Now.Minute <= 54)
                {
                    string s = RandomString(4);
                    int millisecondsTimeout = int.Parse(s);
                    Application.DoEvents();
                    Thread.Sleep(millisecondsTimeout);
                }
            }
            string text2 = Strings.Replace(string_44, " ", "^#^") + " ";
            Program.Main(new string[2] { text2, text });
        }
        catch (Exception)
        {
        }
        bool_47 = false;
    }

    private void method_20(string string_86)
    {
        try
        {
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.UseShellExecute = false;
            processStartInfo.WorkingDirectory = "C:\\Windows\\System32";
            processStartInfo.CreateNoWindow = true;
            processStartInfo.FileName = "C:\\Windows\\System32\\cmd.exe";
            processStartInfo.Verb = "runas";
            processStartInfo.Arguments = "/C date " + string_86;
            try
            {
                Process.Start(processStartInfo);
            }
            catch
            {
                MessageBox.Show("Error to change time of your system");
                Application.ExitThread();
            }
        }
        catch
        {
            MessageBox.Show("Error to change time of your system");
            Application.ExitThread();
        }
    }

    private void method_21(string string_86)
    {
        try
        {
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.UseShellExecute = false;
            processStartInfo.WorkingDirectory = "C:\\Windows\\System32";
            processStartInfo.CreateNoWindow = true;
            processStartInfo.FileName = "C:\\Windows\\System32\\cmd.exe";
            processStartInfo.Verb = "runas";
            processStartInfo.Arguments = "/C time " + string_86;
            try
            {
                Process.Start(processStartInfo);
            }
            catch
            {
                MessageBox.Show("Error to change time of your system");
                Application.ExitThread();
            }
        }
        catch
        {
            MessageBox.Show("Error to change time of your system");
            Application.ExitThread();
        }
    }

    private Image method_23(string string_86)
    {
        byte[] array = Convert.FromBase64String(string_86);
        using (MemoryStream stream = new MemoryStream(array, 0, array.Length))
        {
            return Image.FromStream(stream, true);
        }
    }

    internal bool PerformB(Control control_2, Rectangle rectangle_1, string TktName, string string_87, string string_88, string tCntrlName, ref string string_90, bool bool_63, bool bool_64, bool bool_65, int int_Slot, UpdateTStatus updTStatus, string string_91)
    {
        SpeedUP = Convert.ToBoolean(Environment.GetEnvironmentVariable("SpeedUP", EnvironmentVariableTarget.Process));
        string_72 = Environment.GetEnvironmentVariable("Userid", EnvironmentVariableTarget.Process);
        string[] array = Strings.Split(string_91, "!");
        string text = AppDomain.CurrentDomain.FriendlyName.ToLower();
        if (text != "gadar.exe")
        {
            ExitProcess(0u);
        }
        string_91 = array[0];
        if (array.Length > 1)
        {
            isAPP = Convert.ToBoolean(array[1]);
        }
        //string[] array2 = string_91.Split(new string[1] { "#" }, StringSplitOptions.None);
        isbot = Convert.ToBoolean(array[2]);
        isserver = Convert.ToBoolean(array[3]);
        failissuefix = Convert.ToBoolean(array[4]);
        webadvlogin = Convert.ToBoolean(array[5]);
        vpnip = array[6];
        vpn = Convert.ToBoolean(array[7]);
        bkgnt = Convert.ToBoolean(array[8]);
        autorelogin = Convert.ToBoolean(array[9]);
        webProxy_0 = new WebProxy();

        string text2 = Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Microsoft"), "Mvog");
        if (!Directory.Exists(text2))
        {
            Directory.CreateDirectory(text2);
        }
        string_43 = Path.Combine(text2, "Lamony_jx.lgn");

        if (isbot)
        {
            bool dishalogin = false;
            DialogResult dialogResult1 = MessageBox.Show("Kya ye login ap Disha Login karna chahte hai?? No karne par Super login hoga..", "Disha Login", MessageBoxButtons.YesNo);
            if (dialogResult1 == DialogResult.Yes)
            {
                dishalogin = true;
            }
            else if (dialogResult1 == DialogResult.No)
            {
                dishalogin = false;
            }
            if (dishalogin)
            {
                return IRCTC_Disha(control_2, rectangle_1, TktName, string_87, string_88, tCntrlName, ref string_90, bool_63, bool_64, bool_65, int_Slot, updTStatus, string_91);

            }
            return IRCTC_Nex(control_2, rectangle_1, TktName, string_87, string_88, tCntrlName, ref string_90, bool_63, bool_64, bool_65, int_Slot, updTStatus, string_91);

        }
        else if (isserver)
        {
            //bool dishalogin = false;
            //DialogResult dialogResult1 = MessageBox.Show("Kya ye login ap Disha Login karna chahte hai?? No karne par App2 login hoga..", "Disha Login", MessageBoxButtons.YesNo);
            //if (dialogResult1 == DialogResult.Yes)
            //{
            //    dishalogin = true;
            //}
            //else if (dialogResult1 == DialogResult.No)
            //{
            //    dishalogin = false;
            //}
            //if (dishalogin)
            //{
            //    return IRCTC_Disha(control_2, rectangle_1, TktName, string_87, string_88, tCntrlName, ref string_90, bool_63, bool_64, bool_65, int_Slot, updTStatus, string_91);

            //}
            return IRCTC_Server2(control_2, rectangle_1, TktName, string_87, string_88, tCntrlName, ref string_90, bool_63, bool_64, bool_65, int_Slot, updTStatus, string_91);

        }
        else
        {
            return IRCTC_(control_2, rectangle_1, TktName, string_87, string_88, tCntrlName, ref string_90, bool_63, bool_64, bool_65, int_Slot, updTStatus, string_91);

        }

    }

    private bool IRCTC_No(Control control_2, Rectangle rectangle_1, string TktName, string string_87, string string_88, string tCntrlName, ref string string_90, bool bool_63, bool bool_64, bool bool_65, int int_Slot, UpdateTStatus updTStatus, string string_91)
    {
        
        
        string nsdlotpm = "";
        //useragenttrue = false;
        string balanceee = "";
        int ewalletamount = 0;
        int ewalletbalance = 0;
        string ewalletamounts = "";
        //bool failissuefix = true;
        bool pinelab = webadvlogin;
        bool asyncon = true;
        bool qrpayment = false;
        string encairf = "";
        string PNRTIME = "";
        bool fastavl = false;
        string[] array202 = validationstart.Split(new string[1] { "#" }, StringSplitOptions.None);
        ocrlink = array202[0];
        bool akamaiok = Convert.ToBoolean(array202[1]);
        isReal = Convert.ToBoolean(array202[2]);
        fastavl = Convert.ToBoolean(array202[3]);
        //failissuefix = Convert.ToBoolean(array202[4]);
        phonepeid = array202[5];
        PAYZAPDCID = array202[6];
        pinelab = webadvlogin;
        asyncon = Convert.ToBoolean(array202[8]);
        paxminus = Convert.ToBoolean(array202[9]);
        int nopax = int.Parse(array202[10]);
        bool test1day = Convert.ToBoolean(array202[11]);
        bool cloudfront = Convert.ToBoolean(array202[13]);
        bool result = false;
        isPremium_p = false;
        TktName_ = TktName;
        dictionary_header = new Dictionary<string, string>();
        updateTStatus_0 = updTStatus;
        string text = "";
        string text2 = "";
        string text3 = "";
        string key = "";
        control_0 = control_2;
        Control control = control_2.Controls[0];
        control_1 = control_2.Controls[0];
        rectangle_0 = rectangle_1;
        string[] array = new string[1];
        bool flag = false;
        string[] array2 = string_88.Split(new string[1] { "||" }, StringSplitOptions.None);
        string text4 = "";
        double num = 0.0;
        bool flag2 = false;
        new List<Class27>();
        bool flag3 = false;
        minmPsgnInputTime2 = 20000.0;
        minmPsgnInputTime4 = 25000.0;
        minmPsgnInputTime6 = 30000.0;
        minmPaymentTime = 21060.0;
        string[] array3 = string_90.Split(new string[1] { "-.-" }, StringSplitOptions.RemoveEmptyEntries);
        string_90 = "";
        string[] array4 = array3[1].Split(new string[1] { "-+-" }, StringSplitOptions.RemoveEmptyEntries);
        if (!string.IsNullOrEmpty(string_87))
        {
            array = string_87.Split(new string[1] { "||" }, StringSplitOptions.None);
            if (array.Length > 2)
            {
                if (string_56.Length < 1)
                {
                    string_56 = array[2];
                }
                int.TryParse(array[3], out int_3);
                if (int_3 < 2)
                {
                    int_3 = 2;
                }
                int_3 *= 2;
                NetworkInterface_(array[4]);
            }
        }
        class3_0 = new clsPostData();
        class3_0.LoginType = "APP";//(isAPP ? "APP" : "WEB");
        isAPP = true;
        //class3_0.LoginType = (isAPP ? "APP" : "WEB");
        //LoginType = class3_0.LoginType;
        
        //string nsdl = class3_0.Method_SerialInp(string_977, ref url, false);

        if (!class3_0.ReadDataFromDB(TktName))
        {
            updTStatus?.BeginInvoke(53, "Error Occured while Reading Saved Ticket! ", tCntrlName, null, null);
            return result;
        }
        try
        {
            Chrome_CloseSetup();
            updTStatus?.BeginInvoke(53, "Closing CHrome... ", tCntrlName, null, null);

        }
        catch
        {

        }
        //try
        //{
        //    deleteallotp();
        //}
        //catch
        //{

        //}
        try
        {
            string pathff = Path.Combine(Environment.SystemDirectory, "drivers\\etc\\hosts");
            if (File.Exists(pathff))
            {
                File.Delete(pathff);
            }
        }
        catch
        {
        }
        method_CheckForAdvance();
        if (class3_0.dateTime_1 < new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day))
        {
            updTStatus?.BeginInvoke(53, "Date of Journey cannot less than Today!", tCntrlName, null, null);
            return result;
        }
        string text5 = smethod_10(class3_0.BANKSAVEAS);
        class3_0.IRCTC_ID = array2[0];
        class3_0.IRCTC_PWD = array2[1];
        if (array2.Length >= 3 && array2[2] != null)
        {
            if (array2[2] != class3_0.TKT_QUOTA)
            {
                class3_0.TKT_QUOTA = array2[2];
            }
            if (array2[3] != class3_0.TKT_CLASS)
            {
                class3_0.TKT_CLASS = array2[3];
            }
            if (array2.Length > 4 && array2[4] != null && !string.IsNullOrEmpty(array2[4]))
            {
                class3_0.SRC_STN = array2[4];
                class3_0.DEST_STN = array2[5];
                class3_0.TRAIN_NO = array2[6];
            }
        }
        class3_0.string_3 = class3_0.method_2(class3_0.IRCTC_ID);
        clsPostData clsPostData2 = class3_0;
        clsPostData2.BANKSAVEAS = ((ComboBox)control.Controls["cboGateway"]).SelectedItem.ToString();
        clsPostData2.BANKDETAILS = clsPostData2.dictionary_BnkData[clsPostData2.BANKSAVEAS];
        webProxy_2 = null;
        try
        {
            string[] array5 = class3_0.BANKSAVEAS.Split(new string[1] { "_" }, StringSplitOptions.None);
            if (array5[0] == "E-WALLET")
            {
                class3_0.EWALLET = array5[1];
            }
            if (array5[0] == "EAZEBUZQR" | array5[0] == "AIRPAYQR")
            {
                DialogResult dialogResult1 = MessageBox.Show("Kya aap Ye ticket ka payment QR code scan karke karna chahte hai agr haa to ok karna warna No par click kare jisse apko mobilse payment krna hoga", "QR PAYMENT CONFIRMATION", MessageBoxButtons.YesNo);
                if (dialogResult1 == DialogResult.Yes)
                {
                    qrpayment = true;
                }
                else if (dialogResult1 == DialogResult.No)
                {
                    qrpayment = false;
                }
            }

            if (array5[0] == "MOBIKWIK")
            {
                frmOTP frmOTP2 = new frmOTP();
                frmOTP2.method_1(control_0, rectangle_0, bool_2: false, "Enter Otp Mobikwik", class3_0.BANKSAVEAS);
                if (frmOTP2.DialogResult != DialogResult.OK)
                {
                    updTStatus.BeginInvoke(2, "Otp Not Entered", tCntrlName, null, null);
                    return false;
                }
                class3_0.airtelotp = frmOTP2.string_0.Trim();
                frmOTP2.Dispose();
            }
            if ((array5[0] == "AIRTELMONEY") | (array5[0] == "iMudra"))
            {
                string[] array6 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                if (array5[0] == "iMudra")
                {
                    string value = "0";
                    if (!dictionary_8.ContainsKey(class3_0.BANKSAVEAS))
                    {
                        dictionary_8.Add(class3_0.BANKSAVEAS, value);
                        frmOTP frmOTP2 = new frmOTP();
                        frmOTP2.method_1(control_0, rectangle_0, bool_2: false, "iMudra", class3_0.BANKSAVEAS);
                        if (frmOTP2.DialogResult != DialogResult.OK)
                        {
                            updTStatus.BeginInvoke(2, "iMudra OTP Not Found", tCntrlName, null, null);
                            return false;
                        }
                        value = frmOTP2.string_0;
                        dictionary_8.Remove(class3_0.BANKSAVEAS);
                        dictionary_8.Add(class3_0.BANKSAVEAS, value);
                        frmOTP2.Dispose();
                    }
                }
                long num2 = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
            }
            if (array3.Length > 5)
            {
                num = Conversion.Val(array3[5].Trim());
                if (num <= 0.0)
                {
                    num = 0.0;
                }
            }
            if (num <= 0.0 && dictionary_4.ContainsKey(TktName))
            {
                num = dictionary_4[TktName];
            }
        }
        catch
        {
        }
        string string_92 = "";
        string text6 = "\r\n\r\nTrainNo: " + class3_0.TRAIN_NO + " Form: " + class3_0.SRC_STN + " To: " + class3_0.DEST_STN + "\r\n\r\nNo. of Passengers: " + class3_0.list_0.Count + " Name of First Pax: " + class3_0.list_0[0].string_0;
        string environmentVariable = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
        text4 = "Pax: " + class3_0.list_0[0].string_0 + ((class3_0.list_0.Count > 1) ? (" and (" + (class3_0.list_0.Count - 1) + ") Others") : "");
        updateTStatus_1 = updTStatus;
        tCntrlName_ = tCntrlName;
        if (class3_0.method_0())
        {
            bool_ptSL = true;
        }
        Method_GetBookingHRS();
        if (!class3_0.TKT_ISADV & !class3_0.bool_1)
        {
            int_AvlHRS = 4;
            int_BookHRS = 5;
        }
        if (class3_0.BRD_STN.ToUpper() == class3_0.DEST_STN.ToUpper())
        {
            updTStatus?.BeginInvoke(2, "Invalid Boarding_Station!", tCntrlName, null, null);
            return result;
        }
        object obj2 = object_4;
        lock (obj2)
        {
            if (list_IrctcID.Contains(class3_0.IRCTC_ID))
            {
                updTStatus?.BeginInvoke(2, "Current IRCTC-ID Already Used, Change It.", tCntrlName, null, null);
                return result;
            }
            list_IrctcID.Add(class3_0.IRCTC_ID);
        }
        obj2 = object_6;
        lock (obj2)
        {
            if (dictionary_2.ContainsKey(TktName))
            {
                dictionary_2[TktName]++;
                int_Pair = dictionary_2[TktName];
            }
            else
            {
                dictionary_2.Add(TktName, 1);
                Interlocked.Increment(ref int_4);
                int_Pair = dictionary_2[TktName];
            }
        }
        dictionary_TimeP = new Dictionary<string, string>();
        if (class3_0.TKT_QUOTA.ToUpper() == "CK")
        {
            class3_0.TKT_QUOTA = "TQ";
        }
        if (int_Pair == 1 && class3_0.BANKSAVEAS.Split('_')[0].Contains("AIRTELMONEY") && !dictionary_7.ContainsKey(class3_0.BANKSAVEAS))
        {
            string environmentVariable2 = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
            if (dictionary_7.ContainsKey(class3_0.BANKSAVEAS))
            {
                dictionary_7.Remove(class3_0.BANKSAVEAS);
            }
            dictionary_7.Add(class3_0.BANKSAVEAS, environmentVariable2);
        }
        response = "";
        Exception_ = new WebException();
        try
        {
            Lock("Ticket " + TktName + " Started Pair " + int_Pair);
            bool flag4 = false;
            if ((class3_0.TKT_QUOTA == "CK" || class3_0.TKT_QUOTA == "PT" || class3_0.TKT_QUOTA == "TQ") && class3_0.dateTime_1 > DateTime.Now)
            {
                flag4 = true;
            }
            if (DateTime.Now.Hour != 9 || !bool_ptSL || !flag4 || MessageBox.Show("For Non-AC Classes, Tatkal will open at 11Am\r\n\r\nDo you want to Continue?", "Non AC", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) != DialogResult.No)
            {
                if (DateTime.Now.Hour == 7 && DateTime.Now.Minute >= 30 && !class3_0.bool_opening && !flag4 && (class3_0.dateTime_1 - DateTime.Now).TotalDays >= 10.0 && MessageBox.Show("Is it Opening Ticket? If it is then Click YES.\r\n\r\nKya ye Opening ki Ticket he? agar haan to YES Click karen.", "Opening Ticket", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    int_AvlHRS = 7;
                    int_BookHRS = 8;
                    class3_0.bool_opening = true;
                    class3_0.TKT_ISADV = true;
                }
                int second = 0;
                int minute = 53;
                if (class3_0.bool_opening && DateTime.Now.Hour > 7)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.bool_AC_TQ && DateTime.Now.Hour > 9)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.bool_SL_TQ && DateTime.Now.Hour > 10)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.TKT_ISADV)
                {
                    int num3 = (int)new TimeSpan(new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_AvlHRS, minute, second, 0).Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                    if (num3 > 0)
                    {
                        int num4 = 0;
                        Random random = new Random();
                        num4 = random.Next(10, 179000);
                        DateTime dateTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_AvlHRS, minute, second, 0);
                        dateTime = dateTime.AddMilliseconds(num4);
                        updTStatus.BeginInvoke(1, "Waiting till " + int_AvlHRS + ":" + dateTime.Minute.ToString("00") + ":" + dateTime.Second + " AM", tCntrlName, null, null);
                        Application.DoEvents();
                        num3 += num4;
                        if (num3 > 5)
                        {
                            Thread.Sleep(num3);
                        }
                    }
                }
                else if (int_Pair != 1)
                {
                    //useragenttrue = false;
                    //string pathhh = @"C:\Users\Administrator\Desktop";
                    //response = File.ReadAllText(pathhh);
                    //string[] arrayweb = response.Split(new string[1] { "\r\n" }, StringSplitOptions.None);

                    //weba = arrayweb[0].Trim();
                    //string[] arrayweba = weba.Split(new string[1] { ":" }, StringSplitOptions.None);
                    //weba = arrayweba[1].Trim();

                    //webb = arrayweb[1].Trim();
                    //string[] arraywebb = webb.Split(new string[1] { ":" }, StringSplitOptions.None);
                    //webb = arraywebb[1].Trim();

                    //webc = arrayweb[2].Trim();
                    //string[] arraywebc = webc.Split(new string[1] { ":" }, StringSplitOptions.None);
                    //webc = arraywebc[1].Trim();

                    //webd = arrayweb[3].Trim();
                    //string[] arraywebd = webd.Split(new string[1] { ":" }, StringSplitOptions.None);
                    //webd = arraywebd[1].Trim();

                    //webf = arrayweb[4].Trim();
                    //string[] arraywebf = webf.Split(new string[1] { ":" }, StringSplitOptions.None);
                    //webf = arraywebf[1].Trim();

                    //webz = arrayweb[5].Trim();
                    //string[] arraywebz = webz.Split(new string[1] { ":" }, StringSplitOptions.None);
                    //webz = arraywebz[1].Trim();
                }
                if (!isAPP)
                {
                    try
                    {
                        string cname = Environment.UserName;
                        useragenttrue = false;
                        string pathhh = @"C:\\Users\\" + cname + "\\Desktop\\pair.txt";
                        response = File.ReadAllText(pathhh);
                        string[] arrayweb = response.Split(new string[1] { "\r\n" }, StringSplitOptions.None);

                        weba = arrayweb[0].Trim();
                        string[] arrayweba = weba.Split(new string[1] { ":" }, StringSplitOptions.None);
                        weba = arrayweba[1].Trim();

                        webb = arrayweb[1].Trim();
                        string[] arraywebb = webb.Split(new string[1] { ":" }, StringSplitOptions.None);
                        webb = arraywebb[1].Trim();

                        webc = arrayweb[2].Trim();
                        string[] arraywebc = webc.Split(new string[1] { ":" }, StringSplitOptions.None);
                        webc = arraywebc[1].Trim();

                        webd = arrayweb[3].Trim();
                        string[] arraywebd = webd.Split(new string[1] { ":" }, StringSplitOptions.None);
                        webd = arraywebd[1].Trim();

                        webf = arrayweb[4].Trim();
                        string[] arraywebf = webf.Split(new string[1] { ":" }, StringSplitOptions.None);
                        webf = arraywebf[1].Trim();

                        webz = arrayweb[5].Trim();
                        string[] arraywebz = webz.Split(new string[1] { ":" }, StringSplitOptions.None);
                        webz = arraywebz[1].Trim();
                    }
                    catch
                    {
                        weba = "";
                        webb = "";
                        webc = "";
                        webd = "";
                        webf = "";
                        webz = "";
                    }
                }
                Lock("Ready Login=" + class3_0.IRCTC_ID);
                int hour = DateTime.Now.Hour;
                int minute2 = DateTime.Now.Minute;
                int second2 = DateTime.Now.Second;
                string[] array7 = string_91.Split(new string[1] { "#" }, StringSplitOptions.None);
                if (array7.Length > 1 && array7[1] != "" && array7[2] != "")
                {
                    AC_AvailibalityTime = int.Parse(array7[1]);
                    SL_AvailibalityTime = int.Parse(array7[2]);
                }
                string text7 = array7[0];
                if (!string.IsNullOrEmpty(text7) && int_Slot > 2)
                {
                    try
                    {
                        string[] array8 = text7.Split(new string[1] { "||" }, StringSplitOptions.None);
                        if (array8.Length > 3)
                        {
                            Proxy_ = new WebProxy(array8[0].Trim(), int.Parse(array8[1].Trim()));
                            Proxy_.BypassProxyOnLocal = true;
                            Proxy_.Credentials = new NetworkCredential(array8[2].Trim(), array8[3].Trim());
                            Lock("\n\n\nProxy=" + array8[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        method_74("Creating Proxy", ex.Message);
                        updTStatus?.BeginInvoke(2, "IP Issue, Try Another slot!", tCntrlName, null, null);
                        return false;
                    }
                }
                if (vpn)
                {
                    try
                    {
                        string[] array8P = vpnip.Split(new string[1] { ":" }, StringSplitOptions.None);
                        if (array8P.Length > 3)
                        {
                            Proxy_ = new WebProxy(array8P[0].Trim(), int.Parse(array8P[1].Trim()));
                            Proxy_.BypassProxyOnLocal = true;
                            Proxy_.Credentials = new NetworkCredential(array8P[2].Trim(), array8P[3].Trim());
                            Lock("\n\n\nProxy=" + array8P[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        method_74("Creating Proxy", ex.Message);
                        updTStatus?.BeginInvoke(2, "IP Issue, Try Another slot!", tCntrlName, null, null);
                        return false;
                    }
                }
                string text8 = "Booking Faield Check History";
                int num5 = 0;
                bool flag5 = isAPP;
                int num6 = 0;
                bool flag6 = true;
                while (true)
                {
                    if (num < 0.0)
                    {
                        num = 0.0;
                    }
                    if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                    {
                        Thread thread = new Thread(StartUPI_);
                        thread.IsBackground = true;
                        thread.Start(class3_0.BANKDETAILS + "||True||5||0000000000");
                    }
                ilstarting:
                    bool avlactive = true;
                    staticWEB = false;
                    //while (avlactive)
                    //{
                    //    Application.DoEvents();
                    //    Thread.Sleep(300);
                    //}
                    string text9 = "";
                    sensor_data = "0";
                    bool flag7 = true;
                    SensorDataSend = false;
                    string string_93 = "";
                    string text10 = "";
                    string string_94 = "";
                    webProxy_3 = null;
                    postdata = null;
                    Reffral = "https://www.irctc.co.in";
                    response = "";
                    errormsg = "";
                    Exception_ = null;
                    int_TimeDiff = 0;
                    bool_22 = true;
                    class3_0._greq = "";
                    class3_0._Authorization = "";
                    int num7 = 0;
                    bool flag8 = true;
                    randomGeneratedKey = jwtutils.getRandomAppCngKey();
                    keyFromServer = "";
                    greq = "";
                    _Authrization = "";
                    access_token = "";
                    jwtToken = "";
                    bool_48 = true;
                    cookie_ = null;
                    mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                    cookie_ = new CookieContainer();
                    cookie_bkp = null;
                    cookie_bkp = new CookieContainer();
                    object_7 = new object();
                    if (!isReal & class3_0.TKT_ISADV)
                    {
                        isReal = true;
                        ThreadPool.QueueUserWorkItem(AuthSik);
                    }
                    lock (object_5)
                    {
                        if (!isAPP)
                        {
                            
                            if ( pinelab)
                            {
                                Chrome_CloseSetup();
                                Thread.Sleep(2000);
                                getandclear();
                                updTStatus?.BeginInvoke(1, "Complete a small step", tCntrlName, null, null);
                                IRComm.doesSurf = false;
                                bool flag100 = true;
                                string step1 = "Abhi ek irctc ki chrome window hogi apko window puri tarah load ho jane par sirf right click karke I M Not Robot par click karna hai aur window login ho jayega...";
                                MessageBox.Show(step1, "Step Guide....", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                BmskCookieOffline_(flag100);
                                cookie_ = cookieBmsk_0;
                                Chrome_CloseSetup();
                            }
                        }
                        else if (akamaiok)
                        {
                            updTStatus?.BeginInvoke(1, "App Login Start..", tCntrlName, null, null);
                            string[] array9 = string_91.Split(new string[1] { "#" }, StringSplitOptions.None);
                            s_Data_Private = array9[3];
                            s_Data_Private = DecryptDataWithAes(s_Data_Private, "b14ca5898a4e4133bbce2ea2315a1917");
                            if (s_Data_Private.Length <= 3)
                            {
                                s_Data_Private = method_token();
                            }
                        }

                    }
                    if (isAPP)
                    {
                        if (!dictionary_PaxStart.ContainsKey(TktName_ + "_APP"))
                        {
                            dictionary_PaxStart.Add(TktName_ + "_APP", 0);
                        }
                    }
                    else if (!dictionary_PaxStart.ContainsKey(TktName_ + "_WEB"))
                    {
                        dictionary_PaxStart.Add(TktName_ + "_WEB", 0);
                    }
                    num7++;
                    DateTime dateTime2 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                    long num9 = (long)(DateTime.UtcNow - dateTime2).TotalMilliseconds;
                    class3_0._greq = num9.ToString();
                    greq = jwtutils.GetHash(ref mup);
                    if (isAPP)
                    {
                        class3_0._greq = HighQualityRandomString();
                        greq = HighQualityRandomString();
                    }
                    mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                    class3_0.token = null;
                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();
                    Status = "Login";
                    Request_Type = "Base";
                    if (isAPP)
                    {
                        //updTStatus?.BeginInvoke(1, "Finding Fast Server plz wait..", tCntrlName, null, null);
                        url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/appVersion/ANDROID/4.2.8";
                        ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Base");
                    }
                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/loginCaptcha?nlpCaptchaException=true";
                    
                    updTStatus?.BeginInvoke(1, "Loading Login Captcha...", tCntrlName, null, null);
                    Lock("First Hit Irctc: In = " + url);
                    bool flag10 = _httpRequest(url, postdata, Reffral, "Plain1Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                    Lock("First Hit Irctc: Out = " + response);
                    dateTime_2 = DateTime.Now;
                    if (response.IndexOf("Unable to process") >= 0)//|| (response.Contains("retry") & !response.Contains("captchaQuestion"))
                    {
                        goto ilstarting;
                    }
                    if (response.Contains("retry") & !response.Contains("captchaQuestion"))
                    {
                        goto ilstarting;
                    }
                    if (!string.IsNullOrEmpty(response))
                    {
                        try
                        {
                            if (response.Contains("serverId"))
                            {
                                class3_0.serverid = GetString(response, "serverId");
                                class3_0.serverid = class3_0.serverid.Substring(0, 7);
                                if (!class3_0.serverid.Contains("DM03AP") && (!class3_0.serverid.Contains("DM06AP") && (!class3_0.serverid.Contains("DM02AP")) & DateTime.Now.Minute < 56 & class3_0.TKT_ISADV))
                                {
                                    goto ilstarting;
                                }
                            }
                        }
                        catch
                        {

                        }
                        


                        //if (!class3_0.serverid.Contains("DM03AP") && (!class3_0.serverid.Contains("DM09AP") && (!class3_0.serverid.Contains("DM02AP")) & DateTime.Now.Minute < 55 & class3_0.TKT_ISADV))
                        //{
                        //    goto ilstarting;
                        //}
                        string text11 = response.Substring(response.IndexOf("timeStamp") + 23);
                        text11 = text11.Substring(0, text11.IndexOf("\""));
                        DateTime dateTime3 = DateTime.Parse(text11);
                        if (dateTime3.Hour == int_BookHRS)
                        {
                            class3_0.TKT_ISADV = false;
                        }
                        int_TimeDiff = (int)new TimeSpan(dateTime3.Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                        int num10 = int_TimeDiff;
                        updTStatus.BeginInvoke(900, num10.ToString(), tCntrlName, null, null);
                        dictionary_TimeP["TimeDiff"] = int_TimeDiff.ToString();
                        if (!isAPP & (akamaiok))
                        {
                            Chrome_CloseSetup();
                            Thread.Sleep(2000);
                            getandclear();
                            updTStatus?.BeginInvoke(1, "Complete Step 1", tCntrlName, null, null);
                            IRComm.doesSurf = false;
                            bool flag100 = true;
                            string step1 = "Abhi ek chrome ka window hoga usme apko apne irctc id se login karna hai aur login sucessful hone ke baad , jab browser puri tarah load ho jaye to atleast 10 sec baad apko browser ke beech me kahi bhi right click karke I M Not Robot Par click karna hai.....Dhyan rahe kabhi kabhi step 1 do baar karna pad sakta hai";
                            MessageBox.Show(step1, "Step 1 Guide....", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            BmskCookieOffline_(flag100);
                            cookie_ = cookieBmsk_0;
                            Chrome_CloseSetup();
                        }
                        int num11 = 0;
                        string[] array9 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                        if ((text5 == "AIRTELMONEY") & !list_7.Contains(array9[0]) & class3_0.TKT_ISADV)
                        {
                            list_7.Add(array9[0]);
                            AirtelMoneyOTP(class3_0.BANKDETAILS);
                        }
                        if (response.Contains("status"))
                        {
                            class3_0._greq = GetString(response, "status");
                        }
                        if (response.IndexOf("captchaQuestion") > 0)
                        {
                            string text12 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                            //string_93 = "iVBORw0KGgoAAAANSUhEUgAAAMsAAAAyCAIAAAB9BLi1AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAdESURBVHhe7ZsJbBVVFIZJNCZihEQDEhIxAUQCIiFoChFlsRYhYFmCiKIgiy1lbYFWS2VLQGMFlYIVARWpmFAtASmyKGkFW9l8FGgroSBbFIkxRkQkCnrITQ6/p7O8ua/z5g3c5Atp7/+fO3cyP3PmDkOjm3sP0ObkmbOG6x5x0b1iEmZwQVx0r5iEGVwQF90rJmEGF8RF94pJmMEFcdG9cv0nzI8F+zFnwoInq4FJmA5+zJmw4MlqYBKmgx9zJix4shq4JEwcTCDMDojCeOLHMvyYM2HBk9XgRk+Ys2qHXlVIwZPVwCTMSbVDryqk4MlqENNzGBLjam7pM3BY3oLCkk2VVTVHjp8+fupHPsMYwaMIiXBW7dCrCil4sho0TMJiXEe7Z8eV7a3Cs0KEWagHvz488abGrWdkdUvu9ejjvTpn5mU2ab66+hgbHGoJZ9UOyyo6KB26y+xcWkmPWX2HvDBlSdfu//7xFxtCCp6sBjElrEHW0bTfULpv4VQC4WfuHPDUig2bxSCT2mr85QtXRDlOq3BW7RBVv509n3JHCxxkus5OXlN7HGtDhzgjrwSfsKlvFfIkFZHqnpOzb01OFZ76ULy2VuzlQoQ9bSfMpGvPvxLCSTirdmDVuV8uDnpxMo4I6JZWVb4Hy+lWxyrddysuV6Bqyc4rZeTkquwmzYTBP/igegSfsHXby3mSHhkzhGrHh5u2cRUxZ+Wa+59Pp4c5gn6Yt6pIjS9fX4pV7MdBZ7gEQQNdbPqzU8707e3a/37uMqlnT/259b7OHbJeYs+oMelYTrlH9YkWaahaMjxtLPs7Tp9DMwiDf/Bx9Qg+YbXHTvIklA+hWjIkdz6XHD1xpveUHGEgaJCexdimUBL/EA1YzgjPiEkZKltIdWXk4b592FO3vxrVL35oxxJB6URVsLh9FzSvP3BEGHwFD61B8AnDbaOQ7MBtwfjX3hYqQxLbFCxZDlqCTgYN1ATL/ikTBgVtQdg2rlsjoc5qfjer9Lh26eIlYVBQD6V9Azvj2R8VfGg9gk+Y10mS0qaxn57bHG57JIk9hDAQlioOWsJOIuP2xkJlSg4cZRttBYRK20wKFhsocMKg6N9yNHvi3B8VfHQ9AksY1jogqoicd1axmr1spVAFZGAzIVTCWVWgR4GqQ8+i1sm2LrNzhUrQ4xobiNK6e4VhbqeH0BDn/qjABWgQvoS9//lWVpOnvSxUQUrW/66rUAln1RLhVO9ELDn9089so52gUBWprcazR9yiAu+PCl6AHuFLWKS2jtVmA4cLVUAGNhNCJZxVO7CEf7aES+ipX0iKXee/wRhhz6U9Jo8H0h8VvAY9wvccRpvH6P30KMZmS7+zaodlFQ4yrNoZiEUPJKGtaO8hGlzYuiMO0iMdlsQTXIYG4UsYvoMQkiVstvQ7q3a4VlmqPFgffGfbJiNz99/78MaW2aS58McTXoYe5h7mpNoRfRUasEqw/1I5vjzDeAXYHxW8Ej3Cl7CEeg5zrRJO/FWw7MFHsJAJsD8qxHq8Er6EBb6XJKKvsnPiuII2niMmZaCHCLY/KsSSvBK+hOW++wH7Xd+H4cszQqiEs2pH9FXRONlQXRnB8aS83GD7owKXpEH4EtY9PZP9Pr3TdyX6quidxMRFy8TIgTLr70fiiViSV8KXMAL/XTLt9SVCZdLzC9imEAbCWbUj+qronW2eHoObGOVvO2Hmr6cv4GD8wUVqEMqE4bcVx056/rYC8fruQ8ElrlXROz/7aieamXmrikgVg/EEF6lBKBNGfLT5Syyky9DhuatvwKkz4vdhhSWb2EPgDIqaoydYvS1lsFDt4BJCSIIonWNffROdpTt3469JadPQjFIcwENrENaEOXzjyuzYHXF9W4FJ7T/zFaHawSWEkATROO8ZNgo/klu3vZz+nmyr3Mcj9LjZtN9QUaVgj3+II3olrAkjKGTL15diOULX6a7UEWTDQSxXZBW8x+quyCHqrQ5bB4ZLCCEJonGu3bKDPRQ1ChwN0p0Yv5xbuPoTLKkPOxsccSCvhDhhCtpaLvr4U/pbTteD+PZg7dLijY9NvfaezHn+loNH4v2jPsKvcDUwrs6R8/PRM3rBGyzNKFiBUs/J2Sw5g1WxIyb3SugTFjspWbn4NCYQ5oaF8o2HpvsuqqJXVlbV2PVKB7hcGzGhV0zCrtJi0DPp+QUrN2yJ1NbVf2XgH/j/Wbg/IqJX5hcVC4MneB5PiEm8ElPCGoQGPJlwMSxvAZ479kdE9Ep8AIgFnNMZUegVk7BgoF3IwSPX/qeu6I+I6JV7Dn9PWxzhiRGe3BJh9opJWDDgLtiyPyKiVy5eWyIMDQgfhREGr5iEBcCTOXPxrO36IyJ6petHJbHDxxLjXgk+YTcazQYO/67m2idfDv0Rqd8rXb+NSxBMwuLN0uKNHBTX/oiIXllQvEEYEhOTMIO/mIQZ/MUkzOAvJmEGfzEJM/iLSZjBX0zCDH7Se8B/mmpJ2wi4ZqQAAAAASUVORK5CYII=";
                            string_93 = text12.Substring(0, text12.IndexOf("\""));
                        }
                        frmCaptcha frmCaptcha2 = new frmCaptcha(this, cookie_, "", "");
                        frmCaptcha2.lblWrongCaptcha.Text = "Enter Captcha";
                        frmCaptcha2.dateTime_0 = dateTime_2;
                        frmCaptcha2.string_1 = string_93;
                        frmCaptcha2.bool_0 = flag;
                        frmCaptcha2.method_2(control_2, rectangle_1, string_93);
                        bool flag11 = frmCaptcha2.DialogResult != DialogResult.Cancel;
                        text10 = frmCaptcha2.txtImageData.Text.Trim();
                        frmCaptcha2.Dispose();
                        Lock("Captcha Solve: = ");
                        if (!flag11)
                        {
                            isLogin_Self = false;
                            isLogin = false;
                            updTStatus.BeginInvoke(2, "Captcha Cancell by User", tCntrlName, null, null);
                            return false;
                        }
                        url = "https://www.irctc.co.in/authprovider/webtoken";
                        postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + frmCaptcha.Base64Encode(class3_0.IRCTC_PWD) + "&captcha=" + text10 + "&uid=" + class3_0._greq + "&otpLogin=false&nlpIdentifier=&nlpAnswer=&nlpToken=&lso=&encodedPwd=true";
                        if (isAPP)
                        {
                            //postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + class3_0.IRCTC_PWD + "&captcha=" + text10 + "&uid=" + greq + "&otpLogin=false";
                            byte[] bytes = Encoding.UTF8.GetBytes(class3_0.IRCTC_ID + ":" + class3_0.IRCTC_PWD);
                            _Authrization = Convert.ToBase64String(bytes);
                            url = "https://www.irctc.co.in/authprovider/webmtoken";
                        }
                        updTStatus?.BeginInvoke(1, "Login To IRCTC", tCntrlName, null, null);
                        num6 = 0;
                        while (true)
                        {
                            Request_Type = "Login";
                            num11++;
                            SensorDataSend = akamaiok;//User is disabled
                            Status = "Login Confirm";
                            if (_httpRequest(url, postdata, Reffral, "Plain0Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 12000, 12000, ref response, ref errormsg, ref Exception_))
                            {
                                if (response.Contains("retry") & !response.Contains("SUCESS"))
                                {
                                    goto ilstarting;
                                }
                                if (response.Contains("SUCESS"))
                                {
                                    class3_0.string_61 = response.Substring(response.IndexOf("access_token") + 15, 36);
                                    class3_0._Authorization = "Bearer " + class3_0.string_61;
                                    _Authrization = class3_0._Authorization;
                                    updTStatus?.BeginInvoke(1, "Login Sucessfull... ", tCntrlName, null, null);
                                    if (!_validateuser_Sik(updTStatus))
                                    {
                                        break;
                                    }
                                    Request_Type = "json";
                                    num11 = 0;
                                    dictionary_TimeP["Login"] = DateAndTime.Now.ToString("hh:mm:ss:fff");
                                    do
                                    {
                                        updTStatus?.BeginInvoke(1, "validate User", tCntrlName, null, null);
                                        DateTime dateTime4 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                        long num12 = (long)(DateTime.UtcNow - dateTime4).TotalMilliseconds;
                                        class3_0.token = num12.ToString();
                                        if (!isAPP)
                                        {
                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/validateUser?source=3";
                                        }
                                        else
                                        {
                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/validateUser?source=1";
                                        }
                                        postdata = null;
                                        dateTime_3 = DateTime.Now;
                                        Status = "ValidateUser";
                                        num11++;
                                        if (!_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                        {
                                            continue;
                                        }
                                        if (response.IndexOf("minmPsgnInputTime") < 0)
                                        {
                                            break;
                                        }
                                        string text14A = response.Substring(response.IndexOf("userId") + 9);

                                        string s = text14A.Substring(0, text14A.IndexOf("\""));
                                        string ewalmobile = jsonData_Serial(response, "mobile");
                                        if (class3_0.BANKSAVEAS.Contains("E-WALLET"))
                                        {
                                            if (class3_0.EWALLET != ewalmobile)
                                            {
                                                MessageBox.Show("E-Wallet Mobile Number and IRCTC Id Mobile Number DOnt Match Please use same irctc id...");
                                                return false;
                                            }

                                        }
                                        string[] array10 = GetString(response, "minmPsgnInputTime").ToUpper().Split(new string[1] { "#" }, StringSplitOptions.None);
                                        double.TryParse(array10[0], out minmPsgnInputTime2);
                                        double.TryParse(array10[2], out minmPsgnInputTime4);
                                        double.TryParse(array10[4], out minmPsgnInputTime6);
                                        double.TryParse(GetString(response, "minmPaymentTime").ToUpper(), out minmPaymentTime);
                                        long num13 = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
                                        if (74000 > num13 || num13 > 115900)
                                        {
                                            minmPsgnInputTime2 = 6000.0;
                                        }
                                        class3_0.string_62 = response;
                                        if (response.IndexOf("userEnableState\"") > 0)
                                        {
                                            response.IndexOf("userEnableState\":\"5");
                                            if (response.IndexOf("userEnableState\":\"3") > 0)
                                            {
                                                Class11.smethod_1("TBL_USER", "UserState", "Suspend||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                updTStatus.BeginInvoke(2, "Your Account Has Suspended! ", tCntrlName, null, null);
                                                result = false;
                                                return result;
                                            }
                                            response.IndexOf("userEnableState\":\"1");
                                            if (response.IndexOf("verified\":\"false") > 0)
                                            {
                                                isAPP = false;
                                                updTStatus.BeginInvoke(2, "Verifying IRCTC ID...", tCntrlName, null, null);
                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/loginCaptcha?nlpCaptchaException=true";
                                                DateTime dateTime2S = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                                long num9S = (long)(DateTime.UtcNow - dateTime2S).TotalMilliseconds;
                                                class3_0._greq = num9S.ToString();
                                                greq = jwtutils.GetHash(ref mup);
                                                mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                                                class3_0.token = null;
                                                cookie_ = new CookieContainer();
                                                _httpRequest(url, null, Reffral, "Plain1Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);

                                                if (response.Contains("status"))
                                                {
                                                    class3_0._greq = GetString(response, "status");
                                                }
                                                long userId = long.Parse(s);
                                                string text15 = "";
                                                class3_0.TransactionID = jwtutils.getClientTransactionId(userId);
                                                string text16 = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaganetate/" + class3_0.TransactionID + "/FORGOT_PASSWORD";
                                                string data = null;
                                                string reff = "https://www.irctc.co.in/nget/profile/forgot-password?pageType=P";
                                                _httpRequest(text16, null, reff, "Plain1Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                if (response.IndexOf("captchaQuestion") > 0)
                                                {
                                                    string text17 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                                                    text = text17.Substring(0, text17.IndexOf("\""));
                                                }
                                                new Stopwatch().Start();
                                                _ = (Bitmap)method_55(text);
                                                frmCaptcha frmCaptcha3 = new frmCaptcha(this, cookie_, "", "");
                                                string text18 = frmCaptcha3.SolveCaptcha(text);
                                                frmCaptcha3.Dispose();
                                                Thread.Sleep(3000);
                                                text16 = "https://www.irctc.co.in/eticketing/protected/mapps1/forgotPasswordInit/" + class3_0.TransactionID + "/" + class3_0.IRCTC_ID + "?captcha=" + text18;
                                                _httpRequest(text16, null, reff, "Plain1Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                if (response.Contains("Verification code is sent to your registered Email id"))
                                                {
                                                    Class11.smethod_1("TBL_USER", "UserState", "Active||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                    updTStatus.BeginInvoke(2, "Verification sucess login again", tCntrlName, null, null);
                                                    result = false;
                                                    return result;
                                                }
                                                else
                                                {
                                                    Class11.smethod_1("TBL_USER", "UserState", "Unverified||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                    updTStatus.BeginInvoke(2, "ID Not Verfied try again or change id", tCntrlName, null, null);
                                                    result = false;
                                                    return result;
                                                }

                                            }
                                        }
                                        num11 = 0;
                                        //class3_0.airtelotp = Interaction.InputBox("Enter Otp Received....");
                                        updTStatus.BeginInvoke(1, "Hitting Train Lists....", tCntrlName, null, null);
                                        while (true)
                                        {
                                        ilrebooktrick:
                                            if (!isAPP)
                                            {
                                                try
                                                {
                                                    excalibur();
                                                }
                                                catch
                                                {

                                                }
                                            }

                                            Stopwatch stopwatch2 = new Stopwatch();
                                            stopwatch2.Start();
                                            dictionary_TimeP["FindTrain"] = DateAndTime.Now.ToString("mm:ss:fff");
                                            num11++;
                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/altAvlEnq/TC";
                                            postdata = "{\"concessionBooking\":false,\"srcStn\":\"" + class3_0.SRC_STN + "\",\"destStn\":\"" + class3_0.DEST_STN + "\",\"jrnyClass\":\"" + class3_0.TKT_CLASS + "\",\"jrnyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"currentBooking\":\"false\",\"flexiFlag\":true,\"handicapFlag\":false,\"ticketType\":\"E\",\"loyaltyRedemptionBooking\":false,\"ftBooking\":false}";
                                            Status = "Getting Train List";
                                            CookieContainer cookieContainer = new CookieContainer();
                                            if (_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_W))
                                            {
                                                if (response.Contains("Your login activity is not completed successfuly"))
                                                {
                                                    Class11.smethod_1("TBL_USER", "UserState", "InCompleteProfile||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                    updTStatus.BeginInvoke(2, "Verify IRCTC ID", tCntrlName, null, null);
                                                    return false;
                                                }
                                                string text13 = response.Substring(response.IndexOf("timeStamp") + 23);
                                                text13 = text13.Substring(0, text13.IndexOf("\""));
                                                int_TimeDiff = (int)new TimeSpan(DateTime.Parse(text13).Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                                                if (response.Contains("trainBtwnStnsList"))
                                                {
                                                    Lock0("FindTrain", stopwatch2, response);
                                                    dateTime_3 = DateTime.Parse(GetString(response, "timeStamp"));
                                                    SourceDestination_Correction(response);
                                                    bool flag12 = true;
                                                    Method_GetBookingHRS();
                                                    int num14 = 0;
                                                    if (int_BookHRS == 8)
                                                    {
                                                        num14 = 54000;
                                                    }
                                                    if (int_BookHRS == 10)
                                                    {
                                                        num14 = (60 - AC_AvailibalityTime) * 1000;
                                                    }
                                                    if (int_BookHRS == 11)
                                                    {
                                                        num14 = (60 - SL_AvailibalityTime) * 1000;
                                                    }
                                                    if (fastavl)
                                                    {
                                                        if (!isAPP)
                                                        {
                                                            try
                                                            {
                                                                excalibur();
                                                            }
                                                            catch
                                                            {

                                                            }
                                                        }
                                                    ilrecheckkkk:
                                                        Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/avlFarenquiry/" + class3_0.TRAIN_NO + "/" + class3_0.dateTime_0.ToString("yyyMMdd") + "/" + class3_0.SRC_STN + "/" + class3_0.DEST_STN + "/" + class3_0.TKT_CLASS + "/" + class3_0.TKT_QUOTA + "/N";
                                                        postdata = "{\"paymentFlag\":\"N\",\"concessionBooking\":false,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"ticketType\":\"E\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"moreThanOneDay\":true,\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"fromStnCode\":\"" + class3_0.SRC_STN + "\",\"toStnCode\":\"" + class3_0.DEST_STN + "\",\"isLogedinReq\":true,\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"classCode\":\"" + class3_0.TKT_CLASS + "\"}";
                                                        if (isAPP)
                                                        {
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";

                                                        }
                                                        _httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 58000, 58000, ref response, ref errormsg, ref Exception_);
                                                        if (!response.Contains("availablityStatus"))
                                                        {
                                                            goto ilrecheckkkk;
                                                        }
                                                    }
                                                    if (!isAPP & (akamaiok))
                                                    {
                                                        Chrome_CloseSetup();
                                                        Thread.Sleep(2000);
                                                        getandclear();
                                                        updTStatus.BeginInvoke(1, "Complete step 2...", tCntrlName, null, null);
                                                        IRComm.doesSurf = false;
                                                        string step2 = "Ab step 2 me dhyan se follow kare ,IRCTC open hoga apko login karna hai train search karni hai , availability sirf ek baar check karni aur book now pe click karke passenger page tk jana waha jakar apko right click karke I M Not Robot karna hai ye karne se apka window sucessfull login ho jayega.....";
                                                        MessageBox.Show(step2, "Step 2 Guide..", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                        BmskCookieOffline_P(true);
                                                        cookieContainer_2 = cookieBmsk_2;
                                                        Chrome_CloseSetup();
                                                        Thread.Sleep(2000);
                                                    }
                                                    if (class3_0.TKT_ISADV & (DateTime.Now.Hour < int_BookHRS))
                                                    {
                                                        updTStatus.BeginInvoke(1, "Wait For PG Open", tCntrlName, null, null);
                                                        DateTime dateTime5 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_BookHRS, 0, 0, 0);
                                                        TimeSpan timeSpan = new TimeSpan(dateTime5.Ticks - DateTime.Now.Ticks);
                                                        int num15 = (int)timeSpan.TotalMilliseconds - int_TimeDiff;
                                                        Random random3 = new Random();
                                                        int num16 = random3.Next(1, 300);
                                                        int num17 = 16000 + num16 + int_Pair * 459;
                                                        if (class3_0.TKT_CLASS == "SL")
                                                        {
                                                            num17 = 32000 + num16 + int_Pair * 759;
                                                        }
                                                        num15 -= num17;

                                                        if (num15 > 0)
                                                        {
                                                            Application.DoEvents();
                                                            Thread.Sleep(num15);
                                                            Application.DoEvents();
                                                        }
                                                    }
                                                    updTStatus.BeginInvoke(1, "Hitting Availablity.....", tCntrlName, null, null);
                                                    num11 = 0;
                                                    int num18 = 0;
                                                    //num18++;
                                                    Status = "Getting Availablity";
                                                    if (fastavl)
                                                    {
                                                        if (isAPP)
                                                        {
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/allLapAvlFareEnq/N";
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"agentDeviceId\":null,\"alternateAvlInputDTO\":null,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingChoice\":0,\"bookingConfirmChoice\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"cod\":\"false\",\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enrouteStation\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"journalistBooking\":false,\"lapAvlRequestDTO\":[{\"addMealDetail\":null,\"agentOtpBooking\":false,\"coachId\":null,\"concessionBooking\":false,\"fromStation\":\"" + class3_0.SRC_STN + "\",\"ignoreChoiceIfWl\":true,\"infantList\":null,\"jd\":null,\"journeyClass\":\"" + class3_0.TKT_CLASS + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"passengerList\":null,\"quota\":\"" + class3_0.TKT_QUOTA + "\",\"reservationChoice\":null,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"toStation\":\"" + class3_0.DEST_STN + "\",\"trainNo\":\"" + class3_0.TRAIN_NO + "\",\"trainOwner\":null,\"travelInsuranceOpted\":null}],\"loyaltyAccuralBooking\":false,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpSecType\":null,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passBooking\":false,\"paymentType\":1,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"ticketType\":\"E\",\"tktAddress\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null}";

                                                        }
                                                        else
                                                        {
                                                            if (!isAPP)
                                                            {
                                                                try
                                                                {
                                                                    excalibur();
                                                                }
                                                                catch
                                                                {

                                                                }
                                                            }
                                                            Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                            //postdata = "{\"paymentFlag\":\"N\",\"concessionBooking\":false,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"ticketType\":\"E\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"moreThanOneDay\":true,\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"fromStnCode\":\"" + class3_0.SRC_STN + "\",\"toStnCode\":\"" + class3_0.DEST_STN + "\",\"isLogedinReq\":true,\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"classCode\":\"" + class3_0.TKT_CLASS + "\"}";
                                                            postdata = "{\"clusterFlag\":\"N\",\"onwardFlag\":\"N\",\"cod\":\"false\",\"reservationMode\":\"WS_TA_B2C\",\"autoUpgradationSelected\":false,\"gnToCkOpted\":false,\"paymentType\":1,\"twoPhaseAuthRequired\":false,\"captureAddress\":0,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"moreThanOneDay\":true,\"ticketType\":\"E\",\"lapAvlRequestDTO\":[{\"passengerList\":null,\"infantList\":null,\"ticketChoiceSameCoach\":false,\"ignoreChoiceIfWl\":true,\"bookOnlyIfCnf\":false,\"concessionBooking\":false,\"addMealDetail\":null,\"trainNo\":\"" + class3_0.TRAIN_NO + "\",\"fromStation\":\"" + class3_0.SRC_STN + "\",\"journeyClass\":\"" + class3_0.TKT_CLASS + "\",\"toStation\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"quota\":\"" + class3_0.TKT_QUOTA + "\"}]}";
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/allLapAvlFareEnq/N";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (isAPP)
                                                        {
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/avlFarenquiry/" + class3_0.TRAIN_NO + "/" + class3_0.dateTime_0.ToString("yyyMMdd") + "/" + class3_0.SRC_STN + "/" + class3_0.DEST_STN + "/" + class3_0.TKT_CLASS + "/" + class3_0.TKT_QUOTA + "/N";
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalPsgn\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";

                                                        }
                                                        else
                                                        {
                                                            if (!isAPP)
                                                            {
                                                                try
                                                                {
                                                                    excalibur();
                                                                }
                                                                catch
                                                                {

                                                                }
                                                            }
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/avlFarenquiry/" + class3_0.TRAIN_NO + "/" + class3_0.dateTime_0.ToString("yyyMMdd") + "/" + class3_0.SRC_STN + "/" + class3_0.DEST_STN + "/" + class3_0.TKT_CLASS + "/" + class3_0.TKT_QUOTA + "/N";
                                                            Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                            postdata = "{\"paymentFlag\":\"N\",\"concessionBooking\":false,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"ticketType\":\"E\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"moreThanOneDay\":true,\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"fromStnCode\":\"" + class3_0.SRC_STN + "\",\"toStnCode\":\"" + class3_0.DEST_STN + "\",\"isLogedinReq\":true,\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"classCode\":\"" + class3_0.TKT_CLASS + "\"}";

                                                        }
                                                    }
                                                    do
                                                    {
                                                    IL_28de:
                                                        num18++;
                                                        response = null;
                                                        dictionary_TimeP["Availablity"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                        stopwatch2 = new Stopwatch();
                                                        stopwatch2.Start();
                                                        if (!_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 58000, 58000, ref response, ref errormsg, ref Exception_) || string.IsNullOrEmpty(response) || !response.Contains("avlDayList"))
                                                        {
                                                            continue;
                                                        }

                                                        if (response.Contains("Invalid access token") && num11 > 2)
                                                        {
                                                            break;
                                                        }
                                                        //Method_CheckBookingTime(response);
                                                        string text19SS = GetString(response, "totalCollectibleAmount");
                                                        class3_0.string_30 = response;
                                                        string @string = GetString(response, "availablityStatus");
                                                        
                                                        if (response.IndexOf("avlDayList") > 0 && class3_0.TKT_ISADV)
                                                        {
                                                            if (test1day)
                                                            {
                                                                updTStatus.BeginInvoke(1, "Wait for ## Remove", tCntrlName, null, null);
                                                                Method_CheckBookingTime(response);
                                                            }
                                                            if (int_BookHRS == 8 & class3_0.TKT_ISADV)
                                                            {
                                                                updTStatus.BeginInvoke(1, "Wait for ## Remove", tCntrlName, null, null);
                                                                Method_CheckBookingTime(response);
                                                            }
                                                            updTStatus.BeginInvoke(1, "Int Avl Check - " + num18, tCntrlName, null, null);
                                                            string text14 = response.Substring(response.IndexOf("timeStamp") + 23);
                                                            text14 = text14.Substring(0, text14.IndexOf("\""));
                                                            DateTime dateTime6 = DateTime.Parse(text14);
                                                            if (!(!@string.Contains("#") & (dateTime6.Hour >= int_BookHRS)))
                                                            {
                                                                double totalMilliseconds = stopwatch2.Elapsed.TotalMilliseconds;
                                                                stopwatch2.Stop();
                                                                int num19 = dateTime6.Second * 1000 + dateTime6.Millisecond;
                                                                if (num18 >= 15)
                                                                {
                                                                    num18 = 0;
                                                                    Application.DoEvents();
                                                                    Thread.Sleep(2500);
                                                                }
                                                                else
                                                                {
                                                                    Application.DoEvents();
                                                                    Thread.Sleep(300);
                                                                }
                                                                goto IL_28de;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (response.Contains("availablityStatus") && @string == "NOT AVAILABLE" && class3_0.TKT_QUOTA == "PT")
                                                            {
                                                                frmPayment frmPayment2 = new frmPayment();
                                                                frmPayment2.tktname.Text = TktName;
                                                                frmPayment2.bool_7 = true;
                                                                frmPayment2.string_1 = "PT Not Available Do You Want To Change Your Quota into TQ And Book.";
                                                                frmPayment2.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                DialogResult dialogResult = frmPayment2.DialogResult;
                                                                frmPayment2.Dispose();
                                                                if (dialogResult == DialogResult.Cancel)
                                                                {
                                                                    updTStatus.BeginInvoke(2, @string, tCntrlName, null, null);
                                                                    return false;
                                                                }
                                                                class3_0.TKT_QUOTA = "TQ";
                                                                goto IL_28de;
                                                            }
                                                            if (response.IndexOf("Unable to process") >= 0)
                                                            {
                                                                goto IL_28de;
                                                            }
                                                            if (@string.Contains("REGRET") || @string.Contains("TRAIN DEPARTED") || @string.Contains("TRAIN CANCELLED") || @string.Contains("NOT AVAILABLE"))
                                                            {
                                                                updTStatus.BeginInvoke(2, @string, tCntrlName, null, null);
                                                                return false;
                                                            }
                                                        }
                                                        Lock0("Availablity", stopwatch2, response);
                                                        //class3_0.TransactionID = class3_0.method_6();
                                                        //class3_0.TransactionID = class3_0.method_6();
                                                        if (!isAPP)
                                                        {
                                                            string timestampp = method_14();//EncodeToBase(timestamp, 36);
                                                            long timestap = long.Parse(timestampp);
                                                            class3_0.TransactionID = EncodeToBase(timestap, 36);
                                                        }
                                                        else
                                                        {
                                                            long userIdd = long.Parse(s);
                                                            class3_0.TransactionID = jwtutils.getClientTransactionId(userIdd);
                                                        }

                                                        updTStatus.BeginInvoke(1, "Getting Bkg Captcha...", tCntrlName, null, null);
                                                        class3_0.GetBookPost(ref url, ref postdata, ref Reffral, isAPP, class3_0.TKT_ISADV);
                                                        num11 = 0;
                                                        do
                                                        {
                                                            stopwatch2 = new Stopwatch();
                                                            stopwatch2.Start();
                                                            Status = "Book Ticket";
                                                            dictionary_TimeP["Book"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                            Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                            bool flag13 = _httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                            if (response.Contains("Invalid access token"))
                                                            {
                                                                break;
                                                            }
                                                            if (!(response != "retry" && flag13))
                                                            {
                                                                continue;
                                                            }
                                                            int num19 = 0;
                                                            dateTime_2 = GetTimeStamp(response, int_TimeDiff);
                                                            dateTime_2 = DateTime.Now.AddMilliseconds(200.0);
                                                            Lock0("Book", stopwatch2, response);
                                                            if (response.Contains("departureTime") && !response.Contains("errorMessage"))
                                                            {
                                                                if (class3_0.int_TotalPax > 2)
                                                                {
                                                                    minmPsgnInputTime2 = minmPsgnInputTime4;
                                                                }
                                                                if (class3_0.int_TotalPax > 4)
                                                                {
                                                                    minmPsgnInputTime2 = minmPsgnInputTime6;
                                                                }
                                                                string text15M = stopwatch2.Elapsed.TotalMilliseconds.ToString();
                                                                string[] array110 = text15M.Split('.');
                                                                text15M = array110[0];
                                                                num19 = int.Parse(text15M);
                                                                if (isAPP)
                                                                {
                                                                    //num19 /= 4;
                                                                    num19 /= nopax;
                                                                    
                                                                }
                                                                else
                                                                {
                                                                    num19 /= nopax;
                                                                }
                                                                //num19 /= 1;
                                                                bool flag120 = true;
                                                                lock (object_16)
                                                                {
                                                                    if (dictionary_5.TryGetValue(tCntrlName + " WL_Status", out var value2))
                                                                    {
                                                                        if (value2 == "WL Allow")
                                                                        {
                                                                            class3_0.TKT_ISCONFIRM = false;
                                                                        }
                                                                        else
                                                                        {
                                                                            class3_0.TKT_ISCONFIRM = true;
                                                                        }
                                                                    }
                                                                }
                                                                string_70 = null;
                                                                text3 = smethod_10(class3_0.BANKSAVEAS);
                                                                if (isAPP)
                                                                {
                                                                    postdata = class3_0.GetPassengerPOST_App(class3_0.TransactionID, text3, response);
                                                                }
                                                                else
                                                                {

                                                                    postdata = class3_0.GetPassengerPOST(class3_0.TransactionID, text3, response);
                                                                }
                                                                //paxminus = true;
                                                                if (class3_0.TKT_ISADV & (class3_0.TKT_QUOTA != "GN") & !unable & paxminus)
                                                                {
                                                                    if (isAPP)
                                                                    {
                                                                        int num200 = dictionary_PaxStart[TktName_ + "_APP"];
                                                                        if (num200 > 1)
                                                                        {
                                                                            minmPsgnInputTime2 -= num19;
                                                                        }
                                                                        dictionary_PaxStart[TktName_ + "_APP"] = num200 + 1;
                                                                    }
                                                                    else
                                                                    {
                                                                        int num210 = dictionary_PaxStart[TktName_ + "_WEB"];
                                                                        //if (num210 > 1)
                                                                        //{
                                                                            minmPsgnInputTime2 -= num19;
                                                                        //}
                                                                        dictionary_PaxStart[TktName_ + "_WEB"] = num210 + 1;
                                                                    }
                                                                }
                                                                //if (!isAPP)
                                                                //{
                                                                //    try
                                                                //    {
                                                                //        excalibur();
                                                                //    }
                                                                //    catch
                                                                //    {

                                                                //    }
                                                                //}
                                                                int num20 = (int)minmPsgnInputTime2 - (int)(DateTime.Now - dateTime_2).TotalMilliseconds;
                                                                if (num20 > 0)
                                                                {
                                                                    DateTime now = DateTime.Now;
                                                                    int num21 = (int)(DateTime.Now - dateTime_2).TotalMilliseconds;
                                                                    num21 = (int)(minmPsgnInputTime2 - (double)num21);
                                                                    now = now.AddMilliseconds(num21);
                                                                    while (true)
                                                                    {
                                                                        TimeSpan timeSpan2 = now - DateTime.Now;
                                                                        string text15 = timeSpan2.Seconds + ":" + timeSpan2.Milliseconds;
                                                                        if (timeSpan2.TotalMilliseconds <= 1.0)
                                                                        {
                                                                            break;
                                                                        }
                                                                        updTStatus.BeginInvoke(1, "Pax  Submit IN - " + text15, tCntrlName, null, null);
                                                                        Thread.Sleep(50);
                                                                    }
                                                                }
                                                                num11 = 0;
                                                                do
                                                                {
                                                                    num11++;
                                                                    Status = "Passenger";
                                                                    stopwatch2 = new Stopwatch();
                                                                    stopwatch2.Start();
                                                                    dictionary_TimeP["Passenger"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                    updTStatus.BeginInvoke(1, "Submiting Pax Data...", tCntrlName, null, null);
                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/allLapAvlFareEnq/Y";
                                                                    Reffral = "https://www.irctc.co.in/nget/booking/psgninput";
                                                                    if (int_Pair <= 3 & class3_0.TKT_ISADV & int_BookHRS != 8&cloudfront)
                                                                    {
                                                                        try
                                                                        {
                                                                            Random rnd = new Random();
                                                                            
                                                                            int numhold = rnd.Next(1, 4);
                                                                            int numhold1 = rnd.Next(10, 59);
                                                                            string start = DateTime.Now.ToString("HH:mm:ss");
                                                                            string enddd = int_BookHRS + ":0" + numhold + ":" + numhold1;
                                                                                //+ ":04:00";
                                                                            updTStatus.BeginInvoke(1, "Wait 4 cloudfront @ "+ enddd, tCntrlName, null, null);
                                                                            long millis = TimeDifference(start, enddd);
                                                                            int sleeppac = Convert.ToInt32(millis);
                                                                            Thread.Sleep(sleeppac);
                                                                        }
                                                                        catch
                                                                        {

                                                                        }
                                                                        
                                                                        //Method_CheckBookingTime_Pax(response);
                                                                        //TimeDifference
                                                                    }
                                                                    if (!isAPP)
                                                                    {
                                                                        if (akamaiok)
                                                                        {
                                                                            cookie_ = cookieContainer_2;
                                                                        }
                                                                        if (!_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 58000, 58000, ref response, ref errormsg, ref Exception_) || string.IsNullOrEmpty(response) || !response.Contains("avlDayList"))
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if (!ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Plain123json"))
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }
                                                                    if ((response.IndexOf("bankDetailDTO") > 0) | (response.IndexOf("baseFare") > 0) | (response.IndexOf("captchaTime") > 0))
                                                                    {
                                                                        Lock0("Passenger", stopwatch2, response);
                                                                        class3_0.string_32 = response;
                                                                        //goto ilrebooktrick;
                                                                        num11 = 0;
                                                                        while (true)
                                                                        {
                                                                            num11++;
                                                                            stopwatch2 = new Stopwatch();
                                                                            stopwatch2.Start();
                                                                            dictionary_TimeP["Captcha"] = "[" + num11 + "]" + DateAndTime.Now.ToString("mm:ss:fff");
                                                                            updTStatus.BeginInvoke(1, "Loading final Captcha..", tCntrlName, null, null);
                                                                            GetString(response, "captcha");
                                                                            if (response.IndexOf("nlpKeyValue") <= 0)
                                                                            {
                                                                                string text16 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                                                                                string_93 = text16.Substring(0, text16.IndexOf("\""));
                                                                                frmCaptcha frmCaptcha3 = new frmCaptcha(this, cookie_, "", "");
                                                                                text10 = frmCaptcha3.SolveCaptcha(string_93);
                                                                                frmCaptcha3.Dispose();

                                                                                if (text10.Length < 3)
                                                                                {
                                                                                    string _reponse = "";
                                                                                    Status = "Passenger";
                                                                                    dictionary_TimeP["Passenger"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaganetate/" + class3_0.TransactionID + "/BOOKINGWS?nlpCaptchaException=true";
                                                                                    Reffral = "";
                                                                                    postdata = null;
                                                                                    if (ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref _reponse, ref errormsg, ref Exception_, "Plain123json"))
                                                                                    {
                                                                                        if (_reponse.Contains("captchaQuestion"))
                                                                                        {
                                                                                            response = _reponse;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaverify/" + class3_0.TransactionID + "/BOOKINGWS/" + text10;
                                                                                    postdata = null;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                string string2 = GetString(response, "nlpKeyValue");
                                                                                LoadNlpCaptcha(string2, ref string_94, ref bitmap_1, ref string_93);
                                                                                Reffral = null;
                                                                                frmCAP frmCAP2 = new frmCAP(this);
                                                                                frmCAP2.tktname.Text = TktName;
                                                                                frmCAP2.method_4(control_0, rectangle_0, bitmap_1, string2, string_94, string_93);
                                                                                if (frmCAP2.DialogResult == DialogResult.Cancel)
                                                                                {
                                                                                    frmCAP2.Dispose();
                                                                                    updTStatus.BeginInvoke(2, "Captcha Cancel!", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                                text10 = frmCAP2.txtImageData.Text;
                                                                                string_94 = frmCAP2.string_2;
                                                                                frmCAP2.Dispose();
                                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/nlpcaptchaverify/" + class3_0.TransactionID + "/BOOKINGWS/" + text10;
                                                                                postdata = "{\"nlpIdentifier\":\"" + string_94 + "\",\"nlpAnswer\":\"" + text10 + "\",\"nlpToken\":\"" + string2 + "\",\"nlpType\":\"MOB_BOOKING\"}";
                                                                            }
                                                                            Status = "Final Captcha";
                                                                            Reffral = "https://www.irctc.co.in/nget/booking/reviewBooking";
                                                                            updTStatus.BeginInvoke(1, "Verifying Final Captcha", tCntrlName, null, null);
                                                                            if (!_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                                                            {
                                                                                break;
                                                                            }
                                                                            if (response.Contains("SUCCESS"))
                                                                            {
                                                                                Lock0("Captcha", stopwatch2, response);
                                                                                bool flag14 = true;
                                                                                response = class3_0.string_32;
                                                                                num5++;
                                                                                string text17 = "";
                                                                                string text18 = "1";
                                                                                bool A_ = false;
                                                                                string text19 = "0.0";
                                                                                int num22 = 0;
                                                                                int_6 = 10;
                                                                                stopwatch2 = new Stopwatch();
                                                                                stopwatch2.Start();
                                                                                if (response.IndexOf("totalCollectibleAmount") > 0)
                                                                                {
                                                                                    text19 = GetString(response, "totalCollectibleAmount");
                                                                                    class3_0.Txnamt = text19;
                                                                                    text9 = GetString(response, "availablityStatus").ToUpper();
                                                                                    updTStatus.BeginInvoke(999, "Going To Bank$" + text19 + "$" + text9, tCntrlName, null, null);
                                                                                }
                                                                                if (text9.Contains("NOT AVAILABLE") || text9.Contains("REGRET") || text9.Contains("TRAIN DEPARTED") || text9.Contains("TRAIN CANCELLED"))
                                                                                {
                                                                                    updTStatus.BeginInvoke(2, "Availability: " + text9 + ", Ticket Stopped!", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                                text = array4[0];
                                                                                int num23 = 0;
                                                                                while (true)
                                                                                {
                                                                                    num23 = 0;
                                                                                    stopwatch = new Stopwatch();
                                                                                    stopwatch.Start();
                                                                                    response = class3_0.string_32;
                                                                                    num22++;
                                                                                    method_102();
                                                                                    if (!string.IsNullOrEmpty(text))
                                                                                    {
                                                                                        text2 = class3_0.dictionary_BnkData[text];
                                                                                        class3_0.BANKSAVEAS = text;
                                                                                        class3_0.BANKDETAILS = text2;
                                                                                    }
                                                                                    text3 = smethod_10(class3_0.BANKSAVEAS);
                                                                                    text17 = GetBankID(text3, ref A_);
                                                                                    if (text17 == "121" & isAPP & text3 == "PAYZAP_DC")
                                                                                    {
                                                                                        text3 = "PAYZAP_AIRPAY";
                                                                                    }
                                                                                    if (text17 == "74" || (text17 == "91"))
                                                                                    {

                                                                                        string[] array202M = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                        class3_0.BNK_MOBILE = array202M[0];
                                                                                    }
                                                                                    if (text17.Length <= 0)
                                                                                    {
                                                                                        goto IL_65fd;
                                                                                    }
                                                                                    try
                                                                                    {
                                                                                        bool_63 = ((CheckBox)control.Controls["chkConfirmation"]).Checked;
                                                                                        ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }
                                                                                    text6 = "\r\n\r\nFare: " + text19 + text6;
                                                                                    if (num > 0.0)
                                                                                    {
                                                                                        double num24 = Conversion.Val(text19.Trim());
                                                                                        if (num24 > 0.0 && num24 > num + (double)class3_0.int_4 * 0.49 + 40.0)
                                                                                        {
                                                                                            flag2 = true;
                                                                                        }
                                                                                    }
                                                                                    string string_95;
                                                                                    string text20;
                                                                                    bool flag15;
                                                                                    while (true)
                                                                                    {
                                                                                        dictionary_TimeP["Fare"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                        string_95 = "";
                                                                                        text20 = "";
                                                                                        flag15 = false;
                                                                                        updTStatus.BeginInvoke(1, "Redirecting To Bank Server....", tCntrlName, null, null);
                                                                                        Reffral = url;
                                                                                        if (isAPP)
                                                                                        {
                                                                                            int num25 = 0;
                                                                                            while (true)
                                                                                            {

                                                                                                if (text17 != "74" & (text17 != "91"))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Collecting Payment Info...", tCntrlName, null, null);
                                                                                                    Reffral = null;
                                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=NA";
                                                                                                    postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";

                                                                                                    //cookie_ = new CookieContainer();
                                                                                                    if (text17 == "1000")
                                                                                                    {
                                                                                                        //postdata = "{\"bankId\":\"" + text17 + "\",\"txnType\":7,\"paramList\":[{\"key\":\"TXN_PASSWORD\",\"value\":\"\"}],\"amount\":" + text19 + ",\"transationId\":0,\"txnStatus\":1}";
                                                                                                        postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":1000,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"TXN_PASSWORD\",\"value\":\"\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":7,\"upiModeOpted\":0}";


                                                                                                    }
                                                                                                    else if (text17 == "122")
                                                                                                    {
                                                                                                        postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":59,\"upiModeOpted\":0}";
                                                                                                    }
                                                                                                    //Task<bool> ConnectHttp_Taskkk = ConnectHttp_Task(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, 68000, 68000);
                                                                                                    if (!ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json"))

                                                                                                    {
                                                                                                        continue;
                                                                                                    }


                                                                                                    //dateTimePayStartM = DateTime.Now.AddMilliseconds(300.0);
                                                                                                    //postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"MOBILE\",\"value\":\"" + class3_0.BNK_MOBILE + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                }
                                                                                                //goto ilrebooktrick;
                                                                                                if (text17 == "101")
                                                                                                {
                                                                                                    //string[] array2333 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None)[0].Trim();
                                                                                                    string[] mobik = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                                   nsdlotpm = mobik[3];
                                                                                                    string text21 = "netbanking";
                                                                                                    string text22 = "SBI";
                                                                                                    string text23 = "State Bank of India";
                                                                                                    string text24 = "9999999999";
                                                                                                    string text25 = "IrctcCustomer@example.com";
                                                                                                    postdata = "{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":101,\"captchaDto\":null,\"errorMsg\":null,\"juspayLoadDTO\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"MOBILE\",\"value\":\"9999999999\"},{\"key\":\"EMAIL\",\"value\":\"abc@xyz.com\"},{\"key\":\"PAYMENT_MODE\",\"value\":\"card\"},{\"key\":\"SAVED_CARD\",\"value\":\"false\"},{\"key\":\"CARD_NUMBER\",\"value\":\"" + mobik[0] + "\"},{\"key\":\"NAME_ON_CARD\",\"value\":\"" + mobik[6] + "\"},{\"key\":\"EXPIRY_MONTH\",\"value\":\"" + mobik[1] + "\"},{\"key\":\"EXPIRY_YEAR\",\"value\":\"" + mobik[2] + "\"},{\"key\":\"CVV\",\"value\":\"" + mobik[4] + "\"},{\"key\":\"SAVE_CARD\",\"value\":\"false\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                    //postdata = "{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text17 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text21 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text23 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text24 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text25 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/paymentProcessService/" + class3_0.TransactionID;
                                                                                                    bool flag16 = ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                                }
                                                                                                if (text17 == "1000")
                                                                                                {
                                                                                                    if (!response.Contains("RDS balance is below total ticket transaction amount. Please top up your master RDS account"))
                                                                                                    {
                                                                                                        balanceee = jsonData_Serial(response, "BALANCE\",\"value");
                                                                                                        ewalletamounts = jsonData_Serial(response, "AMOUNT\",\"value");
                                                                                                        break;
                                                                                                    }

                                                                                                    else
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(1, "Insuf Balance in your E-Wallet", tCntrlName, null, null);
                                                                                                        return false;
                                                                                                    }
                                                                                                }
                                                                                                if (text17 == "74" || (text17 == "91"))
                                                                                                {
                                                                                                    break;
                                                                                                    //                                                                           updTStatus.BeginInvoke(1, "Final hit for PNR", tCntrlName, null, null);
                                                                                                    //                                                                           postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.airtelotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";//"{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text17 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text21 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text23 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text24 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text25 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                    //                                                                           url = "https://www.irctc.co.in/eticketing/protected/mapps1/verifyPayment/" + class3_0.TransactionID;
                                                                                                    //                                                                           ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                                    //                                                                           if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) > 0)
                                                                                                    //{
                                                                                                    //                                                                               updTStatus.BeginInvoke(1, "Pnr Sucessfull...", tCntrlName, null, null);
                                                                                                    //	return false;
                                                                                                    //                                                                           }
                                                                                                    //else
                                                                                                    //{
                                                                                                    //                                                                               updTStatus.BeginInvoke(1, "Booking Failed", tCntrlName, null, null);
                                                                                                    //                                                                               return false;
                                                                                                    //                                                                           }

                                                                                                }

                                                                                                if (response.Contains("CHECKSUMHASH") | response.Contains("ORDER_ID") | response.Contains("encdata") | response.Contains("DO_REDIRECT"))
                                                                                                {
                                                                                                    break;
                                                                                                }
                                                                                                else if (response.Contains("https://mercury-t2.phonepe.com/transact/v2"))
                                                                                                {
                                                                                                    break;
                                                                                                }
                                                                                                else if (response.Contains("errorMsg"))
                                                                                                {
                                                                                                    string string_96 = GetString_(response, "errorMsg", "\"");
                                                                                                    string_96 = "Blacklist ID! Change Password!!!";
                                                                                                    if (!string.IsNullOrEmpty(string_96))
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(2, string_96, tCntrlName, null, null);
                                                                                                        Class11.smethod_1("TBL_USER", "UserState", "Blacklisted||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                                                                        return false;
                                                                                                    }
                                                                                                }
                                                                                                if (!((text17 == "91") & response.Contains("txnDate")))
                                                                                                {
                                                                                                    if (num25 > 3)
                                                                                                    {
                                                                                                        goto end_IL_375e;
                                                                                                    }
                                                                                                    continue;
                                                                                                }
                                                                                                goto IL_3afb;
                                                                                            }
                                                                                            dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                            Lock0("Fare", stopwatch2, response);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (!isAPP)
                                                                                            {
                                                                                                try
                                                                                                {
                                                                                                    excalibur();
                                                                                                }
                                                                                                catch
                                                                                                {

                                                                                                }
                                                                                            }
                                                                                            //old
                                                                                            //Task_response = null;
                                                                                            //url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=";
                                                                                            ////postdata = "{\"bankId\":\"" + text18 + "\",\"txnType\":" + text19 + ",\"paramList\":[" + "" + "],\"amount\":\"" + text20 + "\",\"transationId\":0,\"txnStatus\":1}";
                                                                                            //postdata = "{\"bankId\":\"" + text17 + "\",\"txnType\":" + text18 + ",\"paramList\":[" + "" + "],\"amount\":\"" + text19 + "\",\"transationId\":0,\"txnStatus\":1}";
                                                                                            ////_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: true, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                            //Task_errormsg = "";
                                                                                            //Task_Exception_ = null;
                                                                                            //Task_response = "";
                                                                                            //Task<bool> task = Task_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, bool_64: true, bool_65: true, 68000, 68000);
                                                                                            //int num27 = 0;
                                                                                            //while (true)
                                                                                            //{
                                                                                            //    if (!string.IsNullOrEmpty(Task_response))
                                                                                            //    {
                                                                                            //        if (text17 == "1000")
                                                                                            //        {
                                                                                            //            if (response.Contains("RDS balance is below total ticket transaction amount. Please top up your master RDS account"))
                                                                                            //            {
                                                                                            //                updTStatus.BeginInvoke(1, "Insuf Balance in your E-Wallet", tCntrlName, null, null);
                                                                                            //                return false;
                                                                                            //            }
                                                                                            //            class3_0.ewallettxndate = jsonData_Serial(Task_response, "txnDate");
                                                                                            //            class3_0.ewallettimestamp = jsonData_Serial(Task_response, "timeStamp");
                                                                                            //            class3_0.ewalletamount = jsonData_Serial(Task_response, "amount");
                                                                                            //            goto IL_3f6e;
                                                                                            //        }

                                                                                            //        if (Task_response.Contains("REDIRECT\",\"value\":\"TRUE"))
                                                                                            //        {
                                                                                            //            break;
                                                                                            //        }
                                                                                            //        if (Task_response.Contains("errorMsg"))
                                                                                            //        {
                                                                                            //            string string_96 = GetString_(Task_response, "errorMsg", "\"");
                                                                                            //            if (!string.IsNullOrEmpty(string_96))
                                                                                            //            {
                                                                                            //                Class11.smethod_1("TBL_USER", "UserState", "Blacklisted||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                                                            //                updTStatus.BeginInvoke(2, string_96, tCntrlName, null, null);
                                                                                            //                return false;
                                                                                            //            }
                                                                                            //        }
                                                                                            //    }
                                                                                            //    else
                                                                                            //    {
                                                                                            //        if (num27 > 650)
                                                                                            //        {
                                                                                            //            break;
                                                                                            //        }
                                                                                            //        num27 += 23;
                                                                                            //        Application.DoEvents();
                                                                                            //        Thread.Sleep(23);
                                                                                            //    }
                                                                                            //}
                                                                                            //old
                                                                                            ////cookie_ = new CookieContainer();

                                                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=";

                                                                                            postdata = "{\"bankId\":\"" + text17 + "\",\"txnType\":" + text18 + ",\"paramList\":[" + "" + "],\"amount\":\"" + text19 + "\",\"transationId\":0,\"txnStatus\":1}";
                                                                                            if (text17 == "1000")
                                                                                            {
                                                                                                postdata = "{\"bankId\":\"" + text17 + "\",\"txnType\":7,\"paramList\":[{\"key\":\"TXN_PASSWORD\",\"value\":\"\"}],\"amount\":" + text19 + ",\"transationId\":0,\"txnStatus\":1}";
                                                                                            }
                                                                                            Reffral = "https://www.irctc.co.in/nget/payment/bkgPaymentOptions";
                                                                                            int num26 = 0;
                                                                                            while (true)
                                                                                            {
                                                                                                stopwatch2 = new Stopwatch();
                                                                                                stopwatch2.Start();
                                                                                                //ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                                _httpRequest(url, postdata, Reffral, "Plain123json", bool_63: true, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                                if (!string.IsNullOrEmpty(response))
                                                                                                {
                                                                                                    if (text17 == "1000")
                                                                                                    {
                                                                                                        if (response.Contains("RDS balance is below total ticket transaction amount. Please top up your master RDS account"))
                                                                                                        {
                                                                                                            updTStatus.BeginInvoke(1, "Insuf Balance in your E-Wallet", tCntrlName, null, null);
                                                                                                            return false;
                                                                                                        }
                                                                                                        class3_0.ewallettxndate = jsonData_Serial(response, "txnDate");
                                                                                                        class3_0.ewallettimestamp = jsonData_Serial(response, "timeStamp");
                                                                                                        class3_0.ewalletamount = jsonData_Serial(response, "amount");
                                                                                                        goto IL_3f6e;
                                                                                                    }
                                                                                                    if (response.Contains("REDIRECT\",\"value\":\"TRUE"))
                                                                                                    {
                                                                                                        break;
                                                                                                    }
                                                                                                    if (response.Contains("errorMsg"))
                                                                                                    {
                                                                                                        string string_96 = GetString_(response, "errorMsg", "\"");
                                                                                                        string_96 = "Blacklist ID! Change Password!!!";
                                                                                                        if (!string.IsNullOrEmpty(string_96))
                                                                                                        {
                                                                                                            updTStatus.BeginInvoke(2, string_96, tCntrlName, null, null);
                                                                                                            return false;
                                                                                                        }
                                                                                                    }
                                                                                                    else if (num26 >= 650)
                                                                                                    {
                                                                                                        break;
                                                                                                    }
                                                                                                    num26 += 23;
                                                                                                    Application.DoEvents();
                                                                                                    Thread.Sleep(23);
                                                                                                }
                                                                                            }
                                                                                            Lock0("Fare", stopwatch2, response);
                                                                                            dictionary_TimeP["RedBNK"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                            updTStatus.BeginInvoke(1, "Opening Bank Server...", tCntrlName, null, null);
                                                                                            //cookie_ = new CookieContainer();

                                                                                            url = "https://www.irctc.co.in/eticketing/PaymentRedirect";
                                                                                            class3_0.string_61 = class3_0._Authorization.Replace("Bearer ", "");
                                                                                            postdata = "token=" + class3_0.string_61 + "&txn=" + class3_0.IRCTC_ID + "%3A" + class3_0.TransactionID;// + class3_0.IRCTC_ID; + "%3A" + class3_0.TransactionID = "63595105.61273031684336552228--319898911830710.9569799614";
                                                                                            string webupdate = "";
                                                                                            string csrfToken = "1684404995701--1230173952";
                                                                                            var Timestamp = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeMilliseconds();
                                                                                            string fullcsrf = ((Timestamp / (100000 * new Random().NextDouble())).ToString(CultureInfo.InvariantCulture) + class3_0.token + (Timestamp / (1000000 * new Random().NextDouble())).ToString(CultureInfo.InvariantCulture)); 
                                                                                            postdata = "token=" + class3_0.string_61 + "&txn=" + class3_0.IRCTC_ID + "%3A" + class3_0.TransactionID + "&" + class3_0.IRCTC_ID + "%3A" + class3_0.TransactionID + "=" + fullcsrf;
                                                                                            
                                                                                            int num270 = 0;
                                                                                            bool flag18;
                                                                                            do
                                                                                            {
                                                                                                stopwatch2 = new Stopwatch();
                                                                                                stopwatch2.Start();
                                                                                                num270++;
                                                                                                Status = "Redirect to Bank";
                                                                                                flag18 = _httpRequest(url, postdata, Reffral, "Other", bool_63: true, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                             }
                                                                                            while (!(response.IndexOf("Please Wait") > 0 && flag18) && ((response.Contains("retry") | (response.Length < 30)) || !(!string.IsNullOrEmpty(response) && flag18)));
                                                                                            //while (string.IsNullOrEmpty(response));
                                                                                            dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                            Lock0("RedBNK", stopwatch2, response);
                                                                                        }
                                                                                        goto IL_3f6e;
                                                                                    IL_3f6e:
                                                                                        stopwatch_0 = new Stopwatch();
                                                                                        stopwatch_0.Start();
                                                                                        if (num23 <= 0)
                                                                                        {
                                                                                            int num28 = 0;
                                                                                            bool flag20;
                                                                                            while (true)
                                                                                            {
                                                                                                bool flag19 = true;
                                                                                                ((ComboBox)control.Controls["cboGateway"]).Enabled = true;
                                                                                                if (class3_0.TKT_ISCONFIRM & text9.Contains("WL"))
                                                                                                {
                                                                                                    num28 = 2;
                                                                                                    frmPayment frmPayment3 = new frmPayment();
                                                                                                    frmPayment3.tktname.Text = TktName;
                                                                                                    frmPayment3.btnSubmit.Text = "Pay 4 WL";
                                                                                                    frmPayment3.bool_7 = true;
                                                                                                    frmPayment3.string_1 = text9;
                                                                                                    frmPayment3.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                                    DialogResult dialogResult2 = frmPayment3.DialogResult;
                                                                                                    frmPayment3.Dispose();
                                                                                                    if (dialogResult2 == DialogResult.Cancel)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(2, "Availability: " + text9 + ", Ticket Stopped!", tCntrlName, null, null);
                                                                                                        frmPayment3.Dispose();
                                                                                                        return false;
                                                                                                    }
                                                                                                    flag19 = false;
                                                                                                }
                                                                                                num23++;
                                                                                                if (flag2 && flag19)
                                                                                                {
                                                                                                    num28 = 2;
                                                                                                    frmPayment frmPayment4 = new frmPayment();
                                                                                                    frmPayment4.bool_4 = flag2;
                                                                                                    frmPayment frmPayment5 = frmPayment4;
                                                                                                    frmPayment5.string_1 = frmPayment5.string_1 + "FARE HIGHER THAN SET LIMIT\nRs." + text19 + " - " + text9;
                                                                                                    frmPayment4.tktname.Text = TktName;
                                                                                                    frmPayment4.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                                    DialogResult dialogResult3 = frmPayment4.DialogResult;
                                                                                                    frmPayment4.Dispose();
                                                                                                    if (dialogResult3 != DialogResult.OK)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(2, "User Select to Stop Payment! ", tCntrlName, null, null);
                                                                                                        frmPayment4.Dispose();
                                                                                                        return false;
                                                                                                    }
                                                                                                    flag19 = false;
                                                                                                }
                                                                                                bool_63 = ((CheckBox)control.Controls["chkConfirmation"]).Checked;
                                                                                                if (bool_63 && flag19)
                                                                                                {
                                                                                                    num28 = 2;
                                                                                                    frmPayment frmPayment6 = new frmPayment();
                                                                                                    frmPayment frmPayment7 = frmPayment6;
                                                                                                    frmPayment7.string_1 = frmPayment7.string_1 + "You Have Selected Stop Pay\nRs." + text19 + " - " + text9;
                                                                                                    frmPayment6.tktname.Text = TktName;
                                                                                                    frmPayment6.bool_0 = true;
                                                                                                    frmPayment6.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                                    if (frmPayment6.DialogResult != DialogResult.OK)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(2, "User Select to Stop Payment! ", tCntrlName, null, null);
                                                                                                        frmPayment6.Dispose();
                                                                                                        return false;
                                                                                                    }
                                                                                                    frmPayment6.Dispose();
                                                                                                    flag19 = false;
                                                                                                }
                                                                                                flag20 = false;
                                                                                                lock (object_8)
                                                                                                {
                                                                                                    if (list_PaySTART.Contains(TktName) && flag19)
                                                                                                    {
                                                                                                        flag20 = true;
                                                                                                    }
                                                                                                }
                                                                                                if (flag20)
                                                                                                {
                                                                                                    num28 = 2;
                                                                                                    frmPayment frmPayment8 = new frmPayment();
                                                                                                    frmPayment8.bool_3 = flag20;
                                                                                                    frmPayment8.string_1 = "Another Ticket already Procced\nRs." + text19 + " - " + text9;
                                                                                                    frmPayment8.tktname.Text = TktName;
                                                                                                    frmPayment8.bool_0 = true;
                                                                                                    frmPayment8.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                                    if (frmPayment8.DialogResult != DialogResult.OK)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(201, "Another Ticket already Proceed", tCntrlName, null, null);
                                                                                                        frmPayment8.Dispose();
                                                                                                        return false;
                                                                                                    }
                                                                                                    frmPayment8.Dispose();
                                                                                                }
                                                                                                if (num28 <= 1)
                                                                                                {
                                                                                                    break;
                                                                                                }
                                                                                                if (!setNewBank(ref text3, ref text17, control))
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                                                                                                {
                                                                                                    Thread thread2 = new Thread(StartUPI_);
                                                                                                    thread2.IsBackground = true;
                                                                                                    thread2.Start(class3_0.BANKDETAILS + "||True||5||0000000000");
                                                                                                }
                                                                                                break;
                                                                                            }
                                                                                            lock (object_10)
                                                                                            {
                                                                                                ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                                if (list_PNR.Contains(TktName))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(204, "PNR Booked in another Pair", tCntrlName, null, null);
                                                                                                    return false;
                                                                                                }
                                                                                            }
                                                                                            if (!flag20)
                                                                                            {
                                                                                                list_PaySTART.Add(TktName);
                                                                                            }
                                                                                            updTStatus.BeginInvoke(202, string.Concat(new object[5] { "Selecting_ ", text3, " Payment!-(", "0", ")" }), tCntrlName, null, null);
                                                                                            if (text17 == "96" && num23 == 1)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                        goto IL_4644;
                                                                                    IL_3afb:
                                                                                        dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                        Lock0("Fare", stopwatch2, response);
                                                                                        goto IL_3f6e;
                                                                                        continue;
                                                                                    end_IL_375e:
                                                                                        break;
                                                                                    }
                                                                                    break;
                                                                                IL_4644:
                                                                                    try
                                                                                    {

                                                                                        bool_52 = false;
                                                                                        dictionary_TimeP["PayProcess"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                        bank = new Bank(this, class3_0);
                                                                                        bank.updateTStatus_1 = updTStatus;
                                                                                        string text26 = text17.ToUpper().Trim();
                                                                                        Class46.smethod_0(text26);
                                                                                        if (text3 == "OTOPAY")
                                                                                        {
                                                                                            text26 = "4201";
                                                                                        }
                                                                                        else if (text3.Contains("PAYZAP_AIR") & isAPP)
                                                                                        {
                                                                                            text26 = "4200";
                                                                                        }
                                                                                        else if (text3.Contains("PAYTMQR") & !isAPP)
                                                                                        {
                                                                                            text26 = "4202";
                                                                                        }
                                                                                        else if (text3.Contains("PHONEPEQR"))
                                                                                        {
                                                                                            text26 = "4203";
                                                                                        }
                                                                                        else if (text3.Contains("HDFC_DC"))
                                                                                        {
                                                                                            text26 = "4204";
                                                                                        }
                                                                                        else if (text3.Contains("SBI") & isAPP)
                                                                                        {
                                                                                            text26 = "4205";
                                                                                        }
                                                                                        else if (text3.Contains("V_RUPAY"))
                                                                                        {
                                                                                            text26 = "4206";
                                                                                        }
                                                                                        else if (text3.Contains("ICICI") & isAPP)
                                                                                        {
                                                                                            text26 = "4207";
                                                                                        }
                                                                                        switch (int.Parse(text26))// //postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"MOBILE\",\"value\":\"" + class3_0.BNK_MOBILE + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                        {
                                                                                            case 97:
                                                                                                flag15 = bank.method_134(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4204:
                                                                                                flag15 = bank.HDFC_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);//bank.HDFC_Getway(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                                //case 91:
                                                                                                //    string_92 = "{\"amount\":" + text19 + ",\"bankId\":" + text17 + ",\"errorMsg\":null,\"paramList\":{\"key\":\"MOBILE\",\"value\":\"\"},\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                //    flag15 = true;
                                                                                                break;
                                                                                            case 74:
                                                                                            case 91:
                                                                                                //cookie_ = new CookieContainer();
                                                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=NA";
                                                                                                postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"MOBILE\",\"value\":\"" + class3_0.BNK_MOBILE + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                                string_92 = response;
                                                                                                flag15 = true;
                                                                                                break;
                                                                                            case 93:
                                                                                                flag15 = bank.AirtelMoney(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 121:
                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 1....", tCntrlName, null, null);
                                                                                                url = "https://irctc.nowpay.co.in/";
                                                                                                postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                Reffral = "https://irctc.nowpay.co.in/";
                                                                                                string text15D = response.Substring(response.IndexOf("privatekey") + 19);
                                                                                                string privatekey = text15D.Substring(0, text15D.IndexOf("\">"));
                                                                                                string text15e = response.Substring(response.IndexOf("mercid") + 14);
                                                                                                string mercid = text15e.Substring(0, text15e.IndexOf("\">"));
                                                                                                string text15f = response.Substring(response.IndexOf("orderid") + 16);
                                                                                                string orderid = text15f.Substring(0, text15f.IndexOf("\">"));
                                                                                                string currency = "356";
                                                                                                string chmod = "upi";
                                                                                                string text15g = response.Substring(response.IndexOf("amount") + 15);
                                                                                                string amount = text15g.Substring(0, text15g.IndexOf("\">"));
                                                                                                string buyerEmail = "customer@irctc.co.in";
                                                                                                string buyerFirstName = "";
                                                                                                string buyerLastName = "";
                                                                                                string text15h = response.Substring(response.IndexOf("checksum") + 17);
                                                                                                string checksum = text15h.Substring(0, text15h.IndexOf("\">"));
                                                                                                postdata = "privatekey=" + privatekey + "&mercid=28688" + "&orderid=" + orderid + "&currency=" + currency + "&isocurrency=" + "INR" + "&chmod=" + chmod + "&amount=" + amount + "&buyerEmail=" + WebUtility.UrlEncode(buyerEmail) + "&buyerFirstName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum + "&arpyVer=3";
                                                                                                url = "https://payments.airpay.co.in/pay/index.php";
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 2....", tCntrlName, null, null);
                                                                                                string text15DE = response.Substring(response.IndexOf("paymentChannelsData") + 23);
                                                                                                string encccc = text15DE.Substring(0, text15DE.IndexOf("';"));

                                                                                                Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                url = "https://payments.airpay.co.in/pageLoadTime.php";
                                                                                                string orig = Decrypt(encccc);
                                                                                                string transaction_id = jsonData_Serial(orig, "transaction_id");
                                                                                                string amountss = jsonData_Serial(orig, "amount");
                                                                                                string timef = "1407";
                                                                                                string b4 = Base64Encode(Base64Encode("1407@28688@" + transaction_id + "@c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d"));
                                                                                                string test = "{\"loadTime\":\"" + timef + "\",\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"" + privatekey + "\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                                test = "{\"loadTime\":1407,\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                                string outputTest = Encrypt(test);
                                                                                                outputTest = HttpUtility.UrlEncode(outputTest);
                                                                                                postdata = "requestParam=" + outputTest + "&scriptencrypt=Y";
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_, "payment");
                                                                                                if (qrpayment)
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Scan Qr and Pay....", tCntrlName, null, null);
                                                                                                    encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"qrcode\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                                    encccc = Encrypt(encccc);
                                                                                                    url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                                    encccc = HttpUtility.UrlEncode(encccc);
                                                                                                    postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                                    Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                    airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                    string ogbase64 = jsonData_Serial(response, "image");
                                                                                                    //string RID = jsonData_Serial(response, "RID");
                                                                                                    ogbase64 = ogbase64.Replace("data:image\\/png;base64,", "");
                                                                                                    ogbase64 = ogbase64.Replace("\\/", "/");
                                                                                                    FrmQr frmOTPPP = new FrmQr();
                                                                                                    frmOTPPP.Form1_Load(ogbase64, TktName, text19);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Accept Request from Mobile....", tCntrlName, null, null);
                                                                                                    string[] arrayvA = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                                    string vpaA = arrayvA[0].Trim();
                                                                                                    encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"" + vpaA + "\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"upi_vpa\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                                    encccc = Encrypt(encccc);
                                                                                                    url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                                    encccc = HttpUtility.UrlEncode(encccc);
                                                                                                    postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                                    Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                    airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                    if (response.Contains("Invalid Payee Virtual address"))
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(1, "Invalid Upi Adress...", tCntrlName, null, null);
                                                                                                        return false;
                                                                                                    }
                                                                                                }
                                                                                                //updTStatus.BeginInvoke(1, "Scan Qr and Pay....", tCntrlName, null, null);

                                                                                                //step4
                                                                                                string RID = jsonData_Serial(response, "RID");
                                                                                            ILREEEE:

                                                                                                postdata = "privatekey=" + privatekey + "&orderid=" + orderid + "&transaction_id=" + transaction_id + "&mercid=28688&amount=" + amountss + "&isocurrency=inr&customvar=&checksum=" + checksum + "&RID=" + RID + "&ch_id=" + transaction_id + "&submode=vpa";
                                                                                                Reffral = "https://payments.airpay.co.in/";
                                                                                                url = "https://secure.airpay.co.in/upi/npci/response_upi.php";
                                                                                                airpayF(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                if (!response.Contains("\"BANKRESPONSEMSG\":\"SUCCESS\""))
                                                                                                {
                                                                                                    goto ILREEEE;
                                                                                                }
                                                                                                //else if (response.Contains("SUCCESS"))
                                                                                                //{
                                                                                                //    goto ILREEEE;
                                                                                                //}
                                                                                                updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                                postdata = "action=failed_transaction&privatekey=" + privatekey + "&orderid=" + orderid + "&transaction_id=" + transaction_id + "&TRANSACTIONTYPE=320&mercid=28688&amount=" + amountss + "&tabselect=upi&customvar=&checksum=" + checksum + "&RID=" + RID + "&chid=" + transaction_id;
                                                                                                Reffral = "https://payments.airpay.co.in/";
                                                                                                url = "https://secure.airpay.co.in/upi/npci/response_manage.php ";
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                //step6
                                                                                                if (!response.Contains("https://www.irctc.co.in/eticketing/mbi/MobileBankResponse"))
                                                                                                {
                                                                                                    string_92 = response;
                                                                                                    flag15 = false;
                                                                                                    break;
                                                                                                }
                                                                                                updTStatus.BeginInvoke(1, "Redirecting to PNR serever.....", tCntrlName, null, null);
                                                                                                string encair = response.Substring(response.IndexOf("encdata") + 16);
                                                                                                encairf = encair.Substring(0, encair.IndexOf("\">"));
                                                                                                if (failissuefix)
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Redirecting to PNR serever.....", tCntrlName, null, null);
                                                                                                    url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse";
                                                                                                    Reffral = "https://irctc.nowpay.co.in/";
                                                                                                    postdata = "bankCode=AIRP_MOB_AG" + "&appType=ANDROID" + "&encdata=" + encairf;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                }
                                                                                                string_92 = response;
                                                                                                flag15 = true;
                                                                                                break;
                                                                                            case 144:
                                                                                                if (qrpayment)
                                                                                                {
                                                                                                    url = "https://pay.easebuzz.in/pay/ir/secure";
                                                                                                    postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    url = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    airpay(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    string[] array2022 = class3_0.easebuz.Split(new string[1] { "/" }, StringSplitOptions.None);
                                                                                                    string accesskey = array2022[2];
                                                                                                    string coupouns = "[]";
                                                                                                    url = "https://pay.easebuzz.in/submitInitiatePayment";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    updTStatus.BeginInvoke(1, text3 + " Payment Step 1...", tCntrlName, null, null);
                                                                                                    postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    //string qrlinkk = GetString(response, "qr_link");
                                                                                                    updTStatus.BeginInvoke(1, "Scan & Pay..click paid when done", tCntrlName, null, null);
                                                                                                    string text15DEF = response.Substring(response.IndexOf("qr_link") + 11);
                                                                                                    string enccccF = text15DEF.Substring(0, text15DEF.IndexOf(","));
                                                                                                    char[] charsToTrim = { '"' };
                                                                                                    string cleanString = enccccF.Trim(charsToTrim);
                                                                                                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                                                                                                    QRCodeData qrCodeData = qrGenerator.CreateQrCode(cleanString, QRCodeGenerator.ECCLevel.Q);
                                                                                                    Base64QRCode qrCode = new Base64QRCode(qrCodeData);
                                                                                                    string qrCodeImageAsBase64 = qrCode.GetGraphic(20);
                                                                                                    FrmQr frmOTPP = new FrmQr();
                                                                                                    frmOTPP.Form1_Load(qrCodeImageAsBase64, TktName, text19);
                                                                                                ILrestat:
                                                                                                    url = "https://pay.easebuzz.in/upi/checkStatus";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    if (!response.Contains("Payment Successful"))
                                                                                                    {
                                                                                                        goto ILrestat;
                                                                                                    }
                                                                                                    updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                                    url = "https://pay.easebuzz.in/response/hecupiresp";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    string text15DEE = response.Substring(response.IndexOf("encdata") + 16);
                                                                                                    string ENCDATA = text15DEE.Substring(0, text15DEE.IndexOf("\"/>"));
                                                                                                    class3_0.easebuzDATA = ENCDATA;
                                                                                                    string text15DEEf = response.Substring(response.IndexOf("form action") + 13);
                                                                                                    if (failissuefix)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(1, "Redirect to PNR Server", tCntrlName, null, null);
                                                                                                        url = text15DEEf.Substring(0, text15DEEf.IndexOf("' method"));
                                                                                                        Reffral = "https://pay.easebuzz.in/";
                                                                                                        postdata = "bankCode=EASEBUZZ_MOB_AG" + "&appType=ANDROID" + "&encdata=" + class3_0.easebuzDATA;
                                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                    }
                                                                                                    string_92 = response;
                                                                                                    flag15 = true;
                                                                                                    break;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    string[] arrayv = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                                    string vpa = arrayv[0].Trim();
                                                                                                    url = "https://pay.easebuzz.in/pay/ir/secure";
                                                                                                    postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    url = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    airpay(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    string[] array2022 = class3_0.easebuz.Split(new string[1] { "/" }, StringSplitOptions.None);
                                                                                                    string accesskey = array2022[2];
                                                                                                    string coupouns = "[]";
                                                                                                    url = "https://pay.easebuzz.in/submitInitiatePayment";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    updTStatus.BeginInvoke(1, "Eazebuzz Step 1...", tCntrlName, null, null);
                                                                                                    postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    //string qrlinkk = GetString(response, "qr_link");
                                                                                                    updTStatus.BeginInvoke(1, "Accept Request From Mobile", tCntrlName, null, null);

                                                                                                ILrestat:
                                                                                                    url = "https://pay.easebuzz.in/upi/checkStatus";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";
                                                                                                    //postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    if (!response.Contains("Payment Successful"))
                                                                                                    {
                                                                                                        goto ILrestat;
                                                                                                    }
                                                                                                    updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                                    url = "https://pay.easebuzz.in/response/hecupiresp";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";
                                                                                                    //postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    string text15DEE = response.Substring(response.IndexOf("encdata") + 16);
                                                                                                    string ENCDATA = text15DEE.Substring(0, text15DEE.IndexOf("\"/>"));
                                                                                                    class3_0.easebuzDATA = ENCDATA;
                                                                                                    string text15DEEf = response.Substring(response.IndexOf("form action") + 13);
                                                                                                    if (failissuefix)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(1, "Redirect to PNR Server", tCntrlName, null, null);
                                                                                                        url = text15DEEf.Substring(0, text15DEEf.IndexOf("' method"));
                                                                                                        Reffral = "https://pay.easebuzz.in/";
                                                                                                        postdata = "bankCode=EASEBUZZ_MOB_AG" + "&appType=ANDROID" + "&encdata=" + class3_0.easebuzDATA;
                                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    }
                                                                                                    string_92 = response;
                                                                                                    flag15 = true;
                                                                                                    break;
                                                                                                }

                                                                                            case 96:
                                                                                                string_92 = response;
                                                                                                flag15 = true;
                                                                                                break;
                                                                                            case 98:
                                                                                            case 108:
                                                                                                //case 125:
                                                                                                flag15 = bank.PayU_(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;

                                                                                            case 125:
                                                                                                flag15 = bank.PayU_Indus(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 1000:
                                                                                                frmOTP frmOTP22 = new frmOTP();
                                                                                                frmOTP22.method_1(control_0, rectangle_0, bool_2: false, balanceee, class3_0.BANKSAVEAS);
                                                                                                if (frmOTP22.DialogResult != DialogResult.OK)
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(2, "Enter otp", tCntrlName, null, null);
                                                                                                    return false;
                                                                                                }
                                                                                                class3_0.ewalletotp = frmOTP22.string_0.Trim();
                                                                                                frmOTP22.Dispose();
                                                                                                flag15 = true; //bank.PayU_Indus(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 120:
                                                                                                flag15 = bank.ICICI_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 69:
                                                                                                flag15 = bank.method_131(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 101:
                                                                                                url = jsonData_Serial(response, "POST_URL");
                                                                                                string refid = response.Substring(response.IndexOf("referenceId") + 16);
                                                                                                refid = refid.Substring(0, refid.IndexOf("\""));
                                                                                                refid = refid.Replace("\\", "");
                                                                                                //string refid = jsonData_Serial(response, "referenceId");
                                                                                                postdata = "version=1&referenceId="+refid;
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                string string_970 = response;
                                                                                                string string_960 = "";
                                                                                                if (string_970.Contains("JWT"))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, text3 + " Payment Step 5....", tCntrlName, null, null);
                                                                                                    postdata = class3_0.Method_SerialInp(string_970, ref url, false);
                                                                                                    postdata = response.Substring(response.IndexOf("JWT") + 23);
                                                                                                    postdata = postdata.Substring(0, postdata.IndexOf(">"));
                                                                                                    postdata = "JWT=" + postdata;
                                                                                                    bool_51 = true;
                                                                                                    if (_Request(url, postdata, string_92, Proxy_, ref cookie_, true, true, 60000, 60000, ref response, ref errormsg, ref Exception_) && !string.IsNullOrEmpty(string_970))
                                                                                                    {



                                                                                                        Reffral = "https://secure.airpay.co.in/";
                                                                                                        postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                                        string referid = response.Substring(response.IndexOf("='referenceId' type=\"hidden\"") + 36);
                                                                                                        referid = referid.Substring(0, referid.IndexOf("\">"));
                                                                                                        referid = referid.Replace("=\"", "");
                                                                                                        string text15 = response.Substring(response.IndexOf("dfUrlFullValue") + 37);
                                                                                                        url = text15.Substring(0, text15.IndexOf("\">"));
                                                                                                        url = url + "&origin=CruiseAPI";
                                                                                                        url = url.Replace("amp;", "");
                                                                                                        postdata = "nonce=" + HighQualityRandomString();//ba90847b-2fa2-40eb-bf22-cb54f0585b84";


                                                                                                        bool_51 = true;
                                                                                                        if (_Request(url, postdata, "https://centinelapi.cardinalcommerce.com/", Proxy_, ref cookie_, true, true, 60000, 60000, ref string_970, ref string_960, ref Exception_))
                                                                                                        {
                                                                                                            Reffral = url;
                                                                                                            url = "https://geo.cardinalcommerce.com/DeviceFingerprintWeb/V2/Browser/SaveBrowserData";
                                                                                                            postdata = "{\"BinConfigIdentifiers\":[],\"Cookies\":{\"Legacy\":false,\"LocalStorage\":null,\"SessionStorage\":true},\"DeviceChannel\":\"Browser\",\"Extended\":{\"Browser\":{\"Adblock\":true,\"AvailableJsFonts\":[],\"DoNotTrack\":\"unknown\",\"JavaEnabled\":false},\"Device\":{\"ColorDepth\":24,\"Cpu\":\"unknown\",\"Platform\":\"Linux armv8l\",\"TouchSupport\":{\"MaxTouchPoints\":5,\"OnTouchStartAvailable\":true,\"TouchEventCreationSuccessful\":true}}},\"Fingerprint\":\"b000b500436d597e95a48c7c2b25bac9\",\"FingerprintingTime\":510,\"FingerprintDetails\":{\"Version\":\"1.5.1\"},\"Language\":\"en-US\",\"Latitude\":null,\"Longitude\":null,\"OrgUnitId\":\"6034c49e287c36651cb3d1a8\",\"Origin\":\"CruiseAPI\",\"Plugins\":[],\"ReferenceId\":\"8a7ea4a4-1325-433f-bb0d-2dc24dc7e2e2\",\"Referrer\":\"https://centinelapi.cardinalcommerce.com/\",\"Screen\":{\"FakedResolution\":false,\"Ratio\":2.238888888888889,\"Resolution\":\"806x360\",\"UsableResolution\":\"806x360\",\"CCAScreenSize\":\"01\"},\"CallSignEnabled\":null,\"ThreatMetrixEnabled\":\"false\",\"ThreatMetrixEventType\":\"PAYMENT\",\"ThreatMetrixAlias\":\"Default\",\"TimeOffset\":-330,\"UserAgent\":\"Mozilla/5.0 (Linux; Android 12; TECNO BF7 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/111.0.5563.58 Mobile Safari/537.36\",\"UserAgentDetails\":{\"FakedOS\":false,\"FakedBrowser\":false},\"BinSessionId\":\"ba90847b-2fa2-40eb-bf22-cb54f0585b84\"}";
                                                                                                            airpayFuck(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            //otp
                                                                                                            updTStatus.BeginInvoke(1, text3 + " Payment Step 6....", tCntrlName, null, null);
                                                                                                            string requestdata = "{\"MessageType\":\"profile.completed\",\"SessionId\":\"" + referid + "\",\"Status\":true}";
                                                                                                            postdata = "txnId=" + refid + "&requestData=" + HttpUtility.UrlEncode(requestdata);//%7B%22MessageType%22%3A%22profile.completed%22%2C%22SessionId%22%3A%221665d582-1226-46cf-8af4-858a3c29cad9%22%2C%22Status%22%3Atrue%7D";
                                                                                                            url = "https://api.zaakpay.com/api/3ds2/callback/deviceData";
                                                                                                            airpay2(url, postdata, "https://api.zaakpay.com/api/3ds2/initiate", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            string jwtt = response.Substring(response.IndexOf("JWT") + 12);
                                                                                                            jwtt = jwtt.Substring(0, jwtt.IndexOf("' />"));
                                                                                                            string mddd = response.Substring(response.IndexOf("MD\" value") + 11);
                                                                                                            mddd = mddd.Substring(0, mddd.IndexOf("'"));
                                                                                                            postdata = "JWT=" + jwtt + "&MD=" + mddd;
                                                                                                            url = "https://centinelapi.cardinalcommerce.com/V2/Cruise/StepUp";
                                                                                                            airpay2(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            //bank call
                                                                                                            //string jwtt = response.Substring(response.IndexOf("JWT") + 12);
                                                                                                            //jwtt = jwtt.Substring(0, jwtt.IndexOf("' />"));
                                                                                                            //string mddd = response.Substring(response.IndexOf("MD\" value") + 11);
                                                                                                            //mddd = mddd.Substring(0, mddd.IndexOf("'"));
                                                                                                            //postdata = "JWT=" + jwtt + "&MD=" + mddd;
                                                                                                            //url = "https://isg-3dsecure.in/GeniusVACS-NSDL/PaRequestHandler";
                                                                                                            //airpay2(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");

                                                                                                            url = response.Substring(response.IndexOf("acsUrl") + 29);
                                                                                                            url = url.Substring(0, url.IndexOf("\""));
                                                                                                            
                                                                                                            string pareqq = response.Substring(response.IndexOf("payload") + 31);
                                                                                                            pareqq = pareqq.Substring(0, pareqq.IndexOf("\""));

                                                                                                            string mscidd = response.Substring(response.IndexOf("mcsId") + 27);//HttpUtility.UrlEncode()
                                                                                                            mscidd = mscidd.Substring(0, mscidd.IndexOf("\""));
                                                                                                            postdata = "PaReq=" + HttpUtility.UrlEncode(pareqq) + "&MD=" + HttpUtility.UrlEncode(mscidd) + "&TermUrl=https://centinelapi.cardinalcommerce.com/V1/TermURL/Overlay/CCA";
                                                                                                            airpay2(url, postdata, "https://centinelapi.cardinalcommerce.com/", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            if (response.Contains("Please use the IPIN to authenticate the transaction"))
                                                                                                            {

                                                                                                                //    string acctid = string_97.Substring(string_97.IndexOf("acctId") + 15);
                                                                                                                //    acctid = acctid.Substring(0, acctid.IndexOf("\">"));
                                                                                                                //    string_93 = string_97.Substring(string_97.IndexOf("(\"Login\").action") + 20);
                                                                                                                url = "https://isg-3dsecure.in/GeniusVACS-NSDL/validateIPIN.action";
                                                                                                                //reotp:
                                                                                                                url = "https://isg-3dsecure.in/GeniusVACS-NSDL/validateIPIN.action";
                                                                                                                //string text36OTP = string nsdlotpm = mobik[3];


                                                                                                                postdata = "pwd=" + nsdlotpm;
                                                                                                                airpay(url, postdata, "https://isg-3dsecure.in/GeniusVACS-NSDL/PaRequestHandler", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                                // string_93 = "https://api.tachyon.hdfcbank.com/cipher3ds/edith/v1.0/tenants/1/authenticate/getStatus?authContextId=" + authenticateid;
                                                                                                                //_Request(string_93, string_94, "https://isg-3dsecure.in/GeniusVACS-NSDL/PaRequestHandler", webProxy_3, ref cookieContainer_, true, true, 60000, 60000, ref string_97, ref string_96, ref webException_0);

                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                //flag15 = //bank.MobiKwikPay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 19:
                                                                                                flag15 = bank.method_128(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 64:
                                                                                                flag15 = bank.method_181(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4202:
                                                                                                //start
                                                                                                //if (isAPP)
                                                                                                //{
                                                                                                //    string encdatapaytm = GetString_(response, "ENC_DATA\",\"value", "\"");
                                                                                                //    encdatapaytm = HttpUtility.UrlEncode(encdatapaytm);
                                                                                                //   // string_95 = string_95.Replace("%5cn", "%0A");
                                                                                                //    string CHECKSUMHASHpaytm = GetString_(response, "CHECKSUMHASH\",\"value", "\"");
                                                                                                //    CHECKSUMHASHpaytm = HttpUtility.UrlEncode(CHECKSUMHASHpaytm);
                                                                                                //    string MIDpaytm = GetString_(response, "MID\",\"value", "\"");
                                                                                                //    url = GetString_(response, "bankUrl\",\"value", "\"");
                                                                                                //    postdata = text9 = "MID=" + MIDpaytm + "&CHECKSUMHASH=" + CHECKSUMHASHpaytm + "&ENC_DATA=" + encdatapaytm;
                                                                                                //}
                                                                                               // else
                                                                                                //{
                                                                                                    postdata = class3_0.Method_SerialInp(response, ref url, true);
                                                                                                //}
                                                                                                
                                                                                                Reffral = "https://www.irctc.co.in/";
                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 1....", tCntrlName, null, null);
                                                                                                airpay_PAYTMQR(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                Thread.Sleep(2000);
                                                                                                string pushdata = response.Substring(response.IndexOf("pushAppData=") + 13);
                                                                                                pushdata = pushdata.Substring(0, pushdata.IndexOf("\","));
                                                                                                // before: d29ybGQh
                                                                                                var base64EncodedBytes = Convert.FromBase64String(pushdata);
                                                                                                // after: 119 111 114 108 100 33
                                                                                                var base64qr = Encoding.UTF8.GetString(base64EncodedBytes);
                                                                                                string base64qrr = jsonData_Serial(base64qr, "dataurl");
                                                                                                string paytmmid = jsonData_Serial(base64qr, "mid");
                                                                                                string paytmorderid = jsonData_Serial(base64qr, "custId");//custId
                                                                                                // after: world!
                                                                                                updTStatus.BeginInvoke(1, " Scan & Click Paid", tCntrlName, null, null);
                                                                                                FrmQr frmOTPPPP = new FrmQr();
                                                                                                frmOTPPPP.Form1_Load(base64qrr, TktName, text19);
                                                                                                Reffral = url;
                                                                                                string vaaal = paytmtxnid(paytmorderid);
                                                                                                string eventid = jsonData_Serial(vaaal, "event");
                                                                                                string acquirementId = jsonData_Serial(vaaal, "acquirementId");
                                                                                                string cashierRequestId = jsonData_Serial(vaaal, "cashierRequestId");

                                                                                                url = "https://securegw.paytm.in/theia/transactionStatus?MID=" + paytmmid + "&ORDER_ID=" + paytmorderid;
                                                                                                postdata = "merchantId=" + paytmmid + "&acquirementId="+ acquirementId + "&cashierRequestId="+ cashierRequestId + "&paymentMode=UPI&orderId=" + paytmorderid + "&topicName=DYNAMIC_QR&status=SUCCESS&_id=" + eventid + "&transId="+ acquirementId;
                                                                                                //postdata = "merchantId=" + paytmmid + "&ORDER_ID=" + paytmorderid + "&transId=" + "230412142034235539" + "&cashierRequestId=" + "d449999bd3e343e3b8c81b3bcde107f802226apsouth1computeinternal284411" + "&paymentMode=UPI";
                                                                                                airpay_PAYTMQR(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                string_92 = response;
                                                                                                flag15 = true;//bank.method_181(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 15:
                                                                                                flag15 = bank.method_118(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 16:
                                                                                                flag15 = bank.method_135(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 17:
                                                                                                flag15 = bank.method_167(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 66:
                                                                                                flag15 = bank.method_119(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4:
                                                                                                flag15 = bank.method_141(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 5:
                                                                                                flag15 = bank.method_180(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 3:
                                                                                                flag15 = bank.method_109(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 1:
                                                                                                {
                                                                                                    CookieContainer cookieContainer_ = null;
                                                                                                    if (!(flag15 = bank.SbiNetBanking(response, class3_0.BANKSAVEAS, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus, ref cookieContainer_)) && cookieContainer_ != null)
                                                                                                    {
                                                                                                        ThreadPool.QueueUserWorkItem(method_110, cookieContainer_);
                                                                                                    }
                                                                                                    break;
                                                                                                }
                                                                                            case 9:
                                                                                                flag15 = bank.method_127(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 105:
                                                                                            case 106:
                                                                                            case 141:
                                                                                                flag15 = bank.Multi_RazorPay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 115:
                                                                                                flag15 = bank.ICICI_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4206:
                                                                                                flag15 = bank.ICICI_Getway_Rupay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 116:
                                                                                            case 111:
                                                                                                flag15 = bank.method_159(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;

                                                                                            case 4203:
                                                                                                flag15 = bank.Method_PhonepeQr(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 30:
                                                                                                flag15 = bank.method_142(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 113:
                                                                                            case 118:
                                                                                                flag15 = bank.IRCTC_UPI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 122:
                                                                                                flag15 = bank.IRCTC_UPIHDFC(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 147:
                                                                                                flag15 = bank.IRCTC_UPICASHFREE(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 137:
                                                                                                flag15 = bank.safexpay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4201:
                                                                                                flag15 = bank.method_160_oto(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 25:
                                                                                                flag15 = bank.method_129(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 41:
                                                                                                flag15 = bank.method_106(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 57:
                                                                                                flag15 = bank.method_115(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 36:
                                                                                                flag15 = bank.method_114(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 45:
                                                                                                flag15 = bank.method_125(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 26:
                                                                                                flag15 = bank.method_126(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 21:
                                                                                                flag15 = bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4200:
                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 1....", tCntrlName, null, null);
                                                                                                url = "https://irctc.nowpay.co.in/";
                                                                                                postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                Reffral = "https://irctc.nowpay.co.in/";
                                                                                                text15D = response.Substring(response.IndexOf("privatekey") + 19);
                                                                                                privatekey = text15D.Substring(0, text15D.IndexOf("\">"));
                                                                                                text15e = response.Substring(response.IndexOf("mercid") + 14);
                                                                                                mercid = text15e.Substring(0, text15e.IndexOf("\">"));
                                                                                                text15f = response.Substring(response.IndexOf("orderid") + 16);
                                                                                                orderid = text15f.Substring(0, text15f.IndexOf("\">"));
                                                                                                currency = "356";
                                                                                                chmod = "pg_nb_wallet_ppc";
                                                                                                text15g = response.Substring(response.IndexOf("amount") + 15);
                                                                                                amount = text15g.Substring(0, text15g.IndexOf("\">"));
                                                                                                buyerEmail = "customer@irctc.co.in";
                                                                                                buyerFirstName = "";
                                                                                                buyerLastName = "";
                                                                                                text15h = response.Substring(response.IndexOf("checksum") + 17);
                                                                                                checksum = text15h.Substring(0, text15h.IndexOf("\">"));
                                                                                                postdata = "privatekey=" + privatekey + "&mercid=28688" + "&orderid=" + orderid + "&currency=" + currency + "&isocurrency=" + "INR" + "&chmod=" + chmod + "&amount=" + amount + "&buyerEmail=" + WebUtility.UrlEncode(buyerEmail) + "&buyerFirstName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum + "&arpyVer=3";
                                                                                                url = "https://payments.airpay.co.in/pay/index.php";
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 2....", tCntrlName, null, null);
                                                                                                text15DE = response.Substring(response.IndexOf("paymentChannelsData") + 23);
                                                                                                encccc = text15DE.Substring(0, text15DE.IndexOf("';"));

                                                                                                Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                url = "https://payments.airpay.co.in/pageLoadTime.php";
                                                                                                orig = Decrypt(encccc);
                                                                                                transaction_id = jsonData_Serial(orig, "transaction_id");
                                                                                                amountss = jsonData_Serial(orig, "amount");
                                                                                                timef = "1407";
                                                                                                b4 = Base64Encode(Base64Encode("1407@28688@" + transaction_id + "@c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d"));
                                                                                                test = "{\"loadTime\":\"" + timef + "\",\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"" + privatekey + "\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                                test = "{\"loadTime\":1407,\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                                outputTest = Encrypt(test);
                                                                                                outputTest = HttpUtility.UrlEncode(outputTest);
                                                                                                postdata = "requestParam=" + outputTest + "&scriptencrypt=Y";
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_, "payment");
                                                                                                string[] splitbank = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                                string ccnum = splitbank[0];

                                                                                                string cccccc = ccnum;
                                                                                                cccccc = cccccc.Insert(4, " ");
                                                                                                cccccc = cccccc.Insert(9, " ");
                                                                                                cccccc = cccccc.Insert(14, " ");
                                                                                                string bincc = Base64Encode(ccnum.Substring(0, 8));
                                                                                                string expmonth = splitbank[1];
                                                                                                string expyear = splitbank[2];
                                                                                                expyear = expyear.Substring(2);

                                                                                                string pass3d = splitbank[3];
                                                                                                string cvv = splitbank[4];
                                                                                                string namecc = splitbank[6];
                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 3....", tCntrlName, null, null);
                                                                                                encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"qrcode\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                                encccc = Encrypt("{\"cardnum\":\"" + bincc + "\",\"mercid\":\"28688\",\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"privatekey\":\"" + privatekey + "\",\"txn_id\":\"" + transaction_id + "\",\"mode\":\"pg\",\"errorLog\":[]}");
                                                                                                url = "https://payments.airpay.co.in/pay/v2/singleclickuser/validate_cardtype_api.php";
                                                                                                encccc = HttpUtility.UrlEncode(encccc);
                                                                                                postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                                Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                amountss = jsonData_Serial(response, "totalamount");
                                                                                                //pay
                                                                                                //updTStatus.BeginInvoke(1, "Scan Qr and Pay....", tCntrlName, null, null);
                                                                                                encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"qrcode\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                                encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amount + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"pg_nb_wallet_ppc\",\"prv_chmod\":\"\",\"customvar\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.75\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"3\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"\",\"surcharge_rule\":\"{\\\"status\\\":\\\"200\\\",\\\"cardtype\\\":\\\"C\\\",\\\"bankname\\\":[],\\\"companyname\\\":\\\"visa\\\",\\\"country\\\":\\\"india\\\",\\\"surcharge\\\":\\\"0.75\\\",\\\"surcharge_rule\\\":{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"4\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_pg_cc_dom\\\",\\\"CHANNELID\\\":\\\"3\\\",\\\"CHANNEL\\\":\\\"pg\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":\\\"C\\\",\\\"AMOUNT_FILTER_TYPE\\\":\\\"G\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"0.00\\\",\\\"FEES_MSF\\\":\\\"1.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"},\\\"totalamount\\\":\\\"" + amountss + "\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"channel_mode\":\"credit\",\"cnumtxt\":\"" + cccccc + "\",\"cnum\":\"" + ccnum + "\",\"fullname\":\"" + namecc + "\",\"cexpiry_mm\":\"" + expmonth + "\",\"cexpiry_yy\":\"" + expyear + "\",\"cvv\":\"" + cvv + "\",\"sc_savecard\":\"N\",\"checkSurchargeCardType\":\"C\",\"checkSurchargeCardPri\":\"visa\",\"checkSurchargeCardCountry\":\"india\",\"isFormSubmit\":false,\"errorLog\":[]}";

                                                                                                encccc = Encrypt(encccc);
                                                                                                url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                                encccc = HttpUtility.UrlEncode(encccc);
                                                                                                postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                                Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                url = jsonData_Serial(response, "redirect");
                                                                                                string cardinal = url + "&3ds=1";
                                                                                                string cardref = url;
                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 4....", tCntrlName, null, null);
                                                                                                airpay2(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                //otp
                                                                                                string string_96 = "";
                                                                                                string string_97 = response;
                                                                                                if (string_97.Contains("JWT"))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, text3 + " Payment Step 5....", tCntrlName, null, null);
                                                                                                    postdata = class3_0.Method_SerialInp(string_97, ref url, false);

                                                                                                    bool_51 = true;
                                                                                                    if (_Request(url, postdata, string_92, Proxy_, ref cookie_, true, true, 60000, 60000, ref response, ref errormsg, ref Exception_) && !string.IsNullOrEmpty(string_97))
                                                                                                    {



                                                                                                        Reffral = "https://secure.airpay.co.in/";
                                                                                                        postdata = class3_0.Method_SerialInp(response, ref url, false);

                                                                                                        string text15 = response.Substring(response.IndexOf("dfUrlFullValue") + 37);
                                                                                                        url = text15.Substring(0, text15.IndexOf("\">"));
                                                                                                        url = url + "&origin=CruiseAPI";
                                                                                                        url = url.Replace("amp;", "");
                                                                                                        postdata = "nonce=" + HighQualityRandomString();//ba90847b-2fa2-40eb-bf22-cb54f0585b84";


                                                                                                        bool_51 = true;
                                                                                                        if (_Request(url, postdata, "https://centinelapi.cardinalcommerce.com/", Proxy_, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_))
                                                                                                        {
                                                                                                            Reffral = url;
                                                                                                            url = "https://geo.cardinalcommerce.com/DeviceFingerprintWeb/V2/Browser/SaveBrowserData";
                                                                                                            postdata = "{\"BinConfigIdentifiers\":[],\"Cookies\":{\"Legacy\":false,\"LocalStorage\":null,\"SessionStorage\":true},\"DeviceChannel\":\"Browser\",\"Extended\":{\"Browser\":{\"Adblock\":true,\"AvailableJsFonts\":[],\"DoNotTrack\":\"unknown\",\"JavaEnabled\":false},\"Device\":{\"ColorDepth\":24,\"Cpu\":\"unknown\",\"Platform\":\"Linux armv8l\",\"TouchSupport\":{\"MaxTouchPoints\":5,\"OnTouchStartAvailable\":true,\"TouchEventCreationSuccessful\":true}}},\"Fingerprint\":\"b000b500436d597e95a48c7c2b25bac9\",\"FingerprintingTime\":510,\"FingerprintDetails\":{\"Version\":\"1.5.1\"},\"Language\":\"en-US\",\"Latitude\":null,\"Longitude\":null,\"OrgUnitId\":\"6034c49e287c36651cb3d1a8\",\"Origin\":\"CruiseAPI\",\"Plugins\":[],\"ReferenceId\":\"8a7ea4a4-1325-433f-bb0d-2dc24dc7e2e2\",\"Referrer\":\"https://centinelapi.cardinalcommerce.com/\",\"Screen\":{\"FakedResolution\":false,\"Ratio\":2.238888888888889,\"Resolution\":\"806x360\",\"UsableResolution\":\"806x360\",\"CCAScreenSize\":\"01\"},\"CallSignEnabled\":null,\"ThreatMetrixEnabled\":\"false\",\"ThreatMetrixEventType\":\"PAYMENT\",\"ThreatMetrixAlias\":\"Default\",\"TimeOffset\":-330,\"UserAgent\":\"Mozilla/5.0 (Linux; Android 12; TECNO BF7 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/111.0.5563.58 Mobile Safari/537.36\",\"UserAgentDetails\":{\"FakedOS\":false,\"FakedBrowser\":false},\"BinSessionId\":\"ba90847b-2fa2-40eb-bf22-cb54f0585b84\"}";
                                                                                                            airpayFuck(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            //otp
                                                                                                            updTStatus.BeginInvoke(1, text3 + " Payment Step 6....", tCntrlName, null, null);
                                                                                                            airpay2(cardinal, null, cardref, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            if (response.Contains("TermUrl"))
                                                                                                            {

                                                                                                                string_94 = class3_0.Method_SerialInp(response, ref string_93, false);
                                                                                                                text9 = response.Substring(response.IndexOf("PaReq") + 14);
                                                                                                                string text12 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                text9 = response.Substring(response.IndexOf("name=\"MD") + 17);
                                                                                                                string text13MM = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                text9 = response.Substring(response.IndexOf("name=\"TermUrl") + 22);
                                                                                                                string text14 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                text14 = text14.Replace("amp;", "");
                                                                                                                if (text13MM.Contains("_______"))
                                                                                                                {
                                                                                                                    text12 = WebUtility.UrlEncode(text12);
                                                                                                                    text12 = text12.Replace("%0A", "%0D%0A");
                                                                                                                    string_94 = "PaReq=" + text12 + "&TermUrl=" + WebUtility.UrlEncode(text14) + "&MD=" + WebUtility.UrlEncode(text13MM);
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    string_94 = "MD=" + text13MM + "&PaReq=" + HttpUtility.UrlEncode(text12) + "&TermUrl=" + WebUtility.UrlEncode(text14);
                                                                                                                }
                                                                                                                bool_51 = true;
                                                                                                                if (_Request(string_93, string_94, string_92, webProxy_3, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_) && string_97.IndexOf("PayZapp secure PIN") > 0)
                                                                                                                {
                                                                                                                    string_92 = string_93;
                                                                                                                    string_94 = class3_0.Method_SerialInp(string_97, ref string_93, false);
                                                                                                                    string_94 = clsPostData.SetPost(string_94, "txtPassword", pass3d);
                                                                                                                    string text15MM = string_97.Substring(string_97.IndexOf("XID") + 12);
                                                                                                                    string value5 = text15MM.Substring(0, text15MM.IndexOf("\""));
                                                                                                                    string_94 = "XID=" + WebUtility.UrlEncode(value5) + "&txtLogin=-1&txtPassword=" + pass3d + "&xdeviceId=&bTz=";
                                                                                                                    string_93 = "https://hdfc-acs.wibmo.com" + string_93;

                                                                                                                    updTStatus.BeginInvoke(1, text3 + " Payment Step 7....", tCntrlName, null, null);
                                                                                                                    bool_51 = true;
                                                                                                                    if (_Request(string_93, string_94, string_92, webProxy_3, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_))
                                                                                                                    {
                                                                                                                        Lock("5th Hit output = " + string_97);
                                                                                                                        if (string_97.IndexOf("Authentication failed") > 0)
                                                                                                                        {
                                                                                                                            if (updateTStatus_1 != null)
                                                                                                                            {
                                                                                                                                updateTStatus_1.BeginInvoke(1, "Invalid PIN", tCntrlName_, null, null);
                                                                                                                            }
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        string_92 = string_93;
                                                                                                                        string_94 = class3_0.Method_SerialInp(string_97, ref string_93, true);
                                                                                                                        text9 = string_97.Substring(string_97.IndexOf("PaRes") + 14);
                                                                                                                        string value6 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                        text9 = string_97.Substring(string_97.IndexOf("name=\"MD") + 17);
                                                                                                                        string value7 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                        string_94 = "MD=" + WebUtility.UrlEncode(value7) + "&PaRes=" + WebUtility.UrlEncode(value6);
                                                                                                                        //updateTStatus_1.BeginInvoke(1, "PAYZAP_Getway Int { 7/7 }", tCntrlName_, null, null);
                                                                                                                        Lock("6th Hit Inp = " + string_94);
                                                                                                                        if (_Request(string_93, string_94, string_92, webProxy_3, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_))
                                                                                                                        {
                                                                                                                            Lock("6th Hit output = " + string_97);
                                                                                                                            Reffral = string_93;
                                                                                                                            response = string_97;
                                                                                                                            //return true;
                                                                                                                        }
                                                                                                                        if (!response.Contains("SUCCESS"))
                                                                                                                        {
                                                                                                                            flag15 = false;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                                            break;
                                                                                                                        }

                                                                                                                    }

                                                                                                                }
                                                                                                                else if (string_97.Contains("Notification sent to PayZapp"))
                                                                                                                {
                                                                                                                    updTStatus.BeginInvoke(1, "Confirm Payment from Payzapp App..", tCntrlName, null, null);
                                                                                                                    string authenticateid = string_97.Substring(string_97.IndexOf("auth-context-id") + 24);
                                                                                                                    authenticateid = authenticateid.Substring(0, authenticateid.IndexOf("\" />"));
                                                                                                                ILpayzapp:
                                                                                                                    url = "https://api.tachyon.hdfcbank.com/cipher3ds/edith/v1.0/tenants/1/authenticate/getStatus?authContextId=" + authenticateid;
                                                                                                                    airpayPAYZAPP(url, null, "https://api.tachyon.hdfcbank.com/cipher3ds/visacipher/visacipher/pareq", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                                    if (response.Contains("PENDING"))
                                                                                                                    {
                                                                                                                        goto ILpayzapp;
                                                                                                                    }
                                                                                                                    response = DecodeEncodedNonAsciiCharacters(response);
                                                                                                                    url = response.Substring(response.IndexOf("redirect-form") + 25);
                                                                                                                    url = url.Substring(0, url.IndexOf("\""));
                                                                                                                    url = url.Replace("\\", "");
                                                                                                                    string mdpayzapp = response.Substring(response.IndexOf("MD\\") + 29);
                                                                                                                    mdpayzapp = mdpayzapp.Substring(0, mdpayzapp.IndexOf("\""));
                                                                                                                    mdpayzapp = mdpayzapp.Replace("\\", "");
                                                                                                                    string pararesp = response.Substring(response.IndexOf("PaRes") + 32);
                                                                                                                    pararesp = pararesp.Substring(0, pararesp.IndexOf("\""));
                                                                                                                    pararesp = pararesp.Replace("\\", "");
                                                                                                                    postdata = "PaRes=" + HttpUtility.UrlEncode(pararesp) + "&MD=" + mdpayzapp;
                                                                                                                    airpay2(url, postdata, "https://api.tachyon.hdfcbank.com/", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                                    if (response.Contains("FAIL"))
                                                                                                                    {
                                                                                                                        flag15 = false;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                            }

                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                if (!response.Contains("https://www.irctc.co.in/eticketing/mbi/MobileBankResponse"))
                                                                                                {
                                                                                                    flag15 = false;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                    break;
                                                                                                }
                                                                                                //postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                                //airpay2(cardinal, null, cardref, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                //updTStatus.BeginInvoke(1, "Redirecting to PNR serever.....", tCntrlName, null, null);
                                                                                                encair = response.Substring(response.IndexOf("encdata") + 16);
                                                                                                encairf = encair.Substring(0, encair.IndexOf("\">"));
                                                                                                if (failissuefix)
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Redirect to PNR Server...", tCntrlName, null, null);
                                                                                                    url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse";
                                                                                                    Reffral = "https://irctc.nowpay.co.in/";
                                                                                                    postdata = "bankCode=AIRP_MOB_AG" + "&appType=ANDROID" + "&encdata=" + encairf;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                }
                                                                                                string_92 = response;
                                                                                                flag15 = true;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 0:
                                                                                            case 71:
                                                                                            case 77:
                                                                                            case 78:
                                                                                            case 104:
                                                                                            case 112:
                                                                                            case 117:
                                                                                            case 119:
                                                                                                flag15 = bank.PayTM(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                if (bool_54)
                                                                                                {
                                                                                                    bool_54 = false;
                                                                                                }
                                                                                                break;
                                                                                            case 4205:
                                                                                                flag15 = bank.PayTM_SBI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                if (bool_54)
                                                                                                {
                                                                                                    bool_54 = false;
                                                                                                }
                                                                                                break;
                                                                                            case 4207:
                                                                                                flag15 = bank.PayTM_ICICI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                if (bool_54)
                                                                                                {
                                                                                                    bool_54 = false;
                                                                                                }
                                                                                                break;
                                                                                        }
                                                                                    }
                                                                                    catch (Exception)
                                                                                    {
                                                                                    }
                                                                                    num23 = 0;
                                                                                    Lock0("PayProcess", stopwatch, string_92);
                                                                                    if (!flag15)
                                                                                    {
                                                                                        if (bool_52)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "insufficient balance", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        if (string_95 == "00000")
                                                                                        {
                                                                                            string_95 = "insufficient funds";
                                                                                        }
                                                                                        updTStatus.BeginInvoke(1, string_95 + " Failed!", tCntrlName, null, null);
                                                                                        if ((!string_95.Contains("Invaild Bank's Details") || !string_95.Contains("Invaild Bank Bypass Detail") || !string_95.Contains("OTP Cancelled by User") || !string_95.Contains("Clear Balance Funds not available") || !string_95.Contains("Invaild Card's Details")) && !list_12.Contains(text3 + "_Fail"))
                                                                                        {
                                                                                            list_12.Add(text3 + "_Fail");
                                                                                        }
                                                                                        lock (object_9)
                                                                                        {
                                                                                            if (list_PaySTART.Contains(TktName))
                                                                                            {
                                                                                                list_PaySTART.Remove(TktName);
                                                                                            }
                                                                                            if (list_PaySUCCESS.Contains(TktName))
                                                                                            {
                                                                                                list_PaySUCCESS.Remove(TktName);
                                                                                            }
                                                                                        }
                                                                                        ((ComboBox)control.Controls["cboGateway"]).Enabled = true;
                                                                                        updTStatus?.BeginInvoke(1, "Choose another Payment.", tCntrlName, null, null);
                                                                                        frmPayment frmPayment9 = new frmPayment();
                                                                                        frmPayment9.string_1 = string_95 + "\r\n" + text20;
                                                                                        frmPayment9.tktname.Text = TktName;
                                                                                        frmPayment9.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                        if (frmPayment9.DialogResult != DialogResult.OK)
                                                                                        {
                                                                                            frmPayment9.Dispose();
                                                                                            updTStatus.BeginInvoke(2, "Paymnent Choice Cancelled by User! " + errormsg, tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                        text = ((ComboBox)control.Controls["cboGateway"]).SelectedItem.ToString();
                                                                                        frmPayment9.Dispose();
                                                                                        updTStatus.BeginInvoke(1, "Going To Bank", tCntrlName, null, null);
                                                                                        continue;
                                                                                    }
                                                                                    Reffral = string_95;
                                                                                    goto IL_65fd;
                                                                                IL_65fd:
                                                                                    updTStatus.BeginInvoke(1, "Payment Successful!", tCntrlName, null, null);
                                                                                    int num29 = 0;
                                                                                    flag3 = false;
                                                                                    lock (object_9)
                                                                                    {
                                                                                        if (list_PaySUCCESS.Contains(TktName))
                                                                                        {
                                                                                            flag3 = true;
                                                                                        }
                                                                                    }
                                                                                    if (flag3)
                                                                                    {
                                                                                        frmPayment frmPayment10 = new frmPayment();
                                                                                        if (flag3)
                                                                                        {
                                                                                            frmPayment10.bool_3 = true;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            frmPayment10.bool_2 = true;
                                                                                        }
                                                                                        frmPayment10.string_1 = "anOther Ticket On Final Process";
                                                                                        frmPayment frmPayment11 = frmPayment10;
                                                                                        frmPayment11.string_1 = frmPayment11.string_1 + "\r\r" + text4;
                                                                                        frmPayment10.tktname.Text = TktName;
                                                                                        frmPayment10.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                        int dialogResult4 = (int)frmPayment10.DialogResult;
                                                                                        frmPayment10.Dispose();
                                                                                        if (dialogResult4 != 1)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "User Select to Stop Booking! ", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    if (!flag3)
                                                                                    {
                                                                                        list_PaySUCCESS.Add(TktName);
                                                                                    }
                                                                                    lock (object_10)
                                                                                    {
                                                                                        if (list_PNR.Contains(TktName))
                                                                                        {
                                                                                            updTStatus.BeginInvoke(204, "PNR Booked in another Pair", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    if (text17 == "113")
                                                                                    {
                                                                                        string Enc = jsonData_Serial(string_92, "encdata");
                                                                                        postdata = "encdata=" + Enc;

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        postdata = class3_0.Method_SerialInp0(string_92, ref url, bool_14: true);
                                                                                    }
                                                                                    while (true)
                                                                                    {
                                                                                        if (text3 == "AIRTELMONEY")
                                                                                        {
                                                                                            if (isAPP)
                                                                                            {
                                                                                                string text27 = "";
                                                                                                if (dictionary_5.ContainsKey(key))
                                                                                                {
                                                                                                    text27 = dictionary_5[key];
                                                                                                    dictionary_5.Remove(key);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    frmOTP frmOTP3 = new frmOTP();
                                                                                                    frmOTP3.method_1(control_0, rectangle_0, bool_2: true, "AIRTELMONEY", class3_0.BANKSAVEAS);
                                                                                                    if (frmOTP3.DialogResult != DialogResult.OK)
                                                                                                    {
                                                                                                        frmOTP3.Dispose();
                                                                                                        updTStatus?.BeginInvoke(1, "OTP Cancell by User", tCntrlName, null, null);
                                                                                                        return false;
                                                                                                    }
                                                                                                    text27 = frmOTP3.string_0;
                                                                                                    frmOTP3.Dispose();
                                                                                                }
                                                                                                postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + text27 + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}"; //"{\"amount\":" + text19 + ",\"bankId\":91,\"errorMsg\":null,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + text27 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                dsed = postdata;
                                                                                            }

                                                                                            else
                                                                                            {
                                                                                                BankSuccess = true;
                                                                                                url = string_92;
                                                                                                postdata = string_92.Replace("https://www.irctc.co.in/eticketing/BankResponse?", "");
                                                                                            }
                                                                                        }
                                                                                        else if (text3 == "MOBIKWIK")
                                                                                        {
                                                                                            postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.airtelotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";//"{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text17 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text21 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text23 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text24 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text25 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                            dsed = postdata;
                                                                                        }

                                                                                        // else
                                                                                        else if (isAPP)
                                                                                        {

                                                                                            string expression = postdata.Replace("&", ",");
                                                                                            string[] array11 = Strings.Split(expression, ",");
                                                                                            if (text17 != "118" & text17 != "144" & text17 != "121" & text3 != "OTOPAY" & text3 != "E-WALLET" & text3 != "HDFCUPI")
                                                                                            {
                                                                                                int num30 = Information.UBound(array11);
                                                                                                string text28 = "";
                                                                                                for (int i = 0; i <= num30; i++)
                                                                                                {
                                                                                                    string[] array12 = Strings.Split(array11[i], "=");
                                                                                                    text28 = text28 + "{\"key\":\"" + array12[0] + "\",\"value\":\"" + HttpUtility.UrlDecode(array12[1]) + "\"}";
                                                                                                    if (i + 2 <= array11.Length)
                                                                                                    {
                                                                                                        text28 += ",";
                                                                                                    }
                                                                                                }
                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"paramList\":[" + text28 + "],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                if (isAPP & failissuefix)
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Redirect To PNR Server", tCntrlName, null, null);
                                                                                                    string reff = "";
                                                                                                    if ((text3 == "PHONEPE") || (text3 == "PHONEPEQR"))
                                                                                                    {
                                                                                                        reff = "https://mercury-t2.phonepe.com/";
                                                                                                    }
                                                                                                    else if (text3 == "RAZORPAYUPI")
                                                                                                    {
                                                                                                        reff = "https://api.razorpay.com/v1/checkout/public/";
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reff = "https://securegw.paytm.in";
                                                                                                    }

                                                                                                    Request_Type = "Bank";
                                                                                                    string data = class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                                    bool flag20 = airpay(url, data, reff, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Bank");
                                                                                                }
                                                                                            }
                                                                                            else if (text3 == "E-WALLET")
                                                                                            {
                                                                                                //postdata = "";//"{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.airtelotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";//"{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text17 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text21 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text23 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text24 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text25 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                postdata = "{\"transationId\":\"0\",\"bankId\":\"0\",\"txnType\":\"0\",\"txnStatus\":\"12\",\"txnDate\":\"" + class3_0.ewallettxndate + "\",\"amount\":\"" + class3_0.ewalletamount + "\",\"serverId\":\"" + class3_0.serverid + "\",\"timeStamp\":\"" + class3_0.ewallettimestamp + "\",\"upiModeOpted\":\"0\",\"remainingBalance\":\"0.0\",\"loyaltyNum\":\"0\",\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.ewalletotp + "\"},{\"key\":\"TXN_TYPE\",\"value\":\"undefined\"}]}";
                                                                                                postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":1000,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.ewalletotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":7,\"upiModeOpted\":0}";
                                                                                                dsed = postdata;
                                                                                            }
                                                                                            else if (text17 == "144")
                                                                                            {
                                                                                                string Enc = class3_0.easebuzDATA;

                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":144,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                            }
                                                                                            else if (text17 == "122")
                                                                                            {
                                                                                                string Enc = class3_0.hdfcupi;

                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":122,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":59,\"upiModeOpted\":0}";
                                                                                            }
                                                                                            else if (text17 == "121")
                                                                                            {
                                                                                                string Enc = encairf;

                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":121,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + encairf + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                            }
                                                                                            else if (text17 == "118"& text3 != "OTOPAY")
                                                                                            {
                                                                                                string Enc = jsonData_Serial(string_92, "encdata");
                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + string_92 + "\"}],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";


                                                                                                //dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":118,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                if (failissuefix)
                                                                                                {
                                                                                                    string reff = "https://www.irctcipay.com/";
                                                                                                    Request_Type = "Bank";
                                                                                                    string data = "encdata=" + string_92;//class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                                    url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse?bankCode=IRCTC_MOB_AG&appType=ANDROID";
                                                                                                    bool flag20 = airpay(url, data, reff, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Bank");

                                                                                                }

                                                                                            }
                                                                                            else if (text3 == "OTOPAY")
                                                                                            {
                                                                                                string Enc = jsonData_Serial(class3_0.otopaydata, "encdata");

                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":118,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                if (failissuefix)
                                                                                                {
                                                                                                    string reff = "https://www.irctcipay.com/";
                                                                                                    Request_Type = "Bank";
                                                                                                    string data = "encdata=" + Enc;//class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                                    url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse?bankCode=IRCTC_MOB_AG&appType=ANDROID";
                                                                                                    bool flag20 = airpay(url, data, reff, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Bank");

                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                string str = array11[0].Split('=')[1];
                                                                                                string str2 = array11[3].Split('=')[1];
                                                                                                string str3 = array11[4].Split('=')[1];
                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":101,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"RESPONSE\",\"value\":\"amount=" + HttpUtility.UrlDecode(str3) + ",bank=State Bank of India,bankid=SBI,checksum=" + HttpUtility.UrlDecode(str2) + ",doRedirect=false,orderId=" + HttpUtility.UrlDecode(str) + ",paymentMode=netbanking,responseCode=100,responseDescription=The transaction was completed successfully. \"}],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                            }
                                                                                        }
                                                                                        //class3_0.TKT_ISADV = true;
                                                                                        while (true)
                                                                                        {
                                                                                            if (!isAPP && class3_0.TKT_ISADV)
                                                                                            {
                                                                                                if (class3_0.bool_SL_TQ)
                                                                                                {
                                                                                                    minmPaymentTime -= 4320.0;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    minmPaymentTime -= 1320.0;
                                                                                                }
                                                                                            }
                                                                                            int num31 = (int)minmPaymentTime - (int)(DateTime.Now - dateTimePayStart).TotalMilliseconds;
                                                                                            num29++;
                                                                                            if (num31 > 10)
                                                                                            {
                                                                                                DateTime dateTime7 = DateTime.Now.AddMilliseconds(num31);
                                                                                                while (true)
                                                                                                {
                                                                                                    TimeSpan timeSpan3 = dateTime7 - DateTime.Now;
                                                                                                    string text29 = timeSpan3.Seconds + ":" + timeSpan3.Milliseconds;
                                                                                                    if (timeSpan3.TotalMilliseconds <= 1.0)
                                                                                                    {
                                                                                                        break;
                                                                                                    }
                                                                                                    updTStatus.BeginInvoke(1, "Final Counting: " + text29, tCntrlName, null, null);
                                                                                                    Thread.Sleep(50);
                                                                                                    Application.DoEvents();
                                                                                                }
                                                                                            }
                                                                                            DateTime datetime_1P = DateTime.Now;
                                                                                            PNRTIME = datetime_1P.ToString("hh:mm:ss");
                                                                                            stopwatch2 = new Stopwatch();
                                                                                            stopwatch2.Start();
                                                                                            //comment

                                                                                            if (!isAPP)
                                                                                            {
                                                                                                if (!isAPP)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        excalibur();
                                                                                                    }
                                                                                                    catch
                                                                                                    {

                                                                                                    }
                                                                                                }
                                                                                                dictionary_TimeP["RdIRCTC"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                                updTStatus.BeginInvoke(1, "Redirect To PNR Server", tCntrlName, null, null);
                                                                                                if (text17 == "113" & text3 != "OTOPAY")
                                                                                                {
                                                                                                    postdata = string_92;
                                                                                                    //string Enc = jsonData_Serial(string_92, "encdata");
                                                                                                    //dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + string_92 + "\"}],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                    //isPremium_p = true;

                                                                                                }
                                                                                                else if (text3 == "OTOPAY")
                                                                                                {
                                                                                                    postdata = class3_0.otopaydataweb;
                                                                                                }
                                                                                                else if (text17 == "1000")
                                                                                                {
                                                                                                    postdata = "{\"transationId\":\"0\",\"bankId\":\"0\",\"txnType\":\"0\",\"txnStatus\":\"12\",\"txnDate\":\"" + class3_0.ewallettxndate + "\",\"amount\":\"" + class3_0.ewalletamount + "\",\"serverId\":\"" + class3_0.serverid + "\",\"timeStamp\":\"" + class3_0.ewallettimestamp + "\",\"upiModeOpted\":\"0\",\"remainingBalance\":\"0.0\",\"loyaltyNum\":\"0\",\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.ewalletotp + "\"},{\"key\":\"TXN_TYPE\",\"value\":\"undefined\"}]}";
                                                                                                    // "{\"amount\":" + class3_0.ewalletamount + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.ewalletotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}"; //"{\"amount\":" + text19 + ",\"bankId\":91,\"errorMsg\":null,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + text27 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                    isPremium_p = true;
                                                                                                    Reffral = "https://www.irctc.co.in/nget/payment/ewallet-confirm";
                                                                                                    dsed = postdata;
                                                                                                    goto ilfinalewallet;

                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    postdata = class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                                }

                                                                                                bool flag21 = true;
                                                                                                if (text3 != "AIRTELMONEY")
                                                                                                {
                                                                                                    url = "https://www.irctc.co.in/eticketing/BankResponse";
                                                                                                }
                                                                                                Status = "Redirect to IRCTC";
                                                                                                if (asyncon)
                                                                                                {
                                                                                                    IL_5c9e9:
                                                                                                    Task_errormsg = "";
                                                                                                    Task_Exception_ = null;
                                                                                                    Task_response = "";
                                                                                                    Task<bool> task = Task_httpRequest(url, postdata, Reffral, "Other", bool_63: false, Proxy_, bool_64: true, bool_65: true, 68000, 68000);
                                                                                                    int num27 = 0;
                                                                                                    while (true)
                                                                                                    {
                                                                                                        if (Task_response.IndexOf("<form action=\"/eticketing/BankResponse\" method=\"post\">") >= 0)
                                                                                                        {
                                                                                                            string text30 = response.Substring(response.IndexOf("setTimeout"));
                                                                                                            text30 = text30.Substring(text30.IndexOf("},") + 3);
                                                                                                            text30 = text30.Substring(0, text30.IndexOf(")"));
                                                                                                            int num32 = int.Parse(text30);
                                                                                                            if (num32 > 50)
                                                                                                            {
                                                                                                                Thread.Sleep(num32);
                                                                                                                goto IL_5c9e9;
                                                                                                            }
                                                                                                        }
                                                                                                        if (!string.IsNullOrEmpty(Task_response))
                                                                                                        {
                                                                                                            if (!Task_response.Contains("<form action=\"/eticketing/BankResponse\" method=\"post\">"))
                                                                                                            {
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if (num27 > 650)
                                                                                                            {
                                                                                                                break;
                                                                                                            }
                                                                                                            num27 += 23;
                                                                                                            Application.DoEvents();
                                                                                                            Thread.Sleep(23);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    do
                                                                                                    {
                                                                                                    IL_5c9e:
                                                                                                        bool flag22 = _httpRequest(url, postdata, Reffral, "Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                                        if (response.IndexOf("<form action=\"/eticketing/BankResponse\" method=\"post\">") >= 0)
                                                                                                        {
                                                                                                            string text30 = response.Substring(response.IndexOf("setTimeout"));
                                                                                                            text30 = text30.Substring(text30.IndexOf("},") + 3);
                                                                                                            text30 = text30.Substring(0, text30.IndexOf(")"));
                                                                                                            int num32 = int.Parse(text30);
                                                                                                            if (num32 > 50)
                                                                                                            {
                                                                                                                Thread.Sleep(num32);
                                                                                                                goto IL_5c9e;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    while ((response == "retry") | string.IsNullOrEmpty(response));
                                                                                                }
                                                                                                
                                                                                                DateTime dateTime8 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                                                                                long num33 = (long)(DateTime.UtcNow - dateTime8).TotalMilliseconds;
                                                                                                class3_0.token = num33.ToString();
                                                                                                isPremium_p = false;
                                                                                                Lock0("RdIRCTC", stopwatch2, response);
                                                                                            }
                                                                                            //comments
                                                                                            postdata = null;
                                                                                            stopwatch2 = new Stopwatch();
                                                                                            stopwatch2.Start();
                                                                                            dictionary_TimeP["FinalHit"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                            Reffral = "https://www.irctc.co.in/nget/booking-confirm";
                                                                                            if (isAPP)
                                                                                            {
                                                                                                Reffral = "";
                                                                                            }
                                                                                        ilfinalewallet:
                                                                                            Request_Type = "json";

                                                                                            string text31 = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingData/" + class3_0.TransactionID;
                                                                                            updTStatus?.BeginInvoke(1, "Final Hit For PNR ....", tCntrlName, null, null);
                                                                                            int num34 = 0;
                                                                                            int num35 = 0;
                                                                                            while (true)
                                                                                            {
                                                                                            FINALPNR:
                                                                                                num35++;
                                                                                                Status = "Final Hit";
                                                                                                //cookie_ = new CookieContainer();
                                                                                                bool flag23 = _httpRequest(text31, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                                if (!flag23 | (response == "new:retry"))
                                                                                                {
                                                                                                    num34++;
                                                                                                    if (num34 > 9)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(2, response + errormsg, tCntrlName, null, null);
                                                                                                        return false;
                                                                                                    }
                                                                                                    Thread.Sleep(300);
                                                                                                    continue;
                                                                                                }
                                                                                                string text32 = "";
                                                                                                string text33 = "";
                                                                                                if (!string.IsNullOrEmpty(errormsg))
                                                                                                {
                                                                                                    text32 = errormsg;
                                                                                                }
                                                                                                if (Exception_ != null)
                                                                                                {
                                                                                                    text33 = Exception_.ToString();
                                                                                                }
                                                                                                Lock0("FinalHit", stopwatch2, response + "\r\n" + text32 + "\r\n" + text33);
                                                                                                if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) > 0)
                                                                                                {
                                                                                                    break;
                                                                                                }
                                                                                                WriteLog();
                                                                                                if (response == "retry" && num35 < 3)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                if (response.Contains("Unable To Process Your Request.\",\"retryBooking") & (text17 == "91"))
                                                                                                {
                                                                                                    goto end_IL_5911;
                                                                                                }
                                                                                                if ((response.Contains("Unable to process Payment request now") && num35 < 3) || ((response.Contains("Unable to perform Transaction") | response.Contains("No Transaction found")) && num34 < 9))
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                goto IL_6024;
                                                                                            }
                                                                                            if (text3 == "SBI")
                                                                                            {
                                                                                                text3 = "SBI_Net";
                                                                                            }
                                                                                            if (text3 == "HDFC")
                                                                                            {
                                                                                                text3 = "HDFC_Net";
                                                                                            }
                                                                                            goto IL_6102;
                                                                                        IL_6102:
                                                                                            if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) <= 0)
                                                                                            {
                                                                                                if (response.Contains("timeStamp"))
                                                                                                {
                                                                                                    dateTime_1 = DateTime.Parse(GetString(response, "timeStamp"));
                                                                                                    text8 = GetString_(response, "errorMessage", "\"");
                                                                                                    string text34 = text8.ToLower();
                                                                                                    if (text34.Contains("berths") || text34.Contains("seat"))
                                                                                                    {
                                                                                                        string state = text3 + "||" + text8 + "||" + dateTime_1.ToString("hh:mm:ss");
                                                                                                        string_91 = "faield";
                                                                                                        //ThreadPool.QueueUserWorkItem(sendLogToServer, state);
                                                                                                        updTStatus.BeginInvoke(2, text8, tCntrlName, null, null);
                                                                                                        return result;
                                                                                                    }
                                                                                                }
                                                                                                string _response = "";
                                                                                                text31 = "https://www.irctc.co.in/eticketing/protected/mapps1/recentTxnsDetails";
                                                                                                string deta = null;
                                                                                                Status = "Re-Check For PNR";
                                                                                                updTStatus.BeginInvoke(1, "Re-Check For PNR...", tCntrlName, null, null);
                                                                                                if (!_httpRequest(text31, deta, Reffral, "Plain123Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref _response, ref errormsg, ref Exception_))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(2, "Booking Faield Check History" + errormsg, tCntrlName, null, null);
                                                                                                    return result;
                                                                                                }
                                                                                                if (_response.Contains("BOOKED"))
                                                                                                {
                                                                                                    lock (object_10)
                                                                                                    {
                                                                                                        if (!list_PNR.Contains(TktName))
                                                                                                        {
                                                                                                            list_PNR.Add(TktName);
                                                                                                        }
                                                                                                    }
                                                                                                    try
                                                                                                    {
                                                                                                        string text35 = dateTime_1.ToString("hh:mm:ss");
                                                                                                        updTStatus.BeginInvoke(203, "Sucess PNR:0000000000", tCntrlName, null, null);
                                                                                                        string_90 = "0000000000 - " + text3 + (A_ ? "_Debit" : "_NB") + " - " + class3_0.TRAIN_NO + " - " + double_0 / 1000.0 + " - " + " - " + LoginType;
                                                                                                        string text36 = "0000000000|" + PNRTIME + "|" + text3 + "|" + LoginType + "|" + class3_0.BRD_STN + "-" + class3_0.DEST_STN + "-" + class3_0.TRAIN_NO + "|" + LoginType + "|" + class3_0.int_TotalPax;
                                                                                                        Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG) VALUES('PNR','" + text36 + "')");
                                                                                                        updTStatus.BeginInvoke(5, "Success by NGET: " + PNRTIME, tCntrlName, null, null);
                                                                                                        class3_0.method_4(bool_14: true, "Booking Success", text19, "0000000000", ConnectionGroupName_);
                                                                                                        string status = string.Concat(new string[3]
                                                                                                        {
                                                                                                            "Success",
                                                                                                            Log_(int_Slot, text3),
                                                                                                            PNRTIME
                                                                                                        });
                                                                                                        updTStatus.BeginInvoke(4, status, tCntrlName, null, null);
                                                                                                    }
                                                                                                    catch
                                                                                                    {
                                                                                                    }
                                                                                                    result = true;
                                                                                                    return result;
                                                                                                }
                                                                                                string state2 = text3 + "||" + text8 + "||" + dateTime_1.ToString("hh:mm:ss");
                                                                                                string_91 = "faield";
                                                                                                //ThreadPool.QueueUserWorkItem(sendLogToServer, state2);
                                                                                                updTStatus.BeginInvoke(2, "Booking Faield Check History", tCntrlName, null, null);
                                                                                                return result;
                                                                                            }
                                                                                            lock (object_10)
                                                                                            {
                                                                                                if (!list_PNR.Contains(TktName))
                                                                                                {
                                                                                                    list_PNR.Add(TktName);
                                                                                                }
                                                                                            }
                                                                                            dateTime_1 = DateTime.Parse(GetString(response, "bookingDate"));
                                                                                            if (class3_0.TKT_ISADV)
                                                                                            {
                                                                                                if (class3_0.bool_SL_TQ)
                                                                                                {
                                                                                                    dateTime_1 = dateTime_1.AddSeconds(-5.0);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    dateTime_1 = dateTime_1.AddSeconds(-3.0);
                                                                                                }
                                                                                            }
                                                                                            string text37 = dateTime_1.ToString("hh:mm:ss");
                                                                                            string string3 = GetString(response, "pnrNumber");
                                                                                            updTStatus.BeginInvoke(203, "Sucess PNR:" + string3, tCntrlName, null, null);
                                                                                            string_90 = string3 + " - " + text3 + (A_ ? "_Debit" : "_NB") + " - " + class3_0.TRAIN_NO + " - " + double_0 / 1000.0 + " - " + LoginType;
                                                                                            try
                                                                                            {
                                                                                                class3_0.method_4(bool_14: true, "Booking Success", text19, string3, ConnectionGroupName_);
                                                                                                string text38 = string3 + "|" + PNRTIME + "|" + text3 + "|" + LoginType + "|" + class3_0.BRD_STN + "-" + class3_0.DEST_STN + "-" + class3_0.TRAIN_NO + "|" + LoginType + "|" + class3_0.int_TotalPax;
                                                                                                Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG) VALUES('PNR','" + text38 + "')");
                                                                                                updTStatus.BeginInvoke(5, "Success by GADAR : " + PNRTIME, tCntrlName, null, null);
                                                                                                bool flag24 = false;
                                                                                                string text39 = "";
                                                                                                string text40 = "0";
                                                                                                int millisecond = DateTime.Now.Millisecond;
                                                                                                DateTime dateTime9 = default(DateTime);
                                                                                                try
                                                                                                {
                                                                                                }
                                                                                                catch
                                                                                                {
                                                                                                }
                                                                                                text38 = string.Concat(new string[3]
                                                                                                {
                                                                                                    "Success",
                                                                                                    Log_(int_Slot, text3),
                                                                                                    PNRTIME
                                                                                                });
                                                                                                if (flag24)
                                                                                                {
                                                                                                    text38 = "Success" + Log_(int_Slot, text3) + PNRTIME + "#txn" + text40 + "|" + text39;
                                                                                                }
                                                                                                updTStatus.BeginInvoke(4, text38, tCntrlName, null, null);
                                                                                                if (isAPP)
                                                                                                {
                                                                                                    string_27 = response;
                                                                                                    ThreadPool.QueueUserWorkItem(PrintTicketAPP, text38);
                                                                                                    result = true;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    Reffral = url;
                                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/printTicket/" + string3 + "/en";
                                                                                                    postdata = "";
                                                                                                    string _response2 = "";
                                                                                                    num5 = 0;
                                                                                                    while (true)
                                                                                                    {
                                                                                                        num5++;
                                                                                                        Status = "Print Ticket";
                                                                                                        if (_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 120000, 120000, ref _response2, ref errormsg, ref Exception_))
                                                                                                        {
                                                                                                            try
                                                                                                            {
                                                                                                                if (_response2.Contains("dateOfBooking"))
                                                                                                                {
                                                                                                                    string string4 = GetString(_response2, "dateOfBooking");
                                                                                                                    string4 = string4.Replace("HRS", "");
                                                                                                                    dateTime_1 = DateTime.Parse(string4);
                                                                                                                    string_27 = _response2;
                                                                                                                    ThreadPool.QueueUserWorkItem(PrintTicket, text38);
                                                                                                                    updTStatus.BeginInvoke(2, "Success by GADAR " + PNRTIME, tCntrlName, null, null);
                                                                                                                    result = true;
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    string_27 = response;
                                                                                                                    ThreadPool.QueueUserWorkItem(PrintTicketAPP, text38);
                                                                                                                    result = true;
                                                                                                                }
                                                                                                            }
                                                                                                            catch
                                                                                                            {
                                                                                                                result = true;
                                                                                                            }
                                                                                                            break;
                                                                                                        }
                                                                                                        if (num < 3.0)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        result = true;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            catch
                                                                                            {
                                                                                                result = true;
                                                                                                return result;
                                                                                            }
                                                                                            result = true;
                                                                                            goto end_IL_54db;
                                                                                        IL_6024:
                                                                                            if (!response.Contains("timeStamp") & !isAPP)
                                                                                            {
                                                                                                DateTime dateTime10 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                                                                                long num36 = (long)(DateTime.UtcNow - dateTime10).TotalMilliseconds;
                                                                                                postdata = class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                                updTStatus.BeginInvoke(1, "Retry For PNR", tCntrlName, null, null);
                                                                                                dictionary_TimeP["RetyFinalHit"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                                isPremium_p = false;
                                                                                                minmPaymentTime = 21060.0;
                                                                                                continue;
                                                                                            }
                                                                                            goto IL_6102;
                                                                                            continue;
                                                                                        end_IL_5911:
                                                                                            break;
                                                                                        }
                                                                                        continue;
                                                                                    end_IL_54db:
                                                                                        break;
                                                                                    }
                                                                                    goto end_IL_0fad;
                                                                                }
                                                                                break;
                                                                            }
                                                                            if (response.Contains("captchaQuestion"))
                                                                            {
                                                                                if (num11 > 3)
                                                                                {
                                                                                    Application.DoEvents();
                                                                                    Thread.Sleep(3000);
                                                                                }
                                                                            }
                                                                            else if (response.Contains("errorMessage"))
                                                                            {
                                                                                updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                                                return false;
                                                                            }
                                                                        }
                                                                        break;
                                                                    }
                                                                    //File.WriteAllText("Passenger_Error_" + class3_0.TransactionID, url + "\n" + postdata + "\n" + response);
                                                                    if (response.IndexOf("availablityStatus") > 0)
                                                                    {
                                                                        updTStatus.BeginInvoke(2, GetString(response, "availablityStatus"), tCntrlName, null, null);
                                                                        return false;
                                                                    }
                                                                    if (response.IndexOf("Unable to perform Transaction") >= 0)
                                                                    {
                                                                        unable = true;
                                                                        break;
                                                                    }
                                                                    if (response.IndexOf("Invalid access token") >= 0)
                                                                    {
                                                                        break;
                                                                    }
                                                                    updTStatus.BeginInvoke(2, GetString(response, "errorMessage"), tCntrlName, null, null);
                                                                    return false;
                                                                }
                                                                while (num11 <= 3);
                                                                break;
                                                            }
                                                            updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                            return false;
                                                        }
                                                        while (!(response == "retry") || num11 <= 5);
                                                        break;
                                                    }
                                                    while (num11 <= 3);
                                                    break;
                                                }
                                                if (num11 >= 3)
                                                {
                                                    updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                    return false;
                                                }
                                            }
                                            else if (num11 > 3)
                                            {
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                    while (num11 <= 3);
                                    break;
                                }
                                if (response.IndexOf("Bad credentials") > 0 || response.Contains("Invalid User"))
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                    Class11.smethod_1("TBL_USER", "UserState", "Invalid||" + class3_0.string_3, class3_0.IRCTC_ID);
                                    updTStatus.BeginInvoke(2, "Bad credentials! ", tCntrlName, null, null);
                                    return false;
                                }
                                if (response.Contains("User is disabled"))
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                    Class11.smethod_1("TBL_USER", "UserState", "Disabled||" + class3_0.string_3, class3_0.IRCTC_ID);
                                    updTStatus.BeginInvoke(2, "User Is Disabled! ", tCntrlName, null, null);
                                    return false;
                                }

                                if (response.IndexOf("Invalid Captcha") > 0)
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                }
                                else
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                }
                                break;
                            }
                            num6++;
                            if (num6 > 2)
                            {
                                s_Data_Private = "";
                                isLogin_Self = false;
                                isLogin = false;
                                break;
                            }
                            else
                            {
                                s_Data_Private = method_token();

                            }
                        }
                    }
                    else
                    {
                        isLogin_Self = false;
                        isLogin = false;
                    }
                    continue;
                end_IL_0fad:
                    break;
                }
            }
        }
        catch (ThreadAbortException ex3)
        {
            Thread.ResetAbort();
            ("Send Log, " + ex3.Message).Contains("Thread was being aborted");
        }
        catch (Exception ex4)
        {
            try
            {
                string text41 = "";
                if (Exception_ != null)
                {
                    text41 = Exception_.ToString();
                }
                string contents = ex4.ToString() + "\n\n\n\n" + string_92 + "\n\n\n\n" + url + "\n\n\n\n" + response + "\n\n\n\n" + text41;
                string path = "IRLOG/" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + "_" + DateTime.Now.ToString("hhmmssfff");
                File.WriteAllText(path, contents);
            }
            catch (Exception)
            {
            }
            string text42 = "Send Log, " + ex4.Message;
            CountL = 0;
            failCount++;
            _abck = "";
            bm_sv = "";
            isLogin = false;
            updTStatus?.BeginInvoke(2, "Unable to process current Request", tCntrlName, null, null);
            method_74("PerformB:OuterCatch: ", text42 + " <ErrorDestination>" + ex4.StackTrace.ToString());
            if (!list_12.Contains(text42))
            {
                list_12.Add(text42);
                method_78(text42 + "|" + ConnectionGroupName_);
            }
        }
        finally
        {
            windowCount--;
            if (isLogin_Self)
            {
                CountL = 0;
                failCount++;
                isLogin = false;
            }
            object_4 = new object();
            lock (object_4)
            {
                if (list_IrctcID.Contains(class3_0.IRCTC_ID))
                {
                    list_IrctcID.Remove(class3_0.IRCTC_ID);
                }
            }
            if (cookie_ != null)
            {
                ThreadPool.QueueUserWorkItem(LogedOUT, false);
            }
            try
            {
                method_78(string_87 + "|" + ConnectionGroupName_);
                Write_Lock_File(updTStatus, tCntrlName, "Result=" + result);
            }
            catch
            {
            }
            if (dictionary_Pair_Process.ContainsKey(class3_0.string_20))
            {
                int num37 = dictionary_Pair_Process[class3_0.string_20];
                if (num37 != 0)
                {
                    dictionary_Pair_Process[class3_0.string_20] = num37 - 1;
                }
            }
            bool flag25 = false;
            obj2 = object_6;
            lock (obj2)
            {
                if (dictionary_2.ContainsKey(TktName))
                {
                    int num38 = dictionary_2[TktName] - 1;
                    if (num38 <= 0)
                    {
                        Interlocked.Decrement(ref int_4);
                        dictionary_2.Remove(TktName);
                        flag25 = true;
                    }
                    else
                    {
                        dictionary_2[TktName] = num38;
                    }
                }
            }
            if (flag25)
            {
                obj2 = object_8;
                lock (obj2)
                {
                    list_PaySTART.Remove(TktName);
                }
                obj2 = object_11;
                lock (obj2)
                {
                    if (list_11.Contains(TktName))
                    {
                        list_11.Remove(TktName);
                    }
                }
                if (list_IrctcID.Count <= 0)
                {
                    obj2 = object_10;
                    lock (obj2)
                    {
                        list_PNR.Clear();
                    }
                }
            }
            if (waitCallback_0 == null)
            {
                waitCallback_0 = smethod_13;
            }
            ThreadPool.QueueUserWorkItem(waitCallback_0);
        }
        return result;
    }

    private bool IRCTC_(Control control_2, Rectangle rectangle_1, string TktName, string string_87, string string_88, string tCntrlName, ref string string_90, bool bool_63, bool bool_64, bool bool_65, int int_Slot, UpdateTStatus updTStatus, string string_91)
    {



        //string ticket = Class13.Tickettt;

        //byte[] bytess = Encoding.ASCII.GetBytes(ticket);
        //ticket = Encoding.ASCII.GetString(bytess).Replace("?", "");
        //string path2 = Path.Combine(Environment.CurrentDirectory, "Print\\test.pdf");
        //if (!Directory.Exists(path2))
        //{
        //    Directory.CreateDirectory(path2);
        //}
        //File.WriteAllText(path2, ticket, Encoding.GetEncoding("windows-1255"));
        //try
        //{
        //    new GetService().GetServic(path2, "test.pdf");
        //}
        //catch (Exception)
        //{
        //}

        //string timeString = DateTime.Now.AddSeconds(25).ToString("HH:mm:ss.fff");
        //IFormatProvider culture = new CultureInfo("en-US", true);
        //DateTime dateVal = DateTime.ParseExact(timeString, "HH:mm:ss.fff", culture);
        ////var parsedDate = DateTime.Parse(dtt);
        //var Timestampd = new DateTimeOffset(dateVal).ToUnixTimeSeconds();

        //try
        //{
        //    string HostUri = "https://www.1secmail.com/api/v1/?action=getMessages&login=laxjen53&domain=icznn.com";
        //    mac = Environment.GetEnvironmentVariable("mac", EnvironmentVariableTarget.Process);
        //    clientID = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
        //    //string texts = "{\"userName\":\"" + clientID + "\",\"macAddress\":\"" + mac + "\",\"MSG\":\"false\"}";
        //    string requestUriString = HostUri;
        //    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUriString);
        //    ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
        //    httpWebRequest.ContentType = "application/json";
        //    httpWebRequest.Method = "GET";
        //    HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
        //    using StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream());
        //    string text2s = streamReader.ReadToEnd();
        //    text2s = HttpUtility.HtmlDecode(text2s);
        //    if (text2s.Contains("as one time password (OTP) for Login at IRCTC"))
        //    {
        //        url = text2s.Substring(text2s.IndexOf("as one time password (OTP) for Login at IRCTC") - 6);
        //        url = url.Substring(0, url.IndexOf("Â"));
        //    }

        //}
        //catch
        //{

        //}

        //int num3555 = (40 * 1000) - 5000;

       
       // string trasac = jsonData_Serial(response, "transactionId");
        //string tlist = "";

        //var Tdata = Newtonsoft.Json.JsonConvert.DeserializeObject<Root>(response);
        //var resultdata = Tdata.trainBtwnStnsList
        //    .Where(x => x.runningMon == "Y" 
        //    && x.runningTue == "Y" 
        //    && x.runningWed == "Y" 
        //    && x.runningThu == "Y" 
        //    && x.runningFri == "Y" 
        //    && x.runningSat == "Y" 
        //    && x.runningSun == "Y")
        //    .Select(x => x.trainNumber).ToList();

        //foreach(var value in resultdata)
        //{
        //    tlist = tlist +","+ value.ToString();
        //}


        //string[] rupay = response.Split(new string[1] { "\r\n" }, StringSplitOptions.None);
        //url = response.Substring(response.IndexOf("Dear Customer") + 29);
        //url = url.Substring(0, url.IndexOf("<"));
        //url = url.Substring(0,6);

        //string pareqq = response.Substring(response.IndexOf("payload") + 31);
        //pareqq = pareqq.Substring(0, pareqq.IndexOf("\""));

        //string mscidd = response.Substring(response.IndexOf("mcsId") + 27);
        //mscidd = mscidd.Substring(0, mscidd.IndexOf("\""));


        //string AccuCardholderId = rupay[7].Substring(rupay[7].IndexOf("hidden") + 15);
        //AccuCardholderId = AccuCardholderId.Substring(0, AccuCardholderId.IndexOf("\" name=\""));

        //string AccuGuid = rupay[8].Substring(rupay[8].IndexOf("hidden") + 15);
        //AccuGuid = AccuGuid.Substring(0, AccuGuid.IndexOf("\" name=\""));

        //string AccuReturnURL = rupay[9].Substring(rupay[9].IndexOf("hidden") + 15);
        //AccuReturnURL = AccuReturnURL.Substring(0, AccuReturnURL.IndexOf("\" name=\""));trainBtwnStnsList

        //string session = rupay[10].Substring(rupay[10].IndexOf("hidden") + 15);
        //session = session.Substring(0, session.IndexOf("\" name=\""));

        //string AccuRequestId = rupay[11].Substring(rupay[11].IndexOf("hidden") + 15);
        //AccuRequestId = AccuRequestId.Substring(0, AccuRequestId.IndexOf("\" name=\""));

        //postdata = "AccuCardholderId="+ AccuCardholderId + "&AccuGuid="+ AccuGuid + "&AccuReturnURL="+HttpUtility.UrlEncode(redirectForm) +"&session="+ session + "&AccuRequestId="+HttpUtility.UrlEncode(AccuRequestId);
        //////frmMerchantPost = frmMerchantPost.Replace("amp;", "");
        ////string MDD = string_977.Substring(string_977.IndexOf("=\"MD\" value=\"") + 13);
        ////MDD = MDD.Substring(0, MDD.IndexOf("\" />"));
        ////.ToString(CultureInfo.InvariantCulture));
        //string text2000 = "1022314521090122775";
        //text2000 = text2000 + cTOken;
        isRealsikka = true;
        bool godan = false;
        bool stationchange = bkgnt;
        bool datechangee = false;
        bool opening = true;
        bool opening1 = true;
        int Qy = 0;
        bool newsecurity = false;
        string nsdlotpm = "";
        //useragenttrue = false;
        string balanceee = "";
        int ewalletamount = 0;
        int ewalletbalance = 0;
        string ewalletamounts = "";
        //bool failissuefix = true;
        bool pinelab = webadvlogin;
        bool asyncon = true;
        bool qrpayment = false;
        string encairf = "";
        string PNRTIME = "";
        bool fastavl = false;
        string[] array202 = validationstart.Split(new string[1] { "#" }, StringSplitOptions.None);
        ocrlink = array202[0];
        bool akamaiok = Convert.ToBoolean(array202[1]);
        isReal = Convert.ToBoolean(array202[2]);
        fastavl = Convert.ToBoolean(array202[3]);
        phonepeid = array202[5];
        PAYZAPDCID = array202[6];
        pinelab = webadvlogin;
        asyncon = Convert.ToBoolean(array202[8]);
        paxminus = Convert.ToBoolean(array202[9]);
        int nopax = int.Parse(array202[10]);
        bool test1day = Convert.ToBoolean(array202[11]);
        bool cloudfront = Convert.ToBoolean(array202[13]);
        newsecurity = Convert.ToBoolean(array202[14]);
        bmikey = array202[15];
        try
        {
            bmikey =  DecryptDataWithAes(bmikey.Trim(), "b14ca4040a4e4133bbce2ea2315a1000");
        }
        catch
        {
            bmikey = "99E1A0691356795F7A09EA2320681741";
        }
        bool bmmk = Convert.ToBoolean(array202[16]);
        //bkgnt = Convert.ToBoolean(array202[17]);
        //newsecurity = false;
        bool result = false;
        isPremium_p = false;
        TktName_ = TktName;
        dictionary_header = new Dictionary<string, string>();
        updateTStatus_0 = updTStatus;
        string text = "";
        string text2 = "";
        string text3 = "";
        string key = "";
        control_0 = control_2;
        Control control = control_2.Controls[0];
        control_1 = control_2.Controls[0];
        rectangle_0 = rectangle_1;
        string[] array = new string[1];
        bool flag = false;
        string[] array2 = string_88.Split(new string[1] { "||" }, StringSplitOptions.None);
        string text4 = "";
        double num = 0.0;
        bool flag2 = false;
        new List<Class27>();
        bool flag3 = false;
        minmPsgnInputTime2 = 20000.0;
        minmPsgnInputTime4 = 25000.0;
        minmPsgnInputTime6 = 30000.0;
        minmPaymentTime = 21060.0;
        string[] array3 = string_90.Split(new string[1] { "-.-" }, StringSplitOptions.RemoveEmptyEntries);
        string_90 = "";
        string[] array4 = array3[1].Split(new string[1] { "-+-" }, StringSplitOptions.RemoveEmptyEntries);
        if (!string.IsNullOrEmpty(string_87))
        {
            array = string_87.Split(new string[1] { "||" }, StringSplitOptions.None);
            if (array.Length > 2)
            {
                if (string_56.Length < 1)
                {
                    string_56 = array[2];
                }
                int.TryParse(array[3], out int_3);
                if (int_3 < 2)
                {
                    int_3 = 2;
                }
                int_3 *= 2;
                NetworkInterface_(array[4]);
            }
        }
        //xxx
        class3_0 = new clsPostData();
        class3_0.LoginType = (isAPP ? "APP" : "WEB");
        LoginType = class3_0.LoginType;
        //newsecurity = false;
        if (newsecurity)
        {
            class3_0.LoginType = "APP";//(isAPP ? "APP" : "WEB");
            LoginType = class3_0.LoginType;
            isAPP = true;
            //bmk = false;
        }
        if (!class3_0.ReadDataFromDB(TktName))
        {
            updTStatus?.BeginInvoke(53, "Error Occured while Reading Saved Ticket! ", tCntrlName, null, null);
            return result;
        }
        try
        {
            Chrome_CloseSetup();
            updTStatus?.BeginInvoke(53, "Closing CHrome... ", tCntrlName, null, null);

        }
        catch
        {

        }
        //try
        //{
        //    deleteallotp();
        //}
        //catch
        //{

        //}
        try
        {
            string pathff = Path.Combine(Environment.SystemDirectory, "drivers\\etc\\hosts");
            if (File.Exists(pathff))
            {
                File.Delete(pathff);
            }
        }
        catch
        {
        }
        method_CheckForAdvance();
        if (class3_0.dateTime_1 < new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day))
        {
            updTStatus?.BeginInvoke(53, "Date of Journey cannot less than Today!", tCntrlName, null, null);
            return result;
        }
        //string pathhhh = @"C:\Users\Administrator\Desktop\MyTest.txt";
        //response = File.ReadAllText(pathhhh);
        //url = response.Substring(response.IndexOf("encdata") + 16);
        //url = url.Substring(0, url.IndexOf("'"));
        //postdata = class3_0.Method_SerialInp(response, ref url, false);
        string text5 = smethod_10(class3_0.BANKSAVEAS);
        class3_0.IRCTC_ID = array2[0];
        class3_0.IRCTC_PWD = array2[1];
        if (array2.Length >= 3 && array2[2] != null)
        {
            if (array2[2] != class3_0.TKT_QUOTA)
            {
                class3_0.TKT_QUOTA = array2[2];
            }
            if (array2[3] != class3_0.TKT_CLASS)
            {
                class3_0.TKT_CLASS = array2[3];
            }
            if (array2.Length > 4 && array2[4] != null && !string.IsNullOrEmpty(array2[4]))
            {
                class3_0.SRC_STN = array2[4];
                class3_0.DEST_STN = array2[5];
                class3_0.TRAIN_NO = array2[6];
            }
        }
        class3_0.string_3 = class3_0.method_2(class3_0.IRCTC_ID);
        clsPostData clsPostData2 = class3_0;
        clsPostData2.BANKSAVEAS = ((ComboBox)control.Controls["cboGateway"]).SelectedItem.ToString();
        clsPostData2.BANKDETAILS = clsPostData2.dictionary_BnkData[clsPostData2.BANKSAVEAS];
        webProxy_2 = null;
        try
        {
            string[] array5 = class3_0.BANKSAVEAS.Split(new string[1] { "_" }, StringSplitOptions.None);
            if (array5[0] == "E-WALLET")
            {
                class3_0.EWALLET = array5[1];
            }
            if (array5[0] == "EAZEBUZQR" | array5[0] == "AIRPAYQR")
            {
                DialogResult dialogResult1 = MessageBox.Show("Kya aap Ye ticket ka payment QR code scan karke karna chahte hai agr haa to ok karna warna No par click kare jisse apko mobilse payment krna hoga", "QR PAYMENT CONFIRMATION", MessageBoxButtons.YesNo);
                if (dialogResult1 == DialogResult.Yes)
                {
                    qrpayment = true;
                }
                else if (dialogResult1 == DialogResult.No)
                {
                    qrpayment = false;
                }
            }

            if (array5[0] == "MOBIKWIK")
            {
                frmOTP frmOTP2 = new frmOTP();
                frmOTP2.method_1(control_0, rectangle_0, bool_2: false, "Enter Otp Mobikwik", class3_0.BANKSAVEAS);
                if (frmOTP2.DialogResult != DialogResult.OK)
                {
                    updTStatus.BeginInvoke(2, "Otp Not Entered", tCntrlName, null, null);
                    return false;
                }
                class3_0.airtelotp = frmOTP2.string_0.Trim();
                frmOTP2.Dispose();
            }
            if ((array5[0] == "AIRTELMONEY") | (array5[0] == "iMudra"))
            {
                string[] array6 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                if (array5[0] == "iMudra")
                {
                    string value = "0";
                    if (!dictionary_8.ContainsKey(class3_0.BANKSAVEAS))
                    {
                        dictionary_8.Add(class3_0.BANKSAVEAS, value);
                        frmOTP frmOTP2 = new frmOTP();
                        frmOTP2.method_1(control_0, rectangle_0, bool_2: false, "iMudra", class3_0.BANKSAVEAS);
                        if (frmOTP2.DialogResult != DialogResult.OK)
                        {
                            updTStatus.BeginInvoke(2, "iMudra OTP Not Found", tCntrlName, null, null);
                            return false;
                        }
                        value = frmOTP2.string_0;
                        dictionary_8.Remove(class3_0.BANKSAVEAS);
                        dictionary_8.Add(class3_0.BANKSAVEAS, value);
                        frmOTP2.Dispose();
                    }
                }
                long num2 = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
            }
            if (array3.Length > 5)
            {
                num = Conversion.Val(array3[5].Trim());
                if (num <= 0.0)
                {
                    num = 0.0;
                }
            }
            if (num <= 0.0 && dictionary_4.ContainsKey(TktName))
            {
                num = dictionary_4[TktName];
            }
        }
        catch
        {
        }
        string string_92 = "";
        string text6 = "\r\n\r\nTrainNo: " + class3_0.TRAIN_NO + " Form: " + class3_0.SRC_STN + " To: " + class3_0.DEST_STN + "\r\n\r\nNo. of Passengers: " + class3_0.list_0.Count + " Name of First Pax: " + class3_0.list_0[0].string_0;
        string environmentVariable = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
        text4 = "Pax: " + class3_0.list_0[0].string_0 + ((class3_0.list_0.Count > 1) ? (" and (" + (class3_0.list_0.Count - 1) + ") Others") : "");
        updateTStatus_1 = updTStatus;
        tCntrlName_ = tCntrlName;
        if (class3_0.method_0())
        {
            bool_ptSL = true;
        }
        Method_GetBookingHRS();
        if (!class3_0.TKT_ISADV & !class3_0.bool_1)
        {
            int_AvlHRS = 4;
            int_BookHRS = 5;
        }
        if (class3_0.BRD_STN.ToUpper() == class3_0.DEST_STN.ToUpper())
        {
            updTStatus?.BeginInvoke(2, "Invalid Boarding_Station!", tCntrlName, null, null);
            return result;
        }
        object obj2 = object_4;
        lock (obj2)
        {
            if (list_IrctcID.Contains(class3_0.IRCTC_ID))
            {
                updTStatus?.BeginInvoke(2, "Current IRCTC-ID Already Used, Change It.", tCntrlName, null, null);
                return result;
            }
            list_IrctcID.Add(class3_0.IRCTC_ID);
        }
        obj2 = object_6;
        lock (obj2)
        {
            if (dictionary_2.ContainsKey(TktName))
            {
                dictionary_2[TktName]++;
                int_Pair = dictionary_2[TktName];
            }
            else
            {
                dictionary_2.Add(TktName, 1);
                Interlocked.Increment(ref int_4);
                int_Pair = dictionary_2[TktName];
            }
        }
        dictionary_TimeP = new Dictionary<string, string>();
        if (class3_0.TKT_QUOTA.ToUpper() == "CK")
        {
            class3_0.TKT_QUOTA = "TQ";
        }
        if (int_Pair == 1 && class3_0.BANKSAVEAS.Split('_')[0].Contains("AIRTELMONEY") && !dictionary_7.ContainsKey(class3_0.BANKSAVEAS))
        {
            string environmentVariable2 = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
            if (dictionary_7.ContainsKey(class3_0.BANKSAVEAS))
            {
                dictionary_7.Remove(class3_0.BANKSAVEAS);
            }
            dictionary_7.Add(class3_0.BANKSAVEAS, environmentVariable2);
        }
        response = "";
        Exception_ = new WebException();
        try
        {
            Lock("Ticket " + TktName + " Started Pair " + int_Pair);
            bool flag4 = false;
            if ((class3_0.TKT_QUOTA == "CK" || class3_0.TKT_QUOTA == "PT" || class3_0.TKT_QUOTA == "TQ") && class3_0.dateTime_1 > DateTime.Now)
            {
                flag4 = true;
            }
            if (DateTime.Now.Hour != 9 || !bool_ptSL || !flag4 || MessageBox.Show("For Non-AC Classes, Tatkal will open at 11Am\r\n\r\nDo you want to Continue?", "Non AC", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) != DialogResult.No)
            {
                if (DateTime.Now.Hour == 7 && DateTime.Now.Minute >= 30 && !class3_0.bool_opening && !flag4 && (class3_0.dateTime_1 - DateTime.Now).TotalDays >= 10.0 && MessageBox.Show("Is it Opening Ticket? If it is then Click YES.\r\n\r\nKya ye Opening ki Ticket he? agar haan to YES Click karen.", "Opening Ticket", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    int_AvlHRS = 7;
                    int_BookHRS = 8;
                    class3_0.bool_opening = true;
                    class3_0.TKT_ISADV = true;
                }
                int second = 0;
                int minute = 53;
                if (class3_0.bool_opening && DateTime.Now.Hour > 7)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.bool_AC_TQ && DateTime.Now.Hour > 9)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.bool_SL_TQ && DateTime.Now.Hour > 10)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.TKT_ISADV)
                {
                    int num3 = (int)new TimeSpan(new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_AvlHRS, minute, second, 0).Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                    if (num3 > 0)
                    {
                        int num4 = 0;
                        Random random = new Random();
                        num4 = random.Next(10, 179000);
                        DateTime dateTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_AvlHRS, minute, second, 0);
                        dateTime = dateTime.AddMilliseconds(num4);
                        updTStatus.BeginInvoke(1, "Waiting till " + int_AvlHRS + ":" + dateTime.Minute.ToString("00") + ":" + dateTime.Second + " AM", tCntrlName, null, null);
                        Application.DoEvents();
                        num3 += num4;
                        if (num3 > 5)
                        {
                            Thread.Sleep(num3);
                        }
                    }
                }
                //else if (int_Pair != 1)
                //{
                //    updTStatus?.BeginInvoke(1, "Login Start....", tCntrlName, null, null);
                //    Random random2 = new Random();
                //    int millisecondsTimeout = random2.Next(10, 15000);
                //    Thread.Sleep(millisecondsTimeout);
                //}
                if (int_Pair == 1)
                {
                    useragenttrue = true;
                }
                if (!isAPP & bmmk)
                {
                    try
                    {
                        string cname = Environment.UserName;
                        useragenttrue = false;
                        string pathhh = @"C:\\Users\\" + cname + "\\Desktop\\pair.txt";
                        if (!Directory.Exists(pathhh))
                        {
                            using (StreamWriter sw = File.CreateText(pathhh)) ;
                        }
                        response = File.ReadAllText(pathhh);
                        if (string.IsNullOrEmpty(response))
                        {
                            bmk bmk = new bmk();
                            bmk.ShowDialog();
                            response = bmk.textbmk;
                            useragenttrue = false;
                            pathhh = @"C:\\Users\\" + cname + "\\Desktop\\pair.txt";
                            if (!Directory.Exists(pathhh))
                            {
                                using (StreamWriter sw = File.CreateText(pathhh)) ;
                            }
                            File.WriteAllText(pathhh, response);
                        }
                        
                        string pareqq = response.Substring(response.IndexOf("B2c8Y0FLvI-a: ") + 14);
                        pareqq = pareqq.Substring(0, pareqq.IndexOf("B2c8Y0FLvI-b"));
                        weba = pareqq.Trim();

                        pareqq = response.Substring(response.IndexOf("B2c8Y0FLvI-b: ") + 14);
                        pareqq = pareqq.Substring(0, pareqq.IndexOf("B2c8Y0FLvI-c"));
                        webb = pareqq.Trim();

                        pareqq = response.Substring(response.IndexOf("B2c8Y0FLvI-c: ") + 14);
                        pareqq = pareqq.Substring(0, pareqq.IndexOf("B2c8Y0FLvI-d"));
                        webc = pareqq.Trim();

                        pareqq = response.Substring(response.IndexOf("B2c8Y0FLvI-d: ") + 14);
                        pareqq = pareqq.Substring(0, pareqq.IndexOf("B2c8Y0FLvI-f"));
                        webd = pareqq.Trim();

                        pareqq = response.Substring(response.IndexOf("B2c8Y0FLvI-f: ") + 14);
                        pareqq = pareqq.Substring(0, pareqq.IndexOf("B2c8Y0FLvI-z"));
                        webf = pareqq.Trim();

                        pareqq = response.Substring(response.IndexOf("B2c8Y0FLvI-z: ") + 14);
                        pareqq = pareqq.Substring(0, pareqq.IndexOf("Connection"));
                        webz = pareqq.Trim();

                        //string pathhh = @"C:\\Users\\" + cname + "\\Desktop\\pair.txt";
                        //response = File.ReadAllText(pathhh);
                        //string[] arrayweb = response.Split(new string[1] { "\r\n" }, StringSplitOptions.None);

                        //weba = arrayweb[0].Trim();
                        //string[] arrayweba = weba.Split(new string[1] { ":" }, StringSplitOptions.None);
                        //weba = arrayweba[1].Trim();

                        //webb = arrayweb[1].Trim();
                        //string[] arraywebb = webb.Split(new string[1] { ":" }, StringSplitOptions.None);
                        //webb = arraywebb[1].Trim();

                        //webc = arrayweb[2].Trim();
                        //string[] arraywebc = webc.Split(new string[1] { ":" }, StringSplitOptions.None);
                        //webc = arraywebc[1].Trim();

                        //webd = arrayweb[3].Trim();
                        //string[] arraywebd = webd.Split(new string[1] { ":" }, StringSplitOptions.None);
                        //webd = arraywebd[1].Trim();

                        //webf = arrayweb[4].Trim();
                        //string[] arraywebf = webf.Split(new string[1] { ":" }, StringSplitOptions.None);
                        //webf = arraywebf[1].Trim();

                        //webz = arrayweb[5].Trim();
                        //string[] arraywebz = webz.Split(new string[1] { ":" }, StringSplitOptions.None);
                        //webz = arraywebz[1].Trim();
                    }
                    catch
                    {
                        weba = "";
                        webb = "";
                        webc = "";
                        webd = "";
                        webf = "";
                        webz = "";
                    }
                }
                Lock("Ready Login=" + class3_0.IRCTC_ID);
                int hour = DateTime.Now.Hour;
                int minute2 = DateTime.Now.Minute;
                int second2 = DateTime.Now.Second;
                string[] array7 = string_91.Split(new string[1] { "#" }, StringSplitOptions.None);
                if (array7.Length > 1 && array7[1] != "" && array7[2] != "")
                {
                    AC_AvailibalityTime = int.Parse(array7[1]);
                    SL_AvailibalityTime = int.Parse(array7[2]);
                }
                string text7 = array7[0];
                if (!string.IsNullOrEmpty(text7) && int_Slot > 2)
                {
                    try
                    {
                        string[] array8 = text7.Split(new string[1] { "||" }, StringSplitOptions.None);
                        if (array8.Length > 3)
                        {
                            Proxy_ = new WebProxy(array8[0].Trim(), int.Parse(array8[1].Trim()));
                            Proxy_.BypassProxyOnLocal = true;
                            Proxy_.Credentials = new NetworkCredential(array8[2].Trim(), array8[3].Trim());
                            Lock("\n\n\nProxy=" + array8[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        method_74("Creating Proxy", ex.Message);
                        updTStatus?.BeginInvoke(2, "IP Issue, Try Another slot!", tCntrlName, null, null);
                        return false;
                    }
                }
                if (vpn & !string.IsNullOrEmpty(vpnip))
                {
                    try
                    {
                        string[] array8P = vpnip.Split(new string[1] { ":" }, StringSplitOptions.None);
                        if (array8P.Length > 3)
                        {
                            Proxy_ = new WebProxy(array8P[0].Trim(), int.Parse(array8P[1].Trim()));
                            Proxy_.BypassProxyOnLocal = true;
                            Proxy_.Credentials = new NetworkCredential(array8P[2].Trim(), array8P[3].Trim());
                            Lock("\n\n\nProxy=" + array8P[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        method_74("Creating Proxy", ex.Message);
                        updTStatus?.BeginInvoke(2, "IP Issue, Try Another slot!", tCntrlName, null, null);
                        return false;
                    }
                }
                string text8 = "Booking Faield Check History";
                int num5 = 0;
                bool flag5 = isAPP;
                int num6 = 0;
                bool flag6 = true;
                while (true)
                {
                    if (num < 0.0)
                    {
                        num = 0.0;
                    }
                    if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                    {
                        Thread thread = new Thread(StartUPI_);
                        thread.IsBackground = true;
                        thread.Start(class3_0.BANKDETAILS + "||True||5||0000000000");
                    }
                ilstarting:
                    bool avlactive = true;
                    staticWEB = false;
                    //while (avlactive)
                    //{
                    //    Application.DoEvents();
                    //    Thread.Sleep(300);
                    //}
                    string text9 = "";
                    sensor_data = "0";
                    bool flag7 = true;
                    SensorDataSend = false;
                    string string_93 = "";
                    string text10 = "";
                    string string_94 = "";
                    webProxy_3 = null;
                    postdata = null;
                    Reffral = "https://www.irctc.co.in";
                    response = "";
                    errormsg = "";
                    Exception_ = null;
                    int_TimeDiff = 0;
                    bool_22 = true;
                    class3_0._greq = "";
                    class3_0._Authorization = "";
                    int num7 = 0;
                    bool flag8 = true;
                    randomGeneratedKey = jwtutils.getRandomAppCngKey();
                    keyFromServer = "";
                    greq = "";
                    _Authrization = "";
                    access_token = "";
                    jwtToken = "";
                    bool_48 = true;
                    cookie_ = null;
                    mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                    cookie_ = new CookieContainer();
                    cookie_bkp = null;
                    cookie_bkp = new CookieContainer();
                    object_7 = new object();
                    if (!isReal & class3_0.TKT_ISADV)
                    {
                        isReal = true;
                        ThreadPool.QueueUserWorkItem(AuthSik);
                    }
                    lock (object_5)
                    {
                        if (!isAPP)
                        {
                            //pinelab = true;
                            if (class3_0.TKT_ISADV & pinelab)
                            {
                                Chrome_CloseSetup();
                                Thread.Sleep(2000);
                                getandclear();
                                updTStatus?.BeginInvoke(1, "Complete a small step", tCntrlName, null, null);
                                IRComm.doesSurf = false;
                                bool flag100 = true;
                                string step1 = "Abhi ek irctc ki chrome window hogi apko window puri tarah load ho jane par sirf right click karke I M Not Robot par click karna hai aur window login ho jayega...";
                                MessageBox.Show(step1, "Step Guide....", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                BmskCookieOffline_(flag100);
                                cookie_ = cookieBmsk_0;
                                Chrome_CloseSetup();
                            }
                        }
                        else if (akamaiok)
                        {
                            updTStatus?.BeginInvoke(1, "App Login Start..", tCntrlName, null, null);
                            string[] array9 = string_91.Split(new string[1] { "#" }, StringSplitOptions.None);
                            s_Data_Private = array9[3];
                            s_Data_Private = DecryptDataWithAes(s_Data_Private, "b14ca5898a4e4133bbce2ea2315a1917");
                            if (s_Data_Private.Length <= 3)
                            {
                                s_Data_Private = method_token();
                            }
                        }

                    }
                    if (isAPP)
                    {
                        if (!dictionary_PaxStart.ContainsKey(TktName_ + "_APP"))
                        {
                            dictionary_PaxStart.Add(TktName_ + "_APP", 0);
                        }
                    }
                    else if (!dictionary_PaxStart.ContainsKey(TktName_ + "_WEB"))
                    {
                        dictionary_PaxStart.Add(TktName_ + "_WEB", 0);
                    }
                    num7++;
                    DateTime dateTime2 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                    long num9 = (long)(DateTime.UtcNow - dateTime2).TotalMilliseconds;
                    class3_0._greq = num9.ToString();
                    greq = jwtutils.GetHash(ref mup);
                    if (isAPP)
                    {
                        class3_0._greq = HighQualityRandomString();
                        greq = HighQualityRandomString();
                    }
                    mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                    class3_0.token = null;
                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();
                    Status = "Login";
                    Request_Type = "Base";
                    if (isAPP)
                    {
                        //updTStatus?.BeginInvoke(1, "Finding Fast Server plz wait..", tCntrlName, null, null);
                        url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/appVersion/ANDROID/4.2.12";
                        ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Base");
                    }
                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/loginCaptcha?nlpCaptchaException=true";
                    updTStatus?.BeginInvoke(1, "Loading Login Captcha...", tCntrlName, null, null);
                    Lock("First Hit Irctc: In = " + url);
                    bool flag10 = _httpRequest(url, postdata, Reffral, "Plain1Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                    Lock("First Hit Irctc: Out = " + response);
                    dateTime_2 = DateTime.Now;
                    if (response.IndexOf("Unable to process") >= 0)//|| (response.Contains("retry") & !response.Contains("captchaQuestion"))
                    {
                        goto ilstarting;
                    }
                    if (response.Contains("retry") & !response.Contains("captchaQuestion"))
                    {
                        goto ilstarting;
                    }
                    if (!string.IsNullOrEmpty(response))
                    {
                        try
                        {
                            if (response.Contains("serverId"))
                            {
                                class3_0.serverid = GetString(response, "serverId");
                                class3_0.serverid = class3_0.serverid.Substring(0, 7);
                                if (!class3_0.serverid.Contains("DM03AP") && (!class3_0.serverid.Contains("DM06AP") && (!class3_0.serverid.Contains("DM02AP")) & DateTime.Now.Minute < 56 & class3_0.TKT_ISADV))
                                {
                                    goto ilstarting;
                                }
                            }
                        }
                        catch
                        {

                        }



                        //if (!class3_0.serverid.Contains("DM03AP") && (!class3_0.serverid.Contains("DM09AP") && (!class3_0.serverid.Contains("DM02AP")) & DateTime.Now.Minute < 55 & class3_0.TKT_ISADV))
                        //{
                        //    goto ilstarting;
                        //}
                        string text11 = response.Substring(response.IndexOf("timeStamp") + 23);
                        text11 = text11.Substring(0, text11.IndexOf("\""));
                        DateTime dateTime3 = DateTime.Parse(text11);
                        if (dateTime3.Hour == int_BookHRS)
                        {
                            class3_0.TKT_ISADV = false;
                        }
                        int_TimeDiff = (int)new TimeSpan(dateTime3.Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                        int num10 = int_TimeDiff;
                        updTStatus.BeginInvoke(900, num10.ToString(), tCntrlName, null, null);
                        dictionary_TimeP["TimeDiff"] = int_TimeDiff.ToString();
                        if (!isAPP & (akamaiok))
                        {
                            Chrome_CloseSetup();
                            Thread.Sleep(2000);
                            getandclear();
                            updTStatus?.BeginInvoke(1, "Complete Step 1", tCntrlName, null, null);
                            IRComm.doesSurf = false;
                            bool flag100 = true;
                            string step1 = "Abhi ek chrome ka window hoga usme apko apne irctc id se login karna hai aur login sucessful hone ke baad , jab browser puri tarah load ho jaye to atleast 10 sec baad apko browser ke beech me kahi bhi right click karke I M Not Robot Par click karna hai.....Dhyan rahe kabhi kabhi step 1 do baar karna pad sakta hai";
                            MessageBox.Show(step1, "Step 1 Guide....", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            BmskCookieOffline_(flag100);
                            cookie_ = cookieBmsk_0;
                            Chrome_CloseSetup();
                        }
                        int num11 = 0;
                        string[] array9 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                        if ((text5 == "AIRTELMONEY") & !list_7.Contains(array9[0]) & class3_0.TKT_ISADV)
                        {
                            list_7.Add(array9[0]);
                            AirtelMoneyOTP(class3_0.BANKDETAILS);
                        }
                        if (response.Contains("status"))
                        {
                            class3_0._greq = GetString(response, "status");
                        }
                        if (response.IndexOf("captchaQuestion") > 0)
                        {
                            string text12 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                            //string_93 = "iVBORw0KGgoAAAANSUhEUgAAAMsAAAAyCAIAAAB9BLi1AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAdESURBVHhe7ZsJbBVVFIZJNCZihEQDEhIxAUQCIiFoChFlsRYhYFmCiKIgiy1lbYFWS2VLQGMFlYIVARWpmFAtASmyKGkFW9l8FGgroSBbFIkxRkQkCnrITQ6/p7O8ua/z5g3c5Atp7/+fO3cyP3PmDkOjm3sP0ObkmbOG6x5x0b1iEmZwQVx0r5iEGVwQF90rJmEGF8RF94pJmMEFcdG9cv0nzI8F+zFnwoInq4FJmA5+zJmw4MlqYBKmgx9zJix4shq4JEwcTCDMDojCeOLHMvyYM2HBk9XgRk+Ys2qHXlVIwZPVwCTMSbVDryqk4MlqENNzGBLjam7pM3BY3oLCkk2VVTVHjp8+fupHPsMYwaMIiXBW7dCrCil4sho0TMJiXEe7Z8eV7a3Cs0KEWagHvz488abGrWdkdUvu9ejjvTpn5mU2ab66+hgbHGoJZ9UOyyo6KB26y+xcWkmPWX2HvDBlSdfu//7xFxtCCp6sBjElrEHW0bTfULpv4VQC4WfuHPDUig2bxSCT2mr85QtXRDlOq3BW7RBVv509n3JHCxxkus5OXlN7HGtDhzgjrwSfsKlvFfIkFZHqnpOzb01OFZ76ULy2VuzlQoQ9bSfMpGvPvxLCSTirdmDVuV8uDnpxMo4I6JZWVb4Hy+lWxyrddysuV6Bqyc4rZeTkquwmzYTBP/igegSfsHXby3mSHhkzhGrHh5u2cRUxZ+Wa+59Pp4c5gn6Yt6pIjS9fX4pV7MdBZ7gEQQNdbPqzU8707e3a/37uMqlnT/259b7OHbJeYs+oMelYTrlH9YkWaahaMjxtLPs7Tp9DMwiDf/Bx9Qg+YbXHTvIklA+hWjIkdz6XHD1xpveUHGEgaJCexdimUBL/EA1YzgjPiEkZKltIdWXk4b592FO3vxrVL35oxxJB6URVsLh9FzSvP3BEGHwFD61B8AnDbaOQ7MBtwfjX3hYqQxLbFCxZDlqCTgYN1ATL/ikTBgVtQdg2rlsjoc5qfjer9Lh26eIlYVBQD6V9Azvj2R8VfGg9gk+Y10mS0qaxn57bHG57JIk9hDAQlioOWsJOIuP2xkJlSg4cZRttBYRK20wKFhsocMKg6N9yNHvi3B8VfHQ9AksY1jogqoicd1axmr1spVAFZGAzIVTCWVWgR4GqQ8+i1sm2LrNzhUrQ4xobiNK6e4VhbqeH0BDn/qjABWgQvoS9//lWVpOnvSxUQUrW/66rUAln1RLhVO9ELDn9089so52gUBWprcazR9yiAu+PCl6AHuFLWKS2jtVmA4cLVUAGNhNCJZxVO7CEf7aES+ipX0iKXee/wRhhz6U9Jo8H0h8VvAY9wvccRpvH6P30KMZmS7+zaodlFQ4yrNoZiEUPJKGtaO8hGlzYuiMO0iMdlsQTXIYG4UsYvoMQkiVstvQ7q3a4VlmqPFgffGfbJiNz99/78MaW2aS58McTXoYe5h7mpNoRfRUasEqw/1I5vjzDeAXYHxW8Ej3Cl7CEeg5zrRJO/FWw7MFHsJAJsD8qxHq8Er6EBb6XJKKvsnPiuII2niMmZaCHCLY/KsSSvBK+hOW++wH7Xd+H4cszQqiEs2pH9FXRONlQXRnB8aS83GD7owKXpEH4EtY9PZP9Pr3TdyX6quidxMRFy8TIgTLr70fiiViSV8KXMAL/XTLt9SVCZdLzC9imEAbCWbUj+qronW2eHoObGOVvO2Hmr6cv4GD8wUVqEMqE4bcVx056/rYC8fruQ8ElrlXROz/7aieamXmrikgVg/EEF6lBKBNGfLT5Syyky9DhuatvwKkz4vdhhSWb2EPgDIqaoydYvS1lsFDt4BJCSIIonWNffROdpTt3469JadPQjFIcwENrENaEOXzjyuzYHXF9W4FJ7T/zFaHawSWEkATROO8ZNgo/klu3vZz+nmyr3Mcj9LjZtN9QUaVgj3+II3olrAkjKGTL15diOULX6a7UEWTDQSxXZBW8x+quyCHqrQ5bB4ZLCCEJonGu3bKDPRQ1ChwN0p0Yv5xbuPoTLKkPOxsccSCvhDhhCtpaLvr4U/pbTteD+PZg7dLijY9NvfaezHn+loNH4v2jPsKvcDUwrs6R8/PRM3rBGyzNKFiBUs/J2Sw5g1WxIyb3SugTFjspWbn4NCYQ5oaF8o2HpvsuqqJXVlbV2PVKB7hcGzGhV0zCrtJi0DPp+QUrN2yJ1NbVf2XgH/j/Wbg/IqJX5hcVC4MneB5PiEm8ElPCGoQGPJlwMSxvAZ479kdE9Ep8AIgFnNMZUegVk7BgoF3IwSPX/qeu6I+I6JV7Dn9PWxzhiRGe3BJh9opJWDDgLtiyPyKiVy5eWyIMDQgfhREGr5iEBcCTOXPxrO36IyJ6petHJbHDxxLjXgk+YTcazQYO/67m2idfDv0Rqd8rXb+NSxBMwuLN0uKNHBTX/oiIXllQvEEYEhOTMIO/mIQZ/MUkzOAvJmEGfzEJM/iLSZjBX0zCDH7Se8B/mmpJ2wi4ZqQAAAAASUVORK5CYII=";
                            string_93 = text12.Substring(0, text12.IndexOf("\""));
                        }
                        frmCaptcha frmCaptcha2 = new frmCaptcha(this, cookie_, "", "");
                        frmCaptcha2.lblWrongCaptcha.Text = "Enter Captcha";
                        frmCaptcha2.dateTime_0 = dateTime_2;
                        frmCaptcha2.string_1 = string_93;
                        frmCaptcha2.bool_0 = flag;
                        frmCaptcha2.method_2(control_2, rectangle_1, string_93);
                        bool flag11 = frmCaptcha2.DialogResult != DialogResult.Cancel;
                        text10 = frmCaptcha2.txtImageData.Text.Trim();
                        frmCaptcha2.Dispose();
                        Lock("Captcha Solve: = ");
                        if (!flag11)
                        {
                            isLogin_Self = false;
                            isLogin = false;
                            updTStatus.BeginInvoke(2, "Captcha Cancell by User", tCntrlName, null, null);
                            return false;
                        }
                        url = "https://www.irctc.co.in/authprovider/webtoken";
                        postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + frmCaptcha.Base64Encode(class3_0.IRCTC_PWD) + "&captcha=" + text10 + "&uid=" + class3_0._greq + "&otpLogin=false&nlpIdentifier=&nlpAnswer=&nlpToken=&lso=&encodedPwd=true";
                        if (isAPP)
                        {
                            //postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + class3_0.IRCTC_PWD + "&captcha=" + text10 + "&uid=" + greq + "&otpLogin=false";
                            byte[] bytes = Encoding.UTF8.GetBytes(class3_0.IRCTC_ID + ":" + class3_0.IRCTC_PWD);
                            _Authrization = Convert.ToBase64String(bytes);
                            url = "https://www.irctc.co.in/authprovider/webmtoken";
                        }
                        updTStatus?.BeginInvoke(1, "Login To IRCTC", tCntrlName, null, null);
                        num6 = 0;
                        while (true)
                        {
                            Request_Type = "Login";
                            num11++;
                            SensorDataSend = akamaiok;//User is disabled
                            Status = "Login Confirm";
                            if (_httpRequest(url, postdata, Reffral, "Plain0Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 12000, 12000, ref response, ref errormsg, ref Exception_))
                            {
                                if (response.Contains("retry") & !response.Contains("SUCESS"))
                                {
                                    goto ilstarting;
                                }
                                if (response.Contains("SUCESS"))
                                {
                                    class3_0.string_61 = response.Substring(response.IndexOf("access_token") + 15, 36);
                                    class3_0._Authorization = "Bearer " + class3_0.string_61;
                                    _Authrization = class3_0._Authorization;
                                    updTStatus?.BeginInvoke(1, "Login Sucessfull... ", tCntrlName, null, null);
                                    if (!_validateuser_Sik(updTStatus))
                                    {
                                        break;
                                    }
                                    Request_Type = "json";
                                    num11 = 0;
                                    dictionary_TimeP["Login"] = DateAndTime.Now.ToString("hh:mm:ss:fff");
                                    do
                                    {
                                        updTStatus?.BeginInvoke(1, "validate User", tCntrlName, null, null);
                                        DateTime dateTime4 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                        long num12 = (long)(DateTime.UtcNow - dateTime4).TotalMilliseconds;
                                        class3_0.token = num12.ToString();
                                        if (!isAPP)
                                        {
                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/validateUser?source=3";
                                        }
                                        else
                                        {
                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/validateUser?source=1";
                                        }
                                        postdata = null;
                                        dateTime_3 = DateTime.Now;
                                        Status = "ValidateUser";
                                        num11++;
                                        if (!_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                        {
                                            continue;
                                        }
                                        if (response.IndexOf("minmPsgnInputTime") < 0)
                                        {
                                            break;
                                        }
                                        string text14A = response.Substring(response.IndexOf("userId") + 9);

                                        string s = text14A.Substring(0, text14A.IndexOf("\""));
                                        string ewalmobile = jsonData_Serial(response, "mobile");//userIdHash=991B09C03BCF2E4FCF84E2FF4DB9D83D
                                        bmikey = jsonData_Serial(response, "userIdHash");
                                        if (class3_0.BANKSAVEAS.Contains("E-WALLET"))
                                        {
                                            if (class3_0.EWALLET != ewalmobile)
                                            {
                                                MessageBox.Show("E-Wallet Mobile Number and IRCTC Id Mobile Number DOnt Match Please use same irctc id...");
                                                return false;
                                            }

                                        }
                                        string[] array10 = GetString(response, "minmPsgnInputTime").ToUpper().Split(new string[1] { "#" }, StringSplitOptions.None);
                                        double.TryParse(array10[0], out minmPsgnInputTime2);
                                        double.TryParse(array10[2], out minmPsgnInputTime4);
                                        double.TryParse(array10[4], out minmPsgnInputTime6);
                                        double.TryParse(GetString(response, "minmPaymentTime").ToUpper(), out minmPaymentTime);
                                        long num13 = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
                                        if (74000 > num13 || num13 > 115900)
                                        {
                                            minmPsgnInputTime2 = 6000.0;
                                        }
                                        class3_0.string_62 = response;
                                        if (response.IndexOf("userEnableState\"") > 0)
                                        {
                                            response.IndexOf("userEnableState\":\"5");
                                            if (response.IndexOf("userEnableState\":\"3") > 0)
                                            {
                                                Class11.smethod_1("TBL_USER", "UserState", "Suspend||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                updTStatus.BeginInvoke(2, "Your Account Has Suspended! ", tCntrlName, null, null);
                                                result = false;
                                                return result;
                                            }
                                            response.IndexOf("userEnableState\":\"1");
                                            if (response.IndexOf("verified\":\"false") > 0)
                                            {
                                                isAPP = false;
                                                updTStatus.BeginInvoke(2, "Verifying IRCTC ID...", tCntrlName, null, null);
                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/loginCaptcha?nlpCaptchaException=true";
                                                DateTime dateTime2S = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                                long num9S = (long)(DateTime.UtcNow - dateTime2S).TotalMilliseconds;
                                                class3_0._greq = num9S.ToString();
                                                greq = jwtutils.GetHash(ref mup);
                                                mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                                                class3_0.token = null;
                                                cookie_ = new CookieContainer();
                                                _httpRequest(url, null, Reffral, "Plain1Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);

                                                if (response.Contains("status"))
                                                {
                                                    class3_0._greq = GetString(response, "status");
                                                }
                                                long userId = long.Parse(s);
                                                string text15 = "";
                                                class3_0.TransactionID = jwtutils.getClientTransactionId(userId);
                                                string text16 = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaganetate/" + class3_0.TransactionID + "/FORGOT_PASSWORD";
                                                string data = null;
                                                string reff = "https://www.irctc.co.in/nget/profile/forgot-password?pageType=P";
                                                _httpRequest(text16, null, reff, "Plain1Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                if (response.IndexOf("captchaQuestion") > 0)
                                                {
                                                    string text17 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                                                    text = text17.Substring(0, text17.IndexOf("\""));
                                                }
                                                new Stopwatch().Start();
                                                _ = (Bitmap)method_55(text);
                                                frmCaptcha frmCaptcha3 = new frmCaptcha(this, cookie_, "", "");
                                                string text18 = frmCaptcha3.SolveCaptcha(text);
                                                frmCaptcha3.Dispose();
                                                Thread.Sleep(3000);
                                                text16 = "https://www.irctc.co.in/eticketing/protected/mapps1/forgotPasswordInit/" + class3_0.TransactionID + "/" + class3_0.IRCTC_ID + "?captcha=" + text18;
                                                _httpRequest(text16, null, reff, "Plain1Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                if (response.Contains("Verification code is sent to your registered Email id"))
                                                {
                                                    Class11.smethod_1("TBL_USER", "UserState", "Active||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                    updTStatus.BeginInvoke(2, "Verification sucess login again", tCntrlName, null, null);
                                                    result = false;
                                                    return result;
                                                }
                                                else
                                                {
                                                    Class11.smethod_1("TBL_USER", "UserState", "Unverified||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                    updTStatus.BeginInvoke(2, "ID Not Verfied try again or change id", tCntrlName, null, null);
                                                    result = false;
                                                    return result;
                                                }

                                            }
                                        }
                                        num11 = 0;
                                        //class3_0.airtelotp = Interaction.InputBox("Enter Otp Received....");
                                        updTStatus.BeginInvoke(1, "Hitting Train Lists....", tCntrlName, null, null);
                                        while (true)
                                        {
                                        ilrebooktrick:
                                            if (!isAPP)
                                            {
                                                try
                                                {
                                                    excalibur();
                                                }
                                                catch
                                                {

                                                }
                                            }

                                            Stopwatch stopwatch2 = new Stopwatch();
                                            stopwatch2.Start();
                                            dictionary_TimeP["FindTrain"] = DateAndTime.Now.ToString("mm:ss:fff");
                                            num11++;
                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/altAvlEnq/TC";
                                            postdata = "{\"concessionBooking\":false,\"srcStn\":\"" + class3_0.SRC_STN + "\",\"destStn\":\"" + class3_0.DEST_STN + "\",\"jrnyClass\":\"" + class3_0.TKT_CLASS + "\",\"jrnyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"currentBooking\":\"false\",\"flexiFlag\":true,\"handicapFlag\":false,\"ticketType\":\"E\",\"loyaltyRedemptionBooking\":false,\"ftBooking\":false}";
                                            Status = "Getting Train List";
                                            CookieContainer cookieContainer = new CookieContainer();
                                            if (_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_W))
                                            {
                                                if (response.Contains("Your login activity is not completed successfuly"))
                                                {
                                                    Class11.smethod_1("TBL_USER", "UserState", "InCompleteProfile||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                    updTStatus.BeginInvoke(2, "Verify IRCTC ID", tCntrlName, null, null);
                                                    return false;
                                                }
                                                string text13 = response.Substring(response.IndexOf("timeStamp") + 23);
                                                text13 = text13.Substring(0, text13.IndexOf("\""));
                                                int_TimeDiff = (int)new TimeSpan(DateTime.Parse(text13).Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                                                string trainBtwnStnsList = response;
                                                if (response.Contains("trainBtwnStnsList"))
                                                {
                                                    try
                                                    {
                                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/trnscheduleenquiry/" + class3_0.TRAIN_NO;
                                                        _httpRequest(url, null, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_W);
                                                        class3_0.GetStationList(response, class3_0.SRC_STN, class3_0.DEST_STN);
                                                        string trainRunsOnMon = jsonData_Serial(response, "trainRunsOnMon");
                                                        string trainRunsOnTue = jsonData_Serial(response, "trainRunsOnTue");
                                                        string trainRunsOnWed = jsonData_Serial(response, "trainRunsOnWed");
                                                        string trainRunsOnThu = jsonData_Serial(response, "trainRunsOnThu");
                                                        string trainRunsOnFri = jsonData_Serial(response, "trainRunsOnFri");
                                                        string trainRunsOnSat = jsonData_Serial(response, "trainRunsOnSat");
                                                        string trainRunsOnSun = jsonData_Serial(response, "trainRunsOnSun");
                                                        
                                                        if (trainRunsOnMon == "Y" & trainRunsOnTue =="Y" & trainRunsOnSun == "Y" & trainRunsOnWed == "Y" & trainRunsOnThu == "Y" & trainRunsOnFri == "Y" & trainRunsOnSat == "Y" & class3_0.TKT_ISADV & int_BookHRS != 8)
                                                        {
                                                            datechangee = true;
                                                            newdate = class3_0.dateTime_0.AddDays(-1);
                                                            stationchange = false;
                                                            updTStatus.BeginInvoke(786, "Optimizing Porcess...", tCntrlName, null, null);
                                                            Thread.Sleep(1000);
                                                            
                                                        }
                                                        
                                                        //else if( class3_0.TKT_ISADV & int_BookHRS != 8)
                                                        //{
                                                        //    string weekname = class3_0.dateTime_0.ToString("ddd");
                                                        //    if (weekname == "Mon" & trainRunsOnSun == "Y")
                                                        //    {

                                                        //        newdate = class3_0.dateTime_0.AddDays(-1);
                                                        //        datechangee = true;
                                                        //        stationchange = false;
                                                        //        updTStatus.BeginInvoke(7860, "Ye form 80% book ho jayega..", tCntrlName, null, null);
                                                        //        Thread.Sleep(1000);
                                                        //    }
                                                        //    else if (weekname == "Tue" & trainRunsOnMon == "Y")
                                                        //    {
                                                        //        newdate = class3_0.dateTime_0.AddDays(-1);
                                                        //        datechangee = true;
                                                        //        stationchange = false;
                                                        //        updTStatus.BeginInvoke(7860, "Ye form 80% book ho jayega..", tCntrlName, null, null);
                                                        //        Thread.Sleep(1000);
                                                        //    }
                                                        //    else if (weekname == "Wed" & trainRunsOnTue == "Y")
                                                        //    {
                                                        //        newdate = class3_0.dateTime_0.AddDays(-1);
                                                        //        datechangee = true;
                                                        //        stationchange = false;
                                                        //        updTStatus.BeginInvoke(7860, "Ye form 80% book ho jayega..", tCntrlName, null, null);
                                                        //        Thread.Sleep(1000);
                                                        //    }
                                                        //    else if (weekname == "Thu" & trainRunsOnWed == "Y")
                                                        //    {
                                                        //        newdate = class3_0.dateTime_0.AddDays(-1);
                                                        //        datechangee = true;
                                                        //        stationchange = false;
                                                        //        updTStatus.BeginInvoke(7860, "Ye form 80% book ho jayega..", tCntrlName, null, null);
                                                        //        Thread.Sleep(1000);
                                                        //    }
                                                        //    else if (weekname == "Fri" & trainRunsOnThu == "Y")
                                                        //    {
                                                        //        newdate = class3_0.dateTime_0.AddDays(-1);
                                                        //        datechangee = true;
                                                        //        stationchange = false;
                                                        //        updTStatus.BeginInvoke(7860, "Ye form 80% book ho jayega..", tCntrlName, null, null);
                                                        //        Thread.Sleep(1000);
                                                        //    }
                                                        //    else if (weekname == "Sat" & trainRunsOnFri == "Y")
                                                        //    {
                                                        //        newdate = class3_0.dateTime_0.AddDays(-1);
                                                        //        datechangee = true;
                                                        //        stationchange = false;
                                                        //        updTStatus.BeginInvoke(7860, "Ye form 80% book ho jayega..", tCntrlName, null, null);
                                                        //        Thread.Sleep(1000);
                                                        //    }
                                                        //    else if (weekname == "Sun" & trainRunsOnSat == "Y")
                                                        //    {
                                                        //        newdate = class3_0.dateTime_0.AddDays(-1);
                                                        //        datechangee = true;
                                                        //        stationchange = false;
                                                        //        updTStatus.BeginInvoke(7860, "Ye form 80% book ho jayega..", tCntrlName, null, null);
                                                        //        Thread.Sleep(1000);
                                                        //    }
                                                        //}
                                                    }
                                                    catch
                                                    {
                                                    }
                                                    Lock0("FindTrain", stopwatch2, response);
                                                    dateTime_3 = DateTime.Parse(GetString(response, "timeStamp"));

                                                    SourceDestination_Correction(trainBtwnStnsList);
                                                    bool flag12 = true;
                                                    Method_GetBookingHRS();
                                                    int num14 = 0;
                                                    if (int_BookHRS == 8)
                                                    {
                                                        num14 = 54000;
                                                    }
                                                    if (int_BookHRS == 10)
                                                    {
                                                        num14 = (60 - AC_AvailibalityTime) * 1000;
                                                    }
                                                    if (int_BookHRS == 11)
                                                    {
                                                        num14 = (60 - SL_AvailibalityTime) * 1000;
                                                    }
                                                    if (fastavl)
                                                    {
                                                        if (!isAPP)
                                                        {
                                                            try
                                                            {
                                                                excalibur();
                                                            }
                                                            catch
                                                            {

                                                            }
                                                        }
                                                    ilrecheckkkk:
                                                        
                                                        Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/avlFarenquiry/" + class3_0.TRAIN_NO + "/" + class3_0.dateTime_0.ToString("yyyMMdd") + "/" + class3_0.SRC_STN + "/" + class3_0.DEST_STN + "/" + class3_0.TKT_CLASS + "/" + class3_0.TKT_QUOTA + "/N";
                                                        postdata = "{\"paymentFlag\":\"N\",\"concessionBooking\":false,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"ticketType\":\"E\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"moreThanOneDay\":true,\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"fromStnCode\":\"" + class3_0.SRC_STN + "\",\"toStnCode\":\"" + class3_0.DEST_STN + "\",\"isLogedinReq\":true,\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"classCode\":\"" + class3_0.TKT_CLASS + "\"}";
                                                        if (isAPP)
                                                        {
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";

                                                        }
                                                        if (datechangee)
                                                        {
                                                            Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/avlFarenquiry/" + class3_0.TRAIN_NO + "/" + newdate.ToString("yyyMMdd") + "/" + class3_0.SRC_STN + "/" + class3_0.DEST_STN + "/" + class3_0.TKT_CLASS + "/" + class3_0.TKT_QUOTA + "/N";
                                                            postdata = "{\"paymentFlag\":\"N\",\"concessionBooking\":false,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"ticketType\":\"E\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"moreThanOneDay\":true,\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"fromStnCode\":\"" + class3_0.SRC_STN + "\",\"toStnCode\":\"" + class3_0.DEST_STN + "\",\"isLogedinReq\":true,\"journeyDate\":\"" + newdate.ToString("yyyMMdd") + "\",\"classCode\":\"" + class3_0.TKT_CLASS + "\"}";
                                                            if (isAPP)
                                                            {
                                                                postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";

                                                            }
                                                        }
                                                        _httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 58000, 58000, ref response, ref errormsg, ref Exception_);
                                                        if (response.Contains("Please enter a valid train number"))
                                                        {
                                                            datechangee = false;
                                                            stationchange = true ;
                                                            goto ilrecheckkkk;
                                                        }
                                                        if (!response.Contains("availablityStatus"))
                                                        {
                                                            goto ilrecheckkkk;
                                                        }
                                                    }
                                                    if (!isAPP & (akamaiok))
                                                    {
                                                        Chrome_CloseSetup();
                                                        Thread.Sleep(2000);
                                                        getandclear();
                                                        updTStatus.BeginInvoke(1, "Complete step 2...", tCntrlName, null, null);
                                                        IRComm.doesSurf = false;
                                                        string step2 = "Ab step 2 me dhyan se follow kare ,IRCTC open hoga apko login karna hai train search karni hai , availability sirf ek baar check karni aur book now pe click karke passenger page tk jana waha jakar apko right click karke I M Not Robot karna hai ye karne se apka window sucessfull login ho jayega.....";
                                                        MessageBox.Show(step2, "Step 2 Guide..", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                        BmskCookieOffline_P(true);
                                                        cookieContainer_2 = cookieBmsk_2;
                                                        Chrome_CloseSetup();
                                                        Thread.Sleep(2000);
                                                    }
                                                    if (class3_0.TKT_ISADV & (DateTime.Now.Hour < int_BookHRS))
                                                    {
                                                        updTStatus.BeginInvoke(1, "Wait For PG Open", tCntrlName, null, null);
                                                        DateTime dateTime5 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_BookHRS, 0, 0, 0);
                                                        TimeSpan timeSpan = new TimeSpan(dateTime5.Ticks - DateTime.Now.Ticks);
                                                        int num15 = (int)timeSpan.TotalMilliseconds - int_TimeDiff;
                                                        Random random3 = new Random();
                                                        int num16 = random3.Next(1, 300);
                                                        int num17 = 16000 + num16 + int_Pair * 459;
                                                        if (class3_0.TKT_CLASS == "SL")
                                                        {
                                                            num17 = 32000 + num16 + int_Pair * 759;
                                                        }
                                                        num15 -= num17;

                                                        if (num15 > 0)
                                                        {
                                                            Application.DoEvents();
                                                            Thread.Sleep(num15);
                                                            Application.DoEvents();
                                                        }
                                                    }
                                                    string sRC_STN = class3_0.SRC_STN;
                                                    string dEST_STN = class3_0.DEST_STN;
                                                    string tKT_QUOTA2 = class3_0.TKT_QUOTA;
                                                    
                                                    string text360 = class3_0.dateTime_0.ToString("yyyMMdd");
                                                    updTStatus.BeginInvoke(1, "Hitting Availablity.....", tCntrlName, null, null);
                                                    if (class3_0.Station_listWithDay != null & class3_0.TKT_ISADV & int_BookHRS != 8& stationchange)
                                                    {
                                                        try
                                                        {
                                                            int indexIneed = Array.FindIndex(class3_0.Station_listWithDay, s => s.StartsWith(class3_0.SRC_STN));
                                                            string[] newsrcc = class3_0.Station_listWithDay[indexIneed].Split(new string[1] { "," }, StringSplitOptions.None);
                                                            string dayrun = newsrcc[1];
                                                            if (class3_0.Station_listWithDay[0].Contains(class3_0.SRC_STN))
                                                            {
                                                                string newdsrc = class3_0.Station_listWithDay[indexIneed + 1];
                                                                string[] newsrc = newdsrc.Split(new string[1] { "," }, StringSplitOptions.None);
                                                                int distance = int.Parse(newsrc[2]);
                                                                if (distance <= 50)
                                                                {
                                                                    class3_0.SRC_STN = newsrc[0].Trim();
                                                                    class3_0.BRD_STN = newsrc[0].Trim();
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (indexIneed == 1)
                                                                {
                                                                    string newdsrc = class3_0.Station_listWithDay[indexIneed - 1];
                                                                    string[] newsrc = newdsrc.Split(new string[1] { "," }, StringSplitOptions.None);
                                                                    if (newsrc[1] == dayrun)
                                                                    {
                                                                        class3_0.SRC_STN = newsrc[0].Trim();
                                                                    }
                                                                }
                                                                else if (indexIneed != 1)
                                                                {
                                                                    Random rnd = new Random();
                                                                    int numhold = rnd.Next(1, indexIneed);
                                                                    string newdsrc = class3_0.Station_listWithDay[indexIneed - numhold];
                                                                    string[] newsrc = newdsrc.Split(new string[1] { "," }, StringSplitOptions.None);
                                                                    if (newsrc[1] == dayrun)
                                                                    {
                                                                        class3_0.SRC_STN = newsrc[0].Trim();
                                                                    }
                                                                }


                                                            }
                                                            updTStatus.BeginInvoke(1, "Trying From STN-" + class3_0.SRC_STN, tCntrlName, null, null);
                                                        }
                                                        catch
                                                        {

                                                        }   
                                                    }
                                                    //updTStatus.BeginInvoke(1, "Hitting Availablity.....", tCntrlName, null, null);
                                                    num11 = 0;
                                                    int num18 = 0;
                                                    //num18++;
                                                    Status = "Getting Availablity";
                                                    if (fastavl)
                                                    {
                                                        if (isAPP)
                                                        {
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/allLapAvlFareEnq/N";
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"agentDeviceId\":null,\"alternateAvlInputDTO\":null,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingChoice\":0,\"bookingConfirmChoice\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"cod\":\"false\",\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enrouteStation\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"journalistBooking\":false,\"lapAvlRequestDTO\":[{\"addMealDetail\":null,\"agentOtpBooking\":false,\"coachId\":null,\"concessionBooking\":false,\"fromStation\":\"" + class3_0.SRC_STN + "\",\"ignoreChoiceIfWl\":true,\"infantList\":null,\"jd\":null,\"journeyClass\":\"" + class3_0.TKT_CLASS + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"passengerList\":null,\"quota\":\"" + class3_0.TKT_QUOTA + "\",\"reservationChoice\":null,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"toStation\":\"" + class3_0.DEST_STN + "\",\"trainNo\":\"" + class3_0.TRAIN_NO + "\",\"trainOwner\":null,\"travelInsuranceOpted\":null}],\"loyaltyAccuralBooking\":false,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpSecType\":null,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passBooking\":false,\"paymentType\":1,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"ticketType\":\"E\",\"tktAddress\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null}";

                                                        }
                                                        else
                                                        {
                                                            if (!isAPP)
                                                            {
                                                                try
                                                                {
                                                                    excalibur();
                                                                }
                                                                catch
                                                                {

                                                                }
                                                            }
                                                            Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                            //postdata = "{\"paymentFlag\":\"N\",\"concessionBooking\":false,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"ticketType\":\"E\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"moreThanOneDay\":true,\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"fromStnCode\":\"" + class3_0.SRC_STN + "\",\"toStnCode\":\"" + class3_0.DEST_STN + "\",\"isLogedinReq\":true,\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"classCode\":\"" + class3_0.TKT_CLASS + "\"}";
                                                            postdata = "{\"clusterFlag\":\"N\",\"onwardFlag\":\"N\",\"cod\":\"false\",\"reservationMode\":\"WS_TA_B2C\",\"autoUpgradationSelected\":false,\"gnToCkOpted\":false,\"paymentType\":1,\"twoPhaseAuthRequired\":false,\"captureAddress\":0,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"moreThanOneDay\":true,\"ticketType\":\"E\",\"lapAvlRequestDTO\":[{\"passengerList\":null,\"infantList\":null,\"ticketChoiceSameCoach\":false,\"ignoreChoiceIfWl\":true,\"bookOnlyIfCnf\":false,\"concessionBooking\":false,\"addMealDetail\":null,\"trainNo\":\"" + class3_0.TRAIN_NO + "\",\"fromStation\":\"" + class3_0.SRC_STN + "\",\"journeyClass\":\"" + class3_0.TKT_CLASS + "\",\"toStation\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"quota\":\"" + class3_0.TKT_QUOTA + "\"}]}";
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/allLapAvlFareEnq/N";
                                                        }

                                                        if (datechangee)
                                                        {
                                                            if (isAPP)
                                                            {
                                                                //class3_0.TKT_QUOTAGN = newdate.ToString("yyyMMdd");
                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/allLapAvlFareEnq/N";
                                                                postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"agentDeviceId\":null,\"alternateAvlInputDTO\":null,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingChoice\":0,\"bookingConfirmChoice\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"cod\":\"false\",\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enrouteStation\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"journalistBooking\":false,\"lapAvlRequestDTO\":[{\"addMealDetail\":null,\"agentOtpBooking\":false,\"coachId\":null,\"concessionBooking\":false,\"fromStation\":\"" + class3_0.SRC_STN + "\",\"ignoreChoiceIfWl\":true,\"infantList\":null,\"jd\":null,\"journeyClass\":\"" + class3_0.TKT_CLASS + "\",\"journeyDate\":\"" + newdate.ToString("yyyMMdd") + "\",\"passengerList\":null,\"quota\":\"" + class3_0.TKT_QUOTA + "\",\"reservationChoice\":null,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"toStation\":\"" + class3_0.DEST_STN + "\",\"trainNo\":\"" + class3_0.TRAIN_NO + "\",\"trainOwner\":null,\"travelInsuranceOpted\":null}],\"loyaltyAccuralBooking\":false,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpSecType\":null,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passBooking\":false,\"paymentType\":1,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"ticketType\":\"E\",\"tktAddress\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null}";

                                                            }
                                                            else
                                                            {
                                                                if (!isAPP)
                                                                {
                                                                    try
                                                                    {
                                                                        excalibur();
                                                                    }
                                                                    catch
                                                                    {

                                                                    }
                                                                }
                                                                Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                                //postdata = "{\"paymentFlag\":\"N\",\"concessionBooking\":false,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"ticketType\":\"E\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"moreThanOneDay\":true,\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"fromStnCode\":\"" + class3_0.SRC_STN + "\",\"toStnCode\":\"" + class3_0.DEST_STN + "\",\"isLogedinReq\":true,\"journeyDate\":\"" + newdate.ToString("yyyMMdd") + "\",\"classCode\":\"" + class3_0.TKT_CLASS + "\"}";
                                                                postdata = "{\"clusterFlag\":\"N\",\"onwardFlag\":\"N\",\"cod\":\"false\",\"reservationMode\":\"WS_TA_B2C\",\"autoUpgradationSelected\":false,\"gnToCkOpted\":false,\"paymentType\":1,\"twoPhaseAuthRequired\":false,\"captureAddress\":0,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"moreThanOneDay\":true,\"ticketType\":\"E\",\"lapAvlRequestDTO\":[{\"passengerList\":null,\"infantList\":null,\"ticketChoiceSameCoach\":false,\"ignoreChoiceIfWl\":true,\"bookOnlyIfCnf\":false,\"concessionBooking\":false,\"addMealDetail\":null,\"trainNo\":\"" + class3_0.TRAIN_NO + "\",\"fromStation\":\"" + class3_0.SRC_STN + "\",\"journeyClass\":\"" + class3_0.TKT_CLASS + "\",\"toStation\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + newdate.ToString("yyyMMdd") + "\",\"quota\":\"" + class3_0.TKT_QUOTA + "\"}]}";
                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/allLapAvlFareEnq/N";
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (isAPP)
                                                        {
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/avlFarenquiry/" + class3_0.TRAIN_NO + "/" + class3_0.dateTime_0.ToString("yyyMMdd") + "/" + class3_0.SRC_STN + "/" + class3_0.DEST_STN + "/" + class3_0.TKT_CLASS + "/" + class3_0.TKT_QUOTA + "/N";
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalPsgn\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";

                                                        }
                                                        else
                                                        {
                                                            if (!isAPP)
                                                            {
                                                                try
                                                                {
                                                                    excalibur();
                                                                }
                                                                catch
                                                                {

                                                                }
                                                            }
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/avlFarenquiry/" + class3_0.TRAIN_NO + "/" + class3_0.dateTime_0.ToString("yyyMMdd") + "/" + class3_0.SRC_STN + "/" + class3_0.DEST_STN + "/" + class3_0.TKT_CLASS + "/" + class3_0.TKT_QUOTA + "/N";
                                                            Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                            postdata = "{\"paymentFlag\":\"N\",\"concessionBooking\":false,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"ticketType\":\"E\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"moreThanOneDay\":true,\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"fromStnCode\":\"" + class3_0.SRC_STN + "\",\"toStnCode\":\"" + class3_0.DEST_STN + "\",\"isLogedinReq\":true,\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"classCode\":\"" + class3_0.TKT_CLASS + "\"}";

                                                        }
                                                    }
                                                    do
                                                    {
                                                    IL_28de:
                                                        num18++;
                                                        response = null;
                                                        dictionary_TimeP["Availablity"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                        stopwatch2 = new Stopwatch();
                                                        stopwatch2.Start();
                                                        if (!_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 58000, 58000, ref response, ref errormsg, ref Exception_) || string.IsNullOrEmpty(response) || !response.Contains("avlDayList"))
                                                        {
                                                            continue;
                                                        }
                                                        
                                                        if (response.Contains("Invalid access token") && num11 > 2)
                                                        {
                                                            break;
                                                        }
                                                        string @string = GetString(response, "availablityStatus");
                                                        if (num18 == 1 & datechangee)
                                                        {

                                                            @string = @string + "#";

                                                        }
                                                        try
                                                        {
                                                            if (!opening1 & class3_0.TKT_ISADV)
                                                            {
                                                                updTStatus.BeginInvoke(1, "Checking Bkg Allowance " + num18, tCntrlName, null, null);
                                                                string text14t = response.Substring(response.IndexOf("timeStamp") + 23);
                                                                text14t = text14t.Substring(0, text14t.IndexOf("."));
                                                                string[] updaterti = text14t.Split(new string[1] { ":" }, StringSplitOptions.None);
                                                                int newt = int.Parse(updaterti[0]);
                                                                if (newt != int_BookHRS)
                                                                {
                                                                    continue;
                                                                }
                                                                //updTStatus.BeginInvoke(1, "Checking Bkg Allowance " + num18, tCntrlName, null, null);
                                                                //string lastupdatetime = GetString(response, "lastUpdateTime");
                                                                //if (string.IsNullOrEmpty(lastupdatetime))
                                                                //{
                                                                //    //continue;
                                                                //}
                                                                //else
                                                                //{
                                                                //    string[] updaterti = lastupdatetime.Split(new string[1] { "and" }, StringSplitOptions.None);
                                                                //    if (updaterti[0].Trim() != "0 Minutes")
                                                                //    {
                                                                //        continue;
                                                                //    }
                                                                //}

                                                            }


                                                        }
                                                        catch
                                                        {

                                                         }


                                                            string text19SS = GetString(response, "totalCollectibleAmount");
                                                        class3_0.string_30 = response;
                                                        if (response.IndexOf("avlDayList") > 0 && class3_0.TKT_ISADV)
                                                        {
                                                            if (test1day & int_BookHRS != 8 & opening1)
                                                            {
                                                                updTStatus.BeginInvoke(1, "Wait for ## Remove", tCntrlName, null, null);
                                                                opening1 = false;
                                                                Method_CheckBookingTime(response);
                                                                //Thread.Sleep(1000);
                                                            }
                                                            if (int_BookHRS == 8 & opening)
                                                            {
                                                                updTStatus.BeginInvoke(1, "Wait for ## Remove", tCntrlName, null, null);
                                                                opening = false;
                                                                Method_CheckBookingTime_Test(response);
                                                            }
                                                            updTStatus.BeginInvoke(1, "Int Avl Check - " + num18, tCntrlName, null, null);
                                                            string text14 = response.Substring(response.IndexOf("timeStamp") + 23);
                                                            text14 = text14.Substring(0, text14.IndexOf("\""));
                                                            DateTime dateTime6 = DateTime.Parse(text14);
                                                            if (!(!@string.Contains("#") & (dateTime6.Hour >= int_BookHRS)))
                                                            {
                                                                double totalMilliseconds = stopwatch2.Elapsed.TotalMilliseconds;
                                                                stopwatch2.Stop();
                                                                int num19 = dateTime6.Second * 1000 + dateTime6.Millisecond;
                                                                if (num18 >= 15)
                                                                {
                                                                    num18 = 0;
                                                                    Application.DoEvents();
                                                                    Thread.Sleep(2500);
                                                                }
                                                                else
                                                                {
                                                                    Application.DoEvents();
                                                                    Thread.Sleep(300);
                                                                }
                                                                goto IL_28de;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (response.Contains("availablityStatus") && @string == "NOT AVAILABLE" && class3_0.TKT_QUOTA == "PT")
                                                            {
                                                                frmPayment frmPayment2 = new frmPayment();
                                                                frmPayment2.tktname.Text = TktName;
                                                                frmPayment2.bool_7 = true;
                                                                frmPayment2.string_1 = "PT Not Available Do You Want To Change Your Quota into TQ And Book.";
                                                                frmPayment2.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                DialogResult dialogResult = frmPayment2.DialogResult;
                                                                frmPayment2.Dispose();
                                                                if (dialogResult == DialogResult.Cancel)
                                                                {
                                                                    updTStatus.BeginInvoke(2, @string, tCntrlName, null, null);
                                                                    return false;
                                                                }
                                                                class3_0.TKT_QUOTA = "TQ";
                                                                goto IL_28de;
                                                            }
                                                            if (response.IndexOf("Unable to process") >= 0)
                                                            {
                                                                goto IL_28de;
                                                            }
                                                            if (@string.Contains("REGRET") || @string.Contains("TRAIN DEPARTED") || @string.Contains("TRAIN CANCELLED") || @string.Contains("NOT AVAILABLE"))
                                                            {
                                                                updTStatus.BeginInvoke(2, @string, tCntrlName, null, null);
                                                                return false;
                                                            }
                                                        }
                                                        
                                                        Lock0("Availablity", stopwatch2, response);
                                                        if (!isAPP)
                                                        {
                                                            string timestampp = method_14();//EncodeToBase(timestamp, 36);
                                                            long timestap = long.Parse(timestampp);
                                                            class3_0.TransactionID = EncodeToBase(timestap, 36);
                                                        }
                                                        else
                                                        {
                                                            long userIdd = long.Parse(s);
                                                            class3_0.TransactionID = jwtutils.getClientTransactionId(userIdd);
                                                        }

                                                        updTStatus.BeginInvoke(1, "Getting Bkg Captcha...", tCntrlName, null, null);
                                                        if (class3_0.TKT_ISADV & !isRealsikka)
                                                        {
                                                            isReal = true;
                                                            ThreadPool.QueueUserWorkItem(AuthSikbkg);
                                                        }
                                                        class3_0.GetBookPost(ref url, ref postdata, ref Reffral, isAPP, class3_0.TKT_ISADV);
                                                        num11 = 0;
                                                        do
                                                        {
                                                            stopwatch2 = new Stopwatch();
                                                            stopwatch2.Start();
                                                            Status = "Book Ticket";
                                                            dictionary_TimeP["Book"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                            Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                            //string startbkg = DateTime.Now.ToString("HH:mm:ss");
                                                            bool flag13 = _httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                            
                                                            if (response.Contains("Invalid access token"))
                                                            {
                                                                break;
                                                            }
                                                            if (response.Contains("Booking not allowed") & autorelogin)
                                                            {
                                                                continue;
                                                            }
                                                            if (!(response != "retry" && flag13))
                                                            {
                                                                continue;
                                                            }
                                                            //class3_0.token = Timestampd.ToString();
                                                            //int newpsgtime = 0;
                                                            //string text14d = response.Substring(response.IndexOf("timeStamp") + 23);
                                                            //text14d = text14d.Substring(0, text14d.IndexOf("."));
                                                            //long millis = TimeDifference(startbkg, text14d);
                                                            
                                                            int num19 = 0;
                                                            dateTime_2 = GetTimeStamp(response, int_TimeDiff);
                                                            dateTime_2 = DateTime.Now.AddMilliseconds(200.0);
                                                            Lock0("Book", stopwatch2, response);
                                                            if (response.Contains("departureTime") && !response.Contains("errorMessage"))
                                                            {
                                                                try
                                                                {
                                                                   string food =  GetString(response, "foodChoiceEnabled");
                                                                   class3_0.fooden = Convert.ToBoolean(food);
                                                                }

                                                                catch
                                                                {

                                                                }
                                                                if (class3_0.int_TotalPax > 2)
                                                                {
                                                                    minmPsgnInputTime2 = minmPsgnInputTime4;
                                                                }
                                                                if (class3_0.int_TotalPax > 4)
                                                                {
                                                                    minmPsgnInputTime2 = minmPsgnInputTime6;
                                                                }
                                                                string text15M = stopwatch2.Elapsed.TotalMilliseconds.ToString();
                                                                string[] array110 = text15M.Split('.');
                                                                text15M = array110[0];
                                                                num19 = int.Parse(text15M);
                                                                if (isAPP)
                                                                {
                                                                    num19 /= nopax;

                                                                }
                                                                else
                                                                {
                                                                    num19 /= nopax;
                                                                }
                                                               
                                                                bool flag120 = true;
                                                                lock (object_16)
                                                                {
                                                                    if (dictionary_5.TryGetValue(tCntrlName + " WL_Status", out var value2))
                                                                    {
                                                                        if (value2 == "WL Allow")
                                                                        {
                                                                            class3_0.TKT_ISCONFIRM = false;
                                                                        }
                                                                        else
                                                                        {
                                                                            class3_0.TKT_ISCONFIRM = true;
                                                                        }
                                                                    }
                                                                }
                                                                string_70 = null;
                                                                text3 = smethod_10(class3_0.BANKSAVEAS);
                                                                if (isAPP)
                                                                {
                                                                    postdata = class3_0.GetPassengerPOST_App(class3_0.TransactionID, text3, response);
                                                                }
                                                                else
                                                                {

                                                                    postdata = class3_0.GetPassengerPOST(class3_0.TransactionID, text3, response);
                                                                }
                                                               // paxminus = true;
                                                                if (class3_0.TKT_ISADV & (class3_0.TKT_QUOTA != "GN") & !unable & paxminus & int_BookHRS == 11)
                                                                   // if (class3_0.TKT_ISADV & !unable & paxminus)
                                                                    {
                                                                    if (isAPP)
                                                                    {
                                                                        int num200 = dictionary_PaxStart[TktName_ + "_APP"];
                                                                        //if (num200 > 1)
                                                                        //{
                                                                            minmPsgnInputTime2 -= num19;
                                                                        //}
                                                                        dictionary_PaxStart[TktName_ + "_APP"] = num200 + 1;
                                                                    }
                                                                    else
                                                                    {
                                                                        int num210 = dictionary_PaxStart[TktName_ + "_WEB"];
                                                                        //if (num210 > 0)
                                                                        //{
                                                                        minmPsgnInputTime2 -= num19;
                                                                        //}
                                                                        dictionary_PaxStart[TktName_ + "_WEB"] = num210 + 1;
                                                                    }
                                                                }

                                                                //if (!isAPP)
                                                                //{
                                                                //    try
                                                                //    {
                                                                //        excalibur();
                                                                //    }
                                                                //    catch
                                                                //    {

                                                                //    }
                                                                //}
                                                                if (minmPsgnInputTime2 < 10000)
                                                                {
                                                                    minmPsgnInputTime2 = 10000;
                                                                }
                                                                int num20 = (int)minmPsgnInputTime2 - (int)(DateTime.Now - dateTime_2).TotalMilliseconds;
                                                                if (num20 > 0)
                                                                {
                                                                    DateTime now = DateTime.Now;
                                                                    int num21 = (int)(DateTime.Now - dateTime_2).TotalMilliseconds;
                                                                    num21 = (int)(minmPsgnInputTime2 - (double)num21);
                                                                    now = now.AddMilliseconds(num21);
                                                                    while (true)
                                                                    {
                                                                        TimeSpan timeSpan2 = now - DateTime.Now;
                                                                        string text15 = timeSpan2.Seconds + ":" + timeSpan2.Milliseconds;
                                                                        if (timeSpan2.TotalMilliseconds <= 1.0)
                                                                        {
                                                                            break;
                                                                        }
                                                                        updTStatus.BeginInvoke(1, "Pax  Submit IN - " + text15, tCntrlName, null, null);
                                                                        Thread.Sleep(50);
                                                                    }
                                                                }
                                                                num11 = 0;
                                                                do
                                                                {
                                                                    num11++;
                                                                    Status = "Passenger";
                                                                    stopwatch2 = new Stopwatch();
                                                                    stopwatch2.Start();
                                                                    dictionary_TimeP["Passenger"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                    updTStatus.BeginInvoke(1, "Submiting Pax Data...", tCntrlName, null, null);
                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/allLapAvlFareEnq/Y";
                                                                    Reffral = "https://www.irctc.co.in/nget/booking/psgninput";
                                                                    //if (int_Pair <= 3 & class3_0.TKT_ISADV & int_BookHRS != 8)
                                                                    //{
                                                                    //    try
                                                                    //    {
                                                                    //        Random rnd = new Random();

                                                                    //        int numhold = rnd.Next(1, 4);
                                                                    //        int numhold1 = rnd.Next(10, 59);
                                                                    //        string start = DateTime.Now.ToString("HH:mm:ss");
                                                                    //        string enddd = int_BookHRS + ":0" + numhold + ":" + numhold1;
                                                                    //        //+ ":04:00";
                                                                    //        updTStatus.BeginInvoke(1, "Wait 4 cloudfront @ " + enddd, tCntrlName, null, null);
                                                                    //        long millis = TimeDifference(start, enddd);
                                                                    //        int sleeppac = Convert.ToInt32(millis);
                                                                    //        Thread.Sleep(sleeppac);
                                                                    //    }
                                                                    //    catch
                                                                    //    {

                                                                    //    }

                                                                    //    //Method_CheckBookingTime_Pax(response);
                                                                    //    //TimeDifference
                                                                    //}
                                                                    if (!isAPP)
                                                                    {
                                                                        if (akamaiok)
                                                                        {
                                                                            cookie_ = cookieContainer_2;
                                                                        }
                                                                        if (!_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 58000, 58000, ref response, ref errormsg, ref Exception_) || string.IsNullOrEmpty(response) || !response.Contains("avlDayList"))
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if (!ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Plain123json"))
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }
                                                                    if ((response.IndexOf("bankDetailDTO") > 0) | (response.IndexOf("baseFare") > 0) | (response.IndexOf("captchaTime") > 0))
                                                                    {
                                                                        Lock0("Passenger", stopwatch2, response);
                                                                        class3_0.string_32 = response;
                                                                        //goto ilrebooktrick;
                                                                        num11 = 0;
                                                                        while (true)
                                                                        {
                                                                            num11++;
                                                                            stopwatch2 = new Stopwatch();
                                                                            stopwatch2.Start();
                                                                            dictionary_TimeP["Captcha"] = "[" + num11 + "]" + DateAndTime.Now.ToString("mm:ss:fff");
                                                                            updTStatus.BeginInvoke(1, "Loading final Captcha..", tCntrlName, null, null);
                                                                            GetString(response, "captcha");
                                                                            if (response.IndexOf("nlpKeyValue") <= 0)
                                                                            {
                                                                                string text16 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                                                                                string_93 = text16.Substring(0, text16.IndexOf("\""));
                                                                                frmCaptcha frmCaptcha3 = new frmCaptcha(this, cookie_, "", "");
                                                                                text10 = frmCaptcha3.SolveCaptcha(string_93);
                                                                                frmCaptcha3.Dispose();

                                                                                if (text10.Length < 3)
                                                                                {
                                                                                    string _reponse = "";
                                                                                    Status = "Passenger";
                                                                                    dictionary_TimeP["Passenger"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaganetate/" + class3_0.TransactionID + "/BOOKINGWS?nlpCaptchaException=true";
                                                                                    Reffral = "";
                                                                                    postdata = null;
                                                                                    if (ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref _reponse, ref errormsg, ref Exception_, "Plain123json"))
                                                                                    {
                                                                                        if (_reponse.Contains("captchaQuestion"))
                                                                                        {
                                                                                            response = _reponse;
                                                                                        }
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaverify/" + class3_0.TransactionID + "/BOOKINGWS/" + text10;
                                                                                    postdata = null;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                string string2 = GetString(response, "nlpKeyValue");
                                                                                LoadNlpCaptcha(string2, ref string_94, ref bitmap_1, ref string_93);
                                                                                Reffral = null;
                                                                                frmCAP frmCAP2 = new frmCAP(this);
                                                                                frmCAP2.tktname.Text = TktName;
                                                                                frmCAP2.method_4(control_0, rectangle_0, bitmap_1, string2, string_94, string_93);
                                                                                if (frmCAP2.DialogResult == DialogResult.Cancel)
                                                                                {
                                                                                    frmCAP2.Dispose();
                                                                                    updTStatus.BeginInvoke(2, "Captcha Cancel!", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                                text10 = frmCAP2.txtImageData.Text;
                                                                                string_94 = frmCAP2.string_2;
                                                                                frmCAP2.Dispose();
                                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/nlpcaptchaverify/" + class3_0.TransactionID + "/BOOKINGWS/" + text10;
                                                                                postdata = "{\"nlpIdentifier\":\"" + string_94 + "\",\"nlpAnswer\":\"" + text10 + "\",\"nlpToken\":\"" + string2 + "\",\"nlpType\":\"MOB_BOOKING\"}";
                                                                            }
                                                                            Status = "Final Captcha";
                                                                            Reffral = "https://www.irctc.co.in/nget/booking/reviewBooking";
                                                                            updTStatus.BeginInvoke(1, "Verifying Final Captcha", tCntrlName, null, null);
                                                                            if (!_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                                                            {
                                                                                break;
                                                                            }
                                                                            if (response.Contains("SUCCESS"))
                                                                            {
                                                                                Lock0("Captcha", stopwatch2, response);
                                                                                bool flag14 = true;
                                                                                response = class3_0.string_32;
                                                                                num5++;
                                                                                string text17 = "";
                                                                                string text18 = "1";
                                                                                bool A_ = false;
                                                                                string text19 = "0.0";
                                                                                int num22 = 0;
                                                                                int_6 = 10;
                                                                                stopwatch2 = new Stopwatch();
                                                                                stopwatch2.Start();
                                                                                if (response.IndexOf("totalCollectibleAmount") > 0)
                                                                                {
                                                                                    text19 = GetString(response, "totalCollectibleAmount");
                                                                                    class3_0.Txnamt = text19;
                                                                                    text9 = GetString(response, "availablityStatus").ToUpper();
                                                                                    updTStatus.BeginInvoke(999, "Going To Bank$" + text19 + "$" + text9, tCntrlName, null, null);
                                                                                }
                                                                                if (text9.Contains("NOT AVAILABLE") || text9.Contains("REGRET") || text9.Contains("TRAIN DEPARTED") || text9.Contains("TRAIN CANCELLED"))
                                                                                {
                                                                                    updTStatus.BeginInvoke(2, "Availability: " + text9 + ", Ticket Stopped!", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                                text = array4[0];
                                                                                int num23 = 0;
                                                                                while (true)
                                                                                {
                                                                                    num23 = 0;
                                                                                    stopwatch = new Stopwatch();
                                                                                    stopwatch.Start();
                                                                                    response = class3_0.string_32;
                                                                                    num22++;
                                                                                    method_102();
                                                                                    if (!string.IsNullOrEmpty(text))
                                                                                    {
                                                                                        text2 = class3_0.dictionary_BnkData[text];
                                                                                        class3_0.BANKSAVEAS = text;
                                                                                        class3_0.BANKDETAILS = text2;
                                                                                    }
                                                                                    text3 = smethod_10(class3_0.BANKSAVEAS);
                                                                                    text17 = GetBankID(text3, ref A_);
                                                                                    if (text17 == "121" & isAPP & text3 == "PAYZAP_DC")
                                                                                    {
                                                                                        text3 = "PAYZAP_AIRPAY";
                                                                                    }
                                                                                    if (text17 == "74" || (text17 == "91"))
                                                                                    {

                                                                                        string[] array202M = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                        class3_0.BNK_MOBILE = array202M[0];
                                                                                    }
                                                                                    if (text17.Length <= 0)
                                                                                    {
                                                                                        goto IL_65fd;
                                                                                    }
                                                                                    try
                                                                                    {
                                                                                        bool_63 = ((CheckBox)control.Controls["chkConfirmation"]).Checked;
                                                                                        ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }
                                                                                    text6 = "\r\n\r\nFare: " + text19 + text6;
                                                                                    if (num > 0.0)
                                                                                    {
                                                                                        double num24 = Conversion.Val(text19.Trim());
                                                                                        if (num24 > 0.0 && num24 > num + (double)class3_0.int_4 * 0.49 + 40.0)
                                                                                        {
                                                                                            flag2 = true;
                                                                                        }
                                                                                    }
                                                                                    string string_95;
                                                                                    string text20;
                                                                                    bool flag15;
                                                                                    while (true)
                                                                                    {
                                                                                        dictionary_TimeP["Fare"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                        string_95 = "";
                                                                                        text20 = "";
                                                                                        flag15 = false;
                                                                                        updTStatus.BeginInvoke(1, "Redirecting To Bank Server....", tCntrlName, null, null);
                                                                                        Reffral = url;
                                                                                        if (isAPP)
                                                                                        {
                                                                                            int num25 = 0;
                                                                                            while (true)
                                                                                            {

                                                                                                if (text17 != "74" & (text17 != "91"))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Collecting Payment Info...", tCntrlName, null, null);
                                                                                                    Reffral = null;
                                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=NA";
                                                                                                    postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";

                                                                                                    //cookie_ = new CookieContainer();
                                                                                                    if (text17 == "1000")
                                                                                                    {
                                                                                                        //postdata = "{\"bankId\":\"" + text17 + "\",\"txnType\":7,\"paramList\":[{\"key\":\"TXN_PASSWORD\",\"value\":\"\"}],\"amount\":" + text19 + ",\"transationId\":0,\"txnStatus\":1}";
                                                                                                        postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":1000,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"TXN_PASSWORD\",\"value\":\"\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":7,\"upiModeOpted\":0}";


                                                                                                    }
                                                                                                    else if (text17 == "122")
                                                                                                    {
                                                                                                        postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":59,\"upiModeOpted\":0}";
                                                                                                    }
                                                                                                    //Task<bool> ConnectHttp_Taskkk = ConnectHttp_Task(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, 68000, 68000);
                                                                                                    if (!ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json"))

                                                                                                    {
                                                                                                        continue;
                                                                                                    }


                                                                                                    //dateTimePayStartM = DateTime.Now.AddMilliseconds(300.0);
                                                                                                    //postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"MOBILE\",\"value\":\"" + class3_0.BNK_MOBILE + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                }
                                                                                                //goto ilrebooktrick;
                                                                                                if (text17 == "101")
                                                                                                {
                                                                                                    //string[] array2333 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None)[0].Trim();
                                                                                                    string[] mobik = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                                    nsdlotpm = mobik[3];
                                                                                                    string text21 = "netbanking";
                                                                                                    string text22 = "SBI";
                                                                                                    string text23 = "State Bank of India";
                                                                                                    string text24 = "9999999999";
                                                                                                    string text25 = "IrctcCustomer@example.com";
                                                                                                    postdata = "{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":101,\"captchaDto\":null,\"errorMsg\":null,\"juspayLoadDTO\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"MOBILE\",\"value\":\"9999999999\"},{\"key\":\"EMAIL\",\"value\":\"abc@xyz.com\"},{\"key\":\"PAYMENT_MODE\",\"value\":\"card\"},{\"key\":\"SAVED_CARD\",\"value\":\"false\"},{\"key\":\"CARD_NUMBER\",\"value\":\"" + mobik[0] + "\"},{\"key\":\"NAME_ON_CARD\",\"value\":\"" + mobik[6] + "\"},{\"key\":\"EXPIRY_MONTH\",\"value\":\"" + mobik[1] + "\"},{\"key\":\"EXPIRY_YEAR\",\"value\":\"" + mobik[2] + "\"},{\"key\":\"CVV\",\"value\":\"" + mobik[4] + "\"},{\"key\":\"SAVE_CARD\",\"value\":\"false\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                    //postdata = "{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text17 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text21 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text23 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text24 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text25 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/paymentProcessService/" + class3_0.TransactionID;
                                                                                                    bool flag16 = ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                                }
                                                                                                if (text17 == "1000")
                                                                                                {
                                                                                                    if (!response.Contains("RDS balance is below total ticket transaction amount. Please top up your master RDS account"))
                                                                                                    {
                                                                                                        balanceee = jsonData_Serial(response, "BALANCE\",\"value");
                                                                                                        ewalletamounts = jsonData_Serial(response, "AMOUNT\",\"value");
                                                                                                        break;
                                                                                                    }

                                                                                                    else
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(1, "Insuf Balance in your E-Wallet", tCntrlName, null, null);
                                                                                                        return false;
                                                                                                    }
                                                                                                }
                                                                                                if (text17 == "74" || (text17 == "91"))
                                                                                                {
                                                                                                    break;
                                                                                                    //                                                                           updTStatus.BeginInvoke(1, "Final hit for PNR", tCntrlName, null, null);
                                                                                                    //                                                                           postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.airtelotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";//"{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text17 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text21 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text23 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text24 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text25 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                    //                                                                           url = "https://www.irctc.co.in/eticketing/protected/mapps1/verifyPayment/" + class3_0.TransactionID;
                                                                                                    //                                                                           ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                                    //                                                                           if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) > 0)
                                                                                                    //{
                                                                                                    //                                                                               updTStatus.BeginInvoke(1, "Pnr Sucessfull...", tCntrlName, null, null);
                                                                                                    //	return false;
                                                                                                    //                                                                           }
                                                                                                    //else
                                                                                                    //{
                                                                                                    //                                                                               updTStatus.BeginInvoke(1, "Booking Failed", tCntrlName, null, null);
                                                                                                    //                                                                               return false;
                                                                                                    //                                                                           }

                                                                                                }

                                                                                                if (response.Contains("CHECKSUMHASH") | response.Contains("ORDER_ID") | response.Contains("encdata") | response.Contains("DO_REDIRECT"))
                                                                                                {
                                                                                                    break;
                                                                                                }
                                                                                                else if (response.Contains("https://mercury-t2.phonepe.com/transact/v2"))
                                                                                                {
                                                                                                    break;
                                                                                                }
                                                                                                else if (response.Contains("errorMsg"))
                                                                                                {
                                                                                                    string string_96 = GetString_(response, "errorMsg", "\"");
                                                                                                    string_96 = "Blacklist ID! Change Password!!!";
                                                                                                    if (!string.IsNullOrEmpty(string_96))
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(2, string_96, tCntrlName, null, null);
                                                                                                        Class11.smethod_1("TBL_USER", "UserState", "Blacklisted||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                                                                        return false;
                                                                                                    }
                                                                                                }
                                                                                                if (!((text17 == "91") & response.Contains("txnDate")))
                                                                                                {
                                                                                                    if (num25 > 3)
                                                                                                    {
                                                                                                        goto end_IL_375e;
                                                                                                    }
                                                                                                    continue;
                                                                                                }
                                                                                                goto IL_3afb;
                                                                                            }
                                                                                            dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                            Lock0("Fare", stopwatch2, response);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (!isAPP)
                                                                                            {
                                                                                                try
                                                                                                {
                                                                                                    excalibur();
                                                                                                }
                                                                                                catch
                                                                                                {

                                                                                                }
                                                                                            }
                                                                                            //old
                                                                                            //Task_response = null;
                                                                                            //url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=";
                                                                                            ////postdata = "{\"bankId\":\"" + text18 + "\",\"txnType\":" + text19 + ",\"paramList\":[" + "" + "],\"amount\":\"" + text20 + "\",\"transationId\":0,\"txnStatus\":1}";
                                                                                            //postdata = "{\"bankId\":\"" + text17 + "\",\"txnType\":" + text18 + ",\"paramList\":[" + "" + "],\"amount\":\"" + text19 + "\",\"transationId\":0,\"txnStatus\":1}";
                                                                                            ////_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: true, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                            //Task_errormsg = "";
                                                                                            //Task_Exception_ = null;
                                                                                            //Task_response = "";
                                                                                            //Task<bool> task = Task_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, bool_64: true, bool_65: true, 68000, 68000);
                                                                                            //int num27 = 0;
                                                                                            //while (true)
                                                                                            //{
                                                                                            //    if (!string.IsNullOrEmpty(Task_response))
                                                                                            //    {
                                                                                            //        if (text17 == "1000")
                                                                                            //        {
                                                                                            //            if (response.Contains("RDS balance is below total ticket transaction amount. Please top up your master RDS account"))
                                                                                            //            {
                                                                                            //                updTStatus.BeginInvoke(1, "Insuf Balance in your E-Wallet", tCntrlName, null, null);
                                                                                            //                return false;
                                                                                            //            }
                                                                                            //            class3_0.ewallettxndate = jsonData_Serial(Task_response, "txnDate");
                                                                                            //            class3_0.ewallettimestamp = jsonData_Serial(Task_response, "timeStamp");
                                                                                            //            class3_0.ewalletamount = jsonData_Serial(Task_response, "amount");
                                                                                            //            goto IL_3f6e;
                                                                                            //        }

                                                                                            //        if (Task_response.Contains("REDIRECT\",\"value\":\"TRUE"))
                                                                                            //        {
                                                                                            //            break;
                                                                                            //        }
                                                                                            //        if (Task_response.Contains("errorMsg"))
                                                                                            //        {
                                                                                            //            string string_96 = GetString_(Task_response, "errorMsg", "\"");
                                                                                            //            if (!string.IsNullOrEmpty(string_96))
                                                                                            //            {
                                                                                            //                Class11.smethod_1("TBL_USER", "UserState", "Blacklisted||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                                                            //                updTStatus.BeginInvoke(2, string_96, tCntrlName, null, null);
                                                                                            //                return false;
                                                                                            //            }
                                                                                            //        }
                                                                                            //    }
                                                                                            //    else
                                                                                            //    {
                                                                                            //        if (num27 > 650)
                                                                                            //        {
                                                                                            //            break;
                                                                                            //        }
                                                                                            //        num27 += 23;
                                                                                            //        Application.DoEvents();
                                                                                            //        Thread.Sleep(23);
                                                                                            //    }
                                                                                            //}
                                                                                            //old
                                                                                            ////cookie_ = new CookieContainer();

                                                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=";

                                                                                            postdata = "{\"bankId\":\"" + text17 + "\",\"txnType\":" + text18 + ",\"paramList\":[" + "" + "],\"amount\":\"" + text19 + "\",\"transationId\":0,\"txnStatus\":1}";
                                                                                            if (text17 == "1000")
                                                                                            {
                                                                                                postdata = "{\"bankId\":\"" + text17 + "\",\"txnType\":7,\"paramList\":[{\"key\":\"TXN_PASSWORD\",\"value\":\"\"}],\"amount\":" + text19 + ",\"transationId\":0,\"txnStatus\":1}";
                                                                                            }
                                                                                            Reffral = "https://www.irctc.co.in/nget/payment/bkgPaymentOptions";
                                                                                            int num26 = 0;
                                                                                            while (true)
                                                                                            {
                                                                                                stopwatch2 = new Stopwatch();
                                                                                                stopwatch2.Start();
                                                                                                //ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                                _httpRequest(url, postdata, Reffral, "Plain123json", bool_63: true, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                                if (!string.IsNullOrEmpty(response))
                                                                                                {
                                                                                                    if (text17 == "1000")
                                                                                                    {
                                                                                                        if (response.Contains("RDS balance is below total ticket transaction amount. Please top up your master RDS account"))
                                                                                                        {
                                                                                                            updTStatus.BeginInvoke(1, "Insuf Balance in your E-Wallet", tCntrlName, null, null);
                                                                                                            return false;
                                                                                                        }
                                                                                                        class3_0.ewallettxndate = jsonData_Serial(response, "txnDate");
                                                                                                        class3_0.ewallettimestamp = jsonData_Serial(response, "timeStamp");
                                                                                                        class3_0.ewalletamount = jsonData_Serial(response, "amount");
                                                                                                        goto IL_3f6e;
                                                                                                    }
                                                                                                    if (response.Contains("REDIRECT\",\"value\":\"TRUE"))
                                                                                                    {
                                                                                                        break;
                                                                                                    }
                                                                                                    if (response.Contains("errorMsg"))
                                                                                                    {
                                                                                                        string string_96 = GetString_(response, "errorMsg", "\"");
                                                                                                        string_96 = "Blacklist ID! Change Password!!!";
                                                                                                        if (!string.IsNullOrEmpty(string_96))
                                                                                                        {
                                                                                                            updTStatus.BeginInvoke(2, string_96, tCntrlName, null, null);
                                                                                                            return false;
                                                                                                        }
                                                                                                    }
                                                                                                    else if (num26 >= 650)
                                                                                                    {
                                                                                                        break;
                                                                                                    }
                                                                                                    num26 += 23;
                                                                                                    Application.DoEvents();
                                                                                                    Thread.Sleep(23);
                                                                                                }
                                                                                            }
                                                                                            Lock0("Fare", stopwatch2, response);
                                                                                            dictionary_TimeP["RedBNK"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                            updTStatus.BeginInvoke(1, "Opening Bank Server...", tCntrlName, null, null);
                                                                                            //cookie_ = new CookieContainer();

                                                                                            url = "https://www.irctc.co.in/eticketing/PaymentRedirect";
                                                                                            class3_0.string_61 = class3_0._Authorization.Replace("Bearer ", "");
                                                                                            postdata = "token=" + class3_0.string_61 + "&txn=" + class3_0.IRCTC_ID + "%3A" + class3_0.TransactionID;// + class3_0.IRCTC_ID; + "%3A" + class3_0.TransactionID = "63595105.61273031684336552228--319898911830710.9569799614";
                                                                                            string webupdate = "";
                                                                                            string csrfToken = "1684404995701--1230173952";
                                                                                            var Timestamp = new DateTimeOffset(DateTime.UtcNow).ToUnixTimeMilliseconds();
                                                                                            string fullcsrf = ((Timestamp / (100000 * new Random().NextDouble())).ToString(CultureInfo.InvariantCulture) + class3_0.token + (Timestamp / (1000000 * new Random().NextDouble())).ToString(CultureInfo.InvariantCulture));
                                                                                            postdata = "token=" + class3_0.string_61 + "&txn=" + class3_0.IRCTC_ID + "%3A" + class3_0.TransactionID + "&" + class3_0.IRCTC_ID + "%3A" + class3_0.TransactionID + "=" + fullcsrf;

                                                                                            int num270 = 0;
                                                                                            bool flag18;
                                                                                            do
                                                                                            {
                                                                                                stopwatch2 = new Stopwatch();
                                                                                                stopwatch2.Start();
                                                                                                num270++;
                                                                                                Status = "Redirect to Bank";
                                                                                                flag18 = _httpRequest(url, postdata, Reffral, "Other", bool_63: true, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                            }
                                                                                            while (!(response.IndexOf("Please Wait") > 0 && flag18) && ((response.Contains("retry") | (response.Length < 30)) || !(!string.IsNullOrEmpty(response) && flag18)));
                                                                                            //while (string.IsNullOrEmpty(response));
                                                                                            dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                            Lock0("RedBNK", stopwatch2, response);
                                                                                        }
                                                                                        goto IL_3f6e;
                                                                                    IL_3f6e:
                                                                                        stopwatch_0 = new Stopwatch();
                                                                                        stopwatch_0.Start();
                                                                                        if (num23 <= 0)
                                                                                        {
                                                                                            int num28 = 0;
                                                                                            bool flag20;
                                                                                            while (true)
                                                                                            {
                                                                                                bool flag19 = true;
                                                                                                ((ComboBox)control.Controls["cboGateway"]).Enabled = true;
                                                                                                if (class3_0.TKT_ISCONFIRM & text9.Contains("WL"))
                                                                                                {
                                                                                                    num28 = 2;
                                                                                                    frmPayment frmPayment3 = new frmPayment();
                                                                                                    frmPayment3.tktname.Text = TktName;
                                                                                                    frmPayment3.btnSubmit.Text = "Pay 4 WL";
                                                                                                    frmPayment3.bool_7 = true;
                                                                                                    frmPayment3.string_1 = text9;
                                                                                                    frmPayment3.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                                    DialogResult dialogResult2 = frmPayment3.DialogResult;
                                                                                                    frmPayment3.Dispose();
                                                                                                    if (dialogResult2 == DialogResult.Cancel)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(2, "Availability: " + text9 + ", Ticket Stopped!", tCntrlName, null, null);
                                                                                                        frmPayment3.Dispose();
                                                                                                        return false;
                                                                                                    }
                                                                                                    flag19 = false;
                                                                                                }
                                                                                                num23++;
                                                                                                if (flag2 && flag19)
                                                                                                {
                                                                                                    num28 = 2;
                                                                                                    frmPayment frmPayment4 = new frmPayment();
                                                                                                    frmPayment4.bool_4 = flag2;
                                                                                                    frmPayment frmPayment5 = frmPayment4;
                                                                                                    frmPayment5.string_1 = frmPayment5.string_1 + "FARE HIGHER THAN SET LIMIT\nRs." + text19 + " - " + text9;
                                                                                                    frmPayment4.tktname.Text = TktName;
                                                                                                    frmPayment4.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                                    DialogResult dialogResult3 = frmPayment4.DialogResult;
                                                                                                    frmPayment4.Dispose();
                                                                                                    if (dialogResult3 != DialogResult.OK)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(2, "User Select to Stop Payment! ", tCntrlName, null, null);
                                                                                                        frmPayment4.Dispose();
                                                                                                        return false;
                                                                                                    }
                                                                                                    flag19 = false;
                                                                                                }
                                                                                                bool_63 = ((CheckBox)control.Controls["chkConfirmation"]).Checked;
                                                                                                if (bool_63 && flag19)
                                                                                                {
                                                                                                    num28 = 2;
                                                                                                    frmPayment frmPayment6 = new frmPayment();
                                                                                                    frmPayment frmPayment7 = frmPayment6;
                                                                                                    frmPayment7.string_1 = frmPayment7.string_1 + "You Have Selected Stop Pay\nRs." + text19 + " - " + text9;
                                                                                                    frmPayment6.tktname.Text = TktName;
                                                                                                    frmPayment6.bool_0 = true;
                                                                                                    frmPayment6.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                                    if (frmPayment6.DialogResult != DialogResult.OK)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(2, "User Select to Stop Payment! ", tCntrlName, null, null);
                                                                                                        frmPayment6.Dispose();
                                                                                                        return false;
                                                                                                    }
                                                                                                    frmPayment6.Dispose();
                                                                                                    flag19 = false;
                                                                                                }
                                                                                                flag20 = false;
                                                                                                lock (object_8)
                                                                                                {
                                                                                                    if (list_PaySTART.Contains(TktName) && flag19)
                                                                                                    {
                                                                                                        flag20 = true;
                                                                                                    }
                                                                                                }
                                                                                                if (flag20)
                                                                                                {
                                                                                                    num28 = 2;
                                                                                                    frmPayment frmPayment8 = new frmPayment();
                                                                                                    frmPayment8.bool_3 = flag20;
                                                                                                    frmPayment8.string_1 = "Another Ticket already Procced\nRs." + text19 + " - " + text9;
                                                                                                    frmPayment8.tktname.Text = TktName;
                                                                                                    frmPayment8.bool_0 = true;
                                                                                                    frmPayment8.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                                    if (frmPayment8.DialogResult != DialogResult.OK)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(201, "Another Ticket already Proceed", tCntrlName, null, null);
                                                                                                        frmPayment8.Dispose();
                                                                                                        return false;
                                                                                                    }
                                                                                                    frmPayment8.Dispose();
                                                                                                }
                                                                                                if (num28 <= 1)
                                                                                                {
                                                                                                    break;
                                                                                                }
                                                                                                if (!setNewBank(ref text3, ref text17, control))
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                                                                                                {
                                                                                                    Thread thread2 = new Thread(StartUPI_);
                                                                                                    thread2.IsBackground = true;
                                                                                                    thread2.Start(class3_0.BANKDETAILS + "||True||5||0000000000");
                                                                                                }
                                                                                                break;
                                                                                            }
                                                                                            lock (object_10)
                                                                                            {
                                                                                                ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                                if (list_PNR.Contains(TktName))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(204, "PNR Booked in another Pair", tCntrlName, null, null);
                                                                                                    return false;
                                                                                                }
                                                                                            }
                                                                                            if (!flag20)
                                                                                            {
                                                                                                list_PaySTART.Add(TktName);
                                                                                            }
                                                                                            updTStatus.BeginInvoke(202, string.Concat(new object[5] { "Selecting_ ", text3, " Payment!-(", "0", ")" }), tCntrlName, null, null);
                                                                                            if (text17 == "96" && num23 == 1)
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                        goto IL_4644;
                                                                                    IL_3afb:
                                                                                        dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                        Lock0("Fare", stopwatch2, response);
                                                                                        goto IL_3f6e;
                                                                                        continue;
                                                                                    end_IL_375e:
                                                                                        break;
                                                                                    }
                                                                                    break;
                                                                                IL_4644:
                                                                                    try
                                                                                    {

                                                                                        bool_52 = false;
                                                                                        dictionary_TimeP["PayProcess"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                        bank = new Bank(this, class3_0);
                                                                                        bank.updateTStatus_1 = updTStatus;
                                                                                        string text26 = text17.ToUpper().Trim();
                                                                                        Class46.smethod_0(text26);
                                                                                        if (text3 == "OTOPAY")
                                                                                        {
                                                                                            text26 = "4201";
                                                                                        }
                                                                                        else if (text3.Contains("PAYZAP_AIR") & isAPP)
                                                                                        {
                                                                                            text26 = "4200";
                                                                                        }
                                                                                        else if (text3.Contains("PAYTMQR") & !isAPP)
                                                                                        {
                                                                                            text26 = "4202";
                                                                                        }
                                                                                        else if (text3.Contains("PHONEPEQR"))
                                                                                        {
                                                                                            text26 = "4203";
                                                                                        }
                                                                                        else if (text3.Contains("HDFC_DC"))
                                                                                        {
                                                                                            text26 = "4204";
                                                                                        }
                                                                                        else if (text3.Contains("SBI") & isAPP)
                                                                                        {
                                                                                            text26 = "4205";
                                                                                        }
                                                                                        else if (text3.Contains("V_RUPAY"))
                                                                                        {
                                                                                            text26 = "4206";
                                                                                        }
                                                                                        switch (int.Parse(text26))// //postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"MOBILE\",\"value\":\"" + class3_0.BNK_MOBILE + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                        {
                                                                                            case 97:
                                                                                                flag15 = bank.method_134(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4204:
                                                                                                flag15 = bank.HDFC_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);//bank.HDFC_Getway(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                                //case 91:
                                                                                                //    string_92 = "{\"amount\":" + text19 + ",\"bankId\":" + text17 + ",\"errorMsg\":null,\"paramList\":{\"key\":\"MOBILE\",\"value\":\"\"},\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                //    flag15 = true;
                                                                                                break;
                                                                                            case 74:
                                                                                            case 91:
                                                                                                //cookie_ = new CookieContainer();
                                                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=NA";
                                                                                                postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"MOBILE\",\"value\":\"" + class3_0.BNK_MOBILE + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                                string_92 = response;
                                                                                                flag15 = true;
                                                                                                break;
                                                                                            case 93:
                                                                                                flag15 = bank.AirtelMoney(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 121:
                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 1....", tCntrlName, null, null);
                                                                                                url = "https://irctc.nowpay.co.in/";
                                                                                                postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                Reffral = "https://irctc.nowpay.co.in/";
                                                                                                string text15D = response.Substring(response.IndexOf("privatekey") + 19);
                                                                                                string privatekey = text15D.Substring(0, text15D.IndexOf("\">"));
                                                                                                string text15e = response.Substring(response.IndexOf("mercid") + 14);
                                                                                                string mercid = text15e.Substring(0, text15e.IndexOf("\">"));
                                                                                                string text15f = response.Substring(response.IndexOf("orderid") + 16);
                                                                                                string orderid = text15f.Substring(0, text15f.IndexOf("\">"));
                                                                                                string currency = "356";
                                                                                                string chmod = "upi";
                                                                                                string text15g = response.Substring(response.IndexOf("amount") + 15);
                                                                                                string amount = text15g.Substring(0, text15g.IndexOf("\">"));
                                                                                                string buyerEmail = "customer@irctc.co.in";
                                                                                                string buyerFirstName = "";
                                                                                                string buyerLastName = "";
                                                                                                string text15h = response.Substring(response.IndexOf("checksum") + 17);
                                                                                                string checksum = text15h.Substring(0, text15h.IndexOf("\">"));
                                                                                                postdata = "privatekey=" + privatekey + "&mercid=28688" + "&orderid=" + orderid + "&currency=" + currency + "&isocurrency=" + "INR" + "&chmod=" + chmod + "&amount=" + amount + "&buyerEmail=" + WebUtility.UrlEncode(buyerEmail) + "&buyerFirstName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum + "&arpyVer=3";
                                                                                                url = "https://payments.airpay.co.in/pay/index.php";
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 2....", tCntrlName, null, null);
                                                                                                string text15DE = response.Substring(response.IndexOf("paymentChannelsData") + 23);
                                                                                                string encccc = text15DE.Substring(0, text15DE.IndexOf("';"));

                                                                                                Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                url = "https://payments.airpay.co.in/pageLoadTime.php";
                                                                                                string orig = Decrypt(encccc);
                                                                                                string transaction_id = jsonData_Serial(orig, "transaction_id");
                                                                                                string amountss = jsonData_Serial(orig, "amount");
                                                                                                string timef = "1407";
                                                                                                string b4 = Base64Encode(Base64Encode("1407@28688@" + transaction_id + "@c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d"));
                                                                                                string test = "{\"loadTime\":\"" + timef + "\",\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"" + privatekey + "\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                                test = "{\"loadTime\":1407,\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                                string outputTest = Encrypt(test);
                                                                                                outputTest = HttpUtility.UrlEncode(outputTest);
                                                                                                postdata = "requestParam=" + outputTest + "&scriptencrypt=Y";
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_, "payment");
                                                                                                if (qrpayment)
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Scan Qr and Pay....", tCntrlName, null, null);
                                                                                                    encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"qrcode\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                                    encccc = Encrypt(encccc);
                                                                                                    url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                                    encccc = HttpUtility.UrlEncode(encccc);
                                                                                                    postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                                    Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                    airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                    string ogbase64 = jsonData_Serial(response, "image");
                                                                                                    //string RID = jsonData_Serial(response, "RID");
                                                                                                    ogbase64 = ogbase64.Replace("data:image\\/png;base64,", "");
                                                                                                    ogbase64 = ogbase64.Replace("\\/", "/");
                                                                                                    FrmQr frmOTPPP = new FrmQr();
                                                                                                    frmOTPPP.Form1_Load(ogbase64, TktName, text19);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Accept Request from Mobile....", tCntrlName, null, null);
                                                                                                    string[] arrayvA = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                                    string vpaA = arrayvA[0].Trim();
                                                                                                    encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"" + vpaA + "\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"upi_vpa\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                                    encccc = Encrypt(encccc);
                                                                                                    url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                                    encccc = HttpUtility.UrlEncode(encccc);
                                                                                                    postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                                    Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                    airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                    if (response.Contains("Invalid Payee Virtual address"))
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(1, "Invalid Upi Adress...", tCntrlName, null, null);
                                                                                                        return false;
                                                                                                    }
                                                                                                }
                                                                                                //updTStatus.BeginInvoke(1, "Scan Qr and Pay....", tCntrlName, null, null);

                                                                                                //step4
                                                                                                string RID = jsonData_Serial(response, "RID");
                                                                                            ILREEEE:

                                                                                                postdata = "privatekey=" + privatekey + "&orderid=" + orderid + "&transaction_id=" + transaction_id + "&mercid=28688&amount=" + amountss + "&isocurrency=inr&customvar=&checksum=" + checksum + "&RID=" + RID + "&ch_id=" + transaction_id + "&submode=vpa";
                                                                                                Reffral = "https://payments.airpay.co.in/";
                                                                                                url = "https://secure.airpay.co.in/upi/npci/response_upi.php";
                                                                                                airpayF(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                if (!response.Contains("\"BANKRESPONSEMSG\":\"SUCCESS\""))
                                                                                                {
                                                                                                    goto ILREEEE;
                                                                                                }
                                                                                                //else if (response.Contains("SUCCESS"))
                                                                                                //{
                                                                                                //    goto ILREEEE;
                                                                                                //}
                                                                                                updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                                postdata = "action=failed_transaction&privatekey=" + privatekey + "&orderid=" + orderid + "&transaction_id=" + transaction_id + "&TRANSACTIONTYPE=320&mercid=28688&amount=" + amountss + "&tabselect=upi&customvar=&checksum=" + checksum + "&RID=" + RID + "&chid=" + transaction_id;
                                                                                                Reffral = "https://payments.airpay.co.in/";
                                                                                                url = "https://secure.airpay.co.in/upi/npci/response_manage.php ";
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                //step6
                                                                                                if (!response.Contains("https://www.irctc.co.in/eticketing/mbi/MobileBankResponse"))
                                                                                                {
                                                                                                    string_92 = response;
                                                                                                    flag15 = false;
                                                                                                    break;
                                                                                                }
                                                                                                updTStatus.BeginInvoke(1, "Redirecting to PNR serever.....", tCntrlName, null, null);
                                                                                                string encair = response.Substring(response.IndexOf("encdata") + 16);
                                                                                                encairf = encair.Substring(0, encair.IndexOf("\">"));
                                                                                                if (failissuefix)
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Redirecting to PNR serever.....", tCntrlName, null, null);
                                                                                                    url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse";
                                                                                                    Reffral = "https://irctc.nowpay.co.in/";
                                                                                                    postdata = "bankCode=AIRP_MOB_AG" + "&appType=ANDROID" + "&encdata=" + encairf;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                }
                                                                                                string_92 = response;
                                                                                                flag15 = true;
                                                                                                break;
                                                                                            case 144:
                                                                                                if (qrpayment)
                                                                                                {
                                                                                                    url = "https://pay.easebuzz.in/pay/ir/secure";
                                                                                                    postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    url = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    airpay(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    string[] array2022 = class3_0.easebuz.Split(new string[1] { "/" }, StringSplitOptions.None);
                                                                                                    string accesskey = array2022[2];
                                                                                                    string coupouns = "[]";
                                                                                                    url = "https://pay.easebuzz.in/submitInitiatePayment";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    updTStatus.BeginInvoke(1, text3 + " Payment Step 1...", tCntrlName, null, null);
                                                                                                    postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    //string qrlinkk = GetString(response, "qr_link");
                                                                                                    updTStatus.BeginInvoke(1, "Scan & Pay..click paid when done", tCntrlName, null, null);
                                                                                                    string text15DEF = response.Substring(response.IndexOf("qr_link") + 11);
                                                                                                    string enccccF = text15DEF.Substring(0, text15DEF.IndexOf(","));
                                                                                                    char[] charsToTrim = { '"' };
                                                                                                    string cleanString = enccccF.Trim(charsToTrim);
                                                                                                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                                                                                                    QRCodeData qrCodeData = qrGenerator.CreateQrCode(cleanString, QRCodeGenerator.ECCLevel.Q);
                                                                                                    Base64QRCode qrCode = new Base64QRCode(qrCodeData);
                                                                                                    string qrCodeImageAsBase64 = qrCode.GetGraphic(20);
                                                                                                    FrmQr frmOTPP = new FrmQr();
                                                                                                    frmOTPP.Form1_Load(qrCodeImageAsBase64, TktName, text19);
                                                                                                ILrestat:
                                                                                                    url = "https://pay.easebuzz.in/upi/checkStatus";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    if (!response.Contains("Payment Successful"))
                                                                                                    {
                                                                                                        goto ILrestat;
                                                                                                    }
                                                                                                    updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                                    url = "https://pay.easebuzz.in/response/hecupiresp";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    string text15DEE = response.Substring(response.IndexOf("encdata") + 16);
                                                                                                    string ENCDATA = text15DEE.Substring(0, text15DEE.IndexOf("\"/>"));
                                                                                                    class3_0.easebuzDATA = ENCDATA;
                                                                                                    string text15DEEf = response.Substring(response.IndexOf("form action") + 13);
                                                                                                    if (failissuefix)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(1, "Redirect to PNR Server", tCntrlName, null, null);
                                                                                                        url = text15DEEf.Substring(0, text15DEEf.IndexOf("' method"));
                                                                                                        Reffral = "https://pay.easebuzz.in/";
                                                                                                        postdata = "bankCode=EASEBUZZ_MOB_AG" + "&appType=ANDROID" + "&encdata=" + class3_0.easebuzDATA;
                                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                    }
                                                                                                    string_92 = response;
                                                                                                    flag15 = true;
                                                                                                    break;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    string[] arrayv = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                                    string vpa = arrayv[0].Trim();
                                                                                                    url = "https://pay.easebuzz.in/pay/ir/secure";
                                                                                                    postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    url = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    airpay(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    string[] array2022 = class3_0.easebuz.Split(new string[1] { "/" }, StringSplitOptions.None);
                                                                                                    string accesskey = array2022[2];
                                                                                                    string coupouns = "[]";
                                                                                                    url = "https://pay.easebuzz.in/submitInitiatePayment";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    updTStatus.BeginInvoke(1, "Eazebuzz Step 1...", tCntrlName, null, null);
                                                                                                    postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    //string qrlinkk = GetString(response, "qr_link");
                                                                                                    updTStatus.BeginInvoke(1, "Accept Request From Mobile", tCntrlName, null, null);

                                                                                                ILrestat:
                                                                                                    url = "https://pay.easebuzz.in/upi/checkStatus";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";
                                                                                                    //postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    if (!response.Contains("Payment Successful"))
                                                                                                    {
                                                                                                        goto ILrestat;
                                                                                                    }
                                                                                                    updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                                    url = "https://pay.easebuzz.in/response/hecupiresp";
                                                                                                    Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                                    postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";
                                                                                                    //postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    string text15DEE = response.Substring(response.IndexOf("encdata") + 16);
                                                                                                    string ENCDATA = text15DEE.Substring(0, text15DEE.IndexOf("\"/>"));
                                                                                                    class3_0.easebuzDATA = ENCDATA;
                                                                                                    string text15DEEf = response.Substring(response.IndexOf("form action") + 13);
                                                                                                    if (failissuefix)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(1, "Redirect to PNR Server", tCntrlName, null, null);
                                                                                                        url = text15DEEf.Substring(0, text15DEEf.IndexOf("' method"));
                                                                                                        Reffral = "https://pay.easebuzz.in/";
                                                                                                        postdata = "bankCode=EASEBUZZ_MOB_AG" + "&appType=ANDROID" + "&encdata=" + class3_0.easebuzDATA;
                                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                    }
                                                                                                    string_92 = response;
                                                                                                    flag15 = true;
                                                                                                    break;
                                                                                                }

                                                                                            case 96:
                                                                                                string_92 = response;
                                                                                                flag15 = true;
                                                                                                break;
                                                                                            case 98:
                                                                                            case 108:
                                                                                                //case 125:
                                                                                                flag15 = bank.PayU_(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;

                                                                                            case 125:
                                                                                                flag15 = bank.PayU_Indus(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 1000:
                                                                                                frmOTP frmOTP22 = new frmOTP();
                                                                                                frmOTP22.method_1(control_0, rectangle_0, bool_2: false, balanceee, class3_0.BANKSAVEAS);
                                                                                                if (frmOTP22.DialogResult != DialogResult.OK)
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(2, "Enter otp", tCntrlName, null, null);
                                                                                                    return false;
                                                                                                }
                                                                                                class3_0.ewalletotp = frmOTP22.string_0.Trim();
                                                                                                frmOTP22.Dispose();
                                                                                                flag15 = true; //bank.PayU_Indus(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 120:
                                                                                                flag15 = bank.ICICI_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 69:
                                                                                                flag15 = bank.method_131(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 101:
                                                                                                url = jsonData_Serial(response, "POST_URL");
                                                                                                string refid = response.Substring(response.IndexOf("referenceId") + 16);
                                                                                                refid = refid.Substring(0, refid.IndexOf("\""));
                                                                                                refid = refid.Replace("\\", "");
                                                                                                //string refid = jsonData_Serial(response, "referenceId");
                                                                                                postdata = "version=1&referenceId=" + refid;
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                string string_970 = response;
                                                                                                string string_960 = "";
                                                                                                if (string_970.Contains("JWT"))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, text3 + " Payment Step 5....", tCntrlName, null, null);
                                                                                                    postdata = class3_0.Method_SerialInp(string_970, ref url, false);
                                                                                                    postdata = response.Substring(response.IndexOf("JWT") + 23);
                                                                                                    postdata = postdata.Substring(0, postdata.IndexOf(">"));
                                                                                                    postdata = "JWT=" + postdata;
                                                                                                    bool_51 = true;
                                                                                                    if (_Request(url, postdata, string_92, Proxy_, ref cookie_, true, true, 60000, 60000, ref response, ref errormsg, ref Exception_) && !string.IsNullOrEmpty(string_970))
                                                                                                    {



                                                                                                        Reffral = "https://secure.airpay.co.in/";
                                                                                                        postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                                        string referid = response.Substring(response.IndexOf("='referenceId' type=\"hidden\"") + 36);
                                                                                                        referid = referid.Substring(0, referid.IndexOf("\">"));
                                                                                                        referid = referid.Replace("=\"", "");
                                                                                                        string text15 = response.Substring(response.IndexOf("dfUrlFullValue") + 37);
                                                                                                        url = text15.Substring(0, text15.IndexOf("\">"));
                                                                                                        url = url + "&origin=CruiseAPI";
                                                                                                        url = url.Replace("amp;", "");
                                                                                                        postdata = "nonce=" + HighQualityRandomString();//ba90847b-2fa2-40eb-bf22-cb54f0585b84";


                                                                                                        bool_51 = true;
                                                                                                        if (_Request(url, postdata, "https://centinelapi.cardinalcommerce.com/", Proxy_, ref cookie_, true, true, 60000, 60000, ref string_970, ref string_960, ref Exception_))
                                                                                                        {
                                                                                                            Reffral = url;
                                                                                                            url = "https://geo.cardinalcommerce.com/DeviceFingerprintWeb/V2/Browser/SaveBrowserData";
                                                                                                            postdata = "{\"BinConfigIdentifiers\":[],\"Cookies\":{\"Legacy\":false,\"LocalStorage\":null,\"SessionStorage\":true},\"DeviceChannel\":\"Browser\",\"Extended\":{\"Browser\":{\"Adblock\":true,\"AvailableJsFonts\":[],\"DoNotTrack\":\"unknown\",\"JavaEnabled\":false},\"Device\":{\"ColorDepth\":24,\"Cpu\":\"unknown\",\"Platform\":\"Linux armv8l\",\"TouchSupport\":{\"MaxTouchPoints\":5,\"OnTouchStartAvailable\":true,\"TouchEventCreationSuccessful\":true}}},\"Fingerprint\":\"b000b500436d597e95a48c7c2b25bac9\",\"FingerprintingTime\":510,\"FingerprintDetails\":{\"Version\":\"1.5.1\"},\"Language\":\"en-US\",\"Latitude\":null,\"Longitude\":null,\"OrgUnitId\":\"6034c49e287c36651cb3d1a8\",\"Origin\":\"CruiseAPI\",\"Plugins\":[],\"ReferenceId\":\"8a7ea4a4-1325-433f-bb0d-2dc24dc7e2e2\",\"Referrer\":\"https://centinelapi.cardinalcommerce.com/\",\"Screen\":{\"FakedResolution\":false,\"Ratio\":2.238888888888889,\"Resolution\":\"806x360\",\"UsableResolution\":\"806x360\",\"CCAScreenSize\":\"01\"},\"CallSignEnabled\":null,\"ThreatMetrixEnabled\":\"false\",\"ThreatMetrixEventType\":\"PAYMENT\",\"ThreatMetrixAlias\":\"Default\",\"TimeOffset\":-330,\"UserAgent\":\"Mozilla/5.0 (Linux; Android 12; TECNO BF7 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/111.0.5563.58 Mobile Safari/537.36\",\"UserAgentDetails\":{\"FakedOS\":false,\"FakedBrowser\":false},\"BinSessionId\":\"ba90847b-2fa2-40eb-bf22-cb54f0585b84\"}";
                                                                                                            airpayFuck(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            //otp
                                                                                                            updTStatus.BeginInvoke(1, text3 + " Payment Step 6....", tCntrlName, null, null);
                                                                                                            string requestdata = "{\"MessageType\":\"profile.completed\",\"SessionId\":\"" + referid + "\",\"Status\":true}";
                                                                                                            postdata = "txnId=" + refid + "&requestData=" + HttpUtility.UrlEncode(requestdata);//%7B%22MessageType%22%3A%22profile.completed%22%2C%22SessionId%22%3A%221665d582-1226-46cf-8af4-858a3c29cad9%22%2C%22Status%22%3Atrue%7D";
                                                                                                            url = "https://api.zaakpay.com/api/3ds2/callback/deviceData";
                                                                                                            airpay2(url, postdata, "https://api.zaakpay.com/api/3ds2/initiate", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            string jwtt = response.Substring(response.IndexOf("JWT") + 12);
                                                                                                            jwtt = jwtt.Substring(0, jwtt.IndexOf("' />"));
                                                                                                            string mddd = response.Substring(response.IndexOf("MD\" value") + 11);
                                                                                                            mddd = mddd.Substring(0, mddd.IndexOf("'"));
                                                                                                            postdata = "JWT=" + jwtt + "&MD=" + mddd;
                                                                                                            url = "https://centinelapi.cardinalcommerce.com/V2/Cruise/StepUp";
                                                                                                            airpay2(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            //bank call
                                                                                                            //string jwtt = response.Substring(response.IndexOf("JWT") + 12);
                                                                                                            //jwtt = jwtt.Substring(0, jwtt.IndexOf("' />"));
                                                                                                            //string mddd = response.Substring(response.IndexOf("MD\" value") + 11);
                                                                                                            //mddd = mddd.Substring(0, mddd.IndexOf("'"));
                                                                                                            //postdata = "JWT=" + jwtt + "&MD=" + mddd;
                                                                                                            //url = "https://isg-3dsecure.in/GeniusVACS-NSDL/PaRequestHandler";
                                                                                                            //airpay2(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");

                                                                                                            url = response.Substring(response.IndexOf("acsUrl") + 29);
                                                                                                            url = url.Substring(0, url.IndexOf("\""));

                                                                                                            string pareqq = response.Substring(response.IndexOf("payload") + 31);
                                                                                                            pareqq = pareqq.Substring(0, pareqq.IndexOf("\""));

                                                                                                            string mscidd = response.Substring(response.IndexOf("mcsId") + 27);//HttpUtility.UrlEncode()
                                                                                                            mscidd = mscidd.Substring(0, mscidd.IndexOf("\""));
                                                                                                            postdata = "PaReq=" + HttpUtility.UrlEncode(pareqq) + "&MD=" + HttpUtility.UrlEncode(mscidd) + "&TermUrl=https://centinelapi.cardinalcommerce.com/V1/TermURL/Overlay/CCA";
                                                                                                            airpay2(url, postdata, "https://centinelapi.cardinalcommerce.com/", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            if (response.Contains("Please use the IPIN to authenticate the transaction"))
                                                                                                            {

                                                                                                                //    string acctid = string_97.Substring(string_97.IndexOf("acctId") + 15);
                                                                                                                //    acctid = acctid.Substring(0, acctid.IndexOf("\">"));
                                                                                                                //    string_93 = string_97.Substring(string_97.IndexOf("(\"Login\").action") + 20);
                                                                                                                url = "https://isg-3dsecure.in/GeniusVACS-NSDL/validateIPIN.action";
                                                                                                                //reotp:
                                                                                                                url = "https://isg-3dsecure.in/GeniusVACS-NSDL/validateIPIN.action";
                                                                                                                //string text36OTP = string nsdlotpm = mobik[3];


                                                                                                                postdata = "pwd=" + nsdlotpm;
                                                                                                                airpay(url, postdata, "https://isg-3dsecure.in/GeniusVACS-NSDL/PaRequestHandler", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                                // string_93 = "https://api.tachyon.hdfcbank.com/cipher3ds/edith/v1.0/tenants/1/authenticate/getStatus?authContextId=" + authenticateid;
                                                                                                                //_Request(string_93, string_94, "https://isg-3dsecure.in/GeniusVACS-NSDL/PaRequestHandler", webProxy_3, ref cookieContainer_, true, true, 60000, 60000, ref string_97, ref string_96, ref webException_0);

                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                //flag15 = //bank.MobiKwikPay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 19:
                                                                                                flag15 = bank.method_128(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 64:
                                                                                                flag15 = bank.method_181(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4202:
                                                                                                //start
                                                                                                //if (isAPP)
                                                                                                //{
                                                                                                //    string encdatapaytm = GetString_(response, "ENC_DATA\",\"value", "\"");
                                                                                                //    encdatapaytm = HttpUtility.UrlEncode(encdatapaytm);
                                                                                                //   // string_95 = string_95.Replace("%5cn", "%0A");
                                                                                                //    string CHECKSUMHASHpaytm = GetString_(response, "CHECKSUMHASH\",\"value", "\"");
                                                                                                //    CHECKSUMHASHpaytm = HttpUtility.UrlEncode(CHECKSUMHASHpaytm);
                                                                                                //    string MIDpaytm = GetString_(response, "MID\",\"value", "\"");
                                                                                                //    url = GetString_(response, "bankUrl\",\"value", "\"");
                                                                                                //    postdata = text9 = "MID=" + MIDpaytm + "&CHECKSUMHASH=" + CHECKSUMHASHpaytm + "&ENC_DATA=" + encdatapaytm;
                                                                                                //}
                                                                                                // else
                                                                                                //{
                                                                                                postdata = class3_0.Method_SerialInp(response, ref url, true);
                                                                                                //}

                                                                                                Reffral = "https://www.irctc.co.in/";
                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 1....", tCntrlName, null, null);
                                                                                                airpay_PAYTMQR(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                Thread.Sleep(2000);
                                                                                                string pushdata = response.Substring(response.IndexOf("pushAppData=") + 13);
                                                                                                pushdata = pushdata.Substring(0, pushdata.IndexOf("\","));
                                                                                                // before: d29ybGQh
                                                                                                var base64EncodedBytes = Convert.FromBase64String(pushdata);
                                                                                                // after: 119 111 114 108 100 33
                                                                                                var base64qr = Encoding.UTF8.GetString(base64EncodedBytes);
                                                                                                string base64qrr = jsonData_Serial(base64qr, "dataurl");
                                                                                                string paytmmid = jsonData_Serial(base64qr, "mid");
                                                                                                string paytmorderid = jsonData_Serial(base64qr, "custId");//custId
                                                                                                // after: world!
                                                                                                updTStatus.BeginInvoke(1, " Scan & Click Paid", tCntrlName, null, null);
                                                                                                FrmQr frmOTPPPP = new FrmQr();
                                                                                                frmOTPPPP.Form1_Load(base64qrr, TktName, text19);
                                                                                                Reffral = url;
                                                                                                string vaaal = paytmtxnid(paytmorderid);
                                                                                                string eventid = jsonData_Serial(vaaal, "event");
                                                                                                string acquirementId = jsonData_Serial(vaaal, "acquirementId");
                                                                                                string cashierRequestId = jsonData_Serial(vaaal, "cashierRequestId");

                                                                                                url = "https://securegw.paytm.in/theia/transactionStatus?MID=" + paytmmid + "&ORDER_ID=" + paytmorderid;
                                                                                                postdata = "merchantId=" + paytmmid + "&acquirementId=" + acquirementId + "&cashierRequestId=" + cashierRequestId + "&paymentMode=UPI&orderId=" + paytmorderid + "&topicName=DYNAMIC_QR&status=SUCCESS&_id=" + eventid + "&transId=" + acquirementId;
                                                                                                //postdata = "merchantId=" + paytmmid + "&ORDER_ID=" + paytmorderid + "&transId=" + "230412142034235539" + "&cashierRequestId=" + "d449999bd3e343e3b8c81b3bcde107f802226apsouth1computeinternal284411" + "&paymentMode=UPI";
                                                                                                airpay_PAYTMQR(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                string_92 = response;
                                                                                                flag15 = true;//bank.method_181(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 15:
                                                                                                flag15 = bank.method_118(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 16:
                                                                                                flag15 = bank.method_135(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 17:
                                                                                                flag15 = bank.method_167(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 66:
                                                                                                flag15 = bank.method_119(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4:
                                                                                                flag15 = bank.method_141(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 5:
                                                                                                flag15 = bank.method_180(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 3:
                                                                                                flag15 = bank.method_109(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 1:
                                                                                                {
                                                                                                    CookieContainer cookieContainer_ = null;
                                                                                                    if (!(flag15 = bank.SbiNetBanking(response, class3_0.BANKSAVEAS, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus, ref cookieContainer_)) && cookieContainer_ != null)
                                                                                                    {
                                                                                                        ThreadPool.QueueUserWorkItem(method_110, cookieContainer_);
                                                                                                    }
                                                                                                    break;
                                                                                                }
                                                                                            case 9:
                                                                                                flag15 = bank.method_127(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 105:
                                                                                            case 106:
                                                                                            case 141:
                                                                                                flag15 = bank.Multi_RazorPay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 115:
                                                                                                flag15 = bank.ICICI_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4206:
                                                                                                flag15 = bank.ICICI_Getway_Rupay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 116:
                                                                                            case 111:
                                                                                                flag15 = bank.method_159(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;

                                                                                            case 4203:
                                                                                                flag15 = bank.Method_PhonepeQr(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 30:
                                                                                                flag15 = bank.method_142(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 113:
                                                                                            case 118:
                                                                                                flag15 = bank.IRCTC_UPI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 122:
                                                                                                flag15 = bank.IRCTC_UPIHDFC(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 147:
                                                                                                flag15 = bank.IRCTC_UPICASHFREE(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 137:
                                                                                                flag15 = bank.safexpay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4201:
                                                                                                flag15 = bank.method_160_oto(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 25:
                                                                                                flag15 = bank.method_129(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 41:
                                                                                                flag15 = bank.method_106(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 57:
                                                                                                flag15 = bank.method_115(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 36:
                                                                                                flag15 = bank.method_114(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 45:
                                                                                                flag15 = bank.method_125(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 26:
                                                                                                flag15 = bank.method_126(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 21:
                                                                                                flag15 = bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 4200:
                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 1....", tCntrlName, null, null);
                                                                                                url = "https://irctc.nowpay.co.in/";
                                                                                                postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                                Reffral = "https://irctc.nowpay.co.in/";
                                                                                                text15D = response.Substring(response.IndexOf("privatekey") + 19);
                                                                                                privatekey = text15D.Substring(0, text15D.IndexOf("\">"));
                                                                                                text15e = response.Substring(response.IndexOf("mercid") + 14);
                                                                                                mercid = text15e.Substring(0, text15e.IndexOf("\">"));
                                                                                                text15f = response.Substring(response.IndexOf("orderid") + 16);
                                                                                                orderid = text15f.Substring(0, text15f.IndexOf("\">"));
                                                                                                currency = "356";
                                                                                                chmod = "pg_nb_wallet_ppc";
                                                                                                text15g = response.Substring(response.IndexOf("amount") + 15);
                                                                                                amount = text15g.Substring(0, text15g.IndexOf("\">"));
                                                                                                buyerEmail = "customer@irctc.co.in";
                                                                                                buyerFirstName = "";
                                                                                                buyerLastName = "";
                                                                                                text15h = response.Substring(response.IndexOf("checksum") + 17);
                                                                                                checksum = text15h.Substring(0, text15h.IndexOf("\">"));
                                                                                                postdata = "privatekey=" + privatekey + "&mercid=28688" + "&orderid=" + orderid + "&currency=" + currency + "&isocurrency=" + "INR" + "&chmod=" + chmod + "&amount=" + amount + "&buyerEmail=" + WebUtility.UrlEncode(buyerEmail) + "&buyerFirstName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum + "&arpyVer=3";
                                                                                                url = "https://payments.airpay.co.in/pay/index.php";
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 2....", tCntrlName, null, null);
                                                                                                text15DE = response.Substring(response.IndexOf("paymentChannelsData") + 23);
                                                                                                encccc = text15DE.Substring(0, text15DE.IndexOf("';"));

                                                                                                Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                url = "https://payments.airpay.co.in/pageLoadTime.php";
                                                                                                orig = Decrypt(encccc);
                                                                                                transaction_id = jsonData_Serial(orig, "transaction_id");
                                                                                                amountss = jsonData_Serial(orig, "amount");
                                                                                                timef = "1407";
                                                                                                b4 = Base64Encode(Base64Encode("1407@28688@" + transaction_id + "@c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d"));
                                                                                                test = "{\"loadTime\":\"" + timef + "\",\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"" + privatekey + "\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                                test = "{\"loadTime\":1407,\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                                outputTest = Encrypt(test);
                                                                                                outputTest = HttpUtility.UrlEncode(outputTest);
                                                                                                postdata = "requestParam=" + outputTest + "&scriptencrypt=Y";
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_, "payment");
                                                                                                string[] splitbank = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                                string ccnum = splitbank[0];

                                                                                                string cccccc = ccnum;
                                                                                                cccccc = cccccc.Insert(4, " ");
                                                                                                cccccc = cccccc.Insert(9, " ");
                                                                                                cccccc = cccccc.Insert(14, " ");
                                                                                                string bincc = Base64Encode(ccnum.Substring(0, 8));
                                                                                                string expmonth = splitbank[1];
                                                                                                string expyear = splitbank[2];
                                                                                                expyear = expyear.Substring(2);

                                                                                                string pass3d = splitbank[3];
                                                                                                string cvv = splitbank[4];
                                                                                                string namecc = splitbank[6];
                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 3....", tCntrlName, null, null);
                                                                                                encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"qrcode\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                                encccc = Encrypt("{\"cardnum\":\"" + bincc + "\",\"mercid\":\"28688\",\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"privatekey\":\"" + privatekey + "\",\"txn_id\":\"" + transaction_id + "\",\"mode\":\"pg\",\"errorLog\":[]}");
                                                                                                url = "https://payments.airpay.co.in/pay/v2/singleclickuser/validate_cardtype_api.php";
                                                                                                encccc = HttpUtility.UrlEncode(encccc);
                                                                                                postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                                Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                amountss = jsonData_Serial(response, "totalamount");
                                                                                                //pay
                                                                                                //updTStatus.BeginInvoke(1, "Scan Qr and Pay....", tCntrlName, null, null);
                                                                                                encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"qrcode\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                                encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amount + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"pg_nb_wallet_ppc\",\"prv_chmod\":\"\",\"customvar\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.75\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"3\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"\",\"surcharge_rule\":\"{\\\"status\\\":\\\"200\\\",\\\"cardtype\\\":\\\"C\\\",\\\"bankname\\\":[],\\\"companyname\\\":\\\"visa\\\",\\\"country\\\":\\\"india\\\",\\\"surcharge\\\":\\\"0.75\\\",\\\"surcharge_rule\\\":{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"4\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_pg_cc_dom\\\",\\\"CHANNELID\\\":\\\"3\\\",\\\"CHANNEL\\\":\\\"pg\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":\\\"C\\\",\\\"AMOUNT_FILTER_TYPE\\\":\\\"G\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"0.00\\\",\\\"FEES_MSF\\\":\\\"1.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"},\\\"totalamount\\\":\\\"" + amountss + "\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"channel_mode\":\"credit\",\"cnumtxt\":\"" + cccccc + "\",\"cnum\":\"" + ccnum + "\",\"fullname\":\"" + namecc + "\",\"cexpiry_mm\":\"" + expmonth + "\",\"cexpiry_yy\":\"" + expyear + "\",\"cvv\":\"" + cvv + "\",\"sc_savecard\":\"N\",\"checkSurchargeCardType\":\"C\",\"checkSurchargeCardPri\":\"visa\",\"checkSurchargeCardCountry\":\"india\",\"isFormSubmit\":false,\"errorLog\":[]}";

                                                                                                encccc = Encrypt(encccc);
                                                                                                url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                                encccc = HttpUtility.UrlEncode(encccc);
                                                                                                postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                                Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                url = jsonData_Serial(response, "redirect");
                                                                                                string cardinal = url + "&3ds=1";
                                                                                                string cardref = url;
                                                                                                updTStatus.BeginInvoke(1, text3 + " Payment Step 4....", tCntrlName, null, null);
                                                                                                airpay2(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                //otp
                                                                                                string string_96 = "";
                                                                                                string string_97 = response;
                                                                                                if (string_97.Contains("JWT"))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, text3 + " Payment Step 5....", tCntrlName, null, null);
                                                                                                    postdata = class3_0.Method_SerialInp(string_97, ref url, false);

                                                                                                    bool_51 = true;
                                                                                                    if (_Request(url, postdata, string_92, Proxy_, ref cookie_, true, true, 60000, 60000, ref response, ref errormsg, ref Exception_) && !string.IsNullOrEmpty(string_97))
                                                                                                    {



                                                                                                        Reffral = "https://secure.airpay.co.in/";
                                                                                                        postdata = class3_0.Method_SerialInp(response, ref url, false);

                                                                                                        string text15 = response.Substring(response.IndexOf("dfUrlFullValue") + 37);
                                                                                                        url = text15.Substring(0, text15.IndexOf("\">"));
                                                                                                        url = url + "&origin=CruiseAPI";
                                                                                                        url = url.Replace("amp;", "");
                                                                                                        postdata = "nonce=" + HighQualityRandomString();//ba90847b-2fa2-40eb-bf22-cb54f0585b84";


                                                                                                        bool_51 = true;
                                                                                                        if (_Request(url, postdata, "https://centinelapi.cardinalcommerce.com/", Proxy_, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_))
                                                                                                        {
                                                                                                            Reffral = url;
                                                                                                            url = "https://geo.cardinalcommerce.com/DeviceFingerprintWeb/V2/Browser/SaveBrowserData";
                                                                                                            postdata = "{\"BinConfigIdentifiers\":[],\"Cookies\":{\"Legacy\":false,\"LocalStorage\":null,\"SessionStorage\":true},\"DeviceChannel\":\"Browser\",\"Extended\":{\"Browser\":{\"Adblock\":true,\"AvailableJsFonts\":[],\"DoNotTrack\":\"unknown\",\"JavaEnabled\":false},\"Device\":{\"ColorDepth\":24,\"Cpu\":\"unknown\",\"Platform\":\"Linux armv8l\",\"TouchSupport\":{\"MaxTouchPoints\":5,\"OnTouchStartAvailable\":true,\"TouchEventCreationSuccessful\":true}}},\"Fingerprint\":\"b000b500436d597e95a48c7c2b25bac9\",\"FingerprintingTime\":510,\"FingerprintDetails\":{\"Version\":\"1.5.1\"},\"Language\":\"en-US\",\"Latitude\":null,\"Longitude\":null,\"OrgUnitId\":\"6034c49e287c36651cb3d1a8\",\"Origin\":\"CruiseAPI\",\"Plugins\":[],\"ReferenceId\":\"8a7ea4a4-1325-433f-bb0d-2dc24dc7e2e2\",\"Referrer\":\"https://centinelapi.cardinalcommerce.com/\",\"Screen\":{\"FakedResolution\":false,\"Ratio\":2.238888888888889,\"Resolution\":\"806x360\",\"UsableResolution\":\"806x360\",\"CCAScreenSize\":\"01\"},\"CallSignEnabled\":null,\"ThreatMetrixEnabled\":\"false\",\"ThreatMetrixEventType\":\"PAYMENT\",\"ThreatMetrixAlias\":\"Default\",\"TimeOffset\":-330,\"UserAgent\":\"Mozilla/5.0 (Linux; Android 12; TECNO BF7 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/111.0.5563.58 Mobile Safari/537.36\",\"UserAgentDetails\":{\"FakedOS\":false,\"FakedBrowser\":false},\"BinSessionId\":\"ba90847b-2fa2-40eb-bf22-cb54f0585b84\"}";
                                                                                                            airpayFuck(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            //otp
                                                                                                            updTStatus.BeginInvoke(1, text3 + " Payment Step 6....", tCntrlName, null, null);
                                                                                                            airpay2(cardinal, null, cardref, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            if (response.Contains("TermUrl"))
                                                                                                            {

                                                                                                                string_94 = class3_0.Method_SerialInp(response, ref string_93, false);
                                                                                                                text9 = response.Substring(response.IndexOf("PaReq") + 14);
                                                                                                                string text12 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                text9 = response.Substring(response.IndexOf("name=\"MD") + 17);
                                                                                                                string text13MM = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                text9 = response.Substring(response.IndexOf("name=\"TermUrl") + 22);
                                                                                                                string text14 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                text14 = text14.Replace("amp;", "");
                                                                                                                if (text13MM.Contains("_______"))
                                                                                                                {
                                                                                                                    text12 = WebUtility.UrlEncode(text12);
                                                                                                                    text12 = text12.Replace("%0A", "%0D%0A");
                                                                                                                    string_94 = "PaReq=" + text12 + "&TermUrl=" + WebUtility.UrlEncode(text14) + "&MD=" + WebUtility.UrlEncode(text13MM);
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    string_94 = "MD=" + text13MM + "&PaReq=" + HttpUtility.UrlEncode(text12) + "&TermUrl=" + WebUtility.UrlEncode(text14);
                                                                                                                }
                                                                                                                bool_51 = true;
                                                                                                                if (_Request(string_93, string_94, string_92, webProxy_3, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_) && string_97.IndexOf("PayZapp secure PIN") > 0)
                                                                                                                {
                                                                                                                    string_92 = string_93;
                                                                                                                    string_94 = class3_0.Method_SerialInp(string_97, ref string_93, false);
                                                                                                                    string_94 = clsPostData.SetPost(string_94, "txtPassword", pass3d);
                                                                                                                    string text15MM = string_97.Substring(string_97.IndexOf("XID") + 12);
                                                                                                                    string value5 = text15MM.Substring(0, text15MM.IndexOf("\""));
                                                                                                                    string_94 = "XID=" + WebUtility.UrlEncode(value5) + "&txtLogin=-1&txtPassword=" + pass3d + "&xdeviceId=&bTz=";
                                                                                                                    string_93 = "https://hdfc-acs.wibmo.com" + string_93;

                                                                                                                    updTStatus.BeginInvoke(1, text3 + " Payment Step 7....", tCntrlName, null, null);
                                                                                                                    bool_51 = true;
                                                                                                                    if (_Request(string_93, string_94, string_92, webProxy_3, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_))
                                                                                                                    {
                                                                                                                        Lock("5th Hit output = " + string_97);
                                                                                                                        if (string_97.IndexOf("Authentication failed") > 0)
                                                                                                                        {
                                                                                                                            if (updateTStatus_1 != null)
                                                                                                                            {
                                                                                                                                updateTStatus_1.BeginInvoke(1, "Invalid PIN", tCntrlName_, null, null);
                                                                                                                            }
                                                                                                                            return false;
                                                                                                                        }
                                                                                                                        string_92 = string_93;
                                                                                                                        string_94 = class3_0.Method_SerialInp(string_97, ref string_93, true);
                                                                                                                        text9 = string_97.Substring(string_97.IndexOf("PaRes") + 14);
                                                                                                                        string value6 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                        text9 = string_97.Substring(string_97.IndexOf("name=\"MD") + 17);
                                                                                                                        string value7 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                        string_94 = "MD=" + WebUtility.UrlEncode(value7) + "&PaRes=" + WebUtility.UrlEncode(value6);
                                                                                                                        //updateTStatus_1.BeginInvoke(1, "PAYZAP_Getway Int { 7/7 }", tCntrlName_, null, null);
                                                                                                                        Lock("6th Hit Inp = " + string_94);
                                                                                                                        if (_Request(string_93, string_94, string_92, webProxy_3, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_))
                                                                                                                        {
                                                                                                                            Lock("6th Hit output = " + string_97);
                                                                                                                            Reffral = string_93;
                                                                                                                            response = string_97;
                                                                                                                            //return true;
                                                                                                                        }
                                                                                                                        if (!response.Contains("SUCCESS"))
                                                                                                                        {
                                                                                                                            flag15 = false;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                                            break;
                                                                                                                        }

                                                                                                                    }

                                                                                                                }
                                                                                                                else if (string_97.Contains("Notification sent to PayZapp"))
                                                                                                                {
                                                                                                                    updTStatus.BeginInvoke(1, "Confirm Payment from Payzapp App..", tCntrlName, null, null);
                                                                                                                    string authenticateid = string_97.Substring(string_97.IndexOf("auth-context-id") + 24);
                                                                                                                    authenticateid = authenticateid.Substring(0, authenticateid.IndexOf("\" />"));
                                                                                                                ILpayzapp:
                                                                                                                    url = "https://api.tachyon.hdfcbank.com/cipher3ds/edith/v1.0/tenants/1/authenticate/getStatus?authContextId=" + authenticateid;
                                                                                                                    airpayPAYZAPP(url, null, "https://api.tachyon.hdfcbank.com/cipher3ds/visacipher/visacipher/pareq", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                                    if (response.Contains("PENDING"))
                                                                                                                    {
                                                                                                                        goto ILpayzapp;
                                                                                                                    }
                                                                                                                    response = DecodeEncodedNonAsciiCharacters(response);
                                                                                                                    url = response.Substring(response.IndexOf("redirect-form") + 25);
                                                                                                                    url = url.Substring(0, url.IndexOf("\""));
                                                                                                                    url = url.Replace("\\", "");
                                                                                                                    string mdpayzapp = response.Substring(response.IndexOf("MD\\") + 29);
                                                                                                                    mdpayzapp = mdpayzapp.Substring(0, mdpayzapp.IndexOf("\""));
                                                                                                                    mdpayzapp = mdpayzapp.Replace("\\", "");
                                                                                                                    string pararesp = response.Substring(response.IndexOf("PaRes") + 32);
                                                                                                                    pararesp = pararesp.Substring(0, pararesp.IndexOf("\""));
                                                                                                                    pararesp = pararesp.Replace("\\", "");
                                                                                                                    postdata = "PaRes=" + HttpUtility.UrlEncode(pararesp) + "&MD=" + mdpayzapp;
                                                                                                                    airpay2(url, postdata, "https://api.tachyon.hdfcbank.com/", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                                    if (response.Contains("FAIL"))
                                                                                                                    {
                                                                                                                        flag15 = false;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                            }

                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                                airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                if (!response.Contains("https://www.irctc.co.in/eticketing/mbi/MobileBankResponse"))
                                                                                                {
                                                                                                    flag15 = false;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                    break;
                                                                                                }
                                                                                                //postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                                //airpay2(cardinal, null, cardref, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                //updTStatus.BeginInvoke(1, "Redirecting to PNR serever.....", tCntrlName, null, null);
                                                                                                encair = response.Substring(response.IndexOf("encdata") + 16);
                                                                                                encairf = encair.Substring(0, encair.IndexOf("\">"));
                                                                                                if (failissuefix)
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Redirect to PNR Server...", tCntrlName, null, null);
                                                                                                    url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse";
                                                                                                    Reffral = "https://irctc.nowpay.co.in/";
                                                                                                    postdata = "bankCode=AIRP_MOB_AG" + "&appType=ANDROID" + "&encdata=" + encairf;
                                                                                                    airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                                }
                                                                                                string_92 = response;
                                                                                                flag15 = true;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                break;
                                                                                            case 0:
                                                                                            case 71:
                                                                                            case 77:
                                                                                            case 78:
                                                                                            case 104:
                                                                                            case 112:
                                                                                            case 117:
                                                                                            case 119:
                                                                                                flag15 = bank.PayTM(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                if (bool_54)
                                                                                                {
                                                                                                    bool_54 = false;
                                                                                                }
                                                                                                break;
                                                                                            case 4205:
                                                                                                flag15 = bank.PayTM_SBI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                if (bool_54)
                                                                                                {
                                                                                                    bool_54 = false;
                                                                                                }
                                                                                                break;
                                                                                        }
                                                                                    }
                                                                                    catch (Exception)
                                                                                    {
                                                                                    }
                                                                                    num23 = 0;
                                                                                    Lock0("PayProcess", stopwatch, string_92);
                                                                                    if (!flag15)
                                                                                    {
                                                                                        if (bool_52)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "insufficient balance", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        if (string_95 == "00000")
                                                                                        {
                                                                                            string_95 = "insufficient funds";
                                                                                        }
                                                                                        updTStatus.BeginInvoke(1, string_95 + " Failed!", tCntrlName, null, null);
                                                                                        if ((!string_95.Contains("Invaild Bank's Details") || !string_95.Contains("Invaild Bank Bypass Detail") || !string_95.Contains("OTP Cancelled by User") || !string_95.Contains("Clear Balance Funds not available") || !string_95.Contains("Invaild Card's Details")) && !list_12.Contains(text3 + "_Fail"))
                                                                                        {
                                                                                            list_12.Add(text3 + "_Fail");
                                                                                        }
                                                                                        lock (object_9)
                                                                                        {
                                                                                            if (list_PaySTART.Contains(TktName))
                                                                                            {
                                                                                                list_PaySTART.Remove(TktName);
                                                                                            }
                                                                                            if (list_PaySUCCESS.Contains(TktName))
                                                                                            {
                                                                                                list_PaySUCCESS.Remove(TktName);
                                                                                            }
                                                                                        }
                                                                                        ((ComboBox)control.Controls["cboGateway"]).Enabled = true;
                                                                                        updTStatus?.BeginInvoke(1, "Choose another Payment.", tCntrlName, null, null);
                                                                                        frmPayment frmPayment9 = new frmPayment();
                                                                                        frmPayment9.string_1 = string_95 + "\r\n" + text20;
                                                                                        frmPayment9.tktname.Text = TktName;
                                                                                        frmPayment9.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                        if (frmPayment9.DialogResult != DialogResult.OK)
                                                                                        {
                                                                                            frmPayment9.Dispose();
                                                                                            updTStatus.BeginInvoke(2, "Paymnent Choice Cancelled by User! " + errormsg, tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                        text = ((ComboBox)control.Controls["cboGateway"]).SelectedItem.ToString();
                                                                                        frmPayment9.Dispose();
                                                                                        updTStatus.BeginInvoke(1, "Going To Bank", tCntrlName, null, null);
                                                                                        continue;
                                                                                    }
                                                                                    Reffral = string_95;
                                                                                    goto IL_65fd;
                                                                                IL_65fd:
                                                                                    updTStatus.BeginInvoke(1, "Payment Successful!", tCntrlName, null, null);
                                                                                    int num29 = 0;
                                                                                    flag3 = false;
                                                                                    lock (object_9)
                                                                                    {
                                                                                        if (list_PaySUCCESS.Contains(TktName))
                                                                                        {
                                                                                            flag3 = true;
                                                                                        }
                                                                                    }
                                                                                    if (flag3)
                                                                                    {
                                                                                        frmPayment frmPayment10 = new frmPayment();
                                                                                        if (flag3)
                                                                                        {
                                                                                            frmPayment10.bool_3 = true;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            frmPayment10.bool_2 = true;
                                                                                        }
                                                                                        frmPayment10.string_1 = "anOther Ticket On Final Process";
                                                                                        frmPayment frmPayment11 = frmPayment10;
                                                                                        frmPayment11.string_1 = frmPayment11.string_1 + "\r\r" + text4;
                                                                                        frmPayment10.tktname.Text = TktName;
                                                                                        frmPayment10.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                        int dialogResult4 = (int)frmPayment10.DialogResult;
                                                                                        frmPayment10.Dispose();
                                                                                        if (dialogResult4 != 1)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "User Select to Stop Booking! ", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    if (!flag3)
                                                                                    {
                                                                                        list_PaySUCCESS.Add(TktName);
                                                                                    }
                                                                                    lock (object_10)
                                                                                    {
                                                                                        if (list_PNR.Contains(TktName))
                                                                                        {
                                                                                            updTStatus.BeginInvoke(204, "PNR Booked in another Pair", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    if (text17 == "113")
                                                                                    {
                                                                                        string Enc = jsonData_Serial(string_92, "encdata");
                                                                                        postdata = "encdata=" + Enc;

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        postdata = class3_0.Method_SerialInp0(string_92, ref url, bool_14: true);
                                                                                    }
                                                                                    while (true)
                                                                                    {
                                                                                        if (text3 == "AIRTELMONEY")
                                                                                        {
                                                                                            if (isAPP)
                                                                                            {
                                                                                                string text27 = "";
                                                                                                if (dictionary_5.ContainsKey(key))
                                                                                                {
                                                                                                    text27 = dictionary_5[key];
                                                                                                    dictionary_5.Remove(key);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    frmOTP frmOTP3 = new frmOTP();
                                                                                                    frmOTP3.method_1(control_0, rectangle_0, bool_2: true, "AIRTELMONEY", class3_0.BANKSAVEAS);
                                                                                                    if (frmOTP3.DialogResult != DialogResult.OK)
                                                                                                    {
                                                                                                        frmOTP3.Dispose();
                                                                                                        updTStatus?.BeginInvoke(1, "OTP Cancell by User", tCntrlName, null, null);
                                                                                                        return false;
                                                                                                    }
                                                                                                    text27 = frmOTP3.string_0;
                                                                                                    frmOTP3.Dispose();
                                                                                                }
                                                                                                postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + text27 + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}"; //"{\"amount\":" + text19 + ",\"bankId\":91,\"errorMsg\":null,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + text27 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                dsed = postdata;
                                                                                            }

                                                                                            else
                                                                                            {
                                                                                                BankSuccess = true;
                                                                                                url = string_92;
                                                                                                postdata = string_92.Replace("https://www.irctc.co.in/eticketing/BankResponse?", "");
                                                                                            }
                                                                                        }
                                                                                        else if (text3 == "MOBIKWIK")
                                                                                        {
                                                                                            postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.airtelotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";//"{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text17 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text21 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text23 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text24 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text25 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                            dsed = postdata;
                                                                                        }

                                                                                        // else
                                                                                        else if (isAPP)
                                                                                        {

                                                                                            string expression = postdata.Replace("&", ",");
                                                                                            string[] array11 = Strings.Split(expression, ",");
                                                                                            if (text17 != "118" & text17 != "144" & text17 != "121" & text17 != "147" & text3 != "OTOPAY" & text3 != "E-WALLET" & text3 != "HDFCUPI")
                                                                                            {
                                                                                                int num30 = Information.UBound(array11);
                                                                                                string text28 = "";
                                                                                                for (int i = 0; i <= num30; i++)
                                                                                                {
                                                                                                    string[] array12 = Strings.Split(array11[i], "=");
                                                                                                    text28 = text28 + "{\"key\":\"" + array12[0] + "\",\"value\":\"" + HttpUtility.UrlDecode(array12[1]) + "\"}";
                                                                                                    if (i + 2 <= array11.Length)
                                                                                                    {
                                                                                                        text28 += ",";
                                                                                                    }
                                                                                                }
                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"paramList\":[" + text28 + "],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                if (isAPP & failissuefix)
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(1, "Redirect To PNR Server", tCntrlName, null, null);
                                                                                                    string reff = "";
                                                                                                    if ((text3 == "PHONEPE") || (text3 == "PHONEPEQR"))
                                                                                                    {
                                                                                                        reff = "https://mercury-t2.phonepe.com/";
                                                                                                    }
                                                                                                    else if (text3 == "RAZORPAYUPI")
                                                                                                    {
                                                                                                        reff = "https://api.razorpay.com/v1/checkout/public/";
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reff = "https://securegw.paytm.in";
                                                                                                    }

                                                                                                    Request_Type = "Bank";
                                                                                                    string data = class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                                    bool flag20 = airpay(url, data, reff, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Bank");
                                                                                                }
                                                                                            }
                                                                                            else if (text3 == "E-WALLET")
                                                                                            {
                                                                                                //postdata = "";//"{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.airtelotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";//"{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text17 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text21 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text23 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text24 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text25 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                postdata = "{\"transationId\":\"0\",\"bankId\":\"0\",\"txnType\":\"0\",\"txnStatus\":\"12\",\"txnDate\":\"" + class3_0.ewallettxndate + "\",\"amount\":\"" + class3_0.ewalletamount + "\",\"serverId\":\"" + class3_0.serverid + "\",\"timeStamp\":\"" + class3_0.ewallettimestamp + "\",\"upiModeOpted\":\"0\",\"remainingBalance\":\"0.0\",\"loyaltyNum\":\"0\",\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.ewalletotp + "\"},{\"key\":\"TXN_TYPE\",\"value\":\"undefined\"}]}";
                                                                                                postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":1000,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.ewalletotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":7,\"upiModeOpted\":0}";
                                                                                                dsed = postdata;
                                                                                            }
                                                                                            else if (text17 == "144")
                                                                                            {
                                                                                                string Enc = class3_0.easebuzDATA;

                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":144,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                            }
                                                                                            else if (text17 == "122")
                                                                                            {
                                                                                                string Enc = class3_0.hdfcupi;

                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":122,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":59,\"upiModeOpted\":0}";
                                                                                            }
                                                                                            else if (text17 == "147")
                                                                                            {
                                                                                                string Enc = class3_0.cashfree;

                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":147,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                            }
                                                                                            else if (text17 == "121")
                                                                                            {
                                                                                                string Enc = encairf;

                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":121,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + encairf + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                            }
                                                                                            else if (text17 == "118" & text3 != "OTOPAY")
                                                                                            {
                                                                                                string Enc = jsonData_Serial(string_92, "encdata");
                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + string_92 + "\"}],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";


                                                                                                //dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":118,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                if (failissuefix)
                                                                                                {
                                                                                                    string reff = "https://www.irctcipay.com/";
                                                                                                    Request_Type = "Bank";
                                                                                                    string data = "encdata=" + string_92;//class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                                    url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse?bankCode=IRCTC_MOB_AG&appType=ANDROID";
                                                                                                    bool flag20 = airpay(url, data, reff, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Bank");

                                                                                                }

                                                                                            }
                                                                                            else if (text3 == "OTOPAY")
                                                                                            {
                                                                                                string Enc = jsonData_Serial(class3_0.otopaydata, "encdata");

                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":118,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                if (failissuefix)
                                                                                                {
                                                                                                    string reff = "https://www.irctcipay.com/";
                                                                                                    Request_Type = "Bank";
                                                                                                    string data = "encdata=" + Enc;//class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                                    url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse?bankCode=IRCTC_MOB_AG&appType=ANDROID";
                                                                                                    bool flag20 = airpay(url, data, reff, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Bank");

                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                string str = array11[0].Split('=')[1];
                                                                                                string str2 = array11[3].Split('=')[1];
                                                                                                string str3 = array11[4].Split('=')[1];
                                                                                                dsed = "{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":101,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"RESPONSE\",\"value\":\"amount=" + HttpUtility.UrlDecode(str3) + ",bank=State Bank of India,bankid=SBI,checksum=" + HttpUtility.UrlDecode(str2) + ",doRedirect=false,orderId=" + HttpUtility.UrlDecode(str) + ",paymentMode=netbanking,responseCode=100,responseDescription=The transaction was completed successfully. \"}],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                            }
                                                                                        }
                                                                                        //class3_0.TKT_ISADV = true;
                                                                                        while (true)
                                                                                        {
                                                                                            if (!isAPP && class3_0.TKT_ISADV)
                                                                                            {
                                                                                                if (class3_0.bool_SL_TQ)
                                                                                                {
                                                                                                    minmPaymentTime -= 4320.0;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    minmPaymentTime -= 1320.0;
                                                                                                }
                                                                                            }
                                                                                            int num31 = (int)minmPaymentTime - (int)(DateTime.Now - dateTimePayStart).TotalMilliseconds;
                                                                                            num29++;
                                                                                            if (num31 > 10)
                                                                                            {
                                                                                                DateTime dateTime7 = DateTime.Now.AddMilliseconds(num31);
                                                                                                while (true)
                                                                                                {
                                                                                                    TimeSpan timeSpan3 = dateTime7 - DateTime.Now;
                                                                                                    string text29 = timeSpan3.Seconds + ":" + timeSpan3.Milliseconds;
                                                                                                    if (timeSpan3.TotalMilliseconds <= 1.0)
                                                                                                    {
                                                                                                        break;
                                                                                                    }
                                                                                                    updTStatus.BeginInvoke(1, "Final Counting: " + text29, tCntrlName, null, null);
                                                                                                    Thread.Sleep(50);
                                                                                                    Application.DoEvents();
                                                                                                }
                                                                                            }
                                                                                            DateTime datetime_1P = DateTime.Now;
                                                                                            PNRTIME = datetime_1P.ToString("hh:mm:ss");
                                                                                            stopwatch2 = new Stopwatch();
                                                                                            stopwatch2.Start();
                                                                                            //comment

                                                                                            if (!isAPP)
                                                                                            {
                                                                                                if (!isAPP)
                                                                                                {
                                                                                                    try
                                                                                                    {
                                                                                                        excalibur();
                                                                                                    }
                                                                                                    catch
                                                                                                    {

                                                                                                    }
                                                                                                }
                                                                                                dictionary_TimeP["RdIRCTC"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                                updTStatus.BeginInvoke(1, "Redirect To PNR Server", tCntrlName, null, null);
                                                                                                if (text17 == "113" & text3 != "OTOPAY")
                                                                                                {
                                                                                                    postdata = string_92;
                                                                                                    //string Enc = jsonData_Serial(string_92, "encdata");
                                                                                                    //dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + string_92 + "\"}],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                                    //isPremium_p = true;

                                                                                                }
                                                                                                else if (text3 == "OTOPAY")
                                                                                                {
                                                                                                    postdata = class3_0.otopaydataweb;
                                                                                                }
                                                                                                else if (text17 == "1000")
                                                                                                {
                                                                                                    postdata = "{\"transationId\":\"0\",\"bankId\":\"0\",\"txnType\":\"0\",\"txnStatus\":\"12\",\"txnDate\":\"" + class3_0.ewallettxndate + "\",\"amount\":\"" + class3_0.ewalletamount + "\",\"serverId\":\"" + class3_0.serverid + "\",\"timeStamp\":\"" + class3_0.ewallettimestamp + "\",\"upiModeOpted\":\"0\",\"remainingBalance\":\"0.0\",\"loyaltyNum\":\"0\",\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.ewalletotp + "\"},{\"key\":\"TXN_TYPE\",\"value\":\"undefined\"}]}";
                                                                                                    // "{\"amount\":" + class3_0.ewalletamount + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.ewalletotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}"; //"{\"amount\":" + text19 + ",\"bankId\":91,\"errorMsg\":null,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + text27 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                                    isPremium_p = true;
                                                                                                    Reffral = "https://www.irctc.co.in/nget/payment/ewallet-confirm";
                                                                                                    dsed = postdata;
                                                                                                    goto ilfinalewallet;

                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    postdata = class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                                }

                                                                                                bool flag21 = true;
                                                                                                if (text3 != "AIRTELMONEY")
                                                                                                {
                                                                                                    url = "https://www.irctc.co.in/eticketing/BankResponse";
                                                                                                }
                                                                                                Status = "Redirect to IRCTC";
                                                                                                if (asyncon)
                                                                                                {
                                                                                                IL_5c9e9:
                                                                                                    Task_errormsg = "";
                                                                                                    Task_Exception_ = null;
                                                                                                    Task_response = "";
                                                                                                    Task<bool> task = Task_httpRequest(url, postdata, Reffral, "Other", bool_63: false, Proxy_, bool_64: true, bool_65: true, 68000, 68000);
                                                                                                    int num27 = 0;
                                                                                                    while (true)
                                                                                                    {
                                                                                                        if (Task_response.IndexOf("<form action=\"/eticketing/BankResponse\" method=\"post\">") >= 0)
                                                                                                        {
                                                                                                            string text30 = response.Substring(response.IndexOf("setTimeout"));
                                                                                                            text30 = text30.Substring(text30.IndexOf("},") + 3);
                                                                                                            text30 = text30.Substring(0, text30.IndexOf(")"));
                                                                                                            int num32 = int.Parse(text30);
                                                                                                            if (num32 > 50)
                                                                                                            {
                                                                                                                Thread.Sleep(num32);
                                                                                                                goto IL_5c9e9;
                                                                                                            }
                                                                                                        }
                                                                                                        if (!string.IsNullOrEmpty(Task_response))
                                                                                                        {
                                                                                                            if (!Task_response.Contains("<form action=\"/eticketing/BankResponse\" method=\"post\">"))
                                                                                                            {
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if (num27 > 650)
                                                                                                            {
                                                                                                                break;
                                                                                                            }
                                                                                                            num27 += 23;
                                                                                                            Application.DoEvents();
                                                                                                            Thread.Sleep(23);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    do
                                                                                                    {
                                                                                                    IL_5c9e:
                                                                                                        bool flag22 = _httpRequest(url, postdata, Reffral, "Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                                        if (response.IndexOf("<form action=\"/eticketing/BankResponse\" method=\"post\">") >= 0)
                                                                                                        {
                                                                                                            string text30 = response.Substring(response.IndexOf("setTimeout"));
                                                                                                            text30 = text30.Substring(text30.IndexOf("},") + 3);
                                                                                                            text30 = text30.Substring(0, text30.IndexOf(")"));
                                                                                                            int num32 = int.Parse(text30);
                                                                                                            if (num32 > 50)
                                                                                                            {
                                                                                                                Thread.Sleep(num32);
                                                                                                                goto IL_5c9e;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    while ((response == "retry") | string.IsNullOrEmpty(response));
                                                                                                }

                                                                                                DateTime dateTime8 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                                                                                long num33 = (long)(DateTime.UtcNow - dateTime8).TotalMilliseconds;
                                                                                                class3_0.token = num33.ToString();
                                                                                                isPremium_p = false;
                                                                                                Lock0("RdIRCTC", stopwatch2, response);
                                                                                            }
                                                                                            //comments
                                                                                            postdata = null;
                                                                                            stopwatch2 = new Stopwatch();
                                                                                            stopwatch2.Start();
                                                                                            dictionary_TimeP["FinalHit"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                            Reffral = "https://www.irctc.co.in/nget/booking-confirm";
                                                                                            if (isAPP)
                                                                                            {
                                                                                                Reffral = "";
                                                                                            }
                                                                                        ilfinalewallet:
                                                                                            Request_Type = "json";

                                                                                            string text31 = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingData/" + class3_0.TransactionID;
                                                                                            updTStatus?.BeginInvoke(1, "Final Hit For PNR ....", tCntrlName, null, null);
                                                                                            int num34 = 0;
                                                                                            int num35 = 0;
                                                                                            while (true)
                                                                                            {
                                                                                            FINALPNR:
                                                                                                num35++;
                                                                                                Status = "Final Hit";
                                                                                                //cookie_ = new CookieContainer();
                                                                                                bool flag23 = _httpRequest(text31, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                                if (!flag23 | (response == "new:retry"))
                                                                                                {
                                                                                                    num34++;
                                                                                                    if (num34 > 9)
                                                                                                    {
                                                                                                        updTStatus.BeginInvoke(2, response + errormsg, tCntrlName, null, null);
                                                                                                        return false;
                                                                                                    }
                                                                                                    Thread.Sleep(300);
                                                                                                    continue;
                                                                                                }
                                                                                                string text32 = "";
                                                                                                string text33 = "";
                                                                                                if (!string.IsNullOrEmpty(errormsg))
                                                                                                {
                                                                                                    text32 = errormsg;
                                                                                                }
                                                                                                if (Exception_ != null)
                                                                                                {
                                                                                                    text33 = Exception_.ToString();
                                                                                                }
                                                                                                Lock0("FinalHit", stopwatch2, response + "\r\n" + text32 + "\r\n" + text33);
                                                                                                if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) > 0)
                                                                                                {
                                                                                                    break;
                                                                                                }
                                                                                                WriteLog();
                                                                                                if (response == "retry" && num35 < 3)
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                if (response.Contains("Unable To Process Your Request.\",\"retryBooking") & (text17 == "91"))
                                                                                                {
                                                                                                    goto end_IL_5911;
                                                                                                }
                                                                                                if ((response.Contains("Unable to process Payment request now") && num35 < 3) || ((response.Contains("Unable to perform Transaction") | response.Contains("No Transaction found")) && num34 < 9))
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                goto IL_6024;
                                                                                            }
                                                                                            if (text3 == "SBI")
                                                                                            {
                                                                                                text3 = "SBI_Net";
                                                                                            }
                                                                                            if (text3 == "HDFC")
                                                                                            {
                                                                                                text3 = "HDFC_Net";
                                                                                            }
                                                                                            goto IL_6102;
                                                                                        IL_6102:
                                                                                            if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) <= 0)
                                                                                            {
                                                                                                if (response.Contains("timeStamp"))
                                                                                                {
                                                                                                    dateTime_1 = DateTime.Parse(GetString(response, "timeStamp"));
                                                                                                    text8 = GetString_(response, "errorMessage", "\"");
                                                                                                    string text34 = text8.ToLower();
                                                                                                    if (text34.Contains("berths") || text34.Contains("seat"))
                                                                                                    {
                                                                                                        string state = text3 + "||" + text8 + "||" + dateTime_1.ToString("hh:mm:ss");
                                                                                                        string_91 = "faield";
                                                                                                        //ThreadPool.QueueUserWorkItem(sendLogToServer, state);
                                                                                                        updTStatus.BeginInvoke(2, text8, tCntrlName, null, null);
                                                                                                        return result;
                                                                                                    }
                                                                                                }
                                                                                                string _response = "";
                                                                                                text31 = "https://www.irctc.co.in/eticketing/protected/mapps1/recentTxnsDetails";
                                                                                                string deta = null;
                                                                                                Status = "Re-Check For PNR";
                                                                                                updTStatus.BeginInvoke(1, "Re-Check For PNR...", tCntrlName, null, null);
                                                                                                if (!_httpRequest(text31, deta, Reffral, "Plain123Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref _response, ref errormsg, ref Exception_))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(2, "Booking Faield Check History" + errormsg, tCntrlName, null, null);
                                                                                                    return result;
                                                                                                }
                                                                                                if (_response.Contains("BOOKED"))
                                                                                                {
                                                                                                    lock (object_10)
                                                                                                    {
                                                                                                        if (!list_PNR.Contains(TktName))
                                                                                                        {
                                                                                                            list_PNR.Add(TktName);
                                                                                                        }
                                                                                                    }
                                                                                                    try
                                                                                                    {
                                                                                                        string text35 = dateTime_1.ToString("hh:mm:ss");
                                                                                                        updTStatus.BeginInvoke(203, "Sucess PNR:0000000000", tCntrlName, null, null);
                                                                                                        string_90 = "0000000000 - " + text3 + (A_ ? "_Debit" : "_NB") + " - " + class3_0.TRAIN_NO + " - " + double_0 / 1000.0 + " - " + " - " + LoginType;
                                                                                                        string text36 = "0000000000|" + PNRTIME + "|" + text3 + "|" + LoginType + "|" + class3_0.BRD_STN + "-" + class3_0.DEST_STN + "-" + class3_0.TRAIN_NO + "|" + LoginType + "|" + class3_0.int_TotalPax;
                                                                                                        Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG) VALUES('PNR','" + text36 + "')");
                                                                                                        updTStatus.BeginInvoke(5, "Success by NGET: " + PNRTIME, tCntrlName, null, null);
                                                                                                        class3_0.method_4(bool_14: true, "Booking Success", text19, "0000000000", ConnectionGroupName_);
                                                                                                        string status = string.Concat(new string[3]
                                                                                                        {
                                                                                                            "Success",
                                                                                                            Log_(int_Slot, text3),
                                                                                                            PNRTIME
                                                                                                        });
                                                                                                        updTStatus.BeginInvoke(4, status, tCntrlName, null, null);
                                                                                                    }
                                                                                                    catch
                                                                                                    {
                                                                                                    }
                                                                                                    result = true;
                                                                                                    return result;
                                                                                                }
                                                                                                string state2 = text3 + "||" + text8 + "||" + dateTime_1.ToString("hh:mm:ss");
                                                                                                string_91 = "faield";
                                                                                                //ThreadPool.QueueUserWorkItem(sendLogToServer, state2);
                                                                                                updTStatus.BeginInvoke(2, "Booking Faield Check History", tCntrlName, null, null);
                                                                                                return result;
                                                                                            }
                                                                                            lock (object_10)
                                                                                            {
                                                                                                if (!list_PNR.Contains(TktName))
                                                                                                {
                                                                                                    list_PNR.Add(TktName);
                                                                                                }
                                                                                            }
                                                                                            dateTime_1 = DateTime.Parse(GetString(response, "bookingDate"));
                                                                                            if (class3_0.TKT_ISADV)
                                                                                            {
                                                                                                if (class3_0.bool_SL_TQ)
                                                                                                {
                                                                                                    dateTime_1 = dateTime_1.AddSeconds(-5.0);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    dateTime_1 = dateTime_1.AddSeconds(-3.0);
                                                                                                }
                                                                                            }
                                                                                            string text37 = dateTime_1.ToString("hh:mm:ss");
                                                                                            string string3 = GetString(response, "pnrNumber");
                                                                                            updTStatus.BeginInvoke(203, "Sucess PNR:" + string3, tCntrlName, null, null);
                                                                                            string_90 = string3 + " - " + text3 + (A_ ? "_Debit" : "_NB") + " - " + class3_0.TRAIN_NO + " - " + double_0 / 1000.0 + " - " + LoginType;
                                                                                            try
                                                                                            {
                                                                                                class3_0.method_4(bool_14: true, "Booking Success", text19, string3, ConnectionGroupName_);
                                                                                                string text38 = string3 + "|" + PNRTIME + "|" + text3 + "|" + LoginType + "|" + class3_0.BRD_STN + "-" + class3_0.DEST_STN + "-" + class3_0.TRAIN_NO + "|" + LoginType + "|" + class3_0.int_TotalPax;
                                                                                                Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG) VALUES('PNR','" + text38 + "')");
                                                                                                updTStatus.BeginInvoke(5, "Success by GADAR : " + PNRTIME, tCntrlName, null, null);
                                                                                                bool flag24 = false;
                                                                                                string text39 = "";
                                                                                                string text40 = "0";
                                                                                                int millisecond = DateTime.Now.Millisecond;
                                                                                                DateTime dateTime9 = default(DateTime);
                                                                                                try
                                                                                                {
                                                                                                }
                                                                                                catch
                                                                                                {
                                                                                                }
                                                                                                text38 = string.Concat(new string[3]
                                                                                                {
                                                                                                    "Success",
                                                                                                    Log_(int_Slot, text3),
                                                                                                    PNRTIME
                                                                                                });
                                                                                                if (flag24)
                                                                                                {
                                                                                                    text38 = "Success" + Log_(int_Slot, text3) + PNRTIME + "#txn" + text40 + "|" + text39;
                                                                                                }
                                                                                                updTStatus.BeginInvoke(4, text38, tCntrlName, null, null);
                                                                                                if (isAPP)
                                                                                                {
                                                                                                    string_27 = response;
                                                                                                    ThreadPool.QueueUserWorkItem(PrintTicketAPP, text38);
                                                                                                    result = true;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    Reffral = url;
                                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/printTicket/" + string3 + "/en";
                                                                                                    postdata = "";
                                                                                                    string _response2 = "";
                                                                                                    num5 = 0;
                                                                                                    while (true)
                                                                                                    {
                                                                                                        num5++;
                                                                                                        Status = "Print Ticket";
                                                                                                        if (_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 120000, 120000, ref _response2, ref errormsg, ref Exception_))
                                                                                                        {
                                                                                                            try
                                                                                                            {
                                                                                                                if (_response2.Contains("dateOfBooking"))
                                                                                                                {
                                                                                                                    string string4 = GetString(_response2, "dateOfBooking");
                                                                                                                    string4 = string4.Replace("HRS", "");
                                                                                                                    dateTime_1 = DateTime.Parse(string4);
                                                                                                                    string_27 = _response2;
                                                                                                                    ThreadPool.QueueUserWorkItem(PrintTicket, text38);
                                                                                                                    updTStatus.BeginInvoke(2, "Success by GADAR " + PNRTIME, tCntrlName, null, null);
                                                                                                                    result = true;
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    string_27 = response;
                                                                                                                    ThreadPool.QueueUserWorkItem(PrintTicketAPP, text38);
                                                                                                                    result = true;
                                                                                                                }
                                                                                                            }
                                                                                                            catch
                                                                                                            {
                                                                                                                result = true;
                                                                                                            }
                                                                                                            break;
                                                                                                        }
                                                                                                        if (num < 3.0)
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        result = true;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            catch
                                                                                            {
                                                                                                result = true;
                                                                                                return result;
                                                                                            }
                                                                                            result = true;
                                                                                            goto end_IL_54db;
                                                                                        IL_6024:
                                                                                            if (!response.Contains("timeStamp") & !isAPP)
                                                                                            {
                                                                                                DateTime dateTime10 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                                                                                long num36 = (long)(DateTime.UtcNow - dateTime10).TotalMilliseconds;
                                                                                                postdata = class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                                updTStatus.BeginInvoke(1, "Retry For PNR", tCntrlName, null, null);
                                                                                                dictionary_TimeP["RetyFinalHit"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                                isPremium_p = false;
                                                                                                minmPaymentTime = 21060.0;
                                                                                                continue;
                                                                                            }
                                                                                            goto IL_6102;
                                                                                            continue;
                                                                                        end_IL_5911:
                                                                                            break;
                                                                                        }
                                                                                        continue;
                                                                                    end_IL_54db:
                                                                                        break;
                                                                                    }
                                                                                    goto end_IL_0fad;
                                                                                }
                                                                                break;
                                                                            }
                                                                            if (response.Contains("captchaQuestion"))
                                                                            {
                                                                                if (num11 > 3)
                                                                                {
                                                                                    Application.DoEvents();
                                                                                    Thread.Sleep(3000);
                                                                                }
                                                                            }
                                                                            else if (response.Contains("errorMessage"))
                                                                            {
                                                                                updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                                                return false;
                                                                            }
                                                                        }
                                                                        break;
                                                                    }
                                                                    //File.WriteAllText("Passenger_Error_" + class3_0.TransactionID, url + "\n" + postdata + "\n" + response);
                                                                    if (response.IndexOf("availablityStatus") > 0)
                                                                    {
                                                                        updTStatus.BeginInvoke(2, GetString(response, "availablityStatus"), tCntrlName, null, null);
                                                                        return false;
                                                                    }
                                                                    if (response.IndexOf("Unable to perform Transaction") >= 0)
                                                                    {
                                                                        unable = true;
                                                                        break;
                                                                    }
                                                                    if (response.IndexOf("Invalid access token") >= 0)
                                                                    {
                                                                        break;
                                                                    }
                                                                    updTStatus.BeginInvoke(2, GetString(response, "errorMessage"), tCntrlName, null, null);
                                                                    return false;
                                                                }
                                                                while (num11 <= 3);
                                                                break;
                                                            }
                                                            updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                            return false;
                                                        }
                                                        while (!(response == "retry") || num11 <= 5);
                                                        break;
                                                    }
                                                    while (num11 <= 3);
                                                    break;
                                                }
                                                if (num11 >= 3)
                                                {
                                                    updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                    return false;
                                                }
                                            }
                                            else if (num11 > 3)
                                            {
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                    while (num11 <= 3);
                                    break;
                                }
                                if (response.IndexOf("Bad credentials") > 0 || response.Contains("Invalid User"))
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                    Class11.smethod_1("TBL_USER", "UserState", "Invalid||" + class3_0.string_3, class3_0.IRCTC_ID);
                                    updTStatus.BeginInvoke(2, "Bad credentials! ", tCntrlName, null, null);
                                    return false;
                                }
                                if (response.Contains("User is disabled"))
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                    Class11.smethod_1("TBL_USER", "UserState", "Disabled||" + class3_0.string_3, class3_0.IRCTC_ID);
                                    updTStatus.BeginInvoke(2, "User Is Disabled! ", tCntrlName, null, null);
                                    return false;
                                }

                                if (response.IndexOf("Invalid Captcha") > 0)
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                }
                                else
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                }
                                break;
                            }
                            num6++;
                            if (num6 > 2)
                            {
                                s_Data_Private = "";
                                isLogin_Self = false;
                                isLogin = false;
                                break;
                            }
                            else
                            {
                                s_Data_Private = method_token();

                            }
                        }
                    }
                    else
                    {
                        isLogin_Self = false;
                        isLogin = false;
                    }
                    continue;
                end_IL_0fad:
                    break;
                }
            }
        }
        catch (ThreadAbortException ex3)
        {
            Thread.ResetAbort();
            ("Send Log, " + ex3.Message).Contains("Thread was being aborted");
        }
        catch (Exception ex4)
        {
            try
            {
                string text41 = "";
                if (Exception_ != null)
                {
                    text41 = Exception_.ToString();
                }
                string contents = ex4.ToString() + "\n\n\n\n" + string_92 + "\n\n\n\n" + url + "\n\n\n\n" + response + "\n\n\n\n" + text41;
                string path = "IRLOG/" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + "_" + DateTime.Now.ToString("hhmmssfff");
                File.WriteAllText(path, contents);
            }
            catch (Exception)
            {
            }
            string text42 = "Send Log, " + ex4.Message;
            CountL = 0;
            failCount++;
            _abck = "";
            bm_sv = "";
            isLogin = false;
            updTStatus?.BeginInvoke(2, "Unable to process current Request", tCntrlName, null, null);
            method_74("PerformB:OuterCatch: ", text42 + " <ErrorDestination>" + ex4.StackTrace.ToString());
            if (!list_12.Contains(text42))
            {
                list_12.Add(text42);
                method_78(text42 + "|" + ConnectionGroupName_);
            }
        }
        finally
        {
            windowCount--;
            if (isLogin_Self)
            {
                CountL = 0;
                failCount++;
                isLogin = false;
            }
            object_4 = new object();
            lock (object_4)
            {
                if (list_IrctcID.Contains(class3_0.IRCTC_ID))
                {
                    list_IrctcID.Remove(class3_0.IRCTC_ID);
                }
            }
            if (cookie_ != null)
            {
                ThreadPool.QueueUserWorkItem(LogedOUT, false);
            }
            try
            {
                method_78(string_87 + "|" + ConnectionGroupName_);
                Write_Lock_File(updTStatus, tCntrlName, "Result=" + result);
            }
            catch
            {
            }
            if (dictionary_Pair_Process.ContainsKey(class3_0.string_20))
            {
                int num37 = dictionary_Pair_Process[class3_0.string_20];
                if (num37 != 0)
                {
                    dictionary_Pair_Process[class3_0.string_20] = num37 - 1;
                }
            }
            bool flag25 = false;
            obj2 = object_6;
            lock (obj2)
            {
                if (dictionary_2.ContainsKey(TktName))
                {
                    int num38 = dictionary_2[TktName] - 1;
                    if (num38 <= 0)
                    {
                        Interlocked.Decrement(ref int_4);
                        dictionary_2.Remove(TktName);
                        flag25 = true;
                    }
                    else
                    {
                        dictionary_2[TktName] = num38;
                    }
                }
            }
            if (flag25)
            {
                obj2 = object_8;
                lock (obj2)
                {
                    list_PaySTART.Remove(TktName);
                }
                obj2 = object_11;
                lock (obj2)
                {
                    if (list_11.Contains(TktName))
                    {
                        list_11.Remove(TktName);
                    }
                }
                if (list_IrctcID.Count <= 0)
                {
                    obj2 = object_10;
                    lock (obj2)
                    {
                        list_PNR.Clear();
                    }
                }
            }
            if (waitCallback_0 == null)
            {
                waitCallback_0 = smethod_13;
            }
            ThreadPool.QueueUserWorkItem(waitCallback_0);
        }
        return result;
    }

    private string FetchMail(string user, string pass, UpdateTStatus updTStatus , string tCntrlName)
    {
        string result = "";
        string email = "";
        string mobile = "";
        try
        {
            if (class3_0 == null)
            {
                class3_0 = new clsPostData();
            }
            if (class19_0 == null)
            {
                class19_0 = new Class19();
            }
            randomGeneratedKey = jwtutils.getRandomAppCngKey();
            keyFromServer = "";
            greq = "";
            _Authrization = "";
            access_token = "";
            jwtToken = "";
            bool_48 = true;
            cookie_ = null;
            cookie_ = new CookieContainer();
            DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            long num = (long)(DateTime.UtcNow - dateTime).TotalMilliseconds;
            class3_0._greq = num.ToString();
            greq = jwtutils.GetHash(ref mup);
            mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
            class3_0.token = null;
            Status = "Login";
            Request_Type = "json";
            Status = "Getting Availablity";
            Status = "Login";
            Request_Type = "Base";
            string text = "";
            class3_0.LoginType = "APP";
            class3_0.LoginType = (isAPP ? "APP" : "WEB");
            LoginType = class3_0.LoginType;
            isAPP = true;
            //s_Data_Private = method_token();
            //s_Data_Private = "";//s_Data_Private.Trim();

            Status = "Login";
            Request_Type = "Base";
            isAPP = true;
            LoginType = "APP";
            postdata = null;
            url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/appVersion/ANDROID/4.2.10";
            ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Base");
            url = "https://www.irctc.co.in/eticketing/protected/mapps1/loginCaptcha?nlpCaptchaException=true";
            Lock("First Hit Irctc: In = " + url);
            postdata = null;
            if (_httpRequest(url, postdata, Reffral, "Plain1Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
            {
                if (response.IndexOf("captchaQuestion") > 0)
                {
                    text = response.Substring(response.IndexOf("captchaQuestion") + 18);
                    text = text.Substring(0, text.IndexOf("\""));
                    class3_0._greq = GetString(response, "status");
                }
                string text2 = "";
                Bitmap bitmap = (Bitmap)method_55(text);
                if (bitmap != null)
                {
                    frmCaptcha frmCaptcha2 = new frmCaptcha(this, cookie_, "", "");
                    text2 = frmCaptcha2.SolveCaptcha(text);
                    frmCaptcha2.Dispose();
                    postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + class3_0.IRCTC_PWD + "&captcha=" + text2 + "&uid=" + greq + "&otpLogin=false";
                    postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + frmCaptcha.Base64Encode(class3_0.IRCTC_PWD) + "&captcha=" + text2 + "&uid=" + class3_0._greq + "&otpLogin=false&nlpIdentifier=&nlpAnswer=&nlpToken=&lso=&encodedPwd=true";
                    byte[] bytes = Encoding.UTF8.GetBytes(class3_0.IRCTC_ID + ":" + class3_0.IRCTC_PWD);
                    _Authrization = Convert.ToBase64String(bytes);
                    url = "https://www.irctc.co.in/authprovider/webmtoken";
                    Request_Type = "Login";
                    //SensorDataSend = true;
                    Status = "Login Confirm";
                    _httpRequest(url, postdata, Reffral, "Plain0Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 12000, 12000, ref response, ref errormsg, ref Exception_);
                    //{
                        if (response.Contains("retry") & !response.Contains("SUCESS"))
                        {
                            // goto ilstarting;
                        }

                        if (response.Contains("Bad credentials") || response.Contains("Invalid User"))
                        {
                            //isLogin_Self = false;
                           // isLogin = false;
                            Class11.smethod_1("TBL_USER", "UserState", "Invalid||" + class3_0.string_3, class3_0.IRCTC_ID);
                            updTStatus.BeginInvoke(2, "Bad credentials! ", tCntrlName, null, null);
                            return result = "False";
                        }
                        if (response.Contains("User is disabled"))
                        {
                            //isLogin_Self = false;
                            // isLogin = false;
                            Class11.smethod_1("TBL_USER", "UserState", "Disabled||" + class3_0.string_3, class3_0.IRCTC_ID);
                            updTStatus.BeginInvoke(2, "User Is Disabled! ", tCntrlName, null, null);
                            return result = "False";
                        }
                        class3_0.string_61 = response.Substring(response.IndexOf("access_token") + 15, 36);
                        class3_0._Authorization = "Bearer " + class3_0.string_61;
                        _Authrization = class3_0._Authorization;
                        if (_validateuser_Sik(updTStatus))
                        {
                            DateTime dateTime2 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                            long num2 = (long)(DateTime.UtcNow - dateTime2).TotalMilliseconds;
                            class3_0.token = num2.ToString();
                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/validateUser?source=1";
                            postdata = null;
                            dateTime_3 = DateTime.Now;
                            Status = "ValidateUser";
                            Request_Type = "json";
                            if (_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                            {
                                bmikey = jsonData_Serial(response, "userIdHash");
                            if (response.IndexOf("verified\":\"false") > 0)
                            {
                                updTStatus?.BeginInvoke(1, "Your Irctc Id Not Verified", tCntrlName, null, null);
                                result = "false";
                            }
                            if (response.IndexOf("emailVerified\":\"false") > 0)
                            {
                                updTStatus?.BeginInvoke(1, "Your Irctc Id Not Verified", tCntrlName, null, null);
                                result = "false";
                            }
                            if (response.IndexOf("mobileVerified\":\"false") > 0)
                            {
                                updTStatus?.BeginInvoke(1, "Your Irctc Id Not Verified", tCntrlName, null, null);
                                result = "false";
                            }
                            email = GetString(response, "email");
                                mobile = GetString(response, "mobile");
                                if (email.Contains("1secmail.com") || (email.Contains("1secmail.org")) || (email.Contains("1secmail.net")) || (email.Contains("kzccv.com")) || (email.Contains("icznn.com")) || (email.Contains("ezztt.com")))
                                {
                                    result = email + "#" + mobile+ "#true";
                                }
                                else
                                {
                                    url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/userDetails";
                                    postdata = null;
                                    _httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                    //
                                    string pinn = "";
                                try
                                {
                                    string text2A= "https://www.1secmail.com/api/v1/?action=getDomainList";//Class39.PrimaryUri + "Panel/backupchromeip";
                                    WebClient webClient1 = new WebClient();
                                    webClient1.Headers.Add(HttpRequestHeader.UserAgent, "My appp");
                                    pinn = webClient1.DownloadString(new Uri(text2A));
                                    webClient1.Dispose();
                                    pinn = pinn.Replace("[", "");
                                    pinn = pinn.Replace("]", "");
                                    pinn = pinn.Replace("\"", "");
                                    //return text3;
                                }
                                catch
                                {
                                    pinn = "1secmail.com,1secmail.org,1secmail.net,kzccv.com,qiott.com,wuuvo.com,icznn.com,ezztt.com";
                                }


                                string[] array = pinn.Split(new string[1] { "," }, StringSplitOptions.None);
                                if (array.Length != 0)
                                 {
                                        Random random = new Random();
                                        pinn = array[random.Next(array.Length - 1)].ToString();//array[0];
                                    }
                                    emaildomain = pinn;
                                    dishabemail = class3_0.IRCTC_ID.ToLower() + "sik@" + emaildomain;
                                    dishabemail = HttpUtility.UrlEncode(dishabemail);
                                    url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/getSMSeMailOTP/E?newEmail=" + dishabemail;
                                    postdata = null;
                                    _httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                    string otp = "";
                                ilreotpe:
                                    if (response.Contains("Email OTP sent to mail "))


                                    {

                                        string HostUri = "https://www.1secmail.com/mailbox";
                                        mac = Environment.GetEnvironmentVariable("mac", EnvironmentVariableTarget.Process);
                                        clientID = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
                                        string textS = "action=getMessages&login=" + class3_0.IRCTC_ID.ToLower() + "sik" + "&domain=" + emaildomain;
                                        string requestUriString = HostUri;
                                        HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUriString);
                                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                                        httpWebRequest.ContentType = "application/x-www-form-urlencoded; charset=UTF-8";
                                        httpWebRequest.Method = "POST";
                                        httpWebRequest.Accept = "*/*";
                                        using (StreamWriter streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                                        {
                                            string value = textS;
                                            streamWriter.Write(value);
                                        }
                                        HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                                        using StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream());
                                        string text2S = streamReader.ReadToEnd();

                                        if (text2S.Contains("IRCTC' s Online Rail Ticket Reservation User Registration Confirmation"))
                                        {
                                            url = text2S.Substring(text2S.IndexOf("href") + 6);
                                            url = url.Substring(0, url.IndexOf("\">"));
                                            url = "https://www.1secmail.com" + url;
                                            string text2F = url;

                                            WebClient webClient1 = new WebClient();
                                            webClient1.Headers.Add(HttpRequestHeader.UserAgent, "My appp");
                                            string text3 = webClient1.DownloadString(new Uri(text2F));
                                            webClient1.Dispose();
                                            if (text3.Contains("Your email id Verification OTP code is"))
                                            {
                                                otp = text3.Substring(text3.IndexOf("Your email id Verification OTP code is") + 41);
                                                otp = otp.Substring(0, otp.IndexOf("<"));
                                                url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/verifySMSeMailOTP/E?newEmail=" + dishabemail + "&emailCode=" + otp;
                                                postdata = null;
                                                _httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                if (response.Contains("OTP verification Successful for the use"))
                                                {
                                                    result = HttpUtility.UrlDecode(dishabemail) + "#" + class3_0.IRCTC_ID + "#true";
                                                }
                                                else
                                                {
                                                    result = email + "#" + mobile + "#false";
                                                }
                                            }


                                        }
                                        else if (text2S.Contains("Your email id Verification activation OTP code"))
                                    {
                                        url = text2S.Substring(text2S.IndexOf("href") + 6);
                                        url = url.Substring(0, url.IndexOf("\">"));
                                        url = "https://www.1secmail.com" + url;
                                        string text2F = url;

                                        WebClient webClient1 = new WebClient();
                                        webClient1.Headers.Add(HttpRequestHeader.UserAgent, "My appp");
                                        string text3 = webClient1.DownloadString(new Uri(text2F));
                                        webClient1.Dispose();
                                        if (text3.Contains("Your email id update OTP code is"))
                                        {
                                            otp = text3.Substring(text3.IndexOf("Your email id update OTP code is") + 35);
                                            otp = otp.Substring(0, otp.IndexOf("<"));
                                            url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/verifySMSeMailOTP/E?newEmail=" + dishabemail + "&emailCode=" + otp;
                                            postdata = null;
                                            _httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                            if (response.Contains("OTP verification Successful for the use"))
                                            {
                                                result = HttpUtility.UrlDecode(dishabemail) + "#" + class3_0.IRCTC_ID + "#true";
                                            }
                                            else
                                            {
                                                result = email + "#" + mobile + "#false";
                                            }
                                        }


                                    }
                                    else
                                        {
                                            goto ilreotpe;
                                        }

                                    }
                                }
                                
                                //

                            }
                           
                        //}
                    }
                }
            }
        }
        catch
        {
            result = email + "#" + mobile + "#false";
        }
        return result;
    }
    internal string CreateIRCTC_ID_App(string userID, string Data, ref string errMessage)
    {
        if (class3_0 == null)
        {
            class3_0 = new clsPostData();
        }
        string text = "";
        string text2 = "";
        if (File.Exists("serverip.dll"))
        {
            text = File.ReadAllText("serverip.dll");
        }
        if (!string.IsNullOrEmpty(text))
        {
            try
            {
                Random random = new Random();
                string[] array = text.Split(new string[1] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
                int num = random.Next(0, array.Length);
                string text3 = "103.167.32.237:49155:indproxyz:dv6Yx8RUXG";
                string[] array2 = text3.Split(new string[1] { ":" }, StringSplitOptions.None);
                if (array2.Length > 3)
                {
                    Proxy_ = new WebProxy(array2[0].Trim(), int.Parse(array2[1].Trim()));
                    Proxy_.BypassProxyOnLocal = true;
                    Proxy_.Credentials = new NetworkCredential(array2[2].Trim(), array2[3].Trim());
                }
            }
            catch
            {
            }
        }
        if (Proxy_ != null)
        {
            Proxy_ = Proxy_;
        }
        randomGeneratedKey = jwtutils.getRandomAppCngKey();
        keyFromServer = "";
        greq = "";
        _Authrization = "";
        access_token = "";
        jwtToken = "";
        bool_48 = true;
        cookie_ = null;
        cookie_ = new CookieContainer();
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        long num2 = (long)(DateTime.UtcNow - dateTime).TotalMilliseconds;
        class3_0._greq = num2.ToString();
        greq = jwtutils.GetHash(ref mup);
        mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
        class3_0.token = null;
        Status = "Login";
        Request_Type = "json";
        Status = "Getting Availablity";
        Status = "Login";
        Request_Type = "Base";
        string text4 = "";
        class3_0.LoginType = "APP";
        class3_0.LoginType = (isAPP ? "APP" : "WEB");
        LoginType = class3_0.LoginType;
        Status = "Login";
        Request_Type = "Base";
        isAPP = true;
        bool bool_63 = true;
        LoginType = "APP";
        class3_0._Authorization = "";
        string text5 = "https://www.irctc.co.in";
        url = text5 + "/eticketing/protected/mapps1/captchaganetate/123456789/REGISTRATION";
        Reffral = text5 + "/nget/profile/user-registration";
        postdata = null;
        int num3 = 0;
        do
        {
            num3++;
            NgtHttplogin(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 10000, 10000, ref response, ref errormsg, ref Exception_, "IRCTCID");
        }
        while (response == "retry" || (response == "new:goahead" && num2 < 3));
        string text6 = "";
        class3_0._greq = jsonData_Serial(response, "status");
        string text7 = "";
        string text8 = "";
        string text9 = response.Substring(response.IndexOf("captchaQuestion") + 18);
        text6 = text9.Substring(0, text9.IndexOf("\""));
        Bitmap bitmap = (Bitmap)method_55(text6);
        if (bitmap != null)
        {
            frmCaptcha frmCaptcha2 = new frmCaptcha(this, cookie_, "", "");
            text8 = frmCaptcha2.SolveCaptcha(text6);
            frmCaptcha2.Dispose();
        }
        text7 = ",\"captcha\":\"" + text8 + "\"";
        Data = "ZSUGFahft978||awHZWJ@8790||1||O8LSlJcq||en||Kalipada||Kumar||Carlson||F||M||19710621||21||06||1971||2||||||ZSUGFahft978@yahoo.in||9821541743||94||Z-116||hanuman ji ki tekari||Bapu Nagar||94||799001||Tripura||Agartala G.P.O||-1||9821541745";
        string[] array3 = Data.Split(new string[1] { "||" }, StringSplitOptions.None);
        string text10 = array3[0];
        string text11 = array3[1];
        string text12 = array3[2];
        string text13 = array3[3];
        string text14 = array3[4];
        string text15 = array3[5];
        string text16 = array3[6];
        string text17 = array3[7];
        string text18 = array3[8];
        string text19 = array3[9];
        string text20 = array3[10];
        string text21 = array3[11];
        string text22 = array3[12];
        string text23 = array3[13];
        string text24 = array3[14];
        string text25 = array3[15];
        string text26 = array3[16];
        string text27 = array3[17];
        string text28 = array3[18];
        string text29 = array3[19];
        string text30 = array3[20];
        string text31 = array3[21];
        string text32 = array3[22];
        string text33 = array3[23];
        string text34 = array3[24];
        string text35 = array3[25];
        string text36 = array3[26];
        string text37 = array3[27];
        string text38 = array3[28];
        while (true)
        {
            url = text5 + "/eticketing/protected/mapps1/checkUserAvail?userid=" + text10;
            num2 = 0L;
            do
            {
                num2++;
                NgtHttpReq(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, "IRCTCID");
            }
            while (response == "retry" && num2 < 3);
            if (response.IndexOf("useridAvailable\":\"TRUE") >= 0)
            {
                break;
            }
            errMessage = "1. User Id is Not Available, Use Another letter in Userid";
            Random random2 = new Random();
            text10 += random2.Next(1, 1000);
        }
        while (true)
        {
            url = text5 + "/eticketing/protected/mapps1/checkUserAvail?email=" + text27;
            if (url.Contains("@"))
            {
                num2 = 0L;
                do
                {
                    num2++;
                    NgtHttpReq(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, "IRCTCID");
                }
                while (response == "retry" && num2 < 3);
                if (response.IndexOf("emailAvailable\":\"TRUE") >= 0)
                {
                    break;
                }
                Random random3 = new Random();
                int num4 = random3.Next(1, 1000);
                text27 = ((!response.Contains("disposableEmail")) ? (num4 + text27) : (text10 + num4 + "@gmail.com"));
            }
        }
        while (true)
        {
            url = text5 + "/eticketing/protected/mapps1/checkUserAvail?mobile=" + text28 + "&isd=91";
            num2 = 0L;
            do
            {
                num2++;
                NgtHttpReq(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, "IRCTCID");
            }
            while (response == "retry" && num2 < 3);
            if (response.IndexOf("mobileAvailable\":\"TRUE") >= 0)
            {
                break;
            }
            errMessage = "3. Mobile is Already Used, Use Another Mobile";
            Random random4 = new Random();
            text28 = "98" + random4.Next(100009, 999999) + "61";
        }
        while (true)
        {
            url = text5 + "/eticketing/protected/mapps1/pin/" + text34;
            num2 = 0L;
            do
            {
                num2++;
                NgtHttpReq(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, "IRCTCID");
            }
            while (response == "retry" && num2 < 3);
            if (response.IndexOf("cityList\":") < 0)
            {
                errMessage = "4. PinCode is Not Available, Use Another PinCode";
                text34 = "400070";
                continue;
            }
            text35 = jsonData_Serial(response, "state");
            text36 = jsonData_SerialCity(response, "cityList\":[");
            url = text5 + "/eticketing/protected/mapps1/pin/" + text34 + "?city=" + text36;
            num2 = 0L;
            do
            {
                num2++;
                NgtHttpReq(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, "IRCTCID");
            }
            while (response == "retry" && num2 < 3);
            if (response.IndexOf("city\":") >= 0)
            {
                break;
            }
            errMessage = "5. PinCode Location is Not Available, Use Another PinCode Location";
            text34 = "400073";
        }
        text37 = method_94_II(response, "postofficeList");
        text35 = text35.Replace("+", " ");
        text36 = text36.Replace("+", " ");
        text37 = text37.Replace("+", " ");
        url = text5 + "/eticketing/protected/mapps1/registerUser";
        while (true)
        {
            postdata = "{\"sbicardInfo\":\"N\",\"promomail\":\"Y\",\"newsletter\":\"Y\",\"mobileRegistration\":true,\"oldSbicardInfo\":\"\",\"verified\":\"false\",\"emailVerified\":\"false\",\"mobileVerified\":\"false\",\"mobileCanChange\":\"false\",\"userPaymentFlag\":\"false\",\"kycAddressDisplayStat\":\"false\",\"emailCanChange\":\"false\",\"passwordChangeMandatory\":\"false\",\"aadhaarReverifyFlag\":\"false\",\"userName\":\"" + text10 + "\",\"passWord\":\"" + text11 + "\",\"cnfPassWord\":\"" + text11 + "\",\"dob\":\"" + text20 + "\",\"firstName\":\"" + text15 + "\",\"middleName\":\"" + text16 + "\",\"lastName\":\"" + text17 + "\",\"countryId\":\"94\",\"email\":\"" + text27 + "\",\"mobile\":\"" + text28 + "\",\"isdCode\":\"91\",\"occupation\":\"" + text24 + "\",\"gender\":\"" + text18 + "\",\"martialStatus\":\"" + text19 + "\",\"prefLanguage\":\"" + text14 + "\",\"nationalityId\":\"94\",\"address\":\"" + text30 + "\",\"street\":\"" + text31 + "\",\"area\":\"" + text32 + "\",\"pinCode\":\"" + text34 + "\",\"securityQuestion\":\"" + text12 + "\",\"securityAns\":\"" + text13 + "\",\"landlineNumber\":\"" + text28 + "\",\"registrationSource\":10,\"city\":\"" + text36 + "\",\"state\":\"" + text35 + "\",\"postOffice\":\"" + text37 + "\",\"idVerificationType\":99,\"copyAddressResToOff\":\"Y\"" + text7 + "}";
            num2 = 0L;
            do
            {
                isAPP = true;
                num2++;
                NgtHttplogin(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 10000, 10000, ref response, ref errormsg, ref Exception_, "IRCTCID");
            }
            while (response == "retry" && num2 < 3);
            if (!response.Contains("Invalid Captcha"))
            {
                break;
            }
            text9 = response.Substring(response.IndexOf("captchaQuestion") + 18);
            text6 = text9.Substring(0, text9.IndexOf("\""));
            Bitmap bitmap2 = (Bitmap)method_55(text6);
            if (bitmap2 != null)
            {
                frmCaptcha frmCaptcha3 = new frmCaptcha(this, cookie_, "", "");
                text8 = frmCaptcha3.SolveCaptcha(text6);
                frmCaptcha3.Dispose();
            }
            text7 = ",\"captcha\":\"" + text8 + "\"";
        }
        if (response.Contains("User Id  already exists"))
        {
            errMessage = "User Id  already exists, Try With Diffrent Details \r\n1. " + response;
            return "false";
        }
        if (response.Contains("Please enter valid details"))
        {
            errMessage = "Not Sucessfully User Account Created, Try With Diffrent Details \r\n1. " + response;
            return "false";
        }
        if (response.Contains("Registration limit exhausted for the day. Please try next day"))
        {
            MessageBox.Show("Daily id Creation Limit Reached For Your System, Save IP For More id Cration...");
            errMessage = "Not Sucessfully User Account Created, Try With Diffrent IP Details \r\n1. " + response;
            return "false";
        }
        if (response.IndexOf("registered successfully.") < 0)
        {
            errMessage = "Not Sucessfully User Account Created, Try With Diffrent Details \r\n1. " + response;
            return "false";
        }
        SQLiteConnection sQLiteConnection = new SQLiteConnection(string_44);
        SQLiteCommand sQLiteCommand = new SQLiteCommand();
        sQLiteConnection.Open();
        sQLiteCommand.Connection = sQLiteConnection;
        sQLiteCommand.CommandText = "INSERT INTO [TBL_USER]([UserName],[strPwd],[UserState]) VALUES('" + text10 + "', '" + text11 + "', 'Unverified||')";
        sQLiteCommand.ExecuteNonQuery();
        sQLiteConnection.Close();
        sQLiteCommand.Dispose();
        //class3_0.cuser = text10;
        //class3_0.cpass = text11;
        dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
        num2 = (long)(DateTime.UtcNow - dateTime).TotalMilliseconds;
        errMessage = response;
        return "true";
    }

    private string method_94_II(string A_1, string A_2)
    {
        string result = "";
        try
        {
            int startIndex = A_1.IndexOf(A_2 + "\"", StringComparison.CurrentCultureIgnoreCase);
            string text = A_1.Substring(startIndex);
            text = text.Substring(text.IndexOf(":[\"") + 3);
            result = HttpUtility.UrlEncode(text.Substring(0, text.IndexOf("\"")));
        }
        catch
        {
        }
        return result;
    }


    private bool NgtHttplogin(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _resp, ref string _error, ref WebException webEx, string _type)
    {
        if (!isAPP)
        {
            int num = 0;
            int num2 = 0;
            bool flag = false;
            bool flag2 = bool_21;
            long_0 = long_1;
            if (bool_21)
            {
                bool_21 = false;
            }
            dateTime_0 = DateTime.Now;
            bool flag4;
            bool flag5;
            bool result;
            do
            {
                bool flag3 = false;
                flag4 = false;
                flag5 = false;
                Stopwatch stopwatch = new Stopwatch();
                stopwatch.Start();
                _error = "";
                _resp = "";
                webEx = null;
                result = false;
                HttpWebResponse httpWebResponse = null;
                string text = "";
                try
                {
                    Uri requestUri = new Uri(_url);
                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUri);
                    ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                    ServicePointManager.Expect100Continue = false;
                    httpWebRequest.KeepAlive = true;
                    httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                    httpWebRequest.Proxy = webProxy_5;
                    httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                    httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                    httpWebRequest.Timeout = int_28;
                    httpWebRequest.ReadWriteTimeout = int_29;
                    httpWebRequest.CookieContainer = _cookie;
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.AllowAutoRedirect = false;
                    httpWebRequest.Connection = "keepalive";
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                    httpWebRequest.Headers.Add("bmirak", "webbm");
                    httpWebRequest.Headers.Add("sec-ch-ua", "\"Google Chrome\"; v = \"107\", \"Chromium\"; v = \"107\", \"Not=A?Brand\"; v = \"24\"");
                    httpWebRequest.Headers.Add("sec-ch-ua-mobile", "?0");
                    httpWebRequest.Headers.Add("sec-ch-ua-platform", "\"Windows\"");
                    httpWebRequest.Headers.Add("Origin", "https://www.irctc.co.in");
                    httpWebRequest.Headers.Add("Sec-Fetch-Site", "same-origin");
                    httpWebRequest.Headers.Add("Sec-Fetch-Mode", "cors");
                    httpWebRequest.Headers.Add("Sec-Fetch-Dest", "empty");
                    if (_url.Contains("secure.paytm.in/oltp-web/processTransaction") && _data.Contains("MSISDN"))
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*;q=0.8";
                        httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                        httpWebRequest.Headers.Set("Accept-Language", "en-GB,en-US;q=0.8");
                        httpWebRequest.Headers.Set("Origin", "null");
                    }
                    if (_type == "Bank")
                    {
                        httpWebRequest.Headers.Set("Accept-Language", "en-US,en;q=0.8");
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                    }
                    if (flag2)
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                        bool_21 = false;
                    }
                    if (_type.Contains("Plain"))
                    {
                        httpWebRequest.Accept = "application/json, text/plain, */*";
                        httpWebRequest.Headers.Add("Content-Language", "en");
                    }
                    else if (_type.Contains("text"))
                    {
                        httpWebRequest.Accept = "text/plain";
                    }
                    else if (_type.Contains("Java"))
                    {
                        httpWebRequest.Accept = "application/json";
                    }
                    if (!string.IsNullOrEmpty(class3_0._greq))
                    {
                        httpWebRequest.Headers.Add("greq", class3_0._greq);
                    }
                    if (_type.Contains("text"))
                    {
                        httpWebRequest.ContentType = "text/plain";
                    }
                    else if (_type.Contains("json"))
                    {
                        httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    }
                    else
                    {
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    }
                    if (url.Contains("https://www.irctc.co.in/eticketing/protected/mapps1/registerUser"))
                    {
                        httpWebRequest.ContentType = "application/json; charset=UTF-8";
                        httpWebRequest.Accept = "application/json, text/plain, */*";
                        httpWebRequest.Headers.Add("Content-Language", "en");
                    }
                    if (!string.IsNullOrEmpty(_reff))
                    {
                        httpWebRequest.Referer = _reff;
                    }
                    if (!string.IsNullOrEmpty(_data))
                    {
                        httpWebRequest.Method = "POST";
                        byte[] bytes = Encoding.UTF8.GetBytes(_data);
                        httpWebRequest.ContentLength = bytes.Length;
                        httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                    }
                    else
                    {
                        httpWebRequest.Method = "GET";
                    }
                    if (url.Contains("https://www.irctc.co.in/eticketing/protected/mapps1/logout"))
                    {
                        httpWebRequest.Method = "POST";
                        httpWebRequest.ContentType = "application/json; charset=utf-8";
                        httpWebRequest.Accept = "application/json, text/plain, */*";
                    }
                    httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                    if (flag3 && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num2 < 20)
                    {
                        Thread.Sleep(200);
                        num2++;
                        httpWebResponse.Close();
                        httpWebResponse = null;
                        continue;
                    }
                    if (bool_22)
                    {
                        dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                    }
                    if (bool_24)
                    {
                        string_29 = httpWebResponse.ResponseUri.ToString();
                    }
                    using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                    {
                        if (bool_64)
                        {
                            text = streamReader.ReadToEnd();
                        }
                        else
                        {
                            httpWebRequest.Abort();
                        }
                    }
                    if (httpWebResponse.Headers["csrf-token"] != null)
                    {
                        class3_0.token = httpWebResponse.Headers["csrf-token"];
                    }
                    if (bool_22)
                    {
                        dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                    }
                    _resp = text;
                    result = true;
                    stopwatch.Stop();
                    long_1 = stopwatch.ElapsedMilliseconds;
                    long_2 = (long_1 + long_0) / 2;
                    Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\nURL:" + _url + "\nPostData:" + _data + "\nReponse:" + _resp);
                }
                catch (WebException ex)
                {
                    WebException ex2 = (webEx = ex);
                    string text2 = "";
                    HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                    if (ex2.Response != null)
                    {
                        try
                        {
                            if (ex2.Response.Headers["csrf-token"] != null)
                            {
                                class3_0.token = ex2.Response.Headers["csrf-token"];
                            }
                            text2 = (_resp = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd());
                        }
                        catch
                        {
                        }
                        httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                    }
                    _error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + ex2.Message + "</ErrorCode>\t<ResponseCode>" + text2 + "</ResponseCode>";
                    method_74("WebRequestPost WebEx=\t", _error);
                    flag4 = true;
                    if (_error.Contains("The remote name could not be resolved") | _error.Contains("Unable to connect to the remote server"))
                    {
                        if (num < 3)
                        {
                            method_74("WebRequestPost Error ", "SERVICE UNAVAILABLE Rehit = " + num);
                            if (_error.ToUpper().Contains("SERVICEUNAVAILABLE"))
                            {
                                Thread.Sleep(2000);
                            }
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("The underlying connection was closed:"))
                    {
                        if (_error.Contains("An unexpected error occurred on a send"))
                        {
                            if (num < 3)
                            {
                                Thread.Sleep(400);
                            }
                            else
                            {
                                flag5 = true;
                            }
                        }
                        else if (_error.Contains("A connection that was expected to be kept alive was closed by the server") || _error.Contains("An unexpected error occurred on a receive"))
                        {
                            _resp = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                    {
                        if (num < 3)
                        {
                            Thread.Sleep(400);
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("The operation has timed out"))
                    {
                        _resp = "new:goahead";
                        _error = "The operation has timed out";
                        flag5 = true;
                    }
                    else if (_error.Contains("(401) Unauthorized"))
                    {
                        flag5 = true;
                    }
                    else if (_error.Contains("(406) Not Acceptable"))
                    {
                        _resp = "";
                        flag5 = true;
                    }
                    else if (_error.Contains("(400) Bad Request"))
                    {
                        flag5 = true;
                    }
                    else if (_error.Contains("(404) Not Found") | _error.Contains("(409) Conflict"))
                    {
                        flag5 = true;
                    }
                    else if (_error.Contains("(500) Internal Server Error"))
                    {
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("(502) Bad Gateway"))
                    {
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("(503) Server Unavailable"))
                    {
                        _resp = "";
                        _error = "A connection that was expected to be kept alive was closed by the server";
                        flag5 = true;
                    }
                    else if (_error.Contains("(504) Gateway Timeout"))
                    {
                        if (num < 6)
                        {
                            Thread.Sleep(1000);
                        }
                    }
                    else if (_error.Contains("A connection that was expected to be kept alive was closed by the server"))
                    {
                        Thread.Sleep(5000);
                    }
                    else if (_error.Contains("ProxyAuthenticationRequired"))
                    {
                        Thread.Sleep(500);
                    }
                    else
                    {
                        _resp = "new:goahead";
                        _error = "A connection that was expected to be kept alive was closed by the server";
                        flag5 = true;
                    }
                }
                catch (Exception ex3)
                {
                    _error = ex3.Message;
                    method_74("WebRequestPost Ex=\t", _error);
                }
                finally
                {
                    try
                    {
                        httpWebResponse?.Close();
                    }
                    catch
                    {
                    }
                }
            }
            while (!flag5 && (flag || flag4));
            return result;
        }
        return ConnectHttp_andriod(_url, _data, null, webProxy_5, ref _cookie, bool_63: true, bool_64: true, int_28, int_29, ref _resp, ref _error, ref webEx, _type);
    }

    public static string jsonData_SerialCity(string str, string what)
    {
        string result = "";
        try
        {
            string text = str.Substring(str.IndexOf(what) + 12);
            result = text.Substring(0, text.IndexOf("\""));
            return result;
        }
        catch
        {
        }
        return result;
    }
    private bool ConnectHttp_andriod(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (_Type_ == "IRCTCID")
        {
            bool_48 = false;
        }
        if (bool_21)
        {
            bool_21 = false;
        }
        if (_url.Contains("www.irctc") & (_Type_ != "Bank"))
        {
            _url = _url.Replace("www", "www.contents");
        }
        if (_url.Contains("validateUser?source=3"))
        {
            _url = _url.Replace("validateUser?source=3", "validateUser?source=1");
        }
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                RequestCachePolicy requestCachePolicy2 = (httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                RequestCachePolicy requestCachePolicy3 = requestCachePolicy2;
                RequestCachePolicy requestCachePolicy4 = requestCachePolicy3;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)requestCachePolicy4;
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.UserAgent = "IRCTC Rail Connect/4.2.5Android";
                httpWebRequest.Headers.Add("bmirak", "androidbm");
                if (_url.Contains("secure.paytm.in/oltp-web/processTransaction") && _data.Contains("MSISDN"))
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                    httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 7.0; SM-G925F Build/LMY47X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36";
                    httpWebRequest.Headers.Set("Accept-Language", "en-GB,en-US;q=0.8");
                    httpWebRequest.Headers.Set("Origin", "null");
                }
                if (_Type_ == "Bank")
                {
                    httpWebRequest.Headers.Set("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.Headers.Set("Accept-Language", "en-US,en-IN;q=0.9,en;q=0.8");
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 12; CPH2413 Build/SKQ1.220303.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.5481.153 Mobile Safari/537.36";
                    httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                }
                if ((_Type_ != "Bank") & (_Type_ != "pay"))
                {
                    httpWebRequest.Accept = "application/json; charset=UTF-8";
                    if (_Type_ != "Login")
                    {
                        httpWebRequest.Headers.Set("greq", greq);
                        httpWebRequest.Headers.Set("mup", mup);
                    }
                }
                if (_Type_ == "pay")
                {
                    httpWebRequest.UserAgent = "Dalvik/2.1.0 (Linux; U; Android 6.0.1; SM-J500F Build/MMB29M)";
                    httpWebRequest.AllowAutoRedirect = true;
                }
                if ((_Type_ == "validateUser") | (_Type_ == "GetTrain"))
                {
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Logincnf")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }
                if (_Type_ == "json")
                {
                    httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    httpWebRequest.Accept = "application/json; charset=UTF-8";
                    httpWebRequest.Headers.Add("content-language", "en");
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Plain135text")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                    httpWebRequest.Headers.Set("greq", greq);
                }
                if (_Type_ == "Login")
                {
                    httpWebRequest.Headers.Add("Authorization", "Basic " + _Authrization);
                    httpWebRequest.Accept = "*/*";
                    httpWebRequest.Headers.Add("content-language", "en-IN,en-GB;q=0.9,en;q=0.8");
                }
                if (_url.Contains("eticketing/protected/mapps1/registerUser"))
                {
                    httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                    httpWebRequest.Headers.Add("Content-Language", "en");
                }
                if (_url.Contains("eticketing/protected/mapps1/verifySMSeMailOTP/M?smsCode"))
                {
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                    httpWebRequest.Headers.Add("Content-Language", "en");
                }
                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                num++;
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The request could not be satisfied") && num < 6)
                {
                    Thread.Sleep(400);
                    continue;
                }
                if (text4.Contains("The remote server returned an error: (403) Forbidden") && num < 6)
                {
                    Thread.Sleep(400);
                    continue;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server") | text4.Contains("The request could not be satisfied"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                        goto IL_0e6e;
                    }
                    Thread.Sleep(1000);
                    continue;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                        continue;
                    }
                    goto IL_0e6e;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0e6e;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (num < 2)
                    {
                        int_28 = 60000;
                        Thread.Sleep(1000);
                        continue;
                    }
                    if (num < 4)
                    {
                        Thread.Sleep(1000);
                        continue;
                    }
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                    goto IL_0e6e;
                }
                if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                    goto IL_0e6e;
                }
                if (text4.Contains("The remote server returned an error: (403) Forbidden."))
                {
                    Thread.Sleep(1000);
                    continue;
                }
                if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0e6e;
            IL_0e6e:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }


    public static long TimeDifference(string time_start, string time_end)
    {
        TimeSpan duration = DateTime.Parse(time_end).Subtract(DateTime.Parse(time_start));
        return duration.Ticks / TimeSpan.TicksPerMillisecond;
    }


    private async Task<bool> ConnectHttp_Task0(string _url, string _data, string _reff, WebProxy webProxy_5, bool bool_63, bool bool_64, int int_28, int int_29, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        if (_url.Contains("www.irctc") & (_Type_ != "Bank"))
        {
            _url = _url.Replace("www", "www.contents");
        }
        if (_url.Contains("validateUser?source=3"))
        {
            _url = _url.Replace("validateUser?source=3", "validateUser?source=1");
        }
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            errormsg = "";
            response = "";
            Exception_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy cachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = cookie_;
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.UserAgent = "IRCTC Rail Connect/4.2.1Android";
                httpWebRequest.Headers.Add("bmirak", "androidbm");
                if (_url.Contains("secure.paytm.in/oltp-web/processTransaction") && _data.Contains("MSISDN"))
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                    httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 7.0; SM-G925F Build/LMY47X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36";
                    httpWebRequest.Headers.Set("Accept-Language", "en-GB,en-US;q=0.8");
                    httpWebRequest.Headers.Set("Origin", "null");
                }
                if (_Type_ == "Bank")
                {
                    httpWebRequest.Headers.Set("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.Headers.Set("Accept-Language", "en-US,en-IN;q=0.9,en;q=0.8");
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 12; CPH2413 Build/SKQ1.220303.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.5481.153 Mobile Safari/537.36";
                    httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                }
                if ((_Type_ != "Bank") & (_Type_ != "pay"))
                {
                    httpWebRequest.Accept = "application/json; charset=UTF-8";
                    if (_Type_ != "Login")
                    {
                        httpWebRequest.Headers.Set("greq", greq);
                        httpWebRequest.Headers.Set("mup", mup);
                    }
                }
                if (_Type_ == "pay")
                {
                    httpWebRequest.UserAgent = "Dalvik/2.1.0 (Linux; U; Android 6.0.1; SM-J500F Build/MMB29M)";
                    httpWebRequest.AllowAutoRedirect = true;
                }
                if ((_Type_ == "validateUser") | (_Type_ == "GetTrain"))
                {
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Logincnf")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }
                if (_Type_ == "json")
                {
                    httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    httpWebRequest.Accept = "application/json; charset=UTF-8";
                    httpWebRequest.Headers.Add("content-language", "en");
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Plain135text")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                    httpWebRequest.Headers.Set("greq", greq);
                }
                if (_Type_ == "Login")
                {
                    httpWebRequest.Headers.Add("Authorization", "Basic " + _Authrization);
                    httpWebRequest.Accept = "*/*";
                    httpWebRequest.Headers.Add("content-language", "en-IN,en-GB;q=0.9,en;q=0.8");
                }
                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)(await httpWebRequest.GetResponseAsync());
                if ((httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                response = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + response);
                return result;
            }
            catch (WebException exception_)
            {
                WebException ex = (Exception_ = exception_);
                string text3 = "";
                string text4 = ex.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
                        if (ex.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex.Response).StatusCode;
                }
                response = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return result;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        response = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        response = "retry";
                    }
                    goto IL_12cd;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        response = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        response = "retry";
                        continue;
                    }
                    response = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        response = "new:retry";
                    }
                    goto IL_12cd;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    response = "retry";
                    goto IL_12cd;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    response = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        response = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    response = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    response = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    response = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    response = text3;
                    response = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text7 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text7 = text7.Substring(text7.IndexOf("->") + 3);
                            text7 = text7.Substring(0, text7.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text7, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    response = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    response = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    response = "retry";
                    response = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    response = "retry";
                    response = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    response = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    response = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    response = "new:goahead";
                }
                goto IL_12cd;
            IL_12cd:
                errormsg = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", errormsg);
                return result;
            }
            catch (Exception ex3)
            {
                Exception ex2 = ex3;
                errormsg = ex2.Message;
                method_74("WebRequestPost Ex=\t", errormsg);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }

    string myMethod(int length)
    {
        StringBuilder myGuidLikeString = new StringBuilder();
        while (myGuidLikeString.Length < length)
        {
            myGuidLikeString.Append(Guid.NewGuid().ToString().Replace("-", ""));
        }
        return myGuidLikeString.ToString(0, length);
    }

    static string DecodeEncodedNonAsciiCharacters(string value)
    {
        return Regex.Replace(
               value,
               @"\\u(?<Value>[a-zA-Z0-9]{4})",
               m =>
               {
                   return ((char)int.Parse(m.Groups["Value"].Value, NumberStyles.HexNumber)).ToString();
               });
    }

    public static string EncodeToBase(long nIn, int nBase)
    {
        long n = nIn / nBase;
        char c = "0123456789abcdefghijklmnopqrstuvwxyz"[(int)(nIn % nBase)];
        return n > 0 ? EncodeToBase(n, nBase) + c : c.ToString();
    }


    public static string Encrypt(string data)
    {
        List<char> datalist = new List<char>();
        char[] w = data.Reverse().ToArray();
        for (int i = 0; i < w.Length; i++)
        {
            datalist.Add((char)(w[i] + encryptionIndexes[i % encryptionIndexes.Length]));
        }
        return Convert.ToBase64String(datalist.Select(c => (byte)c).ToArray());
        //return HttpUtility.UrlEncode(datalist);
    }

    public static string Decrypt(string data)
    {
        byte[] w = Convert.FromBase64String(data);
        List<char> datalist = new List<char>();
        for (int i = 0; i < w.Length; i++)
        {
            datalist.Add((char)(w[i] - encryptionIndexes[i % encryptionIndexes.Length]));
        }
        datalist.Reverse();
        return new string(datalist.ToArray());
    }
    internal bool _Request(string string_86, string string_87, string string_88, WebProxy webProxy_5, ref CookieContainer cookieContainer_2, bool bool_63, bool bool_64, int int_28, int int_29, ref string string_89, ref string string_90, ref WebException webException_1)
    {
        int num = 0;
        int num2 = 0;
        bool flag = false;
        string text = "";
        if (!string.IsNullOrEmpty(string_71))
        {
            text = string_71;
        }
        if (string_87 == null)
        {
            string_87 = "";
        }
        int num3;
        while (true)
        {
            string_90 = "";
            string_89 = "";
            webException_1 = null;
            num3 = 0;
            //Lock(string_21 + " Getting html in= " + string_86 + "\t Post:" + string_87);
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            int num4 = ((string_86.IndexOf("https://www.irctc.co.in", StringComparison.CurrentCultureIgnoreCase) == 0 || string_86.IndexOf("http://www.irctc.co.in", StringComparison.CurrentCultureIgnoreCase) == 0) ? 1 : 0);
            try
            {
                ServicePointManager.Expect100Continue = false;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(string_86);
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                if (flag)
                {
                    httpWebRequest.Proxy = clsMain.webProxy_0;
                    flag = false;
                }
                string_52 = "Tls12";
                ServicePointManager.ServerCertificateValidationCallback = (object object_0, X509Certificate x509Certificate_0, X509Chain x509Chain_0, SslPolicyErrors sslPolicyErrors_0) => true;
                HttpRequestCachePolicy cachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0));
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                if ((string_52 == "Tls") | (string_52 == "Ssl3"))
                {
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls;
                }
                else if (string_52 == "Tls12")
                {
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                }
                if (int_28 > 0)
                {
                    httpWebRequest.Timeout = int_28;
                }
                if (int_29 > 0)
                {
                    httpWebRequest.ReadWriteTimeout = int_29;
                }
                byte[] bytes = Encoding.UTF8.GetBytes(string_87);
                if (bool_63 && cookieContainer_2 == null)
                {
                    cookieContainer_2 = new CookieContainer();
                }
                httpWebRequest.CookieContainer = cookieContainer_2;
                bool flag2;
                if (flag2 = string_87.Length > 0)
                {
                    httpWebRequest.Method = "POST";
                }
                else if (bool_15)
                {
                    httpWebRequest.Method = "POST";
                    bool_15 = false;
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                if (bool_40)
                {
                    httpWebRequest.Method = "PUT";
                    bool_40 = false;
                }
                else if (bool_41)
                {
                    httpWebRequest.Method = "DELETE";
                    bool_41 = false;
                }
                httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.ContentLength = bytes.Length;
                httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36";
                if (string_86.Contains(".paytm.in"))
                {
                    ServicePointManager.Expect100Continue = false;
                    if (bool_13)
                    {
                        bool_13 = false;
                        if (string_86.Contains("https://securegw.paytm.in/instaproxy/bankresponse/ICICIPAY/DC"))
                        {
                            httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                            httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                        }
                        else if (bool_14)
                        {
                            bool_14 = false;
                            httpWebRequest.Headers.Add("sec-ch-ua-mobile", "?0");
                            httpWebRequest.Headers.Add("Cache-Control", "max-age=0");
                            httpWebRequest.Headers.Add("sec-ch-ua-platform", "\"Windows\"");
                            httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                            httpWebRequest.Headers.Add("Sec-Fetch-User", "?1");
                            httpWebRequest.Headers.Add("Sec-Fetch-Dest", "document");
                            httpWebRequest.Headers.Add("Sec-Fetch-Site", "cross-site");
                            httpWebRequest.Headers.Add("Sec-Fetch-Mode", "navigate");
                            httpWebRequest.Headers.Add("sec-ch-ua", "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\"");
                            httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                            httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                            httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                        }
                        else if (!string_86.Contains("https://securegw.paytm.in/instaproxy/direct/payment/payonbank/v2"))
                        {
                            httpWebRequest.ContentType = "application/json";
                            httpWebRequest.Accept = "*/*";
                        }
                        httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                    }
                    else
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                        httpWebRequest.Headers.Add("Accept-Language", "en-IN,en-US;q=0.9,en;q=0.8");
                        httpWebRequest.Headers.Add("accept-encoding", "gzip, deflate");
                        httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                        httpWebRequest.Headers.Add("Cache-Control", "max-age=0");
                    }
                }
                if (string_86.ToLower().Contains("irctc.co.in"))
                {
                    httpWebRequest.AllowWriteStreamBuffering = false;
                }

                if (bool_51)
                {
                    bool_51 = false;
                    httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.Headers.Add("Cache-Control", "max-age=0");
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                }
                else if (string_86.ToLower().Contains("irctc.co.in") && !bool_21)
                {
                    httpWebRequest.Headers.Add("X-Requested-With", "XMLHttpRequest");
                }
                if (bool_21)
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                    httpWebRequest.Headers.Add("faces-request", "partial/ajax");
                    if (webProxy_5 != null)
                    {
                        httpWebRequest.Headers.Add("Cache-Control", "no-cache");
                        httpWebRequest.Headers.Add("Pragma", "no-cache");
                    }
                    bool_21 = false;
                }
                if (bool_23)
                {
                    httpWebRequest.ServicePoint.BindIPEndPointDelegate = method_76;
                }

                if (string_86.IndexOf("axisbiconnect", StringComparison.CurrentCultureIgnoreCase) > 0)
                {
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)";
                }
                if (string_86.IndexOf("middleware/MWServlet", StringComparison.CurrentCultureIgnoreCase) > 0)
                {
                    httpWebRequest.UserAgent = "Apache-HttpClient/android/" + string_88;
                    httpWebRequest.Connection = "keepalive";
                    httpWebRequest.Headers.Add("Cookie2", "$Version=" + 1);
                }
                if (bool_30)
                {
                    httpWebRequest.AllowAutoRedirect = false;
                    bool_30 = false;
                }
                else if (num4 != 0)
                {
                    httpWebRequest.AllowAutoRedirect = false;
                    httpWebRequest.Headers.Add("X-Priority", "5");
                    httpWebRequest.Headers.Add("x-msg-priority", "9");
                }
                if (bool_29)
                {
                    bool_29 = false;
                    httpWebRequest.ContentType = "application/json;charset=UTF-8";
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                    httpWebRequest.ContentType = "application/json";
                    httpWebRequest.Accept = "*/*";
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.5");
                }
                if (bool_36)
                {
                    httpWebRequest.ContentType = "application/json";
                    bool_36 = false;
                    if (bool_37)
                    {
                        bool_37 = false;
                        httpWebRequest.Headers.Add("browserName", "Chrome");
                        httpWebRequest.Headers.Add("internalIp", "192.168.1.2");
                        httpWebRequest.Headers.Add("assignedClientId", "null");
                        httpWebRequest.Headers.Add("osVersion", "Windows 7");
                        httpWebRequest.Headers.Add("clientId", "Web");
                        httpWebRequest.Headers.Add("deviceId", "null");
                        httpWebRequest.Headers.Add("browserVersion", "27.0.1453.116");
                        httpWebRequest.Headers.Add("userMachineIdentifier", "JNDF");
                        httpWebRequest.Headers.Add("appVersion", "null");
                    }
                    if (string_86.Contains("airtelmoney.in"))
                    {
                        httpWebRequest.Accept = "application/json";
                    }
                }

                if (bool_38)
                {
                    httpWebRequest.ContentType = "application/json;charset=UTF-8";
                    httpWebRequest.UserAgent = "Dalvik/2.1.0 (Linux; U; Android 5.1; A1601 Build/LMY47I";
                    httpWebRequest.Accept = "";
                    bool_38 = false;
                }
                if (string_86.Contains("https://checkout.razorpay.com/integration/irctc"))
                {
                    httpWebRequest.AllowAutoRedirect = true;
                }

                if (string_86.Contains("merchant.onlinesbi.sbi"))
                {
                    httpWebRequest.CachePolicy = cachePolicy;
                    httpWebRequest.Headers.Add("sec-ch-ua", "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"");
                    httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                }
                if (string_86.Contains("ecomVerifyOtp.action"))
                {
                    httpWebRequest.ContentType = "application/json";
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                }
                if (string_86.Contains("ecomSendOtp.action") || string_86.Contains("ecomDoTxn.action"))
                {
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                    httpWebRequest.Headers.Add("version", "4.0");
                }
                if (string_86.Contains("www.airtel.in/bank/api/v1/auth/login/mpin"))
                {
                    httpWebRequest.ContentType = "application/json";
                    httpWebRequest.Accept = "application/json, text/plain, *";
                    httpWebRequest.Headers.Add("version", "4.0");
                    httpWebRequest.Headers.Add("channel", "WEB");
                }

                if (!string.IsNullOrEmpty(text))
                {
                    string[] array = Strings.Split(text, "&");
                    int num5 = Information.UBound(array);
                    for (int i = 0; i <= num5; i++)
                    {
                        string[] array2 = Strings.Split(array[i], "=");
                        httpWebRequest.Headers.Set(array2[0], array2[1]);
                    }
                    string_71 = "";
                }
                if (!string.IsNullOrEmpty(string_88))
                {
                    httpWebRequest.Referer = string_88;
                }
                if (flag2)
                {
                    //httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                    using (Stream stream = httpWebRequest.GetRequestStream())
                    {
                        stream.Write(bytes, 0, bytes.Length);
                    }
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (num4 != 0 && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num2 < 20)
                {
                    Thread.Sleep(200);
                    num2++;
                    //text2 = (string_5 = httpWebResponse.GetResponseHeader("Location"));
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                string string_91 = "";
                method_96(httpWebResponse, ref string_91);

                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                string_89 = text2;
                num3 = 1;
                Lock("Getting Html out= " + text2);
                break;
            }
            catch (WebException ex)
            {
                num3 = 0;
                webException_1 = ex;
                string message = ex.Message;
                bool flag3 = ex.Response != null;
                string text3 = "";
                num++;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (flag3)
                {
                    httpStatusCode = ((HttpWebResponse)ex.Response).StatusCode;
                    try
                    {
                        text3 = ":" + new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
                    }
                    catch
                    {
                    }
                }
                string_90 = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + message + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=", string_90);
                if (num >= 9)
                {
                    break;
                }
                if (message.Contains("The remote name could not be resolved") | message.Contains("Unable to connect to the remote server"))
                {
                    if (!message.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(1000);
                        break;
                    }
                    Thread.Sleep(2000);
                }
                else if (message.Contains("The underlying connection was closed:"))
                {
                    if (!message.Contains("An unexpected error occurred on a send") && !message.Contains("A connection that was expected to be kept alive was closed by the server"))
                    {
                        message.Contains("An unexpected error occurred on a receive");
                    }
                    if (num % 2 == 0)
                    {
                        string_52 = "Tls12";
                    }
                    if (num == 3 || num == 4)
                    {
                        flag = true;
                    }
                    if (num >= 5)
                    {
                        break;
                    }
                }
                else if (message.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    if (num % 2 == 0)
                    {
                        string_52 = "Tls12";
                    }
                    if (num == 3 || num == 4)
                    {
                        flag = true;
                    }
                    if (num >= 5)
                    {
                        break;
                    }
                }
                else if (message.Contains("The operation has timed out"))
                {
                    if (num >= 5)
                    {
                        break;
                    }
                }
                else if (message.Contains("(406) Not Acceptable") || message.Contains("(401) Unauthorized") || message.Contains("(400) Bad Request") || (message.Contains("(404) Not Found") | message.Contains("(409) Conflict")) || (!message.Contains("(500) Internal Server Error") && !message.Contains("(502) Bad Gateway") && !message.Contains("(503) Server Unavailable") && !message.Contains("(504) Gateway Timeout")))
                {
                    break;
                }
            }
            catch (Exception ex2)
            {
                num3 = 0;
                string_90 = ex2.Message;
                method_74("WebRequestPost Ex=", string_90 + "  hitUrl" + string_86 + "  Inp=" + string_87 + " Ref=" + string_88 + " reHitCount=" + num);
                if (num < 3 && string_90.Contains("String reference not set to an instance"))
                {
                    string_90 = "";
                    num++;
                    continue;
                }
                break;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
        return num3 != 0;
    }

    internal string IRCTCOCR(string base64)
    {
        try
        {

            string URI = "http://185.172.64.80/home/IRCTCOCRO";
            string myParameters = "base64=" + HttpUtility.UrlEncode(base64);
            using (WebClient wc = new WebClient())
            {
                wc.Headers[HttpRequestHeader.ContentType] = "application/x-www-form-urlencoded";
                string HtmlResult = wc.UploadString(URI, myParameters);
                return HtmlResult;
            }
        }
        catch
        {
            string htmlResults = "";
            return htmlResults;
        }

    }




    private bool IRCTC_Disha(Control control_2, Rectangle rectangle_1, string TktName, string string_87, string string_88, string tCntrlName, ref string string_90, bool bool_63, bool bool_64, bool bool_65, int int_Slot, UpdateTStatus updTStatus, string string_91)
    {
        bool emailotp = false;
        //Chrome_Create_First_Disha("https://irctc.corover.ai/", 0);
        //Chrome_Create_First_Disha("https://irctc.corover.ai/", 0);
        string PNRTIME = "";
        //string PNRTIME = "";
        //string paymenthold = "";
        bool validateid = false;
        string base64qrcode = "iVBORw0KGgoAAAANSUhEUgAAAeAAAAHgAQAAAABVr4M4AAADeklEQVR42u2cPXbqQAyFxaFI6SWwFJZmL42lsARKCg6KZ/Q7wEuTaF5zXTnGnysd5V6NJOJfXAQYMOBP8IPsOj1ovRGd23N/ytcjb3To79KR+eavr4ABT4BXjdSTEOf7/p3979uBL1/M1/3Rwv2W5SnL1wEDngK3eP1iIXpstyjeFnlrj23mZwT//km9BQx4Jqy3e77ViL+QKAdLyBrxgAH/B5h3DSCvNTmwPHuYW8TvCbkrA8CA58KmDLgn2bOKhJZ67+G7Av4sKwADLoEHX9XV6k+3P5kywID/GE6Xhvk95MB+a76K+u36z5IWYMAFsJaiJLM2OeDC9dn0Qru0KtUtVku9d/0OYMD1sJai7LemSyl5/dFXqdvqxQDAgOth+2+ffBWLHOhqlUZlyx9MGWDARbAQJPWnnmSTgxKYlle3JcEPGPAEWOSAvMY5oC8iEhK8akIGDHgK3JRBiFHVpfzwY1AzU+K2rJSaagaAAdfCNISumSmKKA7bnwpUgAGXw37KKb+Rh+4tiQQvUNnxVBRNAQMuhgdfpb+ZSDj52b2V9wfhChhwJewnSlJp4mgLPVg/SXNbFwtol7MrYMATYFcG3Fvw+mtHaxa1Y/yuF/xMKvsqwIDrYCXIbZP313utSrtMvOs+jpwAA66FtegUJ6LWaq+Efr2fiKYD+wdgwBPgFLrJNsmJ6FkKVGl8yeCrq17AgEthTb2pFzSZqdzWnIQrYMBT4Ajd+MefR5JoeOrFAAYMeBqcSlHqq7rXJ3prwFdlSy9jJIABV8Dh6q9j5wj5xCe/lfdTxRUw4EI4tYsk2085islSr9b/TdkCBlwNKxGxTbat4VOHsybksP2AAVfCQ5LdYu1NWjGSepmHshVgwNWw9tfHxJyf0kfnU4p4TvVTwICr4Rgy7kWn1Nacavo+s7TZ0wdgwBNgtok5ybepQ/TpvoqHY3yvqgIGXA/bckXNt772xiUq2RQyxU5GAgx4Cpx2OJA0i9okiA+FpEEljs49wICr4WEDjs8sxSqmWDFiDfi29A4w4Alw2l27xhpQelsO6jsZc2wDBlwMp921SaKOu5rIRILkZsCAZ8M6hzSsVh40rO8gyYNKgAHPgkPF2hTyaTh92nJVFTDgCfC4u9aqUjH8mbMw65ETYMBz4OyrlojtFzOl7XppESNgwOXwLy7AgAH/NfwNbCnxiptXUPUAAAAASUVORK5CYII=";
        bool qrpayment = false;
        try
        {
            paymenthold = PaymentHold();
        }
        catch
        {
            paymenthold = "20000#500#40000#http://185.172.64.80/home/dishaocr#Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36#false#1000#true";
        }
        //string paymenthold = PaymentHold();
        string[] arrayP = paymenthold.Split(new string[1] { "#" }, StringSplitOptions.None);
        int paymentholdd = Convert.ToInt32(arrayP[0]);
        int captchahold = Convert.ToInt32(arrayP[1]);
        int hashhold = Convert.ToInt32(arrayP[2]);
        string DISHAOCR = arrayP[3];
        string useragent = arrayP[4];
        validateid = Convert.ToBoolean(arrayP[5]);
        int paxhold = Convert.ToInt32(arrayP[6]);
        bool bypass = Convert.ToBoolean(arrayP[7]);
        bool result = false;
        isPremium_p = false;
        TktName_ = TktName;
        dictionary_header = new Dictionary<string, string>();
        updateTStatus_0 = updTStatus;
        string text = "";
        string text2 = "";
        string text3 = "";
        string key = "";
        control_0 = control_2;
        Control control = control_2.Controls[0];
        control_1 = control_2.Controls[0];
        rectangle_0 = rectangle_1;
        string[] array = new string[1];
        bool flag = false;
        string[] array2 = string_88.Split(new string[1] { "||" }, StringSplitOptions.None);
        string text4 = "";
        double num = 0.0;
        bool flag2 = false;
        new List<Class27>();
        bool flag3 = false;
        minmPsgnInputTime2 = 20000.0;
        minmPsgnInputTime4 = 25000.0;
        minmPsgnInputTime6 = 30000.0;
        minmPaymentTime = 21060.0;
        string[] array3 = string_90.Split(new string[1] { "-.-" }, StringSplitOptions.RemoveEmptyEntries);
        string_90 = "";
        string[] array4 = array3[1].Split(new string[1] { "-+-" }, StringSplitOptions.RemoveEmptyEntries);
        if (!string.IsNullOrEmpty(string_87))
        {
            array = string_87.Split(new string[1] { "||" }, StringSplitOptions.None);
            if (array.Length > 2)
            {
                if (string_56.Length < 1)
                {
                    string_56 = array[2];
                }
                int.TryParse(array[3], out int_3);
                if (int_3 < 2)
                {
                    int_3 = 2;
                }
                int_3 *= 2;
                NetworkInterface_(array[4]);
            }
        }
        class3_0 = new clsPostData();
        class3_0.LoginType = (isAPP ? "APP" : "WEB");
        LoginType = class3_0.LoginType;
        class3_0.DISHAOCR = DISHAOCR;
        isAPP = true;
        if (!class3_0.ReadDataFromDB(TktName))
        {
            updTStatus?.BeginInvoke(53, "Error Occured while Reading Saved Ticket! ", tCntrlName, null, null);
            return result;
        }
        method_CheckForAdvance();
        if (class3_0.dateTime_1 < new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day))
        {
            updTStatus?.BeginInvoke(53, "Date of Journey cannot less than Today!", tCntrlName, null, null);
            return result;
        }
        string text5 = smethod_10(class3_0.BANKSAVEAS);
        class3_0.IRCTC_ID = array2[0];
        class3_0.IRCTC_PWD = array2[1];
        if (array2.Length >= 3 && array2[2] != null)
        {
            if (array2[2] != class3_0.TKT_QUOTA)
            {
                class3_0.TKT_QUOTA = array2[2];
            }
            if (array2[3] != class3_0.TKT_CLASS)
            {
                class3_0.TKT_CLASS = array2[3];
            }
            if (array2.Length > 4 && array2[4] != null && !string.IsNullOrEmpty(array2[4]))
            {
                class3_0.SRC_STN = array2[4];
                class3_0.DEST_STN = array2[5];
                class3_0.TRAIN_NO = array2[6];
            }
        }
        class3_0.string_3 = class3_0.method_2(class3_0.IRCTC_ID);
        clsPostData clsPostData2 = class3_0;
        clsPostData2.BANKSAVEAS = ((ComboBox)control.Controls["cboGateway"]).SelectedItem.ToString();
        clsPostData2.BANKDETAILS = clsPostData2.dictionary_BnkData[clsPostData2.BANKSAVEAS];
        webProxy_2 = null;
        try
        {
            string[] array5 = class3_0.BANKSAVEAS.Split(new string[1] { "_" }, StringSplitOptions.None);
            class3_0.upiid = array5[1];
            if ((array5[0] == "AIRTELMONEY") | (array5[0] == "iMudra"))
            {
                string[] array6 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                if (array5[0] == "iMudra")
                {
                    string value = "0";
                    if (!dictionary_8.ContainsKey(class3_0.BANKSAVEAS))
                    {
                        dictionary_8.Add(class3_0.BANKSAVEAS, value);
                        frmOTP frmOTP2 = new frmOTP();
                        frmOTP2.method_1(control_0, rectangle_0, false, "iMudra", class3_0.BANKSAVEAS);
                        if (frmOTP2.DialogResult != DialogResult.OK)
                        {
                            updTStatus.BeginInvoke(2, "iMudra OTP Not Found", tCntrlName, null, null);
                            return false;
                        }
                        value = frmOTP2.string_0;
                        dictionary_8.Remove(class3_0.BANKSAVEAS);
                        dictionary_8.Add(class3_0.BANKSAVEAS, value);
                        frmOTP2.Dispose();
                    }
                }
                long num2 = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
            }
            if (array3.Length > 5)
            {
                num = Conversion.Val(array3[5].Trim());
                if (num <= 0.0)
                {
                    num = 0.0;
                }
            }
            if (num <= 0.0 && dictionary_4.ContainsKey(TktName))
            {
                num = dictionary_4[TktName];
            }
        }
        catch
        {
        }
        string string_92 = "";
        string text6 = "\r\n\r\nTrainNo: " + class3_0.TRAIN_NO + " Form: " + class3_0.SRC_STN + " To: " + class3_0.DEST_STN + "\r\n\r\nNo. of Passengers: " + class3_0.list_0.Count + " Name of First Pax: " + class3_0.list_0[0].string_0;
        string environmentVariable = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
        text4 = "Pax: " + class3_0.list_0[0].string_0 + ((class3_0.list_0.Count > 1) ? (" and (" + (class3_0.list_0.Count - 1) + ") Others") : "");
        updateTStatus_1 = updTStatus;
        tCntrlName_ = tCntrlName;
        if (class3_0.method_0())
        {
            bool_ptSL = true;
        }
        Method_GetBookingHRS();
        if (!class3_0.TKT_ISADV & !class3_0.bool_1)
        {
            int_AvlHRS = 4;
            int_BookHRS = 5;
        }
        if (!Chrome_Found)
        {
            if (!isAPP)
            {
                string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                folderPath = Path.Combine(folderPath, "Google\\Chrome\\User Data\\Default");
                if (!Directory.Exists(folderPath))
                {
                   // Chrome_CloseSetup();
                    Thread.Sleep(2000);
                    //getandclearD();
                    MessageBox.Show("Apke Chrome Ki Setting Sahi Nahi Hai Jis Wajah Se AAp Web Login Nahi kar Paa rahe Hai Apse Request Hai ki Chrome ko control panel se jakar Uninstall kare aur fir new file download karke use install kare fir software restart kare...");
                    updTStatus?.BeginInvoke(2, "ReInstall Chrome and Restart GADAR", tCntrlName, null, null);
                    return false;
                }
            }

        }
        if (class3_0.BRD_STN.ToUpper() == class3_0.DEST_STN.ToUpper())
        {
            updTStatus?.BeginInvoke(2, "Invalid Boarding_Station!", tCntrlName, null, null);
            return result;
        }
        object obj2 = object_4;
        lock (obj2)
        {
            //if (list_IrctcID.Contains(class3_0.IRCTC_ID))
            //{
            //	updTStatus?.BeginInvoke(2, "Current IRCTC-ID Already Used, Change It.", tCntrlName, null, null);
            //	return result;
            //}
            //list_IrctcID.Add(class3_0.IRCTC_ID);
        }
        obj2 = object_6;
        lock (obj2)
        {
            if (dictionary_2.ContainsKey(TktName))
            {
                dictionary_2[TktName]++;
                int_Pair = dictionary_2[TktName];
            }
            else
            {
                dictionary_2.Add(TktName, 1);
                Interlocked.Increment(ref int_4);
                int_Pair = dictionary_2[TktName];
            }
        }
        dictionary_TimeP = new Dictionary<string, string>();
        if (class3_0.TKT_QUOTA.ToUpper() == "CK")
        {
            class3_0.TKT_QUOTA = "TQ";
        }
        if (int_Pair == 1 && class3_0.BANKSAVEAS.Split('_')[0].Contains("AIRTELMONEY") && !dictionary_7.ContainsKey(class3_0.BANKSAVEAS))
        {
            string environmentVariable2 = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
            if (dictionary_7.ContainsKey(class3_0.BANKSAVEAS))
            {
                dictionary_7.Remove(class3_0.BANKSAVEAS);
            }
            dictionary_7.Add(class3_0.BANKSAVEAS, environmentVariable2);
        }
        
        response = "";
        Exception_ = new WebException();
        try
        {
            Lock("Ticket " + TktName + " Started Pair " + int_Pair);
            bool flag4 = false;
            if ((class3_0.TKT_QUOTA == "CK" || class3_0.TKT_QUOTA == "PT" || class3_0.TKT_QUOTA == "TQ") && class3_0.dateTime_1 > DateTime.Now)
            {
                flag4 = true;
            }
            if (DateTime.Now.Hour != 9 || !bool_ptSL || !flag4 || MessageBox.Show("For Non-AC Classes, Tatkal will open at 11Am\r\n\r\nDo you want to Continue?", "Non AC", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) != DialogResult.No)
            {
                if (DateTime.Now.Hour == 7 && DateTime.Now.Minute >= 30 && !class3_0.bool_opening && !flag4 && (class3_0.dateTime_1 - DateTime.Now).TotalDays >= 10.0 && MessageBox.Show("Is it Opening Ticket? If it is then Click YES.\r\n\r\nKya ye Opening ki Ticket he? agar haan to YES Click karen.", "Opening Ticket", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    int_AvlHRS = 7;
                    int_BookHRS = 8;
                    class3_0.bool_opening = true;
                    class3_0.TKT_ISADV = true;
                }
                int second = 0;
                int minute = 45;
                if (class3_0.bool_opening && DateTime.Now.Hour > 7)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.bool_AC_TQ && DateTime.Now.Hour > 9)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.bool_SL_TQ && DateTime.Now.Hour > 10)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.TKT_ISADV)
                {
                    int num3 = (int)new TimeSpan(new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_AvlHRS, minute, second, 0).Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                    if (num3 > 0)
                    {
                        Random random = new Random();
                        int num4 = random.Next(10, 59000);
                        DateTime dateTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_AvlHRS, minute, second, 0);
                        dateTime = dateTime.AddMilliseconds(num4);
                        updTStatus.BeginInvoke(1, "Waiting till " + int_AvlHRS + ":" + dateTime.Minute.ToString("00") + ":" + dateTime.Second + " AM", tCntrlName, null, null);
                        Application.DoEvents();
                        num3 += num4;
                        if (num3 > 5)
                        {
                            Thread.Sleep(num3);
                        }
                    }
                }
                else
                {
                    Thread.Sleep(int_Pair * 450);
                }
                Lock("Ready Login=" + class3_0.IRCTC_ID);
                int hour = DateTime.Now.Hour;
                int minute2 = DateTime.Now.Minute;
                int second2 = DateTime.Now.Second;
                string[] array7 = string_91.Split(new string[1] { "#" }, StringSplitOptions.None);
                if (array7.Length > 1 && array7[1] != "" && array7[2] != "")
                {
                    AC_AvailibalityTime = int.Parse(array7[1]);
                    SL_AvailibalityTime = int.Parse(array7[2]);
                }
                string text7 = array7[0];
                if (!string.IsNullOrEmpty(text7) && int_Slot > 2)
                {
                    try
                    {
                        string[] array8 = text7.Split(new string[1] { "||" }, StringSplitOptions.None);
                        if (array8.Length > 3)
                        {
                            Proxy_ = new WebProxy(array8[0].Trim(), int.Parse(array8[1].Trim()));
                            Proxy_.BypassProxyOnLocal = true;
                            Proxy_.Credentials = new NetworkCredential(array8[2].Trim(), array8[3].Trim());
                            Lock("\n\n\nProxy=" + array8[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        method_74("Creating Proxy", ex.Message);
                        updTStatus?.BeginInvoke(2, "IP Issue, Try Another slot!", tCntrlName, null, null);
                        return false;
                    }
                }
                if (bypass)
                {
                    try
                    {
                        updTStatus?.BeginInvoke(7860, "Processing Disha Bypass...", tCntrlName, null, null);
                        string text15 = FetchMail(class3_0.IRCTC_ID, class3_0.IRCTC_PWD, updTStatus , tCntrlName);
                        if (text15=="False")
                        {
                            return false;
                        }
                        string[] rupay = text15.Split(new string[1] { "#" }, StringSplitOptions.None);

                        emailotp = Convert.ToBoolean(rupay[2]);
                        
                        if (emailotp)
                        {
                            string[] rupayy = rupay[0].Split(new string[1] { "@" }, StringSplitOptions.None);
                            emailp1 = rupayy[0];
                            emailp2 = rupayy[1];
                            updTStatus?.BeginInvoke(1, "Bypass Sucessfull", tCntrlName, null, null);
                            Thread.Sleep(2000);
                        }
                        else
                        {
                            updTStatus?.BeginInvoke(1, "Bypass Not Sucess", tCntrlName, null, null);
                            Thread.Sleep(2000);
                        }

                    }
                    catch
                    {

                    }
                }
                
                string text8 = "Booking Faield Check History";
                int num5 = 0;
                bool flag5 = isAPP;
                int num6 = 0;
                bool flag6 = true;
                while (true)
                {
                    bool flag7 = true;
                    while (true)
                    {
                    IL_0fa5:
                        if (num < 0.0)
                        {
                            num = 0.0;
                        }
                        if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                        {
                            Thread thread = new Thread(StartUPI_);
                            thread.IsBackground = true;
                            thread.Start(class3_0.BANKDETAILS + "||True||5||0000000000");
                        }
                        staticWEB = false;
                        string text9 = "";
                        sensor_data = "0";
                        bool flag8 = true;
                        string string_93 = "";
                        string dishacaptcha = "";
                        string text10 = "";
                        string string_94 = "";
                        webProxy_3 = null;
                        postdata = null;
                        Reffral = "https://irctc.corover.ai/";
                        response = "";
                        errormsg = "";
                        Exception_ = null;
                        int_TimeDiff = 0;
                        bool_22 = true;
                        class3_0._greq = "";
                        class3_0._Authorization = "";
                        int num7 = 0;
                        bool flag9 = true;
                        randomGeneratedKey = jwtutils.getRandomAppCngKey();
                        keyFromServer = "";
                        greq = "";
                        _Authrization = "";
                        access_token = "";
                        jwtToken = "";
                        bool_48 = true;
                        cookie_ = null;
                        mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                        cookie_ = new CookieContainer();
                        cookie_bkp = null;
                        cookie_bkp = new CookieContainer();
                        cookie_M = null;
                        cookie_M = new CookieContainer();
                        //useragent = "Mozilla/5.0 (Linux; Android 13; LE2120) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Mobile Safari/537.36";
                        class3_0.DISHAUSERAGENT = useragent;
                        string screenWidth = Screen.PrimaryScreen.Bounds.Width.ToString();
                        string screenHeight = Screen.PrimaryScreen.Bounds.Height.ToString();
                        class3_0.screen = (screenWidth + "X" + screenHeight);
                        if (DateTime.Now.Minute < 40)
                        {
                            try
                            {
                                deleteallotp();
                            }
                            catch
                            {

                            }
                        }

                        if (class3_0.TKT_QUOTA == "PT")
                        {
                            updTStatus?.BeginInvoke(1, "PT NOT ALLOWED IN ADVANCE...", tCntrlName, null, null);
                            MessageBox.Show("PT NOT ALLOWED IN DISHA LOGIN FOR NOW....");
                            return false;
                        }
                        lock (object_5)
                        {
                            cookie_ = null;
                        }
                        cookie_ = new CookieContainer();
                        if (!isAPP)
                        {
                            //Chrome_CloseSetup();
                            Thread.Sleep(2000);
                            getandclear();
                            updTStatus?.BeginInvoke(1, "Complete Step 1", tCntrlName, null, null);
                            IRComm.doesSurf = false;
                            bool flag10 = true;
                            BmskCookieOffline_(flag10);
                            cookie_ = cookieBmsk_0;
                            Chrome_CloseSetup();
                        }
                        else
                        {
                            updTStatus?.BeginInvoke(1, "Advance Login Start...", tCntrlName, null, null);
                        }
                        string[] array10 = string_91.Split(new string[1] { "#" }, StringSplitOptions.None);
                        string text11 = array10[4];
                        int num8 = Convert.ToInt32(array10[5].ToString());
                        //if (text11 != "PAID")
                        //{
                        //	updTStatus.BeginInvoke(1, "UNPAID ID BOOKING STOP", tCntrlName, null, null);
                        //	return false;
                        //}
                        num7++;
                        DialogResult dialogResult1 = MessageBox.Show("Kya aap Ye ticket ka payment QR code scan karke karna chahte hai agr haa to ok karna warna No par click kare jisse apko mobilse payment krna hoga", "QR PAYMENT CONFIRMATION", MessageBoxButtons.YesNo);
                        if (dialogResult1 == DialogResult.Yes)
                        {
                            qrpayment = true;
                        }
                        else if (dialogResult1 == DialogResult.No)
                        {
                            qrpayment = false;
                        }
                    IL_START:
                        DateTime dateTime2 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                        long num9 = (long)(DateTime.UtcNow - dateTime2).TotalMilliseconds;
                        class3_0._greq = num9.ToString();
                        greq = jwtutils.GetHash(ref mup);
                        mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                        class3_0.token = null;
                        Stopwatch stopwatch = new Stopwatch();
                        stopwatch.Start();
                        Status = "Login";
                        cookie_ = new CookieContainer();
                        //Chrome_Create_First_Disha("https://irctc.corover.ai/", 0);
                        if (isAPP)
                        {
                            url = "https://irctc.corover.ai/";
                            Lock("First Hit Irctc: In = " + response);
                            _httpRequest_Disha(url, null, Reffral, "Plain1Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                            Lock("First Hit Irctc: Out = " + response);


                        }
                    recounter:
                        url = "https://irctc.corover.ai/dishaAPI/bot/getSettings";
                        updTStatus?.BeginInvoke(1, "Checking Disha Setting..", tCntrlName, null, null);
                        Lock("First Hit Irctc: In = " + url);
                        object obj3 = new object();
                        lock (obj3)
                        {
                        }
                        bool flag11 = _httpRequest_Disha(url, null, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                        class3_0.cxtoken = "undefined";
                        postdata = "{\"channel\":\"https://irctc.corover.ai/\",\"source\":\"" + useragent + "\"}";//"{\"audioUrl\":\"null\",\"source\":\"" + useragent + "\",\"inputType\":\"TEXT\",\"useOTP\":\"true\",\"mobileNumber\":\"" + text36Mob + "\",\"userToken\":\"" + class3_0.token + "\",\"dSession\":\"" + DSessiononly() + "\",\"sessionId\":\"" + class3_0.sessionid + "\"}";
                        url = "https://irctc.corover.ai/dishaAPI/bot/addCounter";
                        _httpRequest_Disha(url, postdata, "https://irctc.corover.ai/", "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                        //if (!response.Contains("session"))
                        //{
                        //    Chrome_Create_First_Disha("https://irctc.corover.ai/", 0);
                        //    goto IL_START;
                        //}
                        //class3_0.sessionid = jsonData_Serial(response, "session");
                        Lock("First Hit Irctc: Out = " + response);
                        dateTime_2 = DateTime.Now;
                        if (!string.IsNullOrEmpty(response))
                        {
                            int num11;
                            if (num6 != 10)
                            {
                                if (isAPP)
                                {
                                    string getdsession = getDSession();
                                    string[] array11 = getdsession.Split(new string[1] { "#" }, StringSplitOptions.None);
                                    string dsession = array11[0];
                                    class3_0.token = array11[1];
                                    if (string.IsNullOrEmpty(class3_0.sessionid))
                                    {
                                        class3_0.sessionid = array11[2];
                                    }
                                    class3_0.sessionid = array11[2];
                                    string text36Mob = "";
                                    frmOTP frmOTP = new frmOTP();
                                    frmOTP.method_1D(control_0, rectangle_0, false, "Enter Mobile Number", class3_0.BANKSAVEAS);
                                    if (frmOTP.DialogResult != DialogResult.OK)
                                    {
                                        frmOTP.Dispose();
                                        return false;
                                    }
                                    text36Mob = frmOTP.string_0;
                                    if (text36Mob.Length != 10)
                                    {

                                        updTStatus.BeginInvoke(1, "Mobile Number Invalid", tCntrlName, null, null);
                                        MessageBox.Show("Please enter a valid mobile Number");
                                        return false;
                                    }
                                    postdata = "{\"audioUrl\":\"null\",\"status\":\"1\",\"source\":\"" + useragent + "\",\"deviceId\":\"null\",\"inputType\":\"TEXT\",\"useOTP\":\"true\",\"mobileNumber\":\"" + text36Mob + "\",\"userToken\":\"" + class3_0.token + "\",\"dSession\":\"" + dsession + "\",\"sessionId\":\"" + class3_0.sessionid + "\"}";
                                    url = "https://irctc.corover.ai/dishaAPI/bot/login/en";
                                }
                                updTStatus?.BeginInvoke(1, "Login IRCTC", tCntrlName, null, null);
                                num6 = 0;
                                while (true)
                                {
                                    Request_Type = "Login";
                                    Status = "Login Confirm";
                                    if (_httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 12000, 12000, ref response, ref errormsg, ref Exception_))
                                    {
                                        break;
                                    }

                                }
                                class3_0.token = jsonData_Serial(response, "userToken");
                                if (!response.Contains("Verify your mobile number, OTP has been sent to your mobile number. Please enter your OTP"))
                                {
                                    if (response.IndexOf("Bad credentials") > 0 || response.Contains("Invalid User"))
                                    {
                                        isLogin_Self = false;
                                        isLogin = false;
                                        updTStatus.BeginInvoke(2, "Bad credentials! ", tCntrlName, null, null);
                                        return false;
                                    }
                                    break;
                                }
                                //Chrome_CloseSetup();
                                class3_0.string_61 = GetString(response, "next_context");
                                class3_0.otpuuid = jsonData_Serial(response, "Details");
                                updTStatus?.BeginInvoke(1, "Login Sucessfull... ", tCntrlName, null, null);
                            }

                            Request_Type = "json";
                            num11 = 0;
                            dictionary_TimeP["Login"] = DateAndTime.Now.ToString("hh:mm:ss:fff");
                            while (true)
                            {
                                updTStatus?.BeginInvoke(1, "Validate Otp....", tCntrlName, null, null);

                                url = "https://irctc.corover.ai/dishaAPI/bot/verifyLogin/en";
                                string getdsession = getDSession();
                                string[] array114 = getdsession.Split(new string[1] { "#" }, StringSplitOptions.None);
                            //class3_0.dsession = array114[0];
                            //class3_0.sessionid = array114[2];
                            ilreotp:
                                string text36OTP = "";
                                frmOTP frmOTP = new frmOTP();
                                frmOTP.method_1D(control_0, rectangle_0, true, "Advance Login OTP", class3_0.BANKSAVEAS);
                                if (frmOTP.DialogResult == DialogResult.Cancel)
                                {
                                    frmOTP.Dispose();
                                    return false;
                                }
                                text36OTP = frmOTP.string_0;
                                frmOTP.Dispose();
                                postdata = "{\"audioUrl\":\"null\",\"status\":\"null\",\"deviceId\":\"null\",\"source\":\"" + useragent + "\",\"inputType\":\"TEXT\",\"otp\":\"" + text36OTP + "\",\"userToken\":\"" + class3_0.token + "\",\"otpuuid\":\"" + class3_0.otpuuid + "\",\"dSession\":\"" + DSessiononly() + "\",\"sessionId\":\"" + class3_0.sessionid + "\"}";
                                dateTime_3 = DateTime.Now;
                                Status = "ValidateUser";
                                num11++;
                                if (_httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                {
                                    break;
                                }
                                if (response.Contains("Internal server error"))
                                {
                                    updTStatus.BeginInvoke(1, "Invalid Otp Login Again", tCntrlName, null, null);
                                    return false;
                                }
                            }
                            //class3_0.token = jsonData_Serial(response, "userToken");
                            class3_0.cxtoken = jsonData_Serial(response, "cxtoken");
                            if (response.IndexOf("Thank you.Your mobile number is verified successfully") < 0)
                            {
                                break;
                            }
                            updTStatus?.BeginInvoke(1, "Login sucess....", tCntrlName, null, null);

                            url = "https://irctc.corover.ai/dishaAPI/bot/getUserData";
                            _httpRequest_Disha(url, null, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                            if (response.Contains("loginId"))
                            {
                                string loginIdd = jsonData_Serial(response, "loginId");
                                //if (response.Contains("loginId\":null"))
                                //{
                                //    updTStatus?.BeginInvoke(1, "No IRCTC in this Mobile Number", tCntrlName, null, null);
                                //    string errormsgg = "Apke Login Kiye Hue Mobile Number par koi bhi irctc id registered nahi hai please is mobile number ko irctc id se registere kare. ";
                                //    MessageBox.Show(errormsgg, "IRCTC ID not available in mobile number", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                //    return false;
                                //}
                                //if (loginIdd != class3_0.IRCTC_ID)
                                //{
                                //    updTStatus?.BeginInvoke(1, "Mobile Number Mismatch with irctc id", tCntrlName, null, null);
                                //    string errormsgg = "Apke Login Kiye Hue Mobile Number par ye IRCTC Id  " + loginIdd + " registered hai please aap is IRCTC id se Login Kare..... Agr fir bhi ye issue aa raha h to isi irctc id aur mobile number se aap ek baar irctc disha par login kare aur koi bhi dummy form ko payment tk le jaye.... ";
                                //    MessageBox.Show(errormsgg, "IRCTC ID Dont Match with Mobile Number", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                //    return false;
                                //}

                            }
                            class3_0.appid = "29fd4f94-f793-4227-9588-056b5ffb1318";
                            class3_0.authkey = "2b5fb5d4-0753-4302-b661-f8580e9effb0";
                            //mobile number
                            //                     url = "https://irctc.corover.ai/dishaAPI/client/getUserBookingCount/" + class3_0.IRCTC_ID;
                            //                     postdata = null;
                            //                     _httpRequest_Disha(url, postdata, Reffral, "Plain12345json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                            //                     string mobileotp = jsonData_Serial(response, "mobile");
                            //                     string adharkyc = jsonData_Serial(response, "userAadharKycStatus");
                            //                     string monthlytxn = jsonData_Serial(response, "monthlyBookingCount");
                            //bool adhkyc = Convert.ToBoolean(adharkyc);
                            //int monthly = Convert.ToInt32(monthlytxn);
                            //                     if (monthly >= 12 & (!adhkyc))
                            //                     {
                            //                         updTStatus?.BeginInvoke(1, "Your limit for 12 transactions in a month is exhausted, please change irctc id", tCntrlName, null, null);
                            //	return false;
                            //                     }

                            //                     if (response.Contains("mobile"))
                            //                     {
                            //                         string text6otp = "Payment Sucess Hone ke baad apka booking otp is Number par ayega  " +mobileotp+ "\n ye Number apki irctc id " + class3_0.IRCTC_ID+ " isme register please dhyan rahe ye mobile number access apke pass hai aur usme apne sikka sms uploader on kiya hua hai jisse payment ke baad sikka otp automate get kar lega....\n warna aap irctc id change kare aur us irctc id se login kare i";
                            //                         MessageBox.Show(text6otp, mobileotp + " ispar PNR OTP Ayega Info Padhe...", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            //                     }
                            url = "https://irctc.corover.ai/dishaAPI/bot/showBooking";
                            postdata = "{\"userToken\":\"" + class3_0.token + "\",\"channel\":\"https://irctc.corover.ai/\"}";
                            _httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);

                            num11 = 0;
                            updTStatus.BeginInvoke(1, "Hitting Train List...", tCntrlName, null, null);
                            while (true)
                            {
                                Stopwatch stopwatch2 = new Stopwatch();
                                stopwatch2.Start();
                                dictionary_TimeP["FindTrain"] = DateAndTime.Now.ToString("mm:ss:fff");
                                num11++;

                                url = "https://irctc.corover.ai/dishaAPI/bot/editTrains";
                                postdata = "{\"source\":\"" + class3_0.SRC_STN + "\",\"status\":\"1\",\"deviceId\":\"null\",\"destination\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"jQuota\":\"" + class3_0.TKT_QUOTA + "\",\"userToken\":\"" + class3_0.token + "\",\"channel\":\"https://irctc.corover.ai/\",\"dSession\":\"" + DSessiononly() + "\",\"sessionId\":\"" + class3_0.sessionid + "\",\"userAgent\":\"" + useragent + "\"}";//"{\"source\":\"" + class3_0.SRC_STN + "\",\"destination\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"jQuota\":\"" + class3_0.TKT_QUOTA + "\",\"userToken\":\"" + class3_0.token + "\",\"channel\":\"https://irctc.corover.ai/\",\"dSession\":\"" + DSessiononly() + "\",\"sessionId\":\"" + class3_0.sessionid + "\",\"userAgent\":\"" + useragent + "\"}";
                                postdata = "{\"userAgent\":\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\",\"source\":\"" + class3_0.SRC_STN + "\",\"destination\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"jQuota\":\"" + class3_0.TKT_QUOTA + "\",\"userToken\":\"" + class3_0.token + "\",\"channel\":\"https://irctc.corover.ai/\",\"dSession\":\"" + DSessiononly() + "\",\"deviceId\":null,\"sessionId\":\"" + class3_0.sessionid + "\",\"status\":1}";
                                if (_httpRequest_Disha(url, postdata, "https://irctc.corover.ai/", "Plain12345json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                {
                                ilrechec:
                                    //SourceDestination_Correction(response);
                                    postdata = "{\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"from\":\"" + class3_0.SRC_STN + "\",\"to\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"avlClasses\":[\"" + class3_0.TKT_CLASS + "\"],\"jQuota\":\"" + class3_0.TKT_QUOTA + "\",\"channel\":\"https://irctc.corover.ai/\",\"userToken\":\"" + class3_0.token + "\",\"dSession\":\"" + DSessiononly() + "\",\"sessionId\":\"" + class3_0.sessionid + "\",\"userAgent\":\"" + useragent + "\"}";
                                    url = "https://irctc.corover.ai/dishaAPI/bot/getStatus";
                                    _httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 58000, 58000, ref response, ref errormsg, ref Exception_);
                                    if (response.Length < 50)
                                    {
                                        goto ilrechec;
                                    }
                                    string text19 = response.Substring(response.IndexOf("timeStamp") + 23);
                                    text19 = text19.Substring(0, text19.IndexOf("\""));
                                    string[] array10A = text19.Split(new string[1] { "." }, StringSplitOptions.None);
                                    text19 = array10A[0];
                                    string TimeH = DateTime.Now.ToString("HH:mm:ss");
                                    int_TimeDiff = (int)new TimeSpan(DateTime.Parse(text19).Ticks - DateTime.Parse(TimeH).Ticks).TotalMilliseconds;
                                    if (response.Contains("totalCollectibleAmount"))
                                    {
                                        updTStatus.BeginInvoke(1, "Verify Irctc Id...", tCntrlName, null, null);
                                        Reffral = "https://irctc.corover.ai";
                                        url = "https://irctc.corover.ai/dishaAPI/bot/getUserId/" + class3_0.IRCTC_ID;
                                        postdata = null; //"{\"userToken\":\"" + class3_0.token + "\",\"channel\":\"https://irctc.corover.ai/\"}";
                                        postdata = "{\"sessionId\":\"" + class3_0.sessionid + "\",\"dSession\":\"" + DSessiononly() + "\"}";
                                        _httpRequest_Disha(url, postdata, Reffral, "Plain12345json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                        string mobileotp = jsonData_Serial(response, "mobile");
                                        if (response.Contains("mobile"))
                                        {
                                            string text6otp = "Payment Sucess Hone ke baad apka booking otp is Number par ayega  " + mobileotp + "\n ye Number apki irctc id " + class3_0.IRCTC_ID + " isme register please dhyan rahe ye mobile number access apke pass hai aur usme apne GADAR sms uploader on kiya hua hai jisse payment ke baad GADAR otp automate get kar lega....\n warna aap irctc id change kare aur us irctc id se login kare i";
                                            MessageBox.Show(text6otp, mobileotp + " ispar PNR OTP Ayega Info Padhe...", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        }
                                        if (DateTime.Now.Hour < int_BookHRS)
                                        {
                                            updTStatus.BeginInvoke(1, "Wait For PG Open..", tCntrlName, null, null);
                                            DateTime dateTime6 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_BookHRS, 0, 0, 0);
                                            TimeSpan timeSpan = new TimeSpan(dateTime6.Ticks - DateTime.Now.Ticks);
                                            int num16 = (int)timeSpan.TotalMilliseconds - int_TimeDiff;
                                            Application.DoEvents();
                                            if (num16 > 3500)
                                            {
                                                num16 = num16 - hashhold;
                                                Thread.Sleep(num16);
                                                Application.DoEvents();
                                            }
                                        }
                                        //url = "https://irctc.corover.ai/dishaAPI/bot/editTrains";
                                        //postdata = "{\"source\":\"" + class3_0.SRC_STN + "\",\"status\":\"1\",\"deviceId\":\"null\",\"destination\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"jQuota\":\"" + class3_0.TKT_QUOTA + "\",\"userToken\":\"" + class3_0.token + "\",\"channel\":\"https://irctc.corover.ai/\",\"dSession\":\"" + DSessiononly() + "\",\"sessionId\":\"" + class3_0.sessionid + "\",\"userAgent\":\"" + useragent + "\"}";//"{\"source\":\"" + class3_0.SRC_STN + "\",\"destination\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"jQuota\":\"" + class3_0.TKT_QUOTA + "\",\"userToken\":\"" + class3_0.token + "\",\"channel\":\"https://irctc.corover.ai/\",\"dSession\":\"" + DSessiononly() + "\",\"sessionId\":\"" + class3_0.sessionid + "\",\"userAgent\":\"" + useragent + "\"}";
                                        ////postdata = "{\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"from\":\"" + class3_0.SRC_STN + "\",\"to\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"avlClasses\":[\"" + class3_0.TKT_CLASS + "\"],\"jQuota\":\"" + class3_0.TKT_QUOTA + "\",\"channel\":\"https://irctc.corover.ai/\",\"userToken\":\"" + class3_0.token + "\",\"dSession\":\"" + DSessiononly() + "\",\"sessionId\":\"" + class3_0.sessionid + "\",\"userAgent\":\"" + useragent + "\"}";

                                        //_httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);

                                        updTStatus.BeginInvoke(1, "Hitting Availablity...", tCntrlName, null, null);
                                        num11 = 0;
                                        int num17 = 0;
                                    IL_271a:
                                        Status = "Getting Availablity";
                                        if (isAPP)
                                        {
                                            string tktquota = class3_0.TKT_QUOTA;
                                            //postdata = "{\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"from\":\"" + class3_0.SRC_STN + "\",\"to\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"avlClasses\":[\"" + class3_0.TKT_CLASS + "\"],\"jQuota\":\"" + tktquota + "\",\"channel\":\"https://irctc.corover.ai/\",\"userToken\":\"" + class3_0.token + "\",\"userAgent\":\"" + useragent + "\"}";
                                            postdata = "{\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"from\":\"" + class3_0.SRC_STN + "\",\"to\":\"" + class3_0.DEST_STN + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"avlClasses\":[\"" + class3_0.TKT_CLASS + "\"],\"jQuota\":\"" + class3_0.TKT_QUOTA + "\",\"channel\":\"https://irctc.corover.ai/\",\"userToken\":\"" + class3_0.token + "\",\"dSession\":\"" + DSessiononly() + "\",\"sessionId\":\"" + class3_0.sessionid + "\",\"userAgent\":\"" + useragent + "\"}";

                                            url = "https://irctc.corover.ai/dishaAPI/bot/getStatus";

                                        }
                                        do
                                        {
                                        ilrecheck:
                                            num17++;

                                            //num17 = 0;
                                            
                                            //
                                            response = null;
                                            dictionary_TimeP["Availablity"] = DateAndTime.Now.ToString("mm:ss:fff");
                                            stopwatch2 = new Stopwatch();
                                            stopwatch2.Start();

                                            if (!_httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 58000, 58000, ref response, ref errormsg, ref Exception_) || string.IsNullOrEmpty(response) || !response.Contains("avlDayList"))
                                            {
                                                continue;
                                            }

                                            if (response.Length < 50)
                                            {
                                                Thread.Sleep(2000);
                                                goto ilrecheck;
                                            }
                                            class3_0.TrainName = jsonData_Serial(response, "trainName");
                                            class3_0.isfood = jsonData_Serial(response, "foodChoiceEnabled");
                                            class3_0.string_30 = response;
                                            updTStatus.BeginInvoke(1, "Checking for #...." + num17, tCntrlName, null, null);
                                            Method_CheckBookingTime_Disha(response);
                                            string @string = GetString(response, "availablityStatus");
                                            
                                            //
                                            //if (@string.Contains("#"))
                                            //{
                                            //    updTStatus.BeginInvoke(1, "Checking for #...." + num17, tCntrlName, null, null);
                                            //    Thread.Sleep(1000);
                                            //    goto ilrecheck;
                                            //}
                                            // if (hashhold >= 3000)
                                            // {
                                            //updTStatus.BeginInvoke(1, "Checking ###....", tCntrlName, null, null);
                                            //Method_CheckBookingTime(response);

                                            //}
                                            class3_0.TKT_ISADV = false;
                                            if (response.IndexOf("avlDayList") > 0 && class3_0.TKT_ISADV)
                                            {
                                                updTStatus.BeginInvoke(1, "Availablity Check Int - " + num17, tCntrlName, null, null);
                                                string text20 = response.Substring(response.IndexOf("timeStamp") + 23);
                                                text20 = text20.Substring(0, text20.IndexOf("\""));
                                                DateTime dateTime7 = DateTime.Parse(text20);
                                                if (!(!@string.Contains("#") & (dateTime7.Hour >= int_BookHRS)))
                                                {
                                                    double totalMilliseconds = stopwatch2.Elapsed.TotalMilliseconds;
                                                    stopwatch2.Stop();
                                                    int num18 = dateTime7.Second * 1000 + dateTime7.Millisecond;
                                                    if (dateTime7.Minute == 59)
                                                    {
                                                        int num19 = 59800 - num18;
                                                        if (num19 > 10)
                                                        {
                                                            Application.DoEvents();
                                                            Thread.Sleep(num19);
                                                        }
                                                    }
                                                    goto IL_271a;
                                                }
                                            }
                                            else
                                            {
                                                if (response.Contains("availablityStatus") && @string == "NOT AVAILABLE" && class3_0.TKT_QUOTA == "PT")
                                                {
                                                    frmPayment frmPayment2 = new frmPayment();
                                                    frmPayment2.tktname.Text = TktName;
                                                    frmPayment2.bool_7 = true;
                                                    frmPayment2.string_1 = "PT Not Available Do You Want To Change Your Quota into TQ And Book.";
                                                    frmPayment2.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                    DialogResult dialogResult = frmPayment2.DialogResult;
                                                    frmPayment2.Dispose();
                                                    if (dialogResult == DialogResult.Cancel)
                                                    {
                                                        updTStatus.BeginInvoke(2, @string, tCntrlName, null, null);
                                                        return false;
                                                    }
                                                    class3_0.TKT_QUOTA = "TQ";
                                                    goto IL_271a;
                                                }
                                                if (@string.Contains("REGRET") || @string.Contains("TRAIN DEPARTED") || @string.Contains("TRAIN CANCELLED") || @string.Contains("NOT AVAILABLE"))
                                                {
                                                    updTStatus.BeginInvoke(2, @string, tCntrlName, null, null);
                                                    return false;
                                                }
                                            }
                                            //pax
                                            minmPsgnInputTime2 = paxhold;
                                            int num20 = (int)minmPsgnInputTime2;//- (int)(DateTime.Now - dateTime_2).TotalMilliseconds;
                                            if (num20 > 0)
                                            {
                                                DateTime now = DateTime.Now;
                                                int num21 = 0;//(int)(DateTime.Now - dateTime_2).TotalMilliseconds;
                                                num21 = (int)(minmPsgnInputTime2 - (double)num21);
                                                now = now.AddMilliseconds(num21);
                                                while (true)
                                                {
                                                    TimeSpan timeSpan2 = now - DateTime.Now;
                                                    string text15 = timeSpan2.Seconds + ":" + timeSpan2.Milliseconds;
                                                    if (timeSpan2.TotalMilliseconds <= 1.0)
                                                    {
                                                        break;
                                                    }
                                                    updTStatus.BeginInvoke(1, "Getting Captcha IN - " + text15, tCntrlName, null, null);
                                                    Thread.Sleep(50);
                                                }
                                            }
                                            Lock0("Availablity", stopwatch2, response);
                                            class3_0.TransactionID = class3_0.method_6();
                                            updTStatus.BeginInvoke(1, "Getting Bkg Captcha...", tCntrlName, null, null);
                                            //if (class3_0.TKT_ISADV & !isRealsikka)
                                            //{
                                            //    isReal = true;
                                            //    ThreadPool.QueueUserWorkItem(AuthSikbkg);
                                            //}
                                        //ThreadPool.QueueUserWorkItem(Method_Check());
                                        //Thread thread = new Thread(new ThreadStart(Method_Check));
                                        //thread.Start();
                                        ilreboard:
                                            url = "https://irctc.corover.ai/dishaAPI/bot/sendQuery/en";
                                            string nextcontext = "ade4a7db-d819-417d-832a-259307fd94c7,8";
                                            postdata = "{\"query\":\"Train Selected\",\"source\":\"" + useragent + "\",\"status\":\"1\",\"deviceId\":\"null\",\"sessionId\":\"" + class3_0.sessionid + "\",\"inputType\":\"TEXT\",\"next_context\":\"" + nextcontext + "\",\"cxpayload\":{\"jClass\":\"" + class3_0.TKT_CLASS + "\",\"trainNo\":\"" + class3_0.TRAIN_NO + "\",\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"source\":\"" + class3_0.SRC_STN + "\",\"destination\":\"" + class3_0.DEST_STN + "\",\"jQuota\":\"" + class3_0.TKT_QUOTA + "\",\"trainName\":\"" + class3_0.TrainName + "\"},\"userToken\":\"" + class3_0.token + "\",\"channel\":\"https://irctc.corover.ai/\",\"audioUrl\":null,\"isRefund\":false,\"dSession\":\"" + DSessiononly() + "\"}";
                                            num11 = 0;
                                            do
                                            {
                                                stopwatch2 = new Stopwatch();
                                                stopwatch2.Start();
                                                Status = "Book Ticket";
                                                dictionary_TimeP["Book"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                CookieContainer cookieContainer2 = new CookieContainer();
                                                bool flag14 = _httpRequest_Disha(url, postdata, Reffral, "Plain12345json", false, Proxy_, ref cookieContainer2, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                if (!response.Contains("Please verify your IRCTC User ID"))
                                                {
                                                    url = "https://irctc.corover.ai/dishaAPI/bot/retryClicked";
                                                    postdata = null;
                                                    _httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                    goto ilreboard;
                                                }
                                                if (!(response != "retry" && flag14))
                                                {
                                                    continue;
                                                }

                                                dateTime_2 = GetTimeStamp(response, int_TimeDiff);
                                                dateTime_2 = DateTime.Now.AddMilliseconds(200.0);
                                                Lock0("Book", stopwatch2, response);
                                                if (response.Contains("Please verify your IRCTC User ID"))
                                                {
                                                    if (validateid)
                                                    {
                                                        updTStatus.BeginInvoke(1, "Validating Pax Irctc ID...", tCntrlName, null, null);
                                                        url = "https://irctc.corover.ai/dishaAPI/bot/getUserId/" + class3_0.IRCTC_ID;
                                                        postdata = "{\"sessionId\":\"" + class3_0.sessionid + "\",\"dSession\":\"" + DSessiononly() + "\"}";
                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                        updTStatus.BeginInvoke(1, "Trying to submit Pax...", tCntrlName, null, null);
                                                        url = "https://irctc.corover.ai/dishaAPI/client/getUserBookingCount/" + class3_0.IRCTC_ID;
                                                        postdata = null;
                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain12345json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);

                                                    }
                                                    //updTStatus.BeginInvoke(1, "Validating Pax Irctc ID...", tCntrlName, null, null);
                                                    //url = "https://irctc.corover.ai/dishaAPI/bot/getUserId/" + class3_0.IRCTC_ID;
                                                    //postdata = null;
                                                    //_httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                    //updTStatus.BeginInvoke(1, "Trying to submit Pax...", tCntrlName, null, null);
                                                    //url = "https://irctc.corover.ai/dishaAPI/client/getUserBookingCount/" + class3_0.IRCTC_ID;
                                                    //postdata = null;
                                                    //_httpRequest_Disha(url, postdata, Reffral, "Plain12345json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);

                                                    string_70 = null;
                                                Il_420420:
                                                    text3 = smethod_10(class3_0.BANKSAVEAS);
                                                    if (isAPP)
                                                    {
                                                        //postdata = "{\"query\":\"1 . SAEED, Male, 22, IN...\",\"source\":\"" + useragent + "\",\"prevCode\":null,\"sessionId\":\"" + class3_0.sessionid + "\",\"inputType\":\"TEXT\",\"next_context\":\"ade4a7db-d819-417d-832a-259307fd94c7,9\",\"cxpayload\":{\"passengerList\":[{\"passengerGender\":\"M\",\"passengerName\":\"SAEED\",\"passengerAge\":\"22\",\"passengerNationality\":\"IN\",\"isAlloted\":true,\"adult\":true,\"passengerBerthChoice\":\"\",\"childBerthFlag\":true,\"passengerSerialNumber\":1}],\"infantList\":[],\"travelInsuranceOpted\":false,\"loginId\":\"" + class3_0.IRCTC_ID + "\",\"tempList\":[],\"boardingStation\":\"" + class3_0.BRD_STN + "\",\"masterData\":[{\"passengerGender\":\"M\",\"passengerName\":\"SAEED\",\"passengerAge\":\"22\",\"passengerNationality\":\"IN\"}]},\"userToken\":\"" + class3_0.token + "\",\"suggestion\":false,\"isFallback\":false,\"isRefund\":false,\"channel\":\"https://irctc.corover.ai/\",\"audioUrl\":null,\"dSession\":\"" + class3_0.dsession + "\"}";
                                                        //pax post start
                                                        char[] charsToTrim = { '-' };
                                                        NameValueCollection nvc = new NameValueCollection();
                                                        string pasender1 = "";
                                                        List<string> listt = new List<string>();
                                                        List<string> listtt = new List<string>();
                                                        string[] pasenger2 = null;
                                                        string dataaa = "";
                                                        string birth = "";
                                                        Class21 @class = new Class21();
                                                        int m = 1;
                                                        int n = 1;
                                                        foreach (Class21 item in class3_0.list_0)
                                                        {
                                                            if (string.IsNullOrEmpty(item.string_3))
                                                            {
                                                                birth = "";
                                                            }
                                                            else
                                                            {
                                                                birth = Mobile_smethod_2(item.string_3);

                                                            }
                                                            pasender1 = pasender1 + m + " . " + item.string_0 + ", " + item.string_2 + ", " + item.string_1 + " IN...";

                                                            if (n == 1)
                                                            {
                                                                NameValueCollection nvc1 = new NameValueCollection();
                                                                nvc1.Add("passengerGender", item.string_2);
                                                                nvc1.Add("passengerName", item.string_0.Trim(charsToTrim));
                                                                nvc1.Add("passengerAge", item.string_1);
                                                                nvc1.Add("passengerNationality", "IN");
                                                                nvc1.Add("isAlloted", "true");
                                                                nvc1.Add("adult", "true");
                                                                if (class3_0.isfood == "true")
                                                                {
                                                                    nvc1.Add("passengerFoodChoice", "D");
                                                                }
                                                                nvc1.Add("passengerBerthChoice", birth);
                                                                nvc1.Add("childBerthFlag", "true");
                                                                nvc1.Add("passengerSerialNumber", n.ToString());
                                                                string jsonn = JsonHelper.BuildJsonFromNVC(nvc1);
                                                                listt.Add(jsonn);
                                                                //pasenger2[n] = jsonn.ToString();
                                                            }
                                                            else
                                                            {
                                                                NameValueCollection nvc1 = new NameValueCollection();
                                                                nvc1.Add("passengerGender", item.string_2);
                                                                nvc1.Add("passengerName", item.string_0.Trim(charsToTrim));
                                                                nvc1.Add("passengerAge", item.string_1);
                                                                nvc1.Add("passengerNationality", "IN");
                                                                nvc1.Add("isAlloted", "true");
                                                                nvc1.Add("adult", "true");
                                                                if (class3_0.isfood == "true")
                                                                {
                                                                    nvc1.Add("passengerFoodChoice", "D");
                                                                }
                                                                nvc1.Add("passengerBerthChoice", birth);
                                                                nvc1.Add("childBerthFlag", "true");
                                                                nvc1.Add("passengerSerialNumber", n.ToString());
                                                                string jsonn = JsonHelper.BuildJsonFromNVC(nvc1);
                                                                listt.Add(jsonn);
                                                                //pasenger2[n] = jsonn.ToString();
                                                            }

                                                            NameValueCollection nvc11 = new NameValueCollection();
                                                            nvc11.Add("passengerGender", item.string_2);
                                                            nvc11.Add("passengerName", item.string_0);
                                                            nvc11.Add("passengerAge", item.string_1);
                                                            nvc11.Add("passengerNationality", "IN");
                                                            string jsonnn = JsonHelper.BuildJsonFromNVC(nvc11);
                                                            listtt.Add(jsonnn);

                                                            n++;
                                                            m++;
                                                        }
                                                        NameValueCollection nvc11S = new NameValueCollection();
                                                        nvc11S.Add("email", "");
                                                        string destadd = JsonHelper.BuildJsonFromNVC(nvc11S);

                                                        nvc.Add("query", "send passengers");
                                                        nvc.Add("source", useragent);
                                                        nvc.Add("prevCode", null);
                                                        nvc.Add("status", "1");
                                                        nvc.Add("deviceId", null);
                                                        nvc.Add("sessionId", class3_0.sessionid);
                                                        nvc.Add("inputType", "TEXT");
                                                        nvc.Add("next_context", "ade4a7db-d819-417d-832a-259307fd94c7,10");
                                                        nvc.Add("cxpayload.passengerList", JsonConvert.SerializeObject(listt));
                                                        if (class3_0.TKT_ISCONFIRM)
                                                        {
                                                            nvc.Add("cxpayload.reservationChoice", "4");
                                                        }
                                                        nvc.Add("cxpayload.infantList", "[]");
                                                        nvc.Add("cxpayload.GST", "{}");
                                                        nvc.Add("cxpayload.destAddress", destadd);

                                                        nvc.Add("cxpayload.travelInsuranceOpted", "true");
                                                        nvc.Add("cxpayload.loginId", class3_0.IRCTC_ID);
                                                        nvc.Add("cxpayload.tempList", "[]");
                                                        nvc.Add("cxpayload.boardingStation", class3_0.BRD_STN);
                                                        nvc.Add("cxpayload.masterData", JsonConvert.SerializeObject(listtt));
                                                        nvc.Add("userToken", class3_0.token);
                                                        nvc.Add("suggestion", "false");
                                                        nvc.Add("isFallback", "false");
                                                        nvc.Add("audioUrl", null);
                                                        nvc.Add("channel", "https://irctc.corover.ai/");
                                                        nvc.Add("dSession", DSessiononly());
                                                        postdata = JsonHelper.BuildJsonFromNVC(nvc);

                                                        postdata = postdata.Replace("\\", "");

                                                        postdata = postdata.Replace("rn", " ");

                                                        postdata = postdata.Replace("\"1\"", "1");

                                                        postdata = postdata.Replace("\"{", "{");
                                                        postdata = postdata.Replace("}\"", "}");

                                                        postdata = postdata.Replace("\"[", "[");
                                                        postdata = postdata.Replace("]\"", "]");

                                                        postdata = postdata.Replace("\"false\"", "false");
                                                        postdata = postdata.Replace("\"true\"", "true");
                                                        //pax post end
                                                    }

                                                    do
                                                    {
                                                        num11++;
                                                        Status = "Passenger";
                                                        stopwatch2 = new Stopwatch();
                                                        stopwatch2.Start();
                                                        dictionary_TimeP["Passenger"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                        updTStatus.BeginInvoke(1, "Submiting Pax Data...", tCntrlName, null, null);
                                                        url = "https://irctc.corover.ai/dishaAPI/bot/sendQuery/en";
                                                    Ilredisha:

                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain12345json", false, Proxy_, ref cookie_, true, true, 880000, 880000, ref response, ref errormsg, ref Exception_);
                                                        try
                                                        {
                                                            string contents = url + "\n\n\n\n" + url + "\n\n\n\n" + postdata + "\n\n\n\n" + response;
                                                            string path3hh = "IRLOG/" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + "Disha" + DateTime.Now.ToString("hhmmssfff");
                                                            File.WriteAllText(path3hh, contents);
                                                        }
                                                        catch
                                                        {

                                                        }
                                                        if (response.Contains("Unauthorized"))
                                                        {
                                                            Thread.Sleep(2000);
                                                            goto Il_420420;
                                                        }
                                                        else if (response.Contains("Servers are busy!"))
                                                        {
                                                            Thread.Sleep(2000);
                                                            goto Il_420420;
                                                        }
                                                        else if (response.Contains("Not Allowed"))
                                                        {
                                                            Thread.Sleep(2000);
                                                            goto Il_420420;
                                                        }

                                                        //File.WriteAllText("Disha_" + class3_0.TransactionID, url + "\n" + postdata + "\n" + response);
                                                        //response = "{\r\n    \"answer\": \"Here are the booking details.\",\r\n    \"render\": \"ticketfareenquiry\",\r\n    \"audio\": \"https://coroverbackendstorage.blob.core.windows.net/chatbot-audio-bucket/b0a4837a-c401-4626-b15b-c79cf9781845_en.mp3\",\r\n    \"cxpayload\": {\r\n        \"paymentAmout\": \"\"\r\n    },\r\n    \"captcha\": true,\r\n    \"next_context\": \"ade4a7db-d819-417d-832a-259307fd94c7,11\",\r\n    \"renderTemplate\": {\r\n        \"templateName\": \"ticketfareenquiry\",\r\n        \"data\": \"Error\"\r\n    },\r\n    \"answerId\": \"d0aae23c-6b40-486d-9bb3-ac030e4bafac\",\r\n    \"userToken\": \"3ffc4242-2a42-4a0a-a7bf-02b298bcb14b\"\r\n}";
                                                        if ((response.IndexOf("Here are the booking details.") > 0))
                                                        {
                                                            //string paxerror = jsonData_Serial(response, "renderTemplate");
                                                            if (!response.Contains("availablityStatus"))
                                                            {
                                                                Thread.Sleep(1000);
                                                                goto Il_420420;
                                                            }
                                                            Lock0("Passenger", stopwatch2, response);
                                                            class3_0.string_32 = response;
                                                            num11 = 0;
                                                            while (true)
                                                            {
                                                                //url = "https://irctc.corover.ai/dishaAPI/bot/sendQuery/en";
                                                                //postdata = "{\"query\":\"Details\",\"source\":\"" + useragent + "\",\"prevCode\":null,\"sessionId\":\"" + class3_0.sessionid + "\",\"inputType\":\"TEXT\",\"next_context\":\"ade4a7db-d819-417d-832a-259307fd94c7,10\",\"cxpayload\":{\"destAddress\":{\"email\":\"\"},\"GST\":{}},\"userToken\":\"" + class3_0.token + "\",\"suggestion\":false,\"isFallback\":false,\"isRefund\":false,\"channel\":\"https://irctc.corover.ai/\",\"audioUrl\":null,\"dSession\":\"" + DSessiononly() + "\"}";
                                                                //if (!_httpRequest_Disha(url, postdata, Reffral, "Plain12345json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                                                //{
                                                                //    break;
                                                                //}
                                                                if (response.Contains("Here are the booking details."))
                                                                {
                                                                    //if (response.Contains ("isCaptcha"))
                                                                    //{
                                                                    //                                                       url = "https://irctc.corover.ai/dishaAPI/bot/generateCaptcha/booking/" + class3_0.token;
                                                                    //                                                       postdata = null;
                                                                    //                                                       _httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_);

                                                                    //                                                       //cap
                                                                    //                                                       //string_93 = GetString(response, "captcha");
                                                                    //                                                       string[] string_933 = responseCl.Split(',');
                                                                    //	dishacaptcha = dishaocr(string_933[1]);

                                                                    //                                                   }
                                                                    //                                                   updTStatus.BeginInvoke(1, "Verifying Bkg Captcha...", tCntrlName, null, null);
                                                                    //                                                   Thread.Sleep(captchahold);
                                                                    //                                                   url = "https://irctc.corover.ai/dishaAPI/bot/verifyCaptcha/booking/" + class3_0.token + "/" + dishacaptcha;
                                                                    //                                                   postdata = null;
                                                                    //                                                    _httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_);

                                                                    bool flag15 = true;
                                                                    num5++;
                                                                    string text23 = "";
                                                                    string text24 = "1";
                                                                    bool A_ = false;
                                                                    string text25 = "0.0";
                                                                    int num22 = 0;
                                                                    int_6 = 10;
                                                                    stopwatch2 = new Stopwatch();
                                                                    stopwatch2.Start();
                                                                    if (response.IndexOf("totalCollectibleAmount") > 0)
                                                                    {
                                                                        text25 = GetString(response, "totalCollectibleAmount");
                                                                        double.TryParse(text25, out double_1);
                                                                        text25 = (double_1 + 11.8).ToString();
                                                                        text9 = GetString(response, "availablityStatus").ToUpper();
                                                                        updTStatus.BeginInvoke(999, "Going To Bank$" + text25 + "$" + text9, tCntrlName, null, null);
                                                                    }
                                                                    else
                                                                    {
                                                                        updTStatus?.BeginInvoke(1, "Unable to perform transaction....", tCntrlName, null, null);
                                                                    }
                                                                    if (text9.Contains("NOT AVAILABLE") || text9.Contains("REGRET") || text9.Contains("TRAIN DEPARTED") || text9.Contains("TRAIN CANCELLED"))
                                                                    {
                                                                        updTStatus.BeginInvoke(2, "Availability: " + text9 + ", Ticket Stopped!", tCntrlName, null, null);
                                                                        return false;
                                                                    }
                                                                    text = array4[0];
                                                                    int num23 = 0;
                                                                    int num24P = 0;
                                                                    while (true)
                                                                    {
                                                                        num23 = 0;
                                                                        stopwatch = new Stopwatch();
                                                                        stopwatch.Start();
                                                                        response = class3_0.string_32;
                                                                        num22++;
                                                                        method_102();
                                                                        if (!string.IsNullOrEmpty(text))
                                                                        {
                                                                            text2 = class3_0.dictionary_BnkData[text];
                                                                            class3_0.BANKSAVEAS = text;
                                                                            class3_0.BANKDETAILS = text2;
                                                                        }
                                                                        text3 = smethod_10(class3_0.BANKSAVEAS);
                                                                        text23 = //GetBankID(text3, ref A_);
                                                                          text23 = "71";
                                                                        if (text23.Length <= 0)
                                                                        {
                                                                            goto IL_520c;
                                                                        }
                                                                        try
                                                                        {
                                                                            bool_63 = ((CheckBox)control.Controls["chkConfirmation"]).Checked;
                                                                            ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                        }
                                                                        catch
                                                                        {
                                                                        }
                                                                        text6 = "\r\n\r\nFare: " + text25 + text6;
                                                                        if (num > 0.0)
                                                                        {
                                                                            double num24 = Conversion.Val(text25.Trim());
                                                                            if (num24 > 0.0 && num24 > num + (double)class3_0.int_4 * 0.49 + 40.0)
                                                                            {
                                                                                flag2 = true;
                                                                            }
                                                                        }
                                                                        string string_95;
                                                                        string text26;
                                                                        bool flag16;
                                                                        while (true)
                                                                        {
                                                                            dictionary_TimeP["Fare"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                            string_95 = "";
                                                                            text26 = "";
                                                                            flag16 = false;
                                                                            //updTStatus.BeginInvoke(1, "Redirecting To Bank Server....", tCntrlName, null, null);
                                                                            //Reffral = url;
                                                                            if (isAPP)
                                                                            {
                                                                                int num25 = 0;
                                                                                updTStatus.BeginInvoke(1, "Collecting Payment Info...", tCntrlName, null, null);
                                                                            Ilrepayment:
                                                                                postdata = "{\"query\":\"send fare\",\"source\":\"" + useragent + "\",\"prevCode\":null,\"sessionId\":\"" + class3_0.sessionid + "\",\"inputType\":\"TEXT\",\"next_context\":\"ade4a7db-d819-417d-832a-259307fd94c7,11\",\"cxpayload\":{\"paymentAmount\":\"" + text25 + "\"},\"userToken\":\"" + class3_0.token + "\",\"suggestion\":false,\"isFallback\":false,\"isRefund\":false,\"status\":\"1\",\"deviceId\":\"null\",\"channel\":\"https://irctc.corover.ai/\",\"audioUrl\":null,\"dSession\":\"" + DSessiononly() + "\"}";
                                                                                url = "https://irctc.corover.ai/dishaAPI/bot/sendQuery/en";
                                                                                _httpRequest_Disha(url, postdata, Reffral, "Plain12345json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                //response = "{\"statusCode\":500,\"message\":\"Exception while initiating payment\",\"error\":\"Internal Server Error\"}";
                                                                                if (response.Contains("clientTransactionId"))
                                                                                {
                                                                                    class3_0.TransactionID = jsonData_Serial(response, "clientTransactionId");
                                                                                    class3_0.TxnToken = jsonData_Serial(response, "txnToken");
                                                                                    class3_0.Txnamt = jsonData_Serial(response, "paymentAmount");
                                                                                }
                                                                                else
                                                                                {
                                                                                    //goto Il_420420;
                                                                                    goto Ilrepayment;
                                                                                }
                                                                                //}
                                                                                {
                                                                                    url = "https://irctc.corover.ai/dishaAPI/bot/generateCaptcha/booking/" + class3_0.token;
                                                                                    postdata = null;
                                                                                    _httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_);

                                                                                    //cap
                                                                                    //string_93 = GetString(response, "captcha");
                                                                                    string[] string_933 = responseCl.Split(',');
                                                                                    dishacaptcha = dishaocr(string_933[1]);

                                                                                }
                                                                                updTStatus.BeginInvoke(1, "Verifying Bkg Captcha...", tCntrlName, null, null);
                                                                                Thread.Sleep(captchahold);
                                                                                url = "https://irctc.corover.ai/dishaAPI/bot/verifyCaptcha/booking/" + class3_0.token + "/" + dishacaptcha;
                                                                                postdata = null;
                                                                                _httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_);

                                                                                dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                Lock0("Fare", stopwatch2, response);
                                                                            }
                                                                            goto IL_3e63;
                                                                        IL_3e63:
                                                                            stopwatch_0 = new Stopwatch();
                                                                            stopwatch_0.Start();
                                                                            if (num23 <= 0)
                                                                            {
                                                                                int num28 = 0;
                                                                                bool flag21;
                                                                                while (true)
                                                                                {
                                                                                    bool flag20 = true;
                                                                                    ((ComboBox)control.Controls["cboGateway"]).Enabled = true;
                                                                                    if (class3_0.TKT_ISCONFIRM & text9.Contains("WL"))
                                                                                    {
                                                                                        num28 = 2;
                                                                                        frmPayment frmPayment3 = new frmPayment();
                                                                                        frmPayment3.tktname.Text = TktName;
                                                                                        frmPayment3.btnSubmit.Text = "Pay 4 WL";
                                                                                        frmPayment3.bool_7 = true;
                                                                                        frmPayment3.string_1 = text9;
                                                                                        frmPayment3.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                        DialogResult dialogResult2 = frmPayment3.DialogResult;
                                                                                        frmPayment3.Dispose();
                                                                                        if (dialogResult2 == DialogResult.Cancel)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "Availability: " + text9 + ", Ticket Stopped!", tCntrlName, null, null);
                                                                                            frmPayment3.Dispose();
                                                                                            return false;
                                                                                        }
                                                                                        flag20 = false;
                                                                                    }
                                                                                    num23++;
                                                                                    if (flag2 && flag20)
                                                                                    {
                                                                                        num28 = 2;
                                                                                        frmPayment frmPayment4 = new frmPayment();
                                                                                        frmPayment4.bool_4 = flag2;
                                                                                        frmPayment frmPayment5 = frmPayment4;
                                                                                        frmPayment5.string_1 = frmPayment5.string_1 + "FARE HIGHER THAN SET LIMIT\nRs." + text25 + " - " + text9;
                                                                                        frmPayment4.tktname.Text = TktName;
                                                                                        frmPayment4.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                        DialogResult dialogResult3 = frmPayment4.DialogResult;
                                                                                        frmPayment4.Dispose();
                                                                                        if (dialogResult3 != DialogResult.OK)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "User Select to Stop Payment! ", tCntrlName, null, null);
                                                                                            frmPayment4.Dispose();
                                                                                            return false;
                                                                                        }
                                                                                        flag20 = false;
                                                                                    }
                                                                                    bool_63 = ((CheckBox)control.Controls["chkConfirmation"]).Checked;
                                                                                    if (bool_63 && flag20)
                                                                                    {
                                                                                        num28 = 2;
                                                                                        frmPayment frmPayment6 = new frmPayment();
                                                                                        frmPayment frmPayment7 = frmPayment6;
                                                                                        frmPayment7.string_1 = frmPayment7.string_1 + "You Have Selected Stop Pay\nRs." + text25 + " - " + text9;
                                                                                        frmPayment6.tktname.Text = TktName;
                                                                                        frmPayment6.bool_0 = true;
                                                                                        frmPayment6.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                        if (frmPayment6.DialogResult != DialogResult.OK)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "User Select to Stop Payment! ", tCntrlName, null, null);
                                                                                            frmPayment6.Dispose();
                                                                                            return false;
                                                                                        }
                                                                                        frmPayment6.Dispose();
                                                                                        flag20 = false;
                                                                                    }
                                                                                    flag21 = false;
                                                                                    lock (object_8)
                                                                                    {
                                                                                        if (list_PaySTART.Contains(TktName) && flag20)
                                                                                        {
                                                                                            flag21 = true;
                                                                                        }
                                                                                    }
                                                                                    if (flag21)
                                                                                    {
                                                                                        num28 = 2;
                                                                                        frmPayment frmPayment8 = new frmPayment();
                                                                                        frmPayment8.bool_3 = flag21;
                                                                                        frmPayment8.string_1 = "Another Ticket already Procced\nRs." + text25 + " - " + text9;
                                                                                        frmPayment8.tktname.Text = TktName;
                                                                                        frmPayment8.bool_0 = true;
                                                                                        frmPayment8.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                        if (frmPayment8.DialogResult != DialogResult.OK)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(201, "Another Ticket already Proceed", tCntrlName, null, null);
                                                                                            frmPayment8.Dispose();
                                                                                            return false;
                                                                                        }
                                                                                        frmPayment8.Dispose();
                                                                                    }
                                                                                    if (num28 <= 1)
                                                                                    {
                                                                                        break;
                                                                                    }
                                                                                    if (!setNewBank(ref text3, ref text23, control))
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    //if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                                                                                    //{
                                                                                    //	Thread thread2 = new Thread(StartUPI_);
                                                                                    //	thread2.IsBackground = true;
                                                                                    //	thread2.Start(class3_0.BANKDETAILS + "||True||5||0000000000");
                                                                                    //}
                                                                                    break;
                                                                                }
                                                                                lock (object_10)
                                                                                {
                                                                                    ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                    if (list_PNR.Contains(TktName))
                                                                                    {
                                                                                        updTStatus.BeginInvoke(204, "PNR Booked in another Pair", tCntrlName, null, null);
                                                                                        return false;
                                                                                    }
                                                                                }
                                                                                if (!flag21)
                                                                                {
                                                                                    list_PaySTART.Add(TktName);
                                                                                }
                                                                                updTStatus.BeginInvoke(202, string.Concat(new object[5] { "Selecting_ ", text3, " for Payment!-(", "0", ")" }), tCntrlName, null, null);
                                                                                if (text23 == "96" && num23 == 1)
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            goto IL_45bb;
                                                                        IL_4570:
                                                                            dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                            Lock0("Fare", stopwatch2, response);
                                                                            goto IL_3e63;
                                                                            continue;
                                                                        end_IL_45aa:
                                                                            break;
                                                                        }
                                                                        break;
                                                                    IL_45bb:
                                                                        try
                                                                        {
                                                                            bool_52 = false;
                                                                            dictionary_TimeP["PayProcess"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                            bank = new Bank(this, class3_0);
                                                                            bank.updateTStatus_1 = updTStatus;
                                                                            text23 = "71";
                                                                            string text32 = text23.ToUpper().Trim();
                                                                            Class46.smethod_0(text32);
                                                                            switch (int.Parse(text32))
                                                                            {
                                                                                case 0:
                                                                                case 71:
                                                                                case 77:
                                                                                case 78:
                                                                                case 104:
                                                                                case 112:
                                                                                case 117:
                                                                                case 119:
                                                                                    updTStatus?.BeginInvoke(1, "Upi Step 1....", tCntrlName, null, null);
                                                                                    postdata = "{\"head\":{\"version\":\"v3\",\"requestTimestamp\":\"" + method_14() + "\",\"channelId\":\"WEB\",\"token\":\"" + class3_0.TxnToken + "\",\"tokenType\":\"TXN_TOKEN\",\"workFlow\":\"checkout\",\"type\":\"TXN_TOKEN\"},\"body\":{\"mid\":\"IRCTCC84510399265141\",\"orderId\":\"" + class3_0.TransactionID + "\",\"applyPaymentOffer\":\"true\",\"fetchAllPaymentOffers\":\"true\",\"returnToken\":\"true\",\"requestId\":\"" + method_14() + "\"}}";//"{\"query\":\"Continue To Booking\",\"source\":\"" + useragent + "\",\"prevCode\":null,\"sessionId\":\"" + class3_0.sessionid + "\",\"inputType\":\"TEXT\",\"next_context\":\"ade4a7db-d819-417d-832a-259307fd94c7,11\",\"cxpayload\":{\"paymentAmount\":\"" + text25 + "\"},\"userToken\":\"" + class3_0.token + "\",\"suggestion\":false,\"isFallback\":false,\"isRefund\":false,\"channel\":\"https://irctc.corover.ai/\",\"audioUrl\":null,\"dSession\"\"" + class3_0.dsession + "\"}";
                                                                                    url = "https://securegw.paytm.in/theia/api/v5/fetchPaymentOptions?mid=IRCTCC84510399265141&orderId=" + class3_0.TransactionID;
                                                                                    _httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                    if (!response.Contains("Pay Instantly using QR code.Scan QR code using your Paytm/UPI App"))
                                                                                    {
                                                                                        updTStatus.BeginInvoke(1, "Fail at Upi step1", tCntrlName, null, null);
                                                                                        return false;
                                                                                    }
                                                                                    if (qrpayment)
                                                                                    {
                                                                                        base64qrcode = jsonData_Serial(response, "dataUrl");
                                                                                        updTStatus?.BeginInvoke(1, "Scan QR and Pay....", tCntrlName, null, null);
                                                                                        FrmQr frmOTPP = new FrmQr();
                                                                                        frmOTPP.Form1_Load(base64qrcode, TktName, class3_0.Txnamt);
                                                                                        //updTStatus?.BeginInvoke(1, "Upi Step 2....", tCntrlName, null, null);


                                                                                        updTStatus?.BeginInvoke(1, "Upi Step 2....", tCntrlName, null, null);
                                                                                        postdata = "{\"head\":{\"version\":\"v1\",\"requestTimestamp\":\"" + method_14() + "\",\"channelId\":\"WEB\",\"token\":\"" + class3_0.TxnToken + "\",\"tokenType\":\"TXN_TOKEN\",\"workFlow\":\"checkout\",\"type\":\"TXN_TOKEN\",\"requestId\":\"" + method_14() + "\"},\"body\":{\"payMethods\":[{\"payMethod\":\"PPBL\"},{\"payMethod\":\"CREDIT_CARD\"},{\"payMethod\":\"DEBIT_CARD\"},{\"payMethod\":\"UPI\"},{\"payMethod\":\"NET_BANKING\"},{\"payMethod\":\"BALANCE\"}],\"mid\":\"IRCTCC84510399265141\",\"orderId\":\"" + class3_0.TransactionID + "\",\"paymentFlow\":\"NONE\"}}";
                                                                                        url = "https://securegw.paytm.in/theia/api/v1/fetchPcfDetails?mid=IRCTCC84510399265141&orderId=" + class3_0.TransactionID;
                                                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                        if (!response.Contains("taxAmount"))
                                                                                        {
                                                                                            updTStatus.BeginInvoke(1, "Fail at Upi step2", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        updTStatus?.BeginInvoke(1, "Upi Step 3....", tCntrlName, null, null);
                                                                                    IL12014:
                                                                                        url = "https://securegw.paytm.in/theia/v1/transactionStatus?mid=IRCTCC84510399265141&orderId=" + class3_0.TransactionID;
                                                                                        postdata = "{\"head\":{\"version\":\"v2\",\"requestTimestamp\":\"" + method_14() + "\",\"channelId\":\"WEB\",\"token\":\"" + class3_0.TxnToken + "\",\"tokenType\":\"TXN_TOKEN\",\"workFlow\":\"checkout\",\"type\":\"TXN_TOKEN\",\"requestId\":\"" + method_14() + "\"},\"body\":{\"mid\":\"IRCTCC84510399265141\",\"orderId\":\"" + class3_0.TransactionID + "\",\"isCallbackUrlRequired\":true,\"paymentFlow\":\"NONE\"}}";
                                                                                        Thread.Sleep(1000);
                                                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                        if (response.Contains("TXN_FAILURE"))
                                                                                        {

                                                                                            goto IL12014;

                                                                                        }
                                                                                        //frmOTPP.Dispose();
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        updTStatus?.BeginInvoke(1, "Upi Step 2....", tCntrlName, null, null);
                                                                                        postdata = "{\"head\":{\"version\":\"v1\",\"requestTimestamp\":\"" + method_14() + "\",\"channelId\":\"WEB\",\"token\":\"" + class3_0.TxnToken + "\",\"tokenType\":\"TXN_TOKEN\",\"workFlow\":\"checkout\",\"type\":\"TXN_TOKEN\",\"requestId\":\"" + method_14() + "\"},\"body\":{\"payMethods\":[{\"payMethod\":\"PPBL\"},{\"payMethod\":\"CREDIT_CARD\"},{\"payMethod\":\"DEBIT_CARD\"},{\"payMethod\":\"UPI\"},{\"payMethod\":\"NET_BANKING\"},{\"payMethod\":\"BALANCE\"}],\"mid\":\"IRCTCC84510399265141\",\"orderId\":\"" + class3_0.TransactionID + "\",\"paymentFlow\":\"NONE\"}}";
                                                                                        url = "https://securegw.paytm.in/theia/api/v1/fetchPcfDetails?mid=IRCTCC84510399265141&orderId=" + class3_0.TransactionID;
                                                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                        if (!response.Contains("taxAmount"))
                                                                                        {
                                                                                            updTStatus.BeginInvoke(1, "Fail at Upi step2", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        updTStatus?.BeginInvoke(1, "Upi Step 3....", tCntrlName, null, null);
                                                                                        url = "https://securegw.paytm.in/theia/api/v1/processTransaction?mid=IRCTCC84510399265141&orderId=" + class3_0.TransactionID;
                                                                                        postdata = "{\"head\":{\"version\":\"v1\",\"requestTimestamp\":\"" + method_14() + "\",\"channelId\":\"WEB\",\"token\":\"" + class3_0.TxnToken + "\",\"tokenType\":\"TXN_TOKEN\",\"workFlow\":\"checkout\",\"type\":\"TXN_TOKEN\",\"requestId\":\"" + method_14() + "\"},\"body\":{\"authMode\":\"3D\",\"payerAccount\":\"" + class3_0.upiid + "\",\"paymentMode\":\"UPI\",\"selectedPaymentModeId\":6,\"mid\":\"IRCTCC84510399265141\",\"orderId\":\"" + class3_0.TransactionID + "\",\"paymentFlow\":\"NONE\",\"riskExtendInfo\":\"userAgent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36|timeZone:Asia/Calcutta|operationType:PAYMENT|networkType:4g|businessFlow:JS_CHECKOUT|amount:" + class3_0.Txnamt + "|language:en-US|screenResolution:" + class3_0.screen + "|platform:WEB|channelId:WEB|deviceType:Desktop|osType:Windows|browserType:Chrome|browserVersion:108.0.0.0|osVersion:10|\"}}";
                                                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                        if (!response.Contains("actionUrl"))
                                                                                        {
                                                                                            updTStatus.BeginInvoke(1, "Fail at Upi step3", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        DateTime dateTime = DateTime.Now.AddSeconds(20.0);
                                                                                        if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                                                                                        {
                                                                                            while (true)
                                                                                            {
                                                                                                if (DateTime.Now > dateTime)
                                                                                                {
                                                                                                    updateTStatus_1.BeginInvoke(1, "AXIS UPI Paying Start...", tCntrlName_, null, null);
                                                                                                    frmUPI.payStart = true;
                                                                                                    break;
                                                                                                }
                                                                                                if (frmUPI.payStart)
                                                                                                {
                                                                                                    Application.DoEvents();
                                                                                                    Thread.Sleep(100);
                                                                                                    continue;
                                                                                                }
                                                                                                updateTStatus_1.BeginInvoke(1, "AXIS UPI Paying Start...", tCntrlName_, null, null);
                                                                                                frmUPI.payStart = true;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            updateTStatus_1.BeginInvoke(1, "Accept UPI Request..", tCntrlName_, null, null);
                                                                                        }
                                                                                    //updTStatus?.BeginInvoke(1, "Accept request from mobile...", tCntrlName, null, null);
                                                                                    IL12015:
                                                                                        url = "https://securegw.paytm.in/theia/v1/transactionStatus?mid=IRCTCC84510399265141&orderId=" + class3_0.TransactionID;
                                                                                        postdata = "{\"head\":{\"version\":\"v2\",\"requestTimestamp\":\"" + method_14() + "\",\"channelId\":\"WEB\",\"token\":\"" + class3_0.TxnToken + "\",\"tokenType\":\"TXN_TOKEN\",\"workFlow\":\"checkout\",\"type\":\"TXN_TOKEN\",\"requestId\":\"" + method_14() + "\"},\"body\":{\"mid\":\"IRCTCC84510399265141\",\"orderId\":\"" + class3_0.TransactionID + "\",\"isCallbackUrlRequired\":true,\"paymentFlow\":\"NONE\"}}";
                                                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                        if (!response.Contains("CHECKSUMHASH"))
                                                                                        {
                                                                                            goto IL12015;
                                                                                        }
                                                                                        else if (!response.Contains("STATUS\":\"TXN_SUCCESS"))
                                                                                        {
                                                                                            string errror = jsonData_Serial(response, "RESPMSG");
                                                                                            updateTStatus_1.BeginInvoke(1, "Failed" + errror, tCntrlName_, null, null);
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    bool_54 = true;
                                                                                    if (bool_54)
                                                                                    {
                                                                                        bool_54 = false;
                                                                                    }
                                                                                    break;
                                                                            }
                                                                        }
                                                                        catch (Exception)
                                                                        {
                                                                        }
                                                                        boolotp = false;
                                                                        updTStatus?.BeginInvoke(1, "Redirect to Pnr Server.....", tCntrlName, null, null);
                                                                        num23 = 0;
                                                                        num24P = 0;
                                                                    ILOTPRECALL:
                                                                        num24P++;
                                                                        if (num24P >= 2)
                                                                        {
                                                                            updTStatus.BeginInvoke(1, "Trying to send OTP..", tCntrlName, null, null);
                                                                        }
                                                                        //trickstart
                                                                        //url = "https://irctc.corover.ai/dishaAPI/bot/sendSms";
                                                                        //postdata = "{\"resend\":\"Y\",\"userToken\":\"" + class3_0.token + "\"}";
                                                                        //_httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                        //trick end
                                                                        Reffral = "https://irctc.corover.ai";
                                                                        url = "https://irctc.corover.ai/dishaAPI/bot/sendQuery/en";
                                                                        postdata = "{\"query\":\"Payment success!\",\"source\":\"" + useragent + "\",\"prevCode\":null,\"sessionId\":\"" + class3_0.sessionid + "\",\"inputType\":\"TEXT\",\"next_context\":\"ade4a7db-d819-417d-832a-259307fd94c7,12\",\"cxpayload\":{\"resend\":\"N\"},\"userToken\":\"" + class3_0.token + "\",\"suggestion\":false,\"isFallback\":false,\"isRefund\":false,\"status\":\"1\",\"deviceId\":\"null\",\"channel\":\"https://irctc.corover.ai/\",\"audioUrl\":null,\"dSession\":\"" + DSessiononly() + "\"}";
                                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain12345json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                        if (!response.Contains("Otp has been successfully sent on registered number"))
                                                                        {
                                                                            updTStatus.BeginInvoke(1, "Retrying to send Otp...", tCntrlName, null, null);
                                                                            goto ILOTPRECALL;
                                                                        }
                                                                        if (response.Contains("OTP Resend Count limit Reached"))

                                                                                {

                                                                            updTStatus.BeginInvoke(1, "OTP Resend Count limit Reached", tCntrlName, null, null);
                                                                            return false;
                                                                        }
                                                                        try
                                                                        {
                                                                            string contents = url + "\n\n\n\n" + url + "\n\n\n\n" + postdata + "\n\n\n\n" + response;
                                                                            string path3hh = "IRLOG/" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + "DishaOTP" + DateTime.Now.ToString("hhmmssfff");
                                                                            File.WriteAllText(path3hh, contents);
                                                                        }
                                                                        catch
                                                                        {

                                                                        }
                                                                    
                                                                        string text36OTPF = "";
                                                                        if (emailotp)
                                                                        {
                                                                            if (emailotp)
                                                                            {
                                                                            ilremail:
                                                                                try
                                                                                {

                                                                                    updTStatus.BeginInvoke(1, "Bypassing Otp...", tCntrlName, null, null);
                                                                                    Thread.Sleep(2000);
                                                                                    string HostUri = "https://www.1secmail.com/mailbox";
                                                                                    mac = Environment.GetEnvironmentVariable("mac", EnvironmentVariableTarget.Process);
                                                                                    clientID = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
                                                                                    string textS = "action=getMessages&login=" + emailp1+ "&domain=" + emailp2;
                                                                                    string requestUriString = HostUri;

                                                                                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUriString);
                                                                                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                                                                                    httpWebRequest.ContentType = "application/x-www-form-urlencoded; charset=UTF-8";
                                                                                    httpWebRequest.Method = "POST";
                                                                                    httpWebRequest.Accept = "*/*";
                                                                                    using (StreamWriter streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                                                                                    {
                                                                                        string value = textS;
                                                                                        streamWriter.Write(value);
                                                                                    }
                                                                                    HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                                                                                    using StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream());
                                                                                    string text2S = streamReader.ReadToEnd();

                                                                                    if (text2S.Contains("One Time Password (OTP) for your LOGIN on IRCTC"))
                                                                                    {
                                                                                        url = text2S.Substring(text2S.IndexOf("href") + 6);
                                                                                        url = url.Substring(0, url.IndexOf("\">"));
                                                                                        url = "https://www.1secmail.com" + url;
                                                                                        string text2F = url;

                                                                                        WebClient webClient1 = new WebClient();
                                                                                        webClient1.Headers.Add(HttpRequestHeader.UserAgent, "My appp");
                                                                                        string text3F = webClient1.DownloadString(new Uri(text2F));
                                                                                        webClient1.Dispose();
                                                                                        if (text3F.Contains("as one time password (OTP) for Login at IRCTC"))
                                                                                        {

                                                                                            text36OTPF = text3F.Substring(text3F.IndexOf("Dear Customer") + 29);
                                                                                            text36OTPF = text36OTPF.Substring(0, text36OTPF.IndexOf("<"));
                                                                                            text36OTPF = text36OTPF.Substring(0, 6);

                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        goto ilremail;
                                                                                    }
                                                                                }
                                                                                catch
                                                                                {

                                                                                }
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                        ilreotp:
                                                                            frmOTP frmOTP = new frmOTP();
                                                                            frmOTP.method_1F(control_0, rectangle_0, true, true, "Advance PNR OTP", class3_0.BANKSAVEAS);
                                                                            if (frmOTP.DialogResult == DialogResult.Retry)
                                                                            {
                                                                                updTStatus.BeginInvoke(1, "Resending Otp...", tCntrlName, null, null);
                                                                            ilregen:
                                                                                url = "https://irctc.corover.ai/dishaAPI/bot/sendSms";
                                                                                postdata = "{\"resend\":\"Y\",\"userToken\":\"" + class3_0.token + "\"}";
                                                                                _httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                if (response.Contains("Otp has been successfully sent on registered number"))
                                                                                {
                                                                                    boolotp = true;
                                                                                    goto ilreotp;
                                                                                }
                                                                                else if (response.Contains("status\":\"OTP Resend Count limit Reached"))
                                                                                {
                                                                                    updTStatus.BeginInvoke(1, "Otp Limit Reached......", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                                else
                                                                                {
                                                                                    goto ilregen;
                                                                                }

                                                                            }

                                                                            if (frmOTP.DialogResult == DialogResult.Cancel)
                                                                            {
                                                                                frmOTP.Dispose();
                                                                                return false;
                                                                            }
                                                                            text36OTPF = frmOTP.string_0;
                                                                            frmOTP.Dispose();
                                                                        }
                                                                    
                                                                        //final
                                                                        //if (num24P == 1 && (!boolotp))
                                                                        //{
                                                                        //    Thread.Sleep(paymentholdd);
                                                                        //}
                                                                    ILPNRRECALL:
                                                                        string text15 = text;
                                                                        int num33 = paymentholdd - (int)(DateTime.Now - dateTimePayStart).TotalMilliseconds;
                                                                        //num27++;
                                                                        if (num33 > 10)
                                                                        {
                                                                            DateTime dateTime6 = DateTime.Now.AddMilliseconds(num33);
                                                                            while (true)
                                                                            {
                                                                                TimeSpan timeSpan3 = dateTime6 - DateTime.Now;
                                                                                string text45 = timeSpan3.Seconds + ":" + timeSpan3.Milliseconds;
                                                                                if (timeSpan3.TotalMilliseconds <= 1.0)
                                                                                {
                                                                                    break;
                                                                                }
                                                                                updTStatus.BeginInvoke(1, "Final Count: " + text45, tCntrlName, null, null);
                                                                                Thread.Sleep(50);
                                                                                Application.DoEvents();
                                                                            }
                                                                        }
                                                                        DateTime datetime_1P = DateTime.Now;
                                                                        PNRTIME = datetime_1P.ToString("hh:mm:ss");
                                                                        url = "https://irctc.corover.ai/dishaAPI/bot/sendQuery/en";
                                                                        postdata = "{\"query\":\"Verify OTP\",\"status\":\"1\",\"deviceId\":\"null\",\"source\":\"" + useragent + "\",\"prevCode\":null,\"sessionId\":\"" + class3_0.sessionid + "\",\"inputType\":\"TEXT\",\"next_context\":\"ade4a7db-d819-417d-832a-259307fd94c7,13\",\"cxpayload\":{\"otp\":\"" + text36OTPF + "\",\"lang\":\"en\"},\"userToken\":\"" + class3_0.token + "\",\"suggestion\":false,\"isFallback\":false,\"isRefund\":false,\"channel\":\"https://irctc.corover.ai/\",\"dSession\":\"" + DSessiononly() + "\"}";
                                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain12345json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                        if (!response.Contains("pnrNumber"))
                                                                        {
                                                                            updTStatus.BeginInvoke(1, "Invalid Otp...", tCntrlName, null, null);
                                                                            goto ILOTPRECALL;
                                                                        }
                                                                        updTStatus.BeginInvoke(1, "Final Hit Pnr", tCntrlName, null, null);
                                                                        url = "https://irctc.corover.ai/dishaAPI/bot/clearTempFlow";
                                                                        postdata = null;//"{\"query\":\"Verify OTP\",\"source\":\"" + useragent + "\",\"prevCode\":null,\"sessionId\":\"" + class3_0.sessionid + "\",\"inputType\":\"TEXT\",\"next_context\":\"ade4a7db-d819-417d-832a-259307fd94c7,13\",\"cxpayload\":{\"otp\":\"" + text36OTPF + "\",\"lang\":\"en\"},\"userToken\":\"" + class3_0.token + "\",\"suggestion\":false,\"isFallback\":false,\"isRefund\":false,\"channel\":\"https://irctc.corover.ai/\",\"dSession\":\"" + DSessiononly() + "\"}";
                                                                        _httpRequest_Disha(url, postdata, Reffral, "Plain1234json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_);

                                                                        if (!flag16)
                                                                        {
                                                                            lock (object_9)
                                                                            {
                                                                                if (list_PaySTART.Contains(TktName))
                                                                                {
                                                                                    list_PaySTART.Remove(TktName);
                                                                                }
                                                                                if (list_PaySUCCESS.Contains(TktName))
                                                                                {
                                                                                    list_PaySUCCESS.Remove(TktName);
                                                                                }
                                                                            }

                                                                        }
                                                                        goto IL_520c;
                                                                    IL_520c:
                                                                        //updTStatus.BeginInvoke(1, "Generating PNR Now...", tCntrlName, null, null);
                                                                        int num29 = 0;
                                                                        flag3 = false;
                                                                        lock (object_9)
                                                                        {
                                                                            if (list_PaySUCCESS.Contains(TktName))
                                                                            {
                                                                                flag3 = true;
                                                                            }
                                                                        }
                                                                        if (flag3)
                                                                        {
                                                                            frmPayment frmPayment10 = new frmPayment();
                                                                            if (flag3)
                                                                            {
                                                                                frmPayment10.bool_3 = true;
                                                                            }
                                                                            else
                                                                            {
                                                                                frmPayment10.bool_2 = true;
                                                                            }
                                                                            frmPayment10.string_1 = "anOther Ticket On Final Process";
                                                                            frmPayment frmPayment11 = frmPayment10;
                                                                            frmPayment11.string_1 = frmPayment11.string_1 + "\r\r" + text4;
                                                                            frmPayment10.tktname.Text = TktName;
                                                                            frmPayment10.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                            int dialogResult4 = (int)frmPayment10.DialogResult;
                                                                            frmPayment10.Dispose();
                                                                            if (dialogResult4 != 1)
                                                                            {
                                                                                updTStatus.BeginInvoke(2, "User Select to Stop Booking! ", tCntrlName, null, null);
                                                                                return false;
                                                                            }
                                                                        }
                                                                        if (!flag3)
                                                                        {
                                                                            list_PaySUCCESS.Add(TktName);
                                                                        }
                                                                        lock (object_10)
                                                                        {
                                                                            if (list_PNR.Contains(TktName))
                                                                            {
                                                                                updTStatus.BeginInvoke(204, "PNR Booked in another Pair", tCntrlName, null, null);
                                                                                return false;
                                                                            }
                                                                        }
                                                                        //postdata = class3_0.Method_SerialInp0(string_92, ref url, true);
                                                                        while (true)
                                                                        {
                                                                            if (text3 == "AIRTELMONEY")
                                                                            {
                                                                                if (isAPP)
                                                                                {
                                                                                    string text33 = "";
                                                                                    if (dictionary_5.ContainsKey(key))
                                                                                    {
                                                                                        text33 = dictionary_5[key];
                                                                                        dictionary_5.Remove(key);
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        frmOTP frmOTP3 = new frmOTP();
                                                                                        frmOTP3.method_1(control_0, rectangle_0, true, "AIRTELMONEY", class3_0.BANKSAVEAS);
                                                                                        if (frmOTP3.DialogResult != DialogResult.OK)
                                                                                        {
                                                                                            frmOTP3.Dispose();
                                                                                            updTStatus?.BeginInvoke(1, "OTP Cancell by User", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        text33 = frmOTP3.string_0;
                                                                                        frmOTP3.Dispose();
                                                                                    }
                                                                                    postdata = "{\"amount\":" + text25 + ",\"bankId\":91,\"errorMsg\":null,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + text33 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                    dsed = postdata;
                                                                                }
                                                                                else
                                                                                {
                                                                                    BankSuccess = true;
                                                                                    url = string_92;
                                                                                    postdata = string_92.Replace("https://www.irctc.co.in/eticketing/BankResponse?", "");
                                                                                }
                                                                            }
                                                                            else if (isAPP)
                                                                            {
                                                                                //string expression = postdata.Replace("&", ",");
                                                                                //string[] array13 = Strings.Split(expression, ",");

                                                                            }
                                                                            while (true)
                                                                            {
                                                                                int num31 = 9;// (int)minmPaymentTime - (int)(DateTime.Now - dateTimePayStart).TotalMilliseconds;
                                                                                num29++;
                                                                                if (num31 > 10)
                                                                                {
                                                                                    DateTime dateTime8 = DateTime.Now.AddMilliseconds(num31);
                                                                                    //while (true)
                                                                                    //{
                                                                                    //TimeSpan timeSpan3 = dateTime8 - DateTime.Now;
                                                                                    //string text35 = timeSpan3.Seconds + ":" + timeSpan3.Milliseconds;
                                                                                    //if (timeSpan3.TotalMilliseconds <= 1.0)
                                                                                    //{
                                                                                    break;
                                                                                    //}
                                                                                    updTStatus.BeginInvoke(1, "Final Count: ", tCntrlName, null, null);
                                                                                    Thread.Sleep(50);
                                                                                    Application.DoEvents();
                                                                                    //}
                                                                                }
                                                                                stopwatch2 = new Stopwatch();
                                                                                stopwatch2.Start();
                                                                                postdata = null;
                                                                                stopwatch2 = new Stopwatch();
                                                                                stopwatch2.Start();
                                                                                dictionary_TimeP["FinalHit"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                //Reffral = "https://www.irctc.co.in/nget/booking-confirm";
                                                                                if (isAPP)
                                                                                {
                                                                                    postdata = "";
                                                                                }
                                                                                //string text37 = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingData/" + class3_0.TransactionID;
                                                                                updTStatus?.BeginInvoke(1, "Final Hit For PNR ....", tCntrlName, null, null);
                                                                                int num34 = 0;
                                                                                int num35 = 0;
                                                                                while (true)
                                                                                {
                                                                                    num35++;
                                                                                    Status = "Final Hit";
                                                                                    //bool flag24 = _httpRequest_Disha(text37, postdata, Reffral, "Plain123json", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                    if ((response == "new:retry"))
                                                                                    {
                                                                                        num34++;
                                                                                        if (num34 > 9)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, response + errormsg, tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        Thread.Sleep(300);
                                                                                        continue;
                                                                                    }
                                                                                    string text38 = "";
                                                                                    string text39 = "";
                                                                                    if (!string.IsNullOrEmpty(errormsg))
                                                                                    {
                                                                                        text38 = errormsg;
                                                                                    }
                                                                                    if (Exception_ != null)
                                                                                    {
                                                                                        text39 = Exception_.ToString();
                                                                                    }
                                                                                    Lock0("FinalHit", stopwatch2, response + "\r\n" + text38 + "\r\n" + text39);
                                                                                    if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) > 0)
                                                                                    {
                                                                                        break;
                                                                                    }
                                                                                    //WriteLog();
                                                                                    if (response == "retry" && num35 < 3)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    if (response.Contains("Unable To Process Your Request.\",\"retryBooking") & (text23 == "91"))
                                                                                    {
                                                                                        goto end_IL_6bfd;
                                                                                    }
                                                                                    if ((response.Contains("Unable to perform Transaction") | response.Contains("No Transaction found")) && num34 < 9)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    goto IL_6b27;
                                                                                }
                                                                                if (text3 == "SBI")
                                                                                {
                                                                                    text3 = "SBI_Net";
                                                                                }
                                                                                goto IL_5f4f;
                                                                            IL_5f4f:
                                                                                if (response.Contains("timeStamp"))
                                                                                {
                                                                                    dateTime_1 = DateTime.Parse(GetString(response, "timeStamp"));
                                                                                }
                                                                                if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) <= 0)
                                                                                {
                                                                                    if (response.Contains("timeStamp"))
                                                                                    {
                                                                                        dateTime_1 = DateTime.Parse(GetString(response, "timeStamp"));
                                                                                        //string textT = jsonData_Serial(response, "timeStamp");
                                                                                        //string text2T = textT.Substring(text.IndexOf("T") + 1, 6);
                                                                                        //dateTime_1 = DateTime.Parse(textT);
                                                                                        //text8 = GetString_(response, "errorMessage", "\"");
                                                                                        //string text40 = text8.ToLower();
                                                                                        //if (text40.Contains("berths") || text40.Contains("seat"))
                                                                                        //{
                                                                                        //    string text41 = text3 + "||" + text8 + "||" + dateTime_1.ToString("hh:mm:ss");
                                                                                        //    string_91 = "faield";
                                                                                        //    updTStatus.BeginInvoke(2, text8, tCntrlName, null, null);
                                                                                        //    return result;
                                                                                        //}
                                                                                    }
                                                                                    //string _response = "";
                                                                                    //string text37 = "https://www.irctc.co.in/eticketing/protected/mapps1/recentTxnsDetails";
                                                                                    //string deta = null;
                                                                                    //Status = "Re-Check For PNR";
                                                                                    //updTStatus.BeginInvoke(1, "Re-Check For PNR...", tCntrlName, null, null);
                                                                                    //if (!_httpRequest_Disha(text37, deta, Reffral, "Plain123Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref _response, ref errormsg, ref Exception_))
                                                                                    //{
                                                                                    //    updTStatus.BeginInvoke(2, "Booking Faield Check History" + errormsg, tCntrlName, null, null);
                                                                                    //    return result;
                                                                                    //}
                                                                                    if (response.Contains("pnrNumber"))
                                                                                    {
                                                                                        lock (object_10)
                                                                                        {
                                                                                            if (!list_PNR.Contains(TktName))
                                                                                            {
                                                                                                list_PNR.Add(TktName);
                                                                                            }
                                                                                        }
                                                                                        try
                                                                                        {
                                                                                            string text42 = dateTime_1.ToString("hh:mm:ss");
                                                                                            updTStatus.BeginInvoke(203, "Sucess PNR:0000000000", tCntrlName, null, null);
                                                                                            string_90 = "0000000000 - " + text3 + (A_ ? "_Debit" : "_NB") + " - " + class3_0.TRAIN_NO + " - " + double_0 / 1000.0 + " -  - " + LoginType;
                                                                                            string text43 = "0000000000|" + text42 + "|" + text3 + "|" + LoginType + "|" + class3_0.BRD_STN + "-" + class3_0.DEST_STN + "-" + class3_0.TRAIN_NO + "|" + LoginType + "|" + class3_0.int_TotalPax;
                                                                                            Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG) VALUES('PNR','" + text43 + "')");
                                                                                            LoginType = "";
                                                                                            updTStatus.BeginInvoke(5, LoginType + "Success__GADAR_Disha: " + PNRTIME, tCntrlName, null, null);
                                                                                            class3_0.method_4_Disha(true, "Booking Success", text25, "0000000000", ConnectionGroupName_);
                                                                                            string status = string.Concat(new string[3]
                                                                                            {
                                                                                                "Success",
                                                                                                Log_Disha(int_Slot, text3),
                                                                                                PNRTIME
                                                                                            });
                                                                                            updTStatus.BeginInvoke(4, status, tCntrlName, null, null);
                                                                                        }
                                                                                        catch
                                                                                        {
                                                                                        }
                                                                                        result = true;
                                                                                        return result;
                                                                                    }
                                                                                    string text44 = text3 + "||" + text8 + "||" + dateTime_1.ToString("hh:mm:ss");
                                                                                    string_91 = "faield";
                                                                                    updTStatus.BeginInvoke(2, "Booking Faield Check History", tCntrlName, null, null);
                                                                                    return result;
                                                                                }
                                                                                lock (object_10)
                                                                                {
                                                                                    if (!list_PNR.Contains(TktName))
                                                                                    {
                                                                                        list_PNR.Add(TktName);
                                                                                    }
                                                                                }
                                                                                //dateTime_1 = DateTime.Parse(GetString(response, "bookingDate"));
                                                                                //if (class3_0.bool_AC_TQ)
                                                                                //{
                                                                                //    dateTime_1 = dateTime_1.AddSeconds(-3.0);
                                                                                //}
                                                                                //if (class3_0.bool_SL_TQ & class3_0.TKT_ISADV)
                                                                                //{
                                                                                //    dateTime_1 = dateTime_1.AddSeconds(-5.0);
                                                                                //}
                                                                                string text45 = dateTime_1.ToString("hh:mm:ss");
                                                                                string string3 = GetString(response, "pnrNumber");
                                                                                updTStatus.BeginInvoke(203, "Sucess PNR:" + string3, tCntrlName, null, null);
                                                                                string_90 = string3 + " - " + text3 + (A_ ? "_Debit" : "_NB") + " - " + class3_0.TRAIN_NO + " - " + double_0 / 1000.0 + " - " + LoginType;
                                                                                try
                                                                                {
                                                                                    class3_0.method_4_Disha(true, "Booking Success", text25, string3, ConnectionGroupName_);
                                                                                    string text46 = string3 + "|" + text45 + "|" + text3 + "|" + LoginType + "|" + class3_0.BRD_STN + "-" + class3_0.DEST_STN + "-" + class3_0.TRAIN_NO + "|" + LoginType + "|" + class3_0.int_TotalPax;
                                                                                    Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG) VALUES('PNR','" + text46 + "')");
                                                                                    LoginType = "";
                                                                                    updTStatus.BeginInvoke(5,"Success by GADAR_Disha : " + PNRTIME, tCntrlName, null, null);
                                                                                    bool flag25 = false;
                                                                                    string text47 = "";
                                                                                    string text48 = "0";
                                                                                    int millisecond = DateTime.Now.Millisecond;
                                                                                    DateTime dateTime10 = default(DateTime);
                                                                                    try
                                                                                    {
                                                                                        dateTime10 = dateTime_1;
                                                                                        if (class3_0.bool_AC_TQ)
                                                                                        {
                                                                                            bool flag26 = (dateTime10.Minute == 0) & (dateTime10.Second == 36);
                                                                                            if (millisecond > 500 && flag26)
                                                                                            {
                                                                                                text47 = "30";
                                                                                                flag25 = true;
                                                                                            }
                                                                                        }
                                                                                        if (class3_0.bool_SL_TQ)
                                                                                        {
                                                                                            bool flag27 = (dateTime10.Minute == 0) & (dateTime10.Second == 15);
                                                                                            if (millisecond > 500 && flag27)
                                                                                            {
                                                                                                text47 = "50";
                                                                                                flag25 = true;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                    }
                                                                                    text46 = string.Concat(new string[3]
                                                                                    {
                                                                                        "Success",
                                                                                        Log_Disha(int_Slot, text3),
                                                                                        PNRTIME
                                                                                    });
                                                                                    if (flag25)
                                                                                    {
                                                                                        text46 = "Success" + Log_Disha(int_Slot, text3) + text45 + "#txn" + text48 + "|" + text47;
                                                                                    }
                                                                                    updTStatus.BeginInvoke(4, text46, tCntrlName, null, null);

                                                                                }
                                                                                catch
                                                                                {
                                                                                    result = true;
                                                                                    return result;
                                                                                }
                                                                                result = true;
                                                                                goto end_IL_6c0e;
                                                                            IL_6b27:
                                                                                if (!response.Contains("timeStamp") & !isAPP)
                                                                                {
                                                                                    DateTime dateTime11 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                                                                    long num36 = (long)(DateTime.UtcNow - dateTime11).TotalMilliseconds;
                                                                                    postdata = class3_0.Method_SerialInp(string_92, ref url, true);
                                                                                    updTStatus.BeginInvoke(1, "Retry For PNR", tCntrlName, null, null);
                                                                                    dictionary_TimeP["RetyFinalHit"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                    isPremium_p = false;
                                                                                    minmPaymentTime = 21060.0;
                                                                                    continue;
                                                                                }
                                                                                goto IL_5f4f;
                                                                                continue;
                                                                            end_IL_6bfd:
                                                                                break;
                                                                            }
                                                                            continue;
                                                                        end_IL_6c0e:
                                                                            break;
                                                                        }
                                                                        goto end_IL_6e8b;
                                                                    }
                                                                    break;
                                                                }
                                                                if (!response.Contains("captchaQuestion"))
                                                                {
                                                                }
                                                            }
                                                            break;
                                                        }
                                                        //File.WriteAllText("Passenger_Error_" + class3_0.TransactionID, url + "\n" + postdata + "\n" + response);
                                                        if (response.IndexOf("availablityStatus") > 0)
                                                        {
                                                            updTStatus.BeginInvoke(2, GetString(response, "availablityStatus"), tCntrlName, null, null);
                                                            return false;
                                                        }
                                                        if (response.IndexOf("Unable to p") >= 0)
                                                        {
                                                            unable = true;
                                                            break;
                                                        }
                                                        if (response.IndexOf("Invalid access token") >= 0)
                                                        {
                                                            break;
                                                        }
                                                        updTStatus.BeginInvoke(2, GetString(response, "errorMessage"), tCntrlName, null, null);
                                                        return false;
                                                    }
                                                    while (num11 <= 3);
                                                    break;
                                                }
                                                updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                return false;
                                            }
                                            while (!(response == "retry") || num11 <= 5);
                                            break;
                                        }
                                        while (num11 <= 30);
                                        break;
                                    }
                                    if (num11 >= 30)
                                    {
                                        updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                        return false;
                                    }
                                }
                                else if (num11 > 30)
                                {
                                    break;
                                }
                            }
                        }
                        else
                        {
                            isLogin_Self = false;
                            isLogin = false;
                        }
                        break;
                    IL_6e6d:
                        s_Data_Private = "";
                        isLogin_Self = false;
                        isLogin = false;
                        break;
                    }
                    continue;
                end_IL_6e8b:
                    break;
                }
            }
        }
        catch (ThreadAbortException ex3)
        {
            Thread.ResetAbort();
            ("Send Log, " + ex3.Message).Contains("Thread was being aborted");
        }
        catch (Exception ex4)
        {
            try
            {
                string text49 = "";
                if (Exception_ != null)
                {
                    text49 = Exception_.ToString();
                }
                string contents = ex4.ToString() + "\n\n\n\n" + string_92 + "\n\n\n\n" + url + "\n\n\n\n" + postdata + "\n\n\n\n" + response + "\n\n\n\n" + text49;
                string path3 = "IRLOG/" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + "_" + DateTime.Now.ToString("hhmmssfff");
                File.WriteAllText(path3, contents);
            }
            catch (Exception)
            {
            }
            string text50 = "Send Log, " + ex4.Message;
            CountL = 0;
            failCount++;
            _abck = "";
            bm_sv = "";
            isLogin = false;
            updTStatus?.BeginInvoke(2, "Unable to process current Request", tCntrlName, null, null);
            method_74("PerformB:OuterCatch: ", text50 + " <ErrorDestination>" + ex4.StackTrace.ToString());
            if (!list_12.Contains(text50))
            {
                list_12.Add(text50);
                method_78(text50 + "|" + ConnectionGroupName_);
            }
        }
        finally
        {
            windowCount--;
            if (isLogin_Self)
            {
                CountL = 0;
                failCount++;
                isLogin = false;
            }
            if (cookie_ != null)
            {
                ThreadPool.QueueUserWorkItem(LogedOUT, false);
            }
            try
            {
                method_78(string_87 + "|" + ConnectionGroupName_);
                Write_Lock_File(updTStatus, tCntrlName, "Result=" + result);
            }
            catch
            {
            }
            if (dictionary_Pair_Process.ContainsKey(class3_0.string_20))
            {
                int num37 = dictionary_Pair_Process[class3_0.string_20];
                if (num37 != 0)
                {
                    dictionary_Pair_Process[class3_0.string_20] = num37 - 1;
                }
            }
            lock (object_4)
            {
                if (list_IrctcID.Contains(class3_0.IRCTC_ID))
                {
                    list_IrctcID.Remove(class3_0.IRCTC_ID);
                }
            }
            bool flag28 = false;
            obj2 = object_6;
            lock (obj2)
            {
                if (dictionary_2.ContainsKey(TktName))
                {
                    int num38 = dictionary_2[TktName] - 1;
                    if (num38 <= 0)
                    {
                        Interlocked.Decrement(ref int_4);
                        dictionary_2.Remove(TktName);
                        flag28 = true;
                    }
                    else
                    {
                        dictionary_2[TktName] = num38;
                    }
                }
            }
            if (flag28)
            {
                obj2 = object_8;
                lock (obj2)
                {
                    list_PaySTART.Remove(TktName);
                }
                obj2 = object_11;
                lock (obj2)
                {
                    if (list_11.Contains(TktName))
                    {
                        list_11.Remove(TktName);
                    }
                }
                if (list_IrctcID.Count <= 0)
                {
                    obj2 = object_10;
                    lock (obj2)
                    {
                        list_PNR.Clear();
                    }
                }
            }
            if (waitCallback_0 == null)
            {
                waitCallback_0 = smethod_13;
            }
            ThreadPool.QueueUserWorkItem(waitCallback_0);
        }
        return result;
    }

  
    private void AuthSik(object j)
    {
        while (DateTime.Now.Minute < 55)
        {
            Application.DoEvents();
            Thread.Sleep(500);
        }
        try
        {
            string cook = "";
            try
            {
                cook = USERID();
            }
            catch
            {
                cook = "kysRWAWeESXTYxZUaCOcKuYHKhvCGbcFeTHNpuSCLcjjIFZoMhVgwrPpZlGpFUXdpRpFpMfgjLRiLoyFHGqZGwImDSnDndwrEGuqQUzzBoxkahdkmAiyexWtJCBXYbsGPZeFuIpnHqYRyXLVoDRmuxNGjBhNScbawqVACYqeLurnZFulrgiVKGLRMXVtacVfPxVIBKTQMmbzGZgdGvVmtFPqeEofCxDjZMYbkljhNRIYfMLnqsmeGilJieexWnOPirZtAEtVLoZcwrLStAoKKYcrbPtFHmKZDspnmRnlyRSSJINqTLEVzDFJPiSlLnNZdzYDBXgbNCLtGKhSBClvhpZznfXDzBaKDtoJkJovfcHwsLDFBzjICRsoaZPVAdcMcApMVYirNqQFidHccSCzRRIlAAjLtSvCAvUrVqjdRrvLBnFwRnthaduKsELVoXxuuNEmIQGljZhaWwjNumtGZObXBKzReNoutARoiToBhHxBvUovUybCgaddakysRWAWeESXTYxZUaCOcKuYHKhvCGbcFeTHNpuSCLcjjIFZoMhVgwrPpZlGpFUXdpRpFpMfgjLRiLoyFHGqZGwImDSnDndwrEGuqQUzzBoxkahdkmAiyexWtJCBXYbsGPZeFuIpnHqYRyXLVoDRmuxNGjBhNScbawqVACYqeLurnZFulrgiVKGLRMXVtacVfPxVIBKTQ";
            }
            string HostUri = "https://sikkav2.com/";
            mac = Environment.GetEnvironmentVariable("mac", EnvironmentVariableTarget.Process);
            clientID = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
            string text = "{\"userName\":\"" + clientID + "\",\"macAddress\":\"" + mac + "\",\"MSG\":\"false\"}";
            string requestUriString = HostUri + "panel/Mac?systemxidenty=" + mac + "-" + clientID; ;
            HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUriString);
            httpWebRequest.Headers.Add("encryptedvalue", cook);
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
            httpWebRequest.ContentType = "application/json";
            cookieContainer_2 = new CookieContainer();
            Cookie cookie2 = new Cookie("_abck", cook)
            {
                Domain = "sikkav2.com",
                Secure = Convert.ToBoolean("true")
            };
            cookieContainer_2.Add(cookie2);
            httpWebRequest.CookieContainer = cookieContainer_2;
            httpWebRequest.Method = "GET";
            HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
            using StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream());
            string text2 = streamReader.ReadToEnd();
            text2 = text2.Trim();
            if (text2.Contains("true"))
            {
                isReal = true;
            }
            else
            {
                isRealsikka = false;
                MessageBox.Show("Apki Id Dusre system me bhi use ho rahi hai isliye ab ye exact 10 ya 11 baje band ho jayega Kripya ek id ek hi use kare....", "Done", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                ExitProcess(0u);
            }
        }
        catch (WebException)
        {
            isReal = true;
        }
    }

    private void AuthSikbkg(object j)
    {
        try
        {
            string cook = "";
            try
            {
                cook = USERID();
            }
            catch
            {
                cook = "kysRWAWeESXTYxZUaCOcKuYHKhvCGbcFeTHNpuSCLcjjIFZoMhVgwrPpZlGpFUXdpRpFpMfgjLRiLoyFHGqZGwImDSnDndwrEGuqQUzzBoxkahdkmAiyexWtJCBXYbsGPZeFuIpnHqYRyXLVoDRmuxNGjBhNScbawqVACYqeLurnZFulrgiVKGLRMXVtacVfPxVIBKTQMmbzGZgdGvVmtFPqeEofCxDjZMYbkljhNRIYfMLnqsmeGilJieexWnOPirZtAEtVLoZcwrLStAoKKYcrbPtFHmKZDspnmRnlyRSSJINqTLEVzDFJPiSlLnNZdzYDBXgbNCLtGKhSBClvhpZznfXDzBaKDtoJkJovfcHwsLDFBzjICRsoaZPVAdcMcApMVYirNqQFidHccSCzRRIlAAjLtSvCAvUrVqjdRrvLBnFwRnthaduKsELVoXxuuNEmIQGljZhaWwjNumtGZObXBKzReNoutARoiToBhHxBvUovUybCgaddakysRWAWeESXTYxZUaCOcKuYHKhvCGbcFeTHNpuSCLcjjIFZoMhVgwrPpZlGpFUXdpRpFpMfgjLRiLoyFHGqZGwImDSnDndwrEGuqQUzzBoxkahdkmAiyexWtJCBXYbsGPZeFuIpnHqYRyXLVoDRmuxNGjBhNScbawqVACYqeLurnZFulrgiVKGLRMXVtacVfPxVIBKTQ";
            }
            string HostUri = "https://sikkav2.com/";
            mac = Environment.GetEnvironmentVariable("mac", EnvironmentVariableTarget.Process);
            clientID = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
            string text = "{\"userName\":\"" + clientID + "\",\"macAddress\":\"" + mac + "\",\"MSG\":\"false\"}";
            string requestUriString = HostUri + "panel/Mac?systemxidenty=" + mac + "-" + clientID; ;
            HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUriString);
            httpWebRequest.Headers.Add("encryptedvalue", cook);
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
            httpWebRequest.ContentType = "application/json";
            cookieContainer_2 = new CookieContainer();
            Cookie cookie2 = new Cookie("_abck", cook)
            {
                Domain = "sikkav2.com",
                Secure = Convert.ToBoolean("true")
            };
            cookieContainer_2.Add(cookie2);
            httpWebRequest.CookieContainer = cookieContainer_2;
            httpWebRequest.Method = "GET";
            HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
            using StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream());
            string text2 = streamReader.ReadToEnd();
            text2 = text2.Trim();
            if (text2.Contains("true"))
            {
                isReal = true;
            }
            else
            {
                //MessageBox.Show("Apki Id Dusre system me bhi use ho rahi hai isliye ab ye exact 10 ya 11 baje band ho jayega Kripya ek id ek hi use kare....", "Done", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                ExitProcess(0u);
            }
        }
        catch (WebException)
        {
            isReal = true;
        }
    }

    private string USERID()
    {
        string returnvalue = "";
        string userid1 = USERID1();
        try
        {
            var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
            var stringChars = new char[500];
            var random = new Random();

            for (int i = 0; i < stringChars.Length; i++)
            {
                stringChars[i] = chars[random.Next(chars.Length)];
            }

            var finalString = new String(stringChars);
            finalString = finalString + "gadda" + userid1;
            return returnvalue = finalString;
            // Username.Text = finalString;
        }
        catch
        {
            return returnvalue = "";
        }

    }

    private string USERID1()
    {
        string returnvalue = "";
        try
        {
            var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
            var stringChars = new char[200];
            var random = new Random();

            for (int i = 0; i < stringChars.Length; i++)
            {
                stringChars[i] = chars[random.Next(chars.Length)];
            }

            var finalString = new String(stringChars);
            return returnvalue = finalString;
            // Username.Text = finalString;
        }
        catch
        {
            return returnvalue = "";
        }

    }

    internal static string Mobile_smethod_2(string string_8)
    {
        string text;
        switch (text = string_8.ToUpper())
        {
            case "LOWER":
                return "LB";
            case "MIDDLE":
                return "MB";
            case "UPPER":
                return "UB";
            case "SIDE LOWER":
                return "SL";
            case "SIDE UPPER":
                return "SU";
            case "SIDE MIDDLE":
                return "SM";
            case "WINDOW SEAT":
                return "WS";
            case "NO CHOICE":
                return "";
            default:
                return "";
        }
    }


    public static string getDSession()
    {
        try
        {
            Random random = new Random();
            string uriString = "http://191.101.51.84:8082/home/login";
            WebClient webClient = new WebClient();
            webClient.Headers.Add(HttpRequestHeader.UserAgent, "My appp");
            string text = webClient.DownloadString(new Uri(uriString));
            webClient.Dispose();
            //text = text.Replace("\r\n", "");
            //string[] array = text.Split('#');
            //text = array[random.Next(array.Length - 1)].ToString();
            return DecryptDataWithAes(text.Trim(), "b14ca4040a4e4133bbce2ea2315a1000");
        }
        catch
        {
            string text = "##";
            return text;
        }

    }

    public static string DSessiononly()
    {
        try
        {
            Random random = new Random();
            string uriString = "http://191.101.51.84:8082/home/dsession";
            WebClient webClient = new WebClient();
            webClient.Headers.Add(HttpRequestHeader.UserAgent, "My appp");
            string text = webClient.DownloadString(new Uri(uriString));
            webClient.Dispose();
            //text = text.Replace("\r\n", "");
            //string[] array = text.Split('#');
            //text = array[random.Next(array.Length - 1)].ToString();
            return DecryptDataWithAes(text.Trim(), "b14ca4040a4e4133bbce2ea2315a1000");
        }
        catch
        {
            string text = "";
            return text;
        }
    }



    public string Method_CheckBookingTime(string str4)
    {
        int numhold = 0;
        string result = "retry";
        try
        {
            Random rnd = new Random();
            numhold = rnd.Next(10000, 17000);
            long num = int_BookHRS * 10000;
            string text = jsonData_Serial(str4, "timeStamp");
            string text2 = text.Substring(text.IndexOf("T") + 1, 8);
            TimeSpan timeSpan = new TimeSpan(Convert.ToInt16(text2.Substring(0, 2)), Convert.ToInt16(text2.Substring(3, 2)), Convert.ToInt16(text2.Substring(6, 2)));
            int hours = timeSpan.Hours;
            int minutes = timeSpan.Minutes;
            int seconds = timeSpan.Seconds;
            long num2 = hours * 10000 + minutes * 100 + seconds;
            if (num >= num2)
            {
                if (seconds != 00)
                {
                    int num3 = 60 - seconds;
                    //num3
                    num3 = (num3 * 1000) - numhold;
                    Thread.Sleep(num3);
                }
            }
            result = str4;//((num2 >= num) ? str4 : "retry");
        }
        catch
        {
        }
        return result;
    }

    public string Method_CheckBookingTime_Test(string str4)
    {
        int numhold = 0;
        string result = "retry";
        try
        {
            Random rnd = new Random();
            //int[] intArr = new int[1000];

            //for (int i = 0; i < intArr.Length; i++)
            //{
            //    numhold = rnd.Next(1000, 9000);
            //    intArr[i] = numhold;
            //    //Console.WriteLine(num);
            //    //string result = "retry";
            //}
            numhold = rnd.Next(100, 1000);
            long num = int_BookHRS * 10000;
            string text = jsonData_Serial(str4, "timeStamp");
            string text2 = text.Substring(text.IndexOf("T") + 1, 8);
            TimeSpan timeSpan = new TimeSpan(Convert.ToInt16(text2.Substring(0, 2)), Convert.ToInt16(text2.Substring(3, 2)), Convert.ToInt16(text2.Substring(6, 2)));
            int hours = timeSpan.Hours;
            int minutes = timeSpan.Minutes;
            int seconds = timeSpan.Seconds;
            long num2 = hours * 10000 + minutes * 100 + seconds;
            if (num >= num2)
            {
                if (seconds != 00)
                {
                    int num3 = 60 - seconds;
                    //num3
                    num3 = (num3 * 1000);
                    Thread.Sleep(num3);
                }
            }
            result = str4;//((num2 >= num) ? str4 : "retry");
        }
        catch
        {
        }
        return result;
    }

    public string Method_CheckBookingTime_Nex(string str4)
    {
        int numhold = 0;
        string result = "retry";
        try
        {
            Random rnd = new Random();
            //int[] intArr = new int[1000];

            //for (int i = 0; i < intArr.Length; i++)
            //{
            //    numhold = rnd.Next(1000, 9000);
            //    intArr[i] = numhold;
            //    //Console.WriteLine(num);
            //    //string result = "retry";
            //}
            numhold = rnd.Next(8000, 15000);
            long num = int_BookHRS * 10000;
            string text = jsonData_Serial(str4, "timeStamp");
            string text2 = text.Substring(text.IndexOf("T") + 1, 8);
            TimeSpan timeSpan = new TimeSpan(Convert.ToInt16(text2.Substring(0, 2)), Convert.ToInt16(text2.Substring(3, 2)), Convert.ToInt16(text2.Substring(6, 2)));
            int hours = timeSpan.Hours;
            int minutes = timeSpan.Minutes;
            int seconds = timeSpan.Seconds;
            long num2 = hours * 10000 + minutes * 100 + seconds;
            if (num >= num2)
            {
                if (seconds != 00)
                {
                    int num3 = 60 - seconds;
                    //num3
                    num3 = (num3 * 1000) - numhold;
                    Thread.Sleep(num3);
                }
            }
            result = str4;//((num2 >= num) ? str4 : "retry");
        }
        catch
        {
        }
        return result;
    }

    public string Method_CheckBookingTime_Disha(string str4)
    {
        int numhold = 0;
        string result = "retry";
        try
        {
            Random rnd = new Random();
            //int[] intArr = new int[1000];

            //for (int i = 0; i < intArr.Length; i++)
            //{
            //    numhold = rnd.Next(1000, 9000);
            //    intArr[i] = numhold;
            //    //Console.WriteLine(num);
            //    //string result = "retry";
            //}
            numhold = rnd.Next(1000, 10000);
            long num = int_BookHRS * 10000;
            string text = jsonData_Serial(str4, "timeStamp");
            string text2 = text.Substring(text.IndexOf("T") + 1, 8);
            TimeSpan timeSpan = new TimeSpan(Convert.ToInt16(text2.Substring(0, 2)), Convert.ToInt16(text2.Substring(3, 2)), Convert.ToInt16(text2.Substring(6, 2)));
            int hours = timeSpan.Hours;
            int minutes = timeSpan.Minutes;
            int seconds = timeSpan.Seconds;
            long num2 = hours * 10000 + minutes * 100 + seconds;
            if (num >= num2)
            {
                if (seconds != 00)
                {
                    int num3 = 60 - seconds;
                    //num3
                    num3 = (num3 * 1000) - 0;
                    Thread.Sleep(num3);
                }
            }
            result = str4;//((num2 >= num) ? str4 : "retry");
        }
        catch
        {
        }
        return result;
    }

    public string Method_CheckBookingTime_Pax(string str4)
    {
        int numhold = 0;
        string result = "retry";
        try
        {
            Random rnd = new Random();
            //int[] intArr = new int[1000];

            //for (int i = 0; i < intArr.Length; i++)
            //{
            //    numhold = rnd.Next(1000, 9000);
            //    intArr[i] = numhold;
            //    //Console.WriteLine(num);
            //    //string result = "retry";
            //}
            numhold = rnd.Next(1000, 10000);
            long num = int_BookHRS * 10000;
            string text = jsonData_Serial(str4, "timeStamp");
            string text2 = text.Substring(text.IndexOf("T") + 1, 8);
            TimeSpan timeSpan = new TimeSpan(Convert.ToInt16(text2.Substring(0, 2)), Convert.ToInt16(text2.Substring(3, 2)), Convert.ToInt16(text2.Substring(6, 2)));
            int hours = timeSpan.Hours;
            int minutes = timeSpan.Minutes;
            int seconds = timeSpan.Seconds;
            long num2 = hours * 10000 + minutes * 100 + seconds;
            long num3s = int_BookHRS * 10000 + 04 * 100 + 00;
            long num3 = num3s - num2;
            int num4 = Convert.ToInt32(num3);
            Thread.Sleep(num4);

            //if (num >= num2)
            //{
            //    //if (seconds != 00)int
            //    //{
            //    //    int num3 = 60 - seconds;
            //    //    //num3
            //    //    num3 = (num3 * 1000) - 0;
            //    //    Thread.Sleep(num3);
            //    //}
            //}
            result = str4;//((num2 >= num) ? str4 : "retry");
        }
        catch
        {
        }
        return result;
    }


    private string HighQualityRandomString()
    {
        string text = "c29cbc1f-5661-445f-9dc8-e6efedc898fb";
        text = RandomString(8, "abcdefghijklmnopqrstuvwxyz0123456789") + "-" + RandomString(4, "abcdefghijklmnopqrstuvwxyz0123456789") + "-" + RandomString(4, "abcdefghijklmnopqrstuvwxyz0123456789") + "-" + RandomString(4, "abcdefghijklmnopqrstuvwxyz0123456789") + "-" + RandomString(12, "abcdefghijklmnopqrstuvwxyz0123456789");
        string fakeImei = RandomString(15, "0123456789");
        string fakeSim = RandomString(20, "0123456789abcdefghijklmnopqrstuvwxyz");
        string fakeAndroidId = RandomString(16, "abcdefghijklmnopqrstuvwxyz0123456789");
        return jwtutils.getHash(fakeImei, fakeSim, fakeAndroidId).Replace("00000000", RandomString(8, "abcdefghijklmnopqrstuvwxyz0123456789"));
    }

    public static string jsonData_Serial(string str, string what)
    {
        string result = "";
        try
        {
            int startIndex = str.IndexOf("\"" + what + "\"", StringComparison.CurrentCultureIgnoreCase);
            string text = str.Substring(startIndex);
            text = text.Substring(text.IndexOf(":\"") + 2);
            result = text.Substring(0, text.IndexOf("\""));
            return result;
        }
        catch
        {
        }
        return result;
    }


    private string RandomString(int length, string type)
    {
        Random random = new Random();
        char[] array = new char[length];
        for (int i = 0; i < length; i++)
        {
            array[i] = type[random.Next(type.Length)];
        }
        string text = new string(array);
        return text.ToString();
    }

    private string getscafsensor()
    {
    ILRECALLSEN:
        mac = Environment.GetEnvironmentVariable("mac", EnvironmentVariableTarget.Process);
        clientID = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
        string text2 = "{\"data\":\"" + edata + "\",\"macAddress\":\"" + mac + "\",\"MSG\":\"false\"}";
        HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create("http://185.172.64.80/home/recapa");
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
        httpWebRequest.Timeout = 60000;
        httpWebRequest.ReadWriteTimeout = 60000;
        httpWebRequest.ContentType = "application/json";
        httpWebRequest.Method = "GET";
        HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
        using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
        {
            string text3 = streamReader.ReadToEnd();
            if (text3.Length > 100)
            {
                Random random = new Random();
                text3 = text3.Replace("\r\n", "");
                string[] array = text3.Split('#');
                text3 = array[random.Next(array.Length - 1)].ToString();
                text3 = DecryptDataWithAes(text3.Trim(), "b14ca5898a4e4133bbce2ea2315a1917");
                return text3;
            }
            else
            {
                goto ILRECALLSEN;
            }
            return text3;

        }
    }

    private static string deleteallotp()
    {
        string textt = "";
        try
        {
            string useridd = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
            
            Random random = new Random();
            string uriString = "https://sikkav2.com/panel/deleteotpall?Id=" + useridd;
            HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(uriString);
            //httpWebRequest.ServerCertificateValidationCallback = CertificateValidation;
            httpWebRequest.Timeout = 5000;
            httpWebRequest.ReadWriteTimeout = 5000;
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
            httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
            httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.o; Win64; x64) AppIeWebKit/537.36 (KHTML, like Geck0) Chrome/108.0.0.0 Safari/537.36";
            //httpWebRequest.Headers.Add(HttpRequestHeader.UserAgent, ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"));

            httpWebRequest.Method = "GET";

            using (StreamReader streamReader = new StreamReader(((HttpWebResponse)httpWebRequest.GetResponse()).GetResponseStream()))
            {
                if ((textt = streamReader.ReadToEnd()).Length < 3)
                {
                    MessageBox.Show("Internet Not Connected! Please Connect Internet", "Restart Application", MessageBoxButtons.OK);
                    Environment.Exit(0);
                }
            }
            //WebClient webClient = new WebClient();
            //webClient.Headers.Add(HttpRequestHeader.UserAgent, "My appp");
            //string text = webClient.DownloadString(new Uri(uriString));
            //webClient.Dispose();
            return textt;
        }
        catch
        {
            return textt;
        }
        
    }

    private string dishaocr(string base64)
    {
        try
        {
            string URI = class3_0.DISHAOCR;//"http://185.172.64.80/home/ocr";
            string myParameters = "base64=" + HttpUtility.UrlEncode(base64);
            using (WebClient wc = new WebClient())
            {
                wc.Headers[HttpRequestHeader.ContentType] = "application/x-www-form-urlencoded";
                string HtmlResult = wc.UploadString(URI, myParameters);
                return HtmlResult;
            }
        }
        catch
        {
            string htmlResults = "1234";
            return htmlResults;
        }

    }

    private static string PaymentHold()
    {

        string text2 = "http://191.101.51.84:8082/home/PaymentHold";//Class39.PrimaryUri + "Panel/backupchromeip";
        WebClient webClient1 = new WebClient();
        webClient1.Headers.Add(HttpRequestHeader.UserAgent, "My appp");
        string text3 = webClient1.DownloadString(new Uri(text2));
        webClient1.Dispose();
        return text3;
    }

    private static string irctcocr()
    {
        string text3 = "";

        try
        {
            string string_72 = Environment.GetEnvironmentVariable("awsurl", EnvironmentVariableTarget.Process);
            string text2 = string_72+ "clsmain.txt";//Class39.PrimaryUri + "Panel/backupchromeip";
            WebClient webClient1 = new WebClient();
            webClient1.Headers.Add(HttpRequestHeader.UserAgent, "My appp");
            text3 = webClient1.DownloadString(new Uri(text2));
            webClient1.Dispose();
            return text3;
        }
        catch

        {
            return text3 = "http://185.172.64.80/home/IRCTCOCR#false#false#true#false#111#120#false#false#true#4#true#true#false#false#DK9tcF7yrzMWJsi1PTAtLaT6WnNSMSxVgoIFFr51g26vER0SYHr+oEFhKtGA2NTs#false#true#true";

        }



    }

    private static string paytmtxnid(string orderid)
    {
        string val = "";
        using (var ws = new WebSocket("wss://securegw.paytm.in/websocket/?DEVICE=web&ID=IRCTCT75243663651536_" + orderid))
        {
            ws.OnMessage += (sender, e) =>
            {
                val = e.Data;
                //Console.WriteLine("Message from server: " + e.Data);
                if (val.Contains("cashierRequestId"))
                {
                    ws.Close();
                }
            };


            //ws.SetProxy("http://localhost:8080", "", "");
            ws.Connect();
            ws.Send("{\"event\":\"#handshake\",\"data\":{\"authToken\":null},\"cid\":1}");
            ws.Send("#2");
            ws.Send("{\"event\":\"JOIN_ROOMS\",\"data\":\"IRCTCT75243663651536_" + orderid + "\"}");
        //string val = Console.ReadLine();
        //return val;
        //Console.ReadKey(true);

        IL1232:
            if (!string.IsNullOrEmpty(val))
            {
                return val;
            }
            else
            {
                Thread.Sleep(500);
                goto IL1232;
            }

        }


    }

    private static string PairNumber()
    {
        string text3 = "";
        try
        {
            string string_72 = Environment.GetEnvironmentVariable("awsurl", EnvironmentVariableTarget.Process);
            string text2 = string_72+"pairnumber.txt";//Class39.PrimaryUri + "Panel/backupchromeip";
            WebClient webClient1 = new WebClient();
            webClient1.Headers.Add(HttpRequestHeader.UserAgent, "My appp");
            text3 = webClient1.DownloadString(new Uri(text2));
            webClient1.Dispose();
            return text3;
        }
        catch
        {
            return text3 = "60";
        }

    }



    private static string DecryptDataWithAes(string cipherText, string keyBase64)
    {
        using (Aes aes = Aes.Create())
        {
            aes.Key = Encoding.UTF8.GetBytes(keyBase64);
            byte[] array2 = (aes.IV = new byte[16]);
            Console.WriteLine($"Aes Cipher Mode : {aes.Mode}");
            Console.WriteLine($"Aes Padding Mode: {aes.Padding}");
            Console.WriteLine($"Aes Key Size : {aes.KeySize}");
            Console.WriteLine($"Aes Block Size : {aes.BlockSize}");
            ICryptoTransform transform = aes.CreateDecryptor();
            byte[] buffer = Convert.FromBase64String(cipherText);
            using (MemoryStream stream = new MemoryStream(buffer))
            {
                using (CryptoStream stream2 = new CryptoStream(stream, transform, CryptoStreamMode.Read))
                {
                    using (StreamReader streamReader = new StreamReader(stream2))
                    {
                        return streamReader.ReadToEnd();
                    }
                }
            }
        }
    }


    public void BmskCookieOffline_(bool flag)
    {
        flag = false;
        while (flag)
        {
            try
            {
                while (IRComm.doesSurf)
                {
                    Thread.Sleep(500);
                }
                IRComm.doesSurf = true;
                if (string.IsNullOrEmpty(IRComm.NgetV3Token))
                {
                    while (true)
                    {
                        try
                        {
                        }
                        catch (Exception)
                        {
                        }
                        bool flag2 = true;
                    }
                }
                string text = "";
                if (IRComm.NgetV3Token.Length > 100)
                {
                    string[] array = IRComm.NgetV3Token.Split(new string[1] { "||~~||" }, StringSplitOptions.RemoveEmptyEntries);
                    if (array.Length != 0)
                    {
                        text = array[0];
                        array[0] = "";
                        IRComm.NgetV3Token = string.Join("||~~||", array);
                    }
                }
                IRComm.doesSurf = false;
                if (text == "")
                {
                    continue;
                }
                cookieBmsk_0 = new CookieContainer();
                string[] array2 = text.Split('\n');
                string text2 = "";
                string[] array3 = array2;
                string[] array4 = array3;
                string[] array5 = array4;
                foreach (string text3 in array5)
                {
                    if (text3 != "" && text3.IndexOf("name") > 0)
                    {
                        string text4 = text3.Substring(text3.IndexOf("name=") + 6);
                        text4 = text4.Substring(0, text4.IndexOf("'"));
                        text4 = text4.Trim();
                        string text5 = text3.Substring(text3.IndexOf("value=") + 7);
                        text5 = text5.Substring(0, text5.IndexOf("'"));
                        text5 = text5.Trim();
                        string text6 = text3.Substring(text3.IndexOf("secure=") + 7);
                        text6 = text6.Substring(0, text6.IndexOf(","));
                        bool secure = bool.Parse(text6);
                        string text7 = text3.Substring(text3.IndexOf("httpOnly=") + 9);
                        text7 = text7.Substring(0, text7.IndexOf(","));
                        bool httpOnly = bool.Parse(text7);
                        Cookie cookie = new Cookie(text4, text5)
                        {
                            Domain = "www.irctc.co.in",
                            Secure = secure,
                            HttpOnly = httpOnly
                        };
                        text2 += text5;
                        cookieBmsk_0.Add(cookie);
                    }
                }
                return;
            }
            catch (Exception ex2)
            {
                MessageBox.Show(".NetCok-22-" + ex2.Message.ToString());
                return;
            }
        }
        try
        {
            Chrome_Create_First("https://www.irctc.co.in/", 0);
            while (IRComm.doesSurf)
            {
                Thread.Sleep(500);
            }
            IRComm.doesSurf = true;
            string text8 = "c1";
            string text9 = "";
            string path = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\Downloads";
            DirectoryInfo directoryInfo = new DirectoryInfo(path);
            int num = 0;
            while (num == 0)
            {
                Thread.Sleep(3000);
                FileInfo[] files = directoryInfo.GetFiles("*.txt");
                FileInfo[] array6 = files;
                FileInfo[] array7 = array6;
                foreach (FileInfo fileInfo in array7)
                {
                    string name = fileInfo.Name;
                    if (!name.Contains("Robot"))
                    {
                        continue;
                    }
                    switch (text8)
                    {
                        case "v2":
                            if (!name.Contains("captchaV2Response"))
                            {
                                continue;
                            }
                            break;
                        case "v3":
                            if (!name.Contains("captchaV3Response"))
                            {
                                continue;
                            }
                            break;
                        case "c1":
                            if (!name.Contains("RobotDetails.txt"))
                            {
                                continue;
                            }
                            break;
                    }
                    num++;
                    text9 = File.ReadAllText(fileInfo.FullName);
                    text9 = text9.Replace(">", "Z");
                    text9 = text9.Replace("?", "w");
                    text9 = text9.Replace("!", "=");
                    text9 = text9.Replace("@", "A");
                    byte[] bytes = Convert.FromBase64String(text9);
                    string @string = Encoding.ASCII.GetString(bytes);
                    text9 = @string;
                    fileInfo.Delete();
                    break;
                }
            }
            IRComm.doesSurf = false;
            cookieBmsk_0 = new CookieContainer();
            string[] array8 = text9.Split('\n');
            string text10 = "";
            string[] array9 = array8;
            string[] array10 = array9;
            string[] array11 = array10;
            foreach (string text11 in array11)
            {
                if (text11 != "")
                {
                    string[] array12 = text11.Split('#');
                    Cookie cookie2 = new Cookie(array12[3], array12[4])
                    {
                        Domain = ".irctc.co.in",
                        Secure = Convert.ToBoolean(array12[1])
                    };
                    text10 += array12[3];
                    cookieBmsk_0.Add(cookie2);
                }
            }
        }
        catch (Exception ex3)
        {
            MessageBox.Show(".Cok  -" + ex3.Message.ToString());
        }
    }

    private bool IRCTC_Nex(Control control_2, Rectangle rectangle_1, string TktName, string string_87, string string_88, string tCntrlName, ref string string_90, bool bool_63, bool bool_64, bool bool_65, int int_Slot, UpdateTStatus updTStatus, string string_91)
    {

        //Random rnd = new Random();
        //int[] intArr = new int[1000];

        //for (int i = 0; i < intArr.Length; i++)
        //{
        //    int numhold = rnd.Next(1000, 9000);
        //    intArr[i] = numhold;
        //    //Console.WriteLine(num);
        //}
        string @lastupdatetime = "";
        bool opening = true;
        bool opening1 = true;
        string[] array202 = validationstart.Split(new string[1] { "#" }, StringSplitOptions.None);
        paxminus = Convert.ToBoolean(array202[9]);
        bool test1day = Convert.ToBoolean(array202[11]);
        bool paxminus1 = Convert.ToBoolean(array202[12]);
        int nopax = int.Parse(array202[10]);
        //bkgnt = Convert.ToBoolean(array202[17]);
        bool timewait = Convert.ToBoolean(array202[18]);
        bool qrpayment = false;
        string encairf = "";
        bool result = false;
        isPremium_p = false;
        TktName_ = TktName;
        updateTStatus_0 = updTStatus;
        string text = "";
        string text2 = "";
        string text3 = "";
        string key = "";
        control_0 = control_2;
        Control control = control_2.Controls[0];
        control_1 = control_2.Controls[0];
        Control control2 = control_1.Controls["Applogin"];
        rectangle_0 = rectangle_1;
        string[] array = new string[1];
        bool flag = false;
        string[] array2 = string_88.Split(new string[1] { "||" }, StringSplitOptions.None);
        string text4 = "";
        double num = 0.0;
        bool flag2 = false;
        new List<Class27>();
        bool flag3 = false;
        minmPsgnInputTime2 = 20000.0;
        minmPsgnInputTime4 = 25000.0;
        minmPsgnInputTime6 = 30000.0;
        minmPaymentTime = 21060.0;
        string[] array3 = string_90.Split(new string[1] { "-.-" }, StringSplitOptions.RemoveEmptyEntries);
        string_90 = "";
        string[] array4 = array3[1].Split(new string[1] { "-+-" }, StringSplitOptions.RemoveEmptyEntries);
        if (!string.IsNullOrEmpty(string_87))
        {
            array = string_87.Split(new string[1] { "||" }, StringSplitOptions.None);
            if (array.Length > 2)
            {
                if (string_56.Length < 1)
                {
                    string_56 = array[2];
                }
                int.TryParse(array[3], out int_3);
                if (int_3 < 2)
                {
                    int_3 = 2;
                }
                int_3 *= 2;
                NetworkInterface_(array[4]);
            }
        }
        class3_0 = new clsPostData();
        class3_0.LoginType = "APP";//(isAPP ? "APP" : "WEB");
        LoginType = class3_0.LoginType;
        if (!class3_0.ReadDataFromDB(TktName))
        {
            updTStatus?.BeginInvoke(53, "Error Occured while Reading Saved Ticket! ", tCntrlName, null, null);
            return result;
        }
        method_CheckForAdvance();
        if (class3_0.dateTime_1 < new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day))
        {
            updTStatus?.BeginInvoke(53, "Date of Journey cannot less than Today!", tCntrlName, null, null);
            return result;
        }
        string text5 = smethod_10(class3_0.BANKSAVEAS);
        class3_0.IRCTC_ID = array2[0];
        class3_0.IRCTC_PWD = array2[1];
        if (array2.Length >= 3 && array2[2] != null)
        {
            if (array2[2] != class3_0.TKT_QUOTA)
            {
                class3_0.TKT_QUOTA = array2[2];
            }
            if (array2[3] != class3_0.TKT_CLASS)
            {
                class3_0.TKT_CLASS = array2[3];
            }
            if (array2.Length > 4 && array2[4] != null && !string.IsNullOrEmpty(array2[4]))
            {
                class3_0.SRC_STN = array2[4];
                class3_0.DEST_STN = array2[5];
                class3_0.TRAIN_NO = array2[6];
            }
        }
        class3_0.string_3 = class3_0.method_2(class3_0.IRCTC_ID);
        clsPostData clsPostData2 = class3_0;
        clsPostData2.BANKSAVEAS = ((ComboBox)control.Controls["cboGateway"]).SelectedItem.ToString();
        clsPostData2.BANKDETAILS = clsPostData2.dictionary_BnkData[clsPostData2.BANKSAVEAS];
        webProxy_2 = null;
        try
        {
            string[] array5 = class3_0.BANKSAVEAS.Split(new string[1] { "_" }, StringSplitOptions.None);
            if (array5[0] == "EAZEBUZQR" | array5[0] == "AIRPAYQR")
            {
                DialogResult dialogResult1 = MessageBox.Show("Kya aap Ye ticket ka payment QR code scan karke karna chahte hai agr haa to ok karna warna No par click kare jisse apko mobilse payment krna hoga", "QR PAYMENT CONFIRMATION", MessageBoxButtons.YesNo);
                if (dialogResult1 == DialogResult.Yes)
                {
                    qrpayment = true;
                }
                else if (dialogResult1 == DialogResult.No)
                {
                    qrpayment = false;
                }
            }
            if (array5[0] == "MOBIKWIK")
            {
                frmOTP frmOTP2 = new frmOTP();
                frmOTP2.method_1(control_0, rectangle_0, bool_2: false, "Enter Otp Mobikwik", class3_0.BANKSAVEAS);
                if (frmOTP2.DialogResult != DialogResult.OK)
                {
                    updTStatus.BeginInvoke(2, "Otp Not Entered", tCntrlName, null, null);
                    return false;
                }
                class3_0.airtelotp = frmOTP2.string_0.Trim();
                frmOTP2.Dispose();
            }
            if ((array5[0] == "AIRTELMONEY") | (array5[0] == "iMudra"))
            {
                string[] array6 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                if (array5[0] == "iMudra")
                {
                    string value = "0";
                    if (!dictionary_8.ContainsKey(class3_0.BANKSAVEAS))
                    {
                        dictionary_8.Add(class3_0.BANKSAVEAS, value);
                        frmOTP frmOTP2 = new frmOTP();
                        frmOTP2.method_1(control_0, rectangle_0, bool_2: false, "iMudra", class3_0.BANKSAVEAS);
                        if (frmOTP2.DialogResult != DialogResult.OK)
                        {
                            updTStatus.BeginInvoke(2, "iMudra OTP Not Found", tCntrlName, null, null);
                            return false;
                        }
                        value = frmOTP2.string_0;
                        dictionary_8.Remove(class3_0.BANKSAVEAS);
                        dictionary_8.Add(class3_0.BANKSAVEAS, value);
                        frmOTP2.Dispose();
                    }
                }
                long num2 = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
            }
            if (array3.Length > 5)
            {
                num = Conversion.Val(array3[5].Trim());
                if (num <= 0.0)
                {
                    num = 0.0;
                }
            }
            if (num <= 0.0 && dictionary_4.ContainsKey(TktName))
            {
                num = dictionary_4[TktName];
            }
        }
        catch
        {
        }
        try
        {
            //Chrome_CloseSetup();
            updTStatus?.BeginInvoke(53, "Closing CHrome... ", tCntrlName, null, null);

        }
        catch
        {

        }
        string string_92 = "";
        string text6 = "\r\n\r\nTrainNo: " + class3_0.TRAIN_NO + " Form: " + class3_0.SRC_STN + " To: " + class3_0.DEST_STN + "\r\n\r\nNo. of Passengers: " + class3_0.list_0.Count + " Name of First Pax: " + class3_0.list_0[0].string_0;
        string environmentVariable = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
        text4 = "Pax: " + class3_0.list_0[0].string_0 + ((class3_0.list_0.Count > 1) ? (" and (" + (class3_0.list_0.Count - 1) + ") Others") : "");
        updateTStatus_1 = updTStatus;
        tCntrlName_ = tCntrlName;
        if (class3_0.method_0())
        {
            bool_ptSL = true;
        }
        Method_GetBookingHRS();
        if (!class3_0.TKT_ISADV & !class3_0.bool_1)
        {
            int_AvlHRS = 4;
            int_BookHRS = 5;
        }
        if (class3_0.BRD_STN.ToUpper() == class3_0.DEST_STN.ToUpper())
        {
            updTStatus?.BeginInvoke(2, "Invalid Boarding_Station!", tCntrlName, null, null);
            return result;
        }
        object obj2 = object_4;
        lock (obj2)
        {
            if (list_IrctcID.Contains(class3_0.IRCTC_ID))
            {
                updTStatus?.BeginInvoke(2, "Current IRCTC-ID Already Used, Change It.", tCntrlName, null, null);
                return result;
            }
            list_IrctcID.Add(class3_0.IRCTC_ID);
        }
        obj2 = object_6;
        lock (obj2)
        {
            if (dictionary_2.ContainsKey(TktName))
            {
                dictionary_2[TktName]++;
                int_Pair = dictionary_2[TktName];
            }
            else
            {
                dictionary_2.Add(TktName, 1);
                Interlocked.Increment(ref int_4);
                int_Pair = dictionary_2[TktName];
            }
        }
        dictionary_TimeP = new Dictionary<string, string>();
        if (class3_0.TKT_QUOTA.ToUpper() == "CK")
        {
            class3_0.TKT_QUOTA = "TQ";
        }
        if (int_Pair == 1 && class3_0.BANKSAVEAS.Split('_')[0].Contains("AIRTELMONEY") && !dictionary_7.ContainsKey(class3_0.BANKSAVEAS))
        {
            string environmentVariable2 = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
            if (dictionary_7.ContainsKey(class3_0.BANKSAVEAS))
            {
                dictionary_7.Remove(class3_0.BANKSAVEAS);
            }
            dictionary_7.Add(class3_0.BANKSAVEAS, environmentVariable2);
        }
        response = "";
        Exception_ = new WebException();
        try
        {
            Lock("Ticket " + TktName + " Started Pair " + int_Pair);
            bool flag4 = false;
            if ((class3_0.TKT_QUOTA == "CK" || class3_0.TKT_QUOTA == "PT" || class3_0.TKT_QUOTA == "TQ") && class3_0.dateTime_1 > DateTime.Now)
            {
                flag4 = true;
            }
            if (DateTime.Now.Hour != 9 || !bool_ptSL || !flag4 || MessageBox.Show("For Non-AC Classes, Tatkal will open at 11Am\r\n\r\nDo you want to Continue?", "Non AC", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) != DialogResult.No)
            {
                if (DateTime.Now.Hour == 7 && DateTime.Now.Minute >= 30 && !class3_0.bool_opening && !flag4 && (class3_0.dateTime_1 - DateTime.Now).TotalDays >= 10.0 && MessageBox.Show("Is it Opening Ticket? If it is then Click YES.\r\n\r\nKya ye Opening ki Ticket he? agar haan to YES Click karen.", "Opening Ticket", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    int_AvlHRS = 7;
                    int_BookHRS = 8;
                    class3_0.bool_opening = true;
                    class3_0.TKT_ISADV = true;
                }
                int second = 0;
                int minute = 53;
                if (class3_0.bool_opening && DateTime.Now.Hour > 7)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.bool_AC_TQ && DateTime.Now.Hour > 9)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.bool_SL_TQ && DateTime.Now.Hour > 10)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.TKT_ISADV)
                {
                    int num3 = (int)new TimeSpan(new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_AvlHRS, minute, second, 0).Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                    if (num3 > 0)
                    {
                        int num4 = 0;
                        Random random = new Random();
                        num4 = random.Next(10, 179000);
                        DateTime dateTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_AvlHRS, minute, second, 0);
                        dateTime = dateTime.AddMilliseconds(num4);
                        updTStatus.BeginInvoke(1, "Waiting for " + int_AvlHRS + ":" + dateTime.Minute.ToString("00") + ":" + dateTime.Second + " AM", tCntrlName, null, null);
                        Application.DoEvents();
                        num3 += num4;
                        if (num3 > 5)
                        {
                            Thread.Sleep(num3);
                        }
                    }
                }
                Lock("Ready Login=" + class3_0.IRCTC_ID);
                int hour = DateTime.Now.Hour;
                int minute2 = DateTime.Now.Minute;
                int second2 = DateTime.Now.Second;
                string[] array7 = string_91.Split(new string[1] { "#" }, StringSplitOptions.None);
                if (array7.Length > 1 && array7[1] != "" && array7[2] != "")
                {
                    AC_AvailibalityTime = int.Parse(array7[1]);
                    SL_AvailibalityTime = int.Parse(array7[2]);
                }
                string text7 = array7[0];
                if (!string.IsNullOrEmpty(text7) && int_Slot > 2)
                {
                    try
                    {
                        string[] array8 = text7.Split(new string[1] { "||" }, StringSplitOptions.None);
                        if (array8.Length > 3)
                        {
                            Proxy_ = new WebProxy(array8[0].Trim(), int.Parse(array8[1].Trim()));
                            Proxy_.BypassProxyOnLocal = true;
                            Proxy_.Credentials = new NetworkCredential(array8[2].Trim(), array8[3].Trim());
                            Lock("\n\n\nProxy=" + array8[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        method_74("Creating Proxy", ex.Message);
                        updTStatus?.BeginInvoke(2, "IP Issue, Try Another slot!", tCntrlName, null, null);
                        return false;
                    }
                }
                if (vpn & !string.IsNullOrEmpty(vpnip))
                {
                    try
                    {
                        string[] array8P = vpnip.Split(new string[1] { ":" }, StringSplitOptions.None);
                        if (array8P.Length > 3)
                        {
                            Proxy_ = new WebProxy(array8P[0].Trim(), int.Parse(array8P[1].Trim()));
                            Proxy_.BypassProxyOnLocal = true;
                            Proxy_.Credentials = new NetworkCredential(array8P[2].Trim(), array8P[3].Trim());
                            Lock("\n\n\nProxy=" + array8P[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        method_74("Creating Proxy", ex.Message);
                        updTStatus?.BeginInvoke(2, "IP Issue, Try Another slot!", tCntrlName, null, null);
                        return false;
                    }
                }
                string text8 = "Booking Faield Check History";
                int num5 = 0;
                bool flag5 = isAPP;
                int num6 = 0;
                bool flag6 = true;
                while (true)
                {
                    if (num < 0.0)
                    {
                        num = 0.0;
                    }
                    if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                    {
                        Thread thread = new Thread(StartUPI_);
                        thread.IsBackground = true;
                        thread.Start(class3_0.BANKDETAILS + "||True||5||0000000000");
                    }
                ilstarting:
                    staticWEB = false;
                    string text9 = "";
                    isPremium_p = false;
                    sensor_data = "0";
                    bool flag7 = true;
                    string string_93 = "";
                    string text10 = "";
                    string string_94 = "";
                    webProxy_3 = null;
                    postdata = null;
                    Reffral = "https://www.irctc.co.in";
                    response = "";
                    errormsg = "";
                    Exception_ = null;
                    int_TimeDiff = 0;
                    bool_22 = true;
                    class3_0._greq = "";
                    class3_0._Authorization = "";
                    int num7 = 0;
                    bool flag8 = true;
                    randomGeneratedKey = jwtutils.getRandomAppCngKey();
                    keyFromServer = "";
                    greq = "";
                    _Authrization = "";
                    access_token = "";
                    jwtToken = "";
                    bool_48 = true;
                    cookie_ = null;
                    cookie_ = new CookieContainer();
                    mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                    isAPP = false;
                    LoginType = "WEB";
                    int loginType = 2;
                    if (loginType == 2)
                    {
                        isAPP = true;
                        LoginType = "APP";
                    }
                    if (isAPP)
                    {
                        if (!dictionary_PaxStart.ContainsKey(TktName_ + "_APP"))
                        {
                            dictionary_PaxStart.Add(TktName_ + "_APP", 0);
                        }
                    }
                    else if (!dictionary_PaxStart.ContainsKey(TktName_ + "_WEB"))
                    {
                        dictionary_PaxStart.Add(TktName_ + "_WEB", 0);
                    }
                    num7++;
                    DateTime dateTime2 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                    long num8 = (long)(DateTime.UtcNow - dateTime2).TotalMilliseconds;
                    class3_0._greq = num8.ToString();
                    greq = jwtutils.GetHash(ref mup);
                    mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                    class3_0.token = null;
                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();
                    Status = "Login";
                    Request_Type = "Base";
                    if (isAPP)
                    {
                        updTStatus?.BeginInvoke(1, "Super Login Start...", tCntrlName, null, null);
                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/appVersion/IOS/3.1.38";
                        ConnectHttp_Nex(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Base");
                    }
                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/loginCaptcha";
                    updTStatus?.BeginInvoke(1, "Loading Login Captcha", tCntrlName, null, null);
                    Lock("First Hit Irctc: In = " + url);
                    bool flag9 = _httpRequest_Nex(url, postdata, Reffral, "Plain1Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                    Lock("First Hit Irctc: Out = " + response);
                    dateTime_2 = DateTime.Now;
                    if (response.Contains("retry") & !response.Contains("captchaQuestion"))
                    {
                        goto ilstarting;
                    }
                    if (!string.IsNullOrEmpty(response))
                    {
                        try
                        {
                            if (response.Contains("serverId"))
                            {
                                class3_0.serverid = GetString(response, "serverId");
                                class3_0.serverid = class3_0.serverid.Substring(0, 7);
                                if (!class3_0.serverid.Contains("DM03AP") && (!class3_0.serverid.Contains("DM07AP") && (!class3_0.serverid.Contains("DM02AP")) & DateTime.Now.Minute < 56 & class3_0.TKT_ISADV))
                                {
                                    goto ilstarting;
                                }
                            }
                        }
                        catch
                        {

                        }

                        if (response.Contains("status"))
                        {
                            class3_0._greq = GetString(response, "status");
                        }
                        string text11 = response.Substring(response.IndexOf("timeStamp") + 23);
                        text11 = text11.Substring(0, text11.IndexOf("\""));
                        DateTime dateTime3 = DateTime.Parse(text11);
                        if (dateTime3.Hour == int_BookHRS)
                        {
                            class3_0.TKT_ISADV = false;
                        }
                        int_TimeDiff = (int)new TimeSpan(dateTime3.Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                        int num9 = int_TimeDiff;
                        updTStatus.BeginInvoke(900, num9.ToString(), tCntrlName, null, null);
                        dictionary_TimeP["TimeDiff"] = int_TimeDiff.ToString();
                        int num10 = 0;
                        string[] array9 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                        if ((text5 == "AIRTELMONEY") & !list_7.Contains(array9[0]) & class3_0.TKT_ISADV)
                        {
                            list_7.Add(array9[0]);
                            AirtelMoneyOTP(class3_0.BANKDETAILS);
                        }
                        if (response.Contains("status"))
                        {
                            class3_0._greq = GetString(response, "status");
                        }
                        if (response.IndexOf("captchaQuestion") > 0)
                        {
                            string text12 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                            string_93 = text12.Substring(0, text12.IndexOf("\""));
                        }
                        frmCaptcha frmCaptcha2 = new frmCaptcha(this, cookie_, "", "");
                        frmCaptcha2.lblWrongCaptcha.Text = "Enter Captcha";
                        frmCaptcha2.dateTime_0 = dateTime_2;
                        frmCaptcha2.string_1 = string_93;
                        frmCaptcha2.bool_0 = flag;
                        frmCaptcha2.method_2(control_2, rectangle_1, string_93);
                        bool flag10 = frmCaptcha2.DialogResult != DialogResult.Cancel;
                        text10 = frmCaptcha2.txtImageData.Text.Trim();
                        frmCaptcha2.Dispose();
                        Lock("Captcha Solve: = ");
                        if (!flag10)
                        {
                            isLogin_Self = false;
                            isLogin = false;
                            updTStatus.BeginInvoke(2, "Captcha Cancell by User", tCntrlName, null, null);
                            return false;
                        }
                        url = "https://www.irctc.co.in/authprovider/webtoken";
                        postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + frmCaptcha.Base64Encode(class3_0.IRCTC_PWD) + "&captcha=" + text10 + "&uid=" + class3_0._greq + "&otpLogin=false&nlpIdentifier=&nlpAnswer=&nlpToken=&lso=&encodedPwd=true";
                        if (isAPP)
                        {
                            postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + frmCaptcha.Base64Encode(class3_0.IRCTC_PWD) + "&captcha=" + text10 + "&uid=" + greq + "&otpLogin=false&encodedPwd=true";
                            byte[] bytes = Encoding.UTF8.GetBytes(class3_0.IRCTC_ID + ":" + class3_0.IRCTC_PWD);
                            _Authrization = Convert.ToBase64String(bytes);
                            url = "https://www.irctc.co.in/authprovider/webmtoken";
                        }
                        updTStatus?.BeginInvoke(1, "Login To IRCTC", tCntrlName, null, null);
                        num6 = 0;
                        while (true)
                        {
                            Request_Type = "Login";
                            num10++;
                            Status = "Login Confirm";
                            if (_httpRequest_Nex(url, postdata, Reffral, "Plain0Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 120000, 120000, ref response, ref errormsg, ref Exception_))
                            {
                                if (response.Contains("retry") & !response.Contains("SUCESS"))
                                {
                                    goto ilstarting;
                                }
                                if (response.Contains("SUCESS"))
                                {
                                    class3_0.string_61 = response.Substring(response.IndexOf("access_token") + 15, 36);
                                    class3_0._Authorization = "Bearer " + class3_0.string_61;
                                    _Authrization = class3_0._Authorization;
                                    updTStatus.BeginInvoke(1, "Login Sucess ", tCntrlName, null, null);
                                    if (!_validateuser(updTStatus))
                                    {
                                        break;
                                    }
                                    Request_Type = "json";
                                    num10 = 0;
                                    dictionary_TimeP["Login"] = DateAndTime.Now.ToString("hh:mm:ss:fff");
                                    do
                                    {
                                        updTStatus?.BeginInvoke(1, "validate User", tCntrlName, null, null);
                                        DateTime dateTime4 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                        long num11 = (long)(DateTime.UtcNow - dateTime4).TotalMilliseconds;
                                        class3_0.token = num11.ToString();
                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/validateUser?source=3";
                                        postdata = null;
                                        dateTime_3 = DateTime.Now;
                                        Status = "ValidateUser";
                                        num10++;
                                        if (!_httpRequest_Nex(url, postdata, Reffral, "Plain123", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                        {
                                            continue;
                                        }
                                        if (response.IndexOf("minmPsgnInputTime") < 0)
                                        {
                                            break;
                                        }
                                        bmikey = jsonData_Serial(response, "userIdHash");
                                        string[] array10 = GetString(response, "minmPsgnInputTime").ToUpper().Split(new string[1] { "#" }, StringSplitOptions.None);
                                        double.TryParse(array10[0], out minmPsgnInputTime2);
                                        double.TryParse(array10[2], out minmPsgnInputTime4);
                                        double.TryParse(array10[4], out minmPsgnInputTime6);
                                        double.TryParse(GetString(response, "minmPaymentTime").ToUpper(), out minmPaymentTime);
                                        long num12 = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
                                        if (74000 > num12 || num12 > 115900)
                                        {
                                            minmPsgnInputTime2 = 6000.0;
                                        }
                                        class3_0.string_62 = response;
                                        if (response.IndexOf("userEnableState\"") > 0)
                                        {
                                            response.IndexOf("userEnableState\":\"5");
                                            if (response.IndexOf("userEnableState\":\"3") > 0)
                                            {
                                                Class11.smethod_1("TBL_USER", "UserState", "Suspend||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                updTStatus.BeginInvoke(2, "Your Account Has Suspended! ", tCntrlName, null, null);
                                                result = false;
                                                return result;
                                            }
                                            response.IndexOf("userEnableState\":\"1");
                                            if (response.IndexOf("verified\":\"false") > 0)
                                            {
                                                Class11.smethod_1("TBL_USER", "UserState", "InCompleteProfile||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                updTStatus.BeginInvoke(2, "Verify Your IRCTC ID", tCntrlName, null, null);
                                                return false;
                                            }
                                        }
                                        num10 = 0;
                                        updTStatus.BeginInvoke(1, "Get Train List", tCntrlName, null, null);
                                        while (true)
                                        {
                                            Stopwatch stopwatch2 = new Stopwatch();
                                            stopwatch2.Start();
                                            dictionary_TimeP["FindTrain"] = DateAndTime.Now.ToString("mm:ss:fff");
                                            num10++;
                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/altAvlEnq/TC";
                                            postdata = "{\"concessionBooking\":false,\"srcStn\":\"" + class3_0.SRC_STN + "\",\"destStn\":\"" + class3_0.DEST_STN + "\",\"jrnyClass\":\"" + class3_0.TKT_CLASS + "\",\"jrnyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"currentBooking\":\"false\",\"flexiFlag\":true,\"handicapFlag\":false,\"ticketType\":\"E\",\"loyaltyRedemptionBooking\":false,\"ftBooking\":false}";
                                            Status = "Getting Train List";
                                            CookieContainer cookieContainer = new CookieContainer();
                                            if (_httpRequest_Nex(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                            {
                                                if (response.Contains("Your login activity is not completed successfuly"))
                                                {
                                                    Class11.smethod_1("TBL_USER", "UserState", "InCompleteProfile||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                    updTStatus.BeginInvoke(2, "Verify IRCTC ID", tCntrlName, null, null);
                                                    return false;
                                                }
                                                string text13 = response.Substring(response.IndexOf("timeStamp") + 23);
                                                text13 = text13.Substring(0, text13.IndexOf("\""));
                                                int_TimeDiff = (int)new TimeSpan(DateTime.Parse(text13).Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                                                string trasinbetweenlist = response;
                                                if (response.Contains("trainBtwnStnsList"))
                                                {
                                                    try
                                                    {
                                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/trnscheduleenquiry/" + class3_0.TRAIN_NO;
                                                        _httpRequest(url, null, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_W);
                                                        class3_0.GetStationList(response, class3_0.SRC_STN, class3_0.DEST_STN);
                                                        //string trainRunsOnMon = jsonData_Serial(response, "trainRunsOnMon");
                                                        //string trainRunsOnTue = jsonData_Serial(response, "trainRunsOnTue");
                                                        //string trainRunsOnWed = jsonData_Serial(response, "trainRunsOnWed");
                                                        //string trainRunsOnThu = jsonData_Serial(response, "trainRunsOnThu");
                                                        //string trainRunsOnFri = jsonData_Serial(response, "trainRunsOnFri");
                                                        //string trainRunsOnSat = jsonData_Serial(response, "trainRunsOnSat");
                                                        //string trainRunsOnSun = jsonData_Serial(response, "trainRunsOnSun");
                                                        ////class3_0.TKT_ISADV = true;
                                                        //if (trainRunsOnMon == "Y" & trainRunsOnTue == "Y" & trainRunsOnSun == "Y" & trainRunsOnWed == "Y" & trainRunsOnThu == "Y" & trainRunsOnFri == "Y" & trainRunsOnSat == "Y" & class3_0.TKT_ISADV)
                                                        //{
                                                        //    datechangee = true;
                                                        //    newdate = class3_0.dateTime_0.AddDays(-1);
                                                        //    updTStatus.BeginInvoke(786, "Bkg nt allow n ayega ab..", tCntrlName, null, null);
                                                        //    Thread.Sleep(2000);
                                                        //    //class3_0.newdate = newdate;
                                                        //}
                                                    }
                                                    catch
                                                    {

                                                    }
                                                    Lock0("FindTrain", stopwatch2, response);
                                                    dateTime_3 = DateTime.Parse(GetString(response, "timeStamp"));
                                                    while (true)
                                                    {
                                                        SourceDestination_Correction(trasinbetweenlist);
                                                        bool flag11 = true;
                                                        Method_GetBookingHRS();
                                                        int num13 = 0;
                                                        if (int_BookHRS == 8)
                                                        {
                                                            num13 = 54000;
                                                        }
                                                        if (int_BookHRS == 10)
                                                        {
                                                            num13 = (60 - AC_AvailibalityTime) * 1000;
                                                        }
                                                        if (int_BookHRS == 11)
                                                        {
                                                            num13 = (60 - SL_AvailibalityTime) * 1000;
                                                        }
                                                        if (class3_0.TKT_ISADV & (DateTime.Now.Hour < int_BookHRS))
                                                        {
                                                            updTStatus.BeginInvoke(1, "Wait For PG Open", tCntrlName, null, null);
                                                            DateTime dateTime5 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_BookHRS, 0, 0, 0);
                                                            TimeSpan timeSpan = new TimeSpan(dateTime5.Ticks - DateTime.Now.Ticks);
                                                            int num14 = (int)timeSpan.TotalMilliseconds - int_TimeDiff;
                                                            Random random2 = new Random();
                                                            int num15 = random2.Next(1, 300);
                                                            int num16 = 16000 + num15 + int_Pair * 459;
                                                            if (class3_0.TKT_CLASS == "SL")
                                                            {
                                                                num16 = 32000 + num15 + int_Pair * 459;
                                                            }
                                                            num14 -= num16;
                                                            if (num14 > 0)
                                                            {
                                                                Application.DoEvents();
                                                                Thread.Sleep(num14);
                                                                Application.DoEvents();
                                                            }
                                                        }
                                                        updTStatus.BeginInvoke(1, "Get Availablity", tCntrlName, null, null);
                                                        if (class3_0.Station_listWithDay != null & class3_0.TKT_ISADV & int_BookHRS != 8 & bkgnt)
                                                        {
                                                            try
                                                            {
                                                                int indexIneed = Array.FindIndex(class3_0.Station_listWithDay, s => s.StartsWith(class3_0.SRC_STN));
                                                                string[] newsrcc = class3_0.Station_listWithDay[indexIneed].Split(new string[1] { "," }, StringSplitOptions.None);
                                                                string dayrun = newsrcc[1];
                                                                if (class3_0.Station_listWithDay[0].Contains(class3_0.SRC_STN))
                                                                {
                                                                    string newdsrc = class3_0.Station_listWithDay[indexIneed + 1];
                                                                    string[] newsrc = newdsrc.Split(new string[1] { "," }, StringSplitOptions.None);
                                                                    int distance = int.Parse(newsrc[2]);
                                                                    if (distance <= 50)
                                                                    {
                                                                        class3_0.SRC_STN = newsrc[0].Trim();
                                                                        class3_0.BRD_STN = newsrc[0].Trim();
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (indexIneed == 1)
                                                                    {
                                                                        string newdsrc = class3_0.Station_listWithDay[indexIneed - 1];
                                                                        string[] newsrc = newdsrc.Split(new string[1] { "," }, StringSplitOptions.None);
                                                                        if (newsrc[1] == dayrun)
                                                                        {
                                                                            class3_0.SRC_STN = newsrc[0].Trim();
                                                                        }
                                                                    }
                                                                    else if (indexIneed != 1)
                                                                    {
                                                                        Random rnd = new Random();
                                                                        int numhold = rnd.Next(1, indexIneed);
                                                                        string newdsrc = class3_0.Station_listWithDay[indexIneed - numhold];
                                                                        string[] newsrc = newdsrc.Split(new string[1] { "," }, StringSplitOptions.None);
                                                                        if (newsrc[1] == dayrun)
                                                                        {
                                                                            class3_0.SRC_STN = newsrc[0].Trim();
                                                                        }
                                                                    }


                                                                }
                                                                updTStatus.BeginInvoke(1, "Trying From STN-" + class3_0.SRC_STN, tCntrlName, null, null);
                                                            }
                                                            catch
                                                            {

                                                            }
                                                        }
                                                        num10 = 0;
                                                        int num17 = 0;
                                                        Status = "Getting Availablity";
                                                        Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                        postdata = "{\"paymentFlag\":\"N\",\"concessionBooking\":false,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"ticketType\":\"E\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"moreThanOneDay\":true,\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"fromStnCode\":\"" + class3_0.SRC_STN + "\",\"toStnCode\":\"" + class3_0.DEST_STN + "\",\"isLogedinReq\":true,\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"classCode\":\"" + class3_0.TKT_CLASS + "\"}";
                                                        if (isAPP)
                                                        {
                                                            //postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";
                                                            //postdata = "{\"wsUserLogin\":\"\",\"ftBooking\":false,\"autoUpgradationSelected\":false,\"bookNowPressTimeDiff\":0,\"tktAddress\":{\"pinCode\":0,\"postOffice\":\"\",\"addressFlag\":0,\"colony\":\"\",\"street\":\"\",\"stateName\":\"\",\"address\":\"\",\"validRegdAddress\":false,\"city\":\"\",\"country\":\"\",\"phoneExt\":0,\"phoneNumber\":0},\"connectingJourney\":false,\"gnToCkOpted\":false,\"alternateAvlInputDTO\":[{\"trainNo\":\"" + class3_0.TRAIN_NO + "\",\"avlClasses\":[\"" + class3_0.TKT_CLASS + "\"],\"srcStn\":\"" + class3_0.SRC_STN + "\",\"ftBooking\":false,\"returnTicket\":false,\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"reasonType\":\"\",\"jpFlag\":false,\"jrnyClass\":\"" + class3_0.TKT_CLASS + "\",\"jrnyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"concessionPassengers\":false,\"loyaltyBooking\":false,\"destStn\":\"" + class3_0.DEST_STN + "\",\"concessionBooking\":false}],\"loyaltyRedemptionBooking\":false,\"moreThanOneDay\":false,\"paymentType\":1,\"reservationMode\":\"WS_TA_B2C\",\"generalistChildConfirm\":false,\"bookingInitTime\":0,\"bookingConfirmChoice\":0,\"cod\":\"false\",\"bookingChoice\":0,\"onwardFlag\":\"N\",\"clusterFlag\":\"N\"}";
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalPsgn\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";
                                                            //"{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";

                                                        }
                                                        
                                                        while (true)
                                                        {

                                                            num17++;
                                                            string RequestUrl = "";
                                                            response = null;
                                                            dictionary_TimeP["Availablity"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/avlFarenquiry/" + class3_0.TRAIN_NO + "/" + class3_0.dateTime_0.ToString("yyyMMdd") + "/" + class3_0.SRC_STN + "/" + class3_0.DEST_STN + "/" + class3_0.TKT_CLASS + "/" + class3_0.TKT_QUOTA + "/N";
                                                            postdata = class3_0.AvailablityPost(ref RequestUrl, isAPP, int_Pair);
                                                            stopwatch2 = new Stopwatch();
                                                            stopwatch2.Start();
                                                            if (_httpRequest_Nex(RequestUrl, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_) && !string.IsNullOrEmpty(response) && response.Contains("avlDayList"))
                                                            {
                                                                if (response.Contains("Invalid access token") && num10 > 2)
                                                                {
                                                                    break;
                                                                }
                                                                class3_0.string_30 = response;
                                                                string @string = GetString(response, "availablityStatus");
                                                                //if (num17 == 1)
                                                                //{
                                                                //    curavl = @string;
                                                                //    curavl = curavl.Replace("#", "");
                                                                //}
                                                                //try
                                                                //{
                                                                //    if (!opening1 & class3_0.TKT_ISADV & int_BookHRS !=8 & timewait)
                                                                //    {
                                                                //        updTStatus.BeginInvoke(1, "Checking Bkg Allowance " + num17, tCntrlName, null, null);
                                                                //        @lastupdatetime = GetString(response, "lastUpdateTime");
                                                                //        if (string.IsNullOrEmpty(@lastupdatetime))
                                                                //        {
                                                                //            continue;
                                                                //        }
                                                                //        string[] updaterti = @lastupdatetime.Split(new string[1] { "and" }, StringSplitOptions.None);
                                                                //        if (updaterti[0].Trim() != "0 Minutes")
                                                                //        {
                                                                //            continue;
                                                                //        }

                                                                //    }
                                                                //    else if (curavl == @string & !timewait & class3_0.TKT_ISADV & int_BookHRS != 8 & DateTime.Now.Minute < 4 & num17 > 1)
                                                                //    {
                                                                //        updTStatus.BeginInvoke(1, "Checkingg Booking Open " + num17, tCntrlName, null, null);
                                                                //        opening1 = false;
                                                                //        Thread.Sleep(10000);
                                                                //        continue;
                                                                //    }


                                                                //}
                                                                //catch
                                                                //{

                                                                //}
                                                                if (num17 == 2)
                                                                {
                                                                    //curavl = @lastupdatetime;
                                                                    //curavl = curavl.Replace("#", "");
                                                                }
                                                                if (response.IndexOf("avlDayList") > 0 && class3_0.TKT_ISADV)
                                                                {
                                                                    
                                                                    if (int_BookHRS == 8 & opening )
                                                                    {
                                                                        updTStatus.BeginInvoke(1, "Wait for ## Remove", tCntrlName, null, null);
                                                                        opening = false;
                                                                        Method_CheckBookingTime_Test(response);
                                                                    }
                                                                    if (int_BookHRS != 8 & timewait & opening1)
                                                                    {
                                                                        updTStatus.BeginInvoke(1, "Wait for ## Remove", tCntrlName, null, null);
                                                                        opening1 = false;
                                                                        Method_CheckBookingTime(response);
                                                                    }
                                                                    //if (curavl == @string & timewait & class3_0.TKT_ISADV & int_BookHRS != 8 & DateTime.Now.Minute < 4 & num17 > 1)
                                                                    //{
                                                                    //    updTStatus.BeginInvoke(1, "Checkingg Booking Open " + num17, tCntrlName, null, null);
                                                                    //    opening1 = false;
                                                                    //    Thread.Sleep(10000);
                                                                    //    continue;
                                                                    //}
                                                                    updTStatus.BeginInvoke(1, " Check Availablity Int - " + num17, tCntrlName, null, null);
                                                                    string text14 = response.Substring(response.IndexOf("timeStamp") + 23);
                                                                    text14 = text14.Substring(0, text14.IndexOf("\""));
                                                                    DateTime dateTime6 = DateTime.Parse(text14);
                                                                    if (!(!@string.Contains("#") & (dateTime6.Hour >= int_BookHRS)))
                                                                    {
                                                                        double totalMilliseconds = stopwatch2.Elapsed.TotalMilliseconds;
                                                                        stopwatch2.Stop();
                                                                        int num18 = dateTime6.Second * 1000 + dateTime6.Millisecond;
                                                                        if (num17 >= 10)
                                                                        {
                                                                            num17 = 0;
                                                                            Application.DoEvents();
                                                                            Thread.Sleep(2500);
                                                                        }
                                                                        else
                                                                        {
                                                                            Application.DoEvents();
                                                                            Thread.Sleep(50);
                                                                        }
                                                                        continue;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (response.Contains("availablityStatus") && @string == "NOT AVAILABLE" && class3_0.TKT_QUOTA == "PT")
                                                                    {
                                                                        frmPayment frmPayment2 = new frmPayment();
                                                                        frmPayment2.tktname.Text = TktName;
                                                                        frmPayment2.bool_7 = true;
                                                                        frmPayment2.string_1 = "PT Not Available Do You Want To Change Your Quota into TQ And Book.";
                                                                        frmPayment2.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                        DialogResult dialogResult = frmPayment2.DialogResult;
                                                                        frmPayment2.Dispose();
                                                                        if (dialogResult == DialogResult.Cancel)
                                                                        {
                                                                            updTStatus.BeginInvoke(2, @string, tCntrlName, null, null);
                                                                            return false;
                                                                        }
                                                                        class3_0.TKT_QUOTA = "TQ";
                                                                        continue;
                                                                    }
                                                                    if (response.IndexOf("Unable to process") >= 0)
                                                                    {
                                                                        continue;
                                                                    }
                                                                    if (@string.Contains("REGRET") || @string.Contains("TRAIN DEPARTED") || @string.Contains("TRAIN CANCELLED") || @string.Contains("NOT AVAILABLE"))
                                                                    {
                                                                        updTStatus.BeginInvoke(2, @string, tCntrlName, null, null);
                                                                        return false;
                                                                    }
                                                                }
                                                                goto IL_271d;
                                                            }
                                                            if (num10 > 3)
                                                            {
                                                                break;
                                                            }
                                                        }
                                                        break;
                                                    IL_2854:
                                                        dateTime_2 = GetTimeStamp(response, int_TimeDiff);
                                                        dateTime_2 = DateTime.Now.AddMilliseconds(200.0);
                                                        Lock0("Book", stopwatch2, response);
                                                        int num19;
                                                        //int num200;
                                                        if (response.Contains("departureTime") && !response.Contains("errorMessage"))
                                                        {
                                                            try
                                                            {
                                                                string food = GetString(response, "foodChoiceEnabled");
                                                                class3_0.fooden = Convert.ToBoolean(food);
                                                            }

                                                            catch
                                                            {

                                                            }
                                                            if (class3_0.int_TotalPax > 2)
                                                            {
                                                                minmPsgnInputTime2 = minmPsgnInputTime4;
                                                            }
                                                            if (class3_0.int_TotalPax > 4)
                                                            {
                                                                minmPsgnInputTime2 = minmPsgnInputTime6;
                                                            }
                                                            string text15 = stopwatch2.Elapsed.TotalMilliseconds.ToString();
                                                            string[] array11 = text15.Split('.');
                                                            text15 = array11[0];
                                                            num19 = int.Parse(text15);
                                                            num19 /= nopax;
                                                            int num200 = int.Parse(text15);
                                                            num200 /= 2;
                                                            bool flag12 = true;
                                                            lock (object_16)
                                                            {
                                                                if (dictionary_5.TryGetValue(tCntrlName + " WL_Status", out var value2))
                                                                {
                                                                    if (value2 == "WL Allow")
                                                                    {
                                                                        class3_0.TKT_ISCONFIRM = false;
                                                                    }
                                                                    else
                                                                    {
                                                                        class3_0.TKT_ISCONFIRM = true;
                                                                    }
                                                                }
                                                            }
                                                            string_70 = null;
                                                            text3 = smethod_10(class3_0.BANKSAVEAS);
                                                            if (isAPP)
                                                            {
                                                                postdata = class3_0.GetPassengerPOST_App(class3_0.TransactionID, text3, response);
                                                            }
                                                            else
                                                            {
                                                                postdata = class3_0.GetPassengerPOST(class3_0.TransactionID, text3, response);
                                                            }
                                                            //paxminus1 = true;
                                                            if (class3_0.TKT_ISADV & (class3_0.TKT_QUOTA != "GN") & !unable & paxminus1)
                                                            {
                                                                if (isAPP)
                                                                {
                                                                    int num20 = dictionary_PaxStart[TktName_ + "_APP"];
                                                                    if (num20 > 0)
                                                                    {
                                                                    minmPsgnInputTime2 -= num19;
                                                                    }
                                                                    if (num20 > 2)
                                                                    {
                                                                        minmPsgnInputTime2 -= num200;
                                                                    }
                                                                    dictionary_PaxStart[TktName_ + "_APP"] = num20 + 1;
                                                                }
                                                                else
                                                                {
                                                                    int num21 = dictionary_PaxStart[TktName_ + "_WEB"];
                                                                    if (num21 > 1)
                                                                    {
                                                                        minmPsgnInputTime2 -= num19;
                                                                    }
                                                                    dictionary_PaxStart[TktName_ + "_WEB"] = num21 + 1;
                                                                }
                                                            }
                                                            if (minmPsgnInputTime2 < 10000)
                                                            {
                                                                minmPsgnInputTime2 = 10000;
                                                            }
                                                            int num22 = (int)minmPsgnInputTime2 - (int)(DateTime.Now - dateTime_2).TotalMilliseconds;
                                                            if (num22 > 0)
                                                            {
                                                                DateTime now = DateTime.Now;
                                                                int num23 = (int)(DateTime.Now - dateTime_2).TotalMilliseconds;
                                                                num23 = (int)(minmPsgnInputTime2 - (double)num23);
                                                                now = now.AddMilliseconds(num23);
                                                                while (true)
                                                                {
                                                                    TimeSpan timeSpan2 = now - DateTime.Now;
                                                                    string text16 = timeSpan2.Seconds + ":" + timeSpan2.Milliseconds;
                                                                    if (timeSpan2.TotalMilliseconds <= 1.0)
                                                                    {
                                                                        break;
                                                                    }
                                                                    updTStatus.BeginInvoke(1, "Pax Submit IN - " + text16, tCntrlName, null, null);
                                                                    Thread.Sleep(50);
                                                                }
                                                            }
                                                            num10 = 0;
                                                            while (true)
                                                            {
                                                                num10++;
                                                                Status = "Passenger";
                                                                stopwatch2 = new Stopwatch();
                                                                stopwatch2.Start();
                                                                dictionary_TimeP["Passenger"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                updTStatus.BeginInvoke(1, "Submiting Pax Data", tCntrlName, null, null);
                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/allLapAvlFareEnq/Y";
                                                                Reffral = "";
                                                                if (NgtHttpReq(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Plain123json"))
                                                                {
                                                                    break;
                                                                    //if ((response.IndexOf("bankDetailDTO") > 0) | (response.IndexOf("baseFare") > 0) | (response.IndexOf("captchaTime") > 0))
                                                                    //{
                                                                    //    break;
                                                                    //}
                                                                    //if (response.IndexOf("availablityStatus") > 0)
                                                                    //{
                                                                    //    updTStatus.BeginInvoke(2, GetString(response, "availablityStatus"), tCntrlName, null, null);
                                                                    //    return false;
                                                                    //}
                                                                    //if (response.IndexOf("Unable to perform Transaction") >= 0)
                                                                    //{
                                                                    //    unable = true;
                                                                    //    goto end_IL_205c;
                                                                    //}
                                                                    //if (response.IndexOf("Unable to process current transaction") >= 0)
                                                                    //{
                                                                    //    //goto IL_30001;
                                                                    //    continue;
                                                                    //}
                                                                    //if (response.IndexOf("Unable to process") < 0)
                                                                    //{
                                                                    //    if (response.IndexOf("Invalid access token") >= 0)
                                                                    //    {
                                                                    //        goto end_IL_205c;
                                                                    //    }
                                                                    //    updTStatus.BeginInvoke(2, GetString(response, "errorMessage"), tCntrlName, null, null);
                                                                    //    return false;
                                                                    //}
                                                                }

                                                                if (num10 > 5)
                                                                {
                                                                    goto end_IL_205c;
                                                                }
                                                            }
                                                            if ((response.IndexOf("bankDetailDTO") > 0) | (response.IndexOf("baseFare") > 0) | (response.IndexOf("captchaTime") > 0))
                                                            {
                                                                Lock0("Passenger", stopwatch2, response);
                                                                class3_0.PassengerResponse = response;
                                                                class3_0.PassengerResponse = response;
                                                                num10 = 0;
                                                                int num24 = 0;
                                                                bool flag13 = false;
                                                                while (true)
                                                                {
                                                                    num10++;
                                                                    stopwatch2 = new Stopwatch();
                                                                    stopwatch2.Start();
                                                                    dictionary_TimeP["Captcha"] = "[" + num10 + "]" + DateAndTime.Now.ToString("mm:ss:fff");
                                                                    updTStatus.BeginInvoke(1, "Loading final Captcha..", tCntrlName, null, null);
                                                                    GetString(response, "captcha");
                                                                    if (response.IndexOf("nlpKeyValue") <= 0)
                                                                    {
                                                                        string text17 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                                                                        string_93 = text17.Substring(0, text17.IndexOf("\""));
                                                                        if (!flag13)
                                                                        {
                                                                            frmCaptcha frmCaptcha3 = new frmCaptcha(this, cookie_, "", "");
                                                                            text10 = frmCaptcha3.SolveCaptcha(string_93);
                                                                            frmCaptcha3.Dispose();
                                                                            if (text10.Length < 3)
                                                                            {
                                                                                if (num24 > 2)
                                                                                {
                                                                                    flag13 = true;
                                                                                }
                                                                                num24++;
                                                                                string _reponse = "";
                                                                                Status = "Passenger";
                                                                                dictionary_TimeP["Passenger"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaganetate/" + class3_0.TransactionID + "/BOOKINGWS?nlpCaptchaException=true";
                                                                                Reffral = "";
                                                                                postdata = null;
                                                                                if (ConnectHttp_Nex(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref _reponse, ref errormsg, ref Exception_, "Plain123json"))
                                                                                {
                                                                                    if (_reponse.Contains("captchaQuestion"))
                                                                                    {
                                                                                        response = _reponse;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaverify/" + class3_0.TransactionID + "/BOOKINGWS/" + text10;
                                                                                postdata = null;
                                                                            }
                                                                        }
                                                                        else if (response.Contains("captchaQuestion"))
                                                                        {
                                                                            text10 = "0";
                                                                            isFinalCaptcha = true;
                                                                            frmCaptcha frmCaptcha4 = new frmCaptcha(this, cookie_, "", "");
                                                                            frmCaptcha4.lblWrongCaptcha.Text = "Enter Captcha";
                                                                            frmCaptcha4.dateTime_0 = dateTime_2;
                                                                            frmCaptcha4.string_1 = string_93;
                                                                            frmCaptcha4.bool_0 = flag;
                                                                            frmCaptcha4.method_2(control_2, rectangle_1, string_93);
                                                                            if (frmCaptcha4.DialogResult == DialogResult.Cancel)
                                                                            {
                                                                                frmCaptcha4.Dispose();
                                                                                updTStatus.BeginInvoke(2, "Captcha Cancel!", tCntrlName, null, null);
                                                                                return false;
                                                                            }
                                                                            text10 = frmCaptcha4.txtImageData.Text.Trim();
                                                                            if (!string.IsNullOrEmpty(text10) | (text10.Length > 2))
                                                                            {
                                                                                frmCaptcha4.Dispose();
                                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaverify/" + class3_0.TransactionID + "/BOOKINGWS/" + text10;
                                                                                postdata = null;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        string string2 = GetString(response, "nlpKeyValue");
                                                                        LoadNlpCaptcha(string2, ref string_94, ref bitmap_1, ref string_93);
                                                                        Reffral = null;
                                                                        frmCAP frmCAP2 = new frmCAP(this);
                                                                        frmCAP2.tktname.Text = TktName;
                                                                        frmCAP2.method_4(control_0, rectangle_0, bitmap_1, string2, string_94, string_93);
                                                                        if (frmCAP2.DialogResult == DialogResult.Cancel)
                                                                        {
                                                                            frmCAP2.Dispose();
                                                                            updTStatus.BeginInvoke(2, "Captcha Cancel!", tCntrlName, null, null);
                                                                            return false;
                                                                        }
                                                                        text10 = frmCAP2.txtImageData.Text;
                                                                        string_94 = frmCAP2.string_2;
                                                                        frmCAP2.Dispose();
                                                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/nlpcaptchaverify/" + class3_0.TransactionID + "/BOOKINGWS/" + text10;
                                                                        postdata = "{\"nlpIdentifier\":\"" + string_94 + "\",\"nlpAnswer\":\"" + text10 + "\",\"nlpToken\":\"" + string2 + "\",\"nlpType\":\"MOB_BOOKING\"}";
                                                                    }
                                                                    Status = "Final Captcha";
                                                                    Reffral = "https://www.irctc.co.in/nget/booking/reviewBooking";
                                                                    updTStatus.BeginInvoke(1, "Verify Final Captcha", tCntrlName, null, null);
                                                                    //bool fastttt = true;
                                                                    //if (fastttt)
                                                                    //{
                                                                    //    string string7777 = "95.85.71.151||3128||jayesh||jayesh";
                                                                    //    string[] array88 = string7777.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                    //    Proxy_C = new WebProxy(array88[0].Trim(), int.Parse(array88[1].Trim()));
                                                                    //    Proxy_C.BypassProxyOnLocal = true;
                                                                    //    Proxy_C.Credentials = new NetworkCredential(array88[2].Trim(), array88[3].Trim());
                                                                    //    Lock("\n\n\nProxy=" + array88[0]);
                                                                    //}
                                                                    if (!_httpRequest_Nex(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                                                    {
                                                                        break;
                                                                    }
                                                                    if (response.Contains("SUCCESS"))
                                                                    {
                                                                        Lock0("Captcha", stopwatch2, response);
                                                                        bool flag14 = true;
                                                                        response = class3_0.PassengerResponse;
                                                                        num5++;
                                                                        string text18 = "";
                                                                        string text19 = "1";
                                                                        bool A_ = false;
                                                                        string text20 = "0.0";
                                                                        int num25 = 0;
                                                                        int_6 = 10;
                                                                        stopwatch2 = new Stopwatch();
                                                                        stopwatch2.Start();
                                                                        if (response.IndexOf("totalCollectibleAmount") > 0)
                                                                        {
                                                                            text20 = GetString(response, "totalCollectibleAmount");
                                                                            text9 = GetString(response, "availablityStatus").ToUpper();
                                                                            updTStatus.BeginInvoke(999, "Going To Bank$" + text20 + "$" + text9, tCntrlName, null, null);
                                                                        }
                                                                        if (text9.Contains("NOT AVAILABLE") || text9.Contains("REGRET") || text9.Contains("TRAIN DEPARTED") || text9.Contains("TRAIN CANCELLED"))
                                                                        {
                                                                            updTStatus.BeginInvoke(2, "Availability: " + text9 + ", Ticket Stopped!", tCntrlName, null, null);
                                                                            return false;
                                                                        }
                                                                        text = array4[0];
                                                                        int num26 = 0;
                                                                        while (true)
                                                                        {
                                                                            num26 = 0;
                                                                            stopwatch = new Stopwatch();
                                                                            stopwatch.Start();
                                                                            response = class3_0.PassengerResponse;
                                                                            num25++;
                                                                            method_102();
                                                                            if (!string.IsNullOrEmpty(text))
                                                                            {
                                                                                text2 = class3_0.dictionary_BnkData[text];
                                                                                class3_0.BANKSAVEAS = text;
                                                                                class3_0.BANKDETAILS = text2;
                                                                            }
                                                                            text3 = smethod_10(class3_0.BANKSAVEAS);
                                                                            text18 = GetBankID(text3, ref A_);
                                                                            if (text18 == "74" || (text18 == "91"))
                                                                            {

                                                                                string[] array202M = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                class3_0.BNK_MOBILE = array202M[0];
                                                                            }
                                                                            if (text18.Length <= 0)
                                                                            {
                                                                                goto IL_699f;
                                                                            }
                                                                            try
                                                                            {
                                                                                bool_63 = ((CheckBox)control.Controls["chkConfirmation"]).Checked;
                                                                                ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                            text6 = "\r\n\r\nFare: " + text20 + text6;
                                                                            if (num > 0.0)
                                                                            {
                                                                                double num27 = Conversion.Val(text20.Trim());
                                                                                if (num27 > 0.0 && num27 > num + (double)class3_0.int_4 * 0.49 + 40.0)
                                                                                {
                                                                                    flag2 = true;
                                                                                }
                                                                            }
                                                                            string string_95;
                                                                            string text21;
                                                                            bool flag15;
                                                                            while (true)
                                                                            {
                                                                                LoginType = "APP";
                                                                                dictionary_TimeP["Fare"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                string_95 = "";
                                                                                text21 = "";
                                                                                flag15 = false;
                                                                                updTStatus.BeginInvoke(1, "Redirect To Bank Server....", tCntrlName, null, null);
                                                                                Reffral = url;
                                                                                if (isAPP)
                                                                                {
                                                                                    int num28 = 0;
                                                                                    while (true)
                                                                                    {
                                                                                        updTStatus.BeginInvoke(1, "Getting Payment Info", tCntrlName, null, null);
                                                                                        Reffral = null;
                                                                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=N.A";
                                                                                        postdata = "{\"bankId\":" + text18 + ",\"amount\":" + text20 + ",\"txnStatus\":-1,\"txnType\":13,\"transationId\":0,\"errorMsg\":\"\",\"serverId\":\"\",\"txnDate\":\"\",\"timeStamp\":\"\",\"paramList\":[],\"apiName\":\"\"}";
                                                                                        postdata = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                        postdata = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";

                                                                                        if (text18 == "122")
                                                                                        {
                                                                                            postdata = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":59,\"upiModeOpted\":0}";
                                                                                        }


                                                                                        if (!ConnectHttp_Nex(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json"))
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        if (response.Contains("errorMsg"))
                                                                                        {
                                                                                            string string_96 = GetString_(response, "errorMsg", "\"");
                                                                                            string_96 = "Blacklist ID! Change Password!!!";
                                                                                            if (!string.IsNullOrEmpty(string_96))
                                                                                            {
                                                                                                Class11.smethod_1("TBL_USER", "UserState", "Blacklisted||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                                                                updTStatus.BeginInvoke(2, string_96, tCntrlName, null, null);
                                                                                                return false;
                                                                                            }
                                                                                        }
                                                                                        if (text18 == "101" || text18 == "108")
                                                                                        {
                                                                                            string text22 = "netbanking";
                                                                                            string text23 = "SBI";
                                                                                            string text24 = "State Bank of India";
                                                                                            string text25 = "9999999999";
                                                                                            string text26 = "IrctcCustomer@example.com";
                                                                                            if (text18 == "108")
                                                                                            {
                                                                                                text23 = "HDFB";
                                                                                                text24 = "HDFC Bank";
                                                                                            }
                                                                                            postdata = "{\"amount\":" + text20 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text18 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text23 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text24 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text25 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text26 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/paymentProcessService/" + class3_0.TransactionID;
                                                                                            bool flag16 = ConnectHttp_Nex(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                        }
                                                                                        if (response.Contains("CHECKSUMHASH") | response.Contains("ORDER_ID") | response.Contains("encdata") | response.Contains("DO_REDIRECT") | response.Contains("https://mercury-t2.phonepe.com/transact/v2"))
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        if (text18 == "74" || (text18 == "91"))
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        if (!((text18 == "91") & response.Contains("txnDate")))
                                                                                        {
                                                                                            if (num28 > 3)
                                                                                            {
                                                                                                goto end_IL_38bc;
                                                                                            }
                                                                                            continue;
                                                                                        }
                                                                                        goto IL_3ca4;
                                                                                    }
                                                                                    dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                    Lock0("Fare", stopwatch2, response);
                                                                                }
                                                                                else
                                                                                {
                                                                                    Task_response = null;
                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=NA";
                                                                                    postdata = "{\"bankId\":\"" + text18 + "\",\"txnType\":" + text19 + ",\"paramList\":[" + "" + "],\"amount\":\"" + text20 + "\",\"transationId\":0,\"txnStatus\":1}";
                                                                                    Task_errormsg = "";
                                                                                    Task_Exception_ = null;
                                                                                    Task_response = "";
                                                                                    Task<bool> task = Task_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, bool_64: true, bool_65: true, 68000, 68000);
                                                                                    int num29 = 0;
                                                                                    while (true)
                                                                                    {
                                                                                        if (!string.IsNullOrEmpty(Task_response))
                                                                                        {
                                                                                            if (Task_response.Contains("REDIRECT\",\"value\":\"TRUE"))
                                                                                            {
                                                                                                break;
                                                                                            }
                                                                                            if (Task_response.Contains("errorMsg"))
                                                                                            {
                                                                                                string string_96 = GetString_(Task_response, "errorMsg", "\"");
                                                                                                if (!string.IsNullOrEmpty(string_96))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(2, string_96, tCntrlName, null, null);
                                                                                                    return false;
                                                                                                }
                                                                                            }
                                                                                            if (Task_response.Contains("errorMessage"))
                                                                                            {
                                                                                                string string_97 = GetString_(Task_response, "errorMessage", "\"");
                                                                                                if (!string.IsNullOrEmpty(string_97))
                                                                                                {
                                                                                                    Class11.smethod_1("TBL_USER", "UserState", "Blacklisted||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                                                                    updTStatus.BeginInvoke(2, string_97, tCntrlName, null, null);
                                                                                                    return false;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (num29 > 650)
                                                                                            {
                                                                                                break;
                                                                                            }
                                                                                            num29 += 23;
                                                                                            Application.DoEvents();
                                                                                            Thread.Sleep(23);
                                                                                        }
                                                                                    }
                                                                                    Random random3 = new Random();
                                                                                    double num30 = random3.NextDouble();
                                                                                    long num31 = DateTimeOffset.Now.ToUnixTimeMilliseconds();
                                                                                    string text27 = (double)num31 / (100000.0 * num30) + class3_0.token + (double)num31 / (1000000.0 * num30);
                                                                                    Lock0("Fare", stopwatch2, response);
                                                                                    dictionary_TimeP["RedBNK"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                    url = "https://www.irctc.co.in/eticketing/PaymentRedirect";
                                                                                    Reffral = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=";
                                                                                    class3_0.string_61 = class3_0._Authorization.Replace("Bearer ", "");
                                                                                    postdata = string.Concat("token=", class3_0.string_61, "&txn=", class3_0.IRCTC_ID, "%3A", class3_0.TransactionID, "&" + class3_0.IRCTC_ID, "%3A", class3_0.TransactionID + "=" + text27);
                                                                                    int num32 = 0;
                                                                                    bool flag17;
                                                                                    do
                                                                                    {
                                                                                        stopwatch2 = new Stopwatch();
                                                                                        stopwatch2.Start();
                                                                                        num32++;
                                                                                        Status = "Redirect to Bank";
                                                                                        flag17 = _httpRequest_Nex(url, postdata, Reffral, "Other", bool_63: true, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                    }
                                                                                    while (!(response.IndexOf("Please Wait") > 0 && flag17) && ((response.Contains("retry") | (response.Length < 30)) || !(!string.IsNullOrEmpty(response) && flag17)));
                                                                                    dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                    Lock0("RedBNK", stopwatch2, response);
                                                                                }
                                                                                goto IL_4259;
                                                                            IL_4259:
                                                                                stopwatch_0 = new Stopwatch();
                                                                                stopwatch_0.Start();
                                                                                if (num26 <= 0)
                                                                                {
                                                                                    int num33 = 0;
                                                                                    bool flag19;
                                                                                    while (true)
                                                                                    {
                                                                                        bool flag18 = true;
                                                                                        ((ComboBox)control.Controls["cboGateway"]).Enabled = true;
                                                                                        if (class3_0.TKT_ISCONFIRM & text9.Contains("WL"))
                                                                                        {
                                                                                            num33 = 2;
                                                                                            frmPayment frmPayment3 = new frmPayment();
                                                                                            frmPayment3.tktname.Text = TktName;
                                                                                            frmPayment3.btnSubmit.Text = "Pay 4 WL";
                                                                                            frmPayment3.bool_7 = true;
                                                                                            frmPayment3.string_1 = text9;
                                                                                            frmPayment3.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                            DialogResult dialogResult2 = frmPayment3.DialogResult;
                                                                                            frmPayment3.Dispose();
                                                                                            if (dialogResult2 == DialogResult.Cancel)
                                                                                            {
                                                                                                updTStatus.BeginInvoke(2, "Availability: " + text9 + ", Ticket Stopped!", tCntrlName, null, null);
                                                                                                frmPayment3.Dispose();
                                                                                                return false;
                                                                                            }
                                                                                            flag18 = false;
                                                                                        }
                                                                                        num26++;
                                                                                        if (flag2 && flag18)
                                                                                        {
                                                                                            num33 = 2;
                                                                                            frmPayment frmPayment4 = new frmPayment();
                                                                                            frmPayment4.bool_4 = flag2;
                                                                                            frmPayment frmPayment5 = frmPayment4;
                                                                                            frmPayment5.string_1 = frmPayment5.string_1 + "FARE HIGHER THAN SET LIMIT\nRs." + text20 + " - " + text9;
                                                                                            frmPayment4.tktname.Text = TktName;
                                                                                            frmPayment4.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                            DialogResult dialogResult3 = frmPayment4.DialogResult;
                                                                                            frmPayment4.Dispose();
                                                                                            if (dialogResult3 != DialogResult.OK)
                                                                                            {
                                                                                                updTStatus.BeginInvoke(2, "User Select to Stop Payment! ", tCntrlName, null, null);
                                                                                                frmPayment4.Dispose();
                                                                                                return false;
                                                                                            }
                                                                                            flag18 = false;
                                                                                        }
                                                                                        bool_63 = ((CheckBox)control.Controls["chkConfirmation"]).Checked;
                                                                                        if (bool_63 && flag18)
                                                                                        {
                                                                                            num33 = 2;
                                                                                            frmPayment frmPayment6 = new frmPayment();
                                                                                            frmPayment frmPayment7 = frmPayment6;
                                                                                            frmPayment7.string_1 = frmPayment7.string_1 + "You Have Selected Stop Pay\nRs." + text20 + " - " + text9;
                                                                                            frmPayment6.tktname.Text = TktName;
                                                                                            frmPayment6.bool_0 = true;
                                                                                            frmPayment6.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                            if (frmPayment6.DialogResult != DialogResult.OK)
                                                                                            {
                                                                                                updTStatus.BeginInvoke(2, "User Select to Stop Payment! ", tCntrlName, null, null);
                                                                                                frmPayment6.Dispose();
                                                                                                return false;
                                                                                            }
                                                                                            frmPayment6.Dispose();
                                                                                            flag18 = false;
                                                                                        }
                                                                                        flag19 = false;
                                                                                        lock (object_8)
                                                                                        {
                                                                                            if (list_PaySTART.Contains(TktName) && flag18)
                                                                                            {
                                                                                                flag19 = true;
                                                                                            }
                                                                                        }
                                                                                        if (flag19)
                                                                                        {
                                                                                            num33 = 2;
                                                                                            frmPayment frmPayment6 = new frmPayment();
                                                                                            frmPayment6.bool_3 = flag19;
                                                                                            frmPayment6.string_1 = "Another Ticket already Procced\nRs." + text20 + " - " + text9;
                                                                                            frmPayment6.tktname.Text = TktName;
                                                                                            frmPayment6.bool_0 = true;
                                                                                            frmPayment6.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                            if (frmPayment6.DialogResult != DialogResult.OK)
                                                                                            {
                                                                                                updTStatus.BeginInvoke(201, "Another Ticket already Proceed", tCntrlName, null, null);
                                                                                                frmPayment6.Dispose();
                                                                                                return false;
                                                                                            }
                                                                                            frmPayment6.Dispose();
                                                                                        }
                                                                                        if (num33 <= 1)
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        if (!setNewBank(ref text3, ref text18, control))
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                                                                                        {
                                                                                            Thread thread2 = new Thread(StartUPI_);
                                                                                            thread2.IsBackground = true;
                                                                                            thread2.Start(class3_0.BANKDETAILS + "||True||5||0000000000");
                                                                                        }
                                                                                        break;
                                                                                    }
                                                                                    lock (object_10)
                                                                                    {
                                                                                        ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                        if (list_PNR.Contains(TktName))
                                                                                        {
                                                                                            updTStatus.BeginInvoke(204, "PNR Booked in another Pair", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    if (!flag19)
                                                                                    {
                                                                                        list_PaySTART.Add(TktName);
                                                                                    }
                                                                                    updTStatus.BeginInvoke(202, string.Concat(new object[5] { "Selecting_ ", text3, " for Payment!-(", "0", ")" }), tCntrlName, null, null);
                                                                                    if (text18 == "96" && num26 == 1)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                goto IL_4953;
                                                                            IL_3ca4:
                                                                                dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                Lock0("Fare", stopwatch2, response);
                                                                                goto IL_4259;
                                                                                continue;
                                                                            end_IL_38bc:
                                                                                break;
                                                                            }
                                                                            break;
                                                                        IL_4953:
                                                                            try
                                                                            {
                                                                                try
                                                                                {
                                                                                    string path = Path.Combine(Environment.SystemDirectory, "drivers\\etc\\hosts");
                                                                                    if (File.Exists(path))
                                                                                    {
                                                                                        File.Delete(path);
                                                                                    }
                                                                                }
                                                                                catch
                                                                                {
                                                                                }
                                                                                LoginType = "APP";
                                                                                bool_52 = false;
                                                                                dictionary_TimeP["PayProcess"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                bank = new Bank(this, class3_0);
                                                                                bank.updateTStatus_1 = updTStatus;
                                                                                string text28 = text18.ToUpper().Trim();
                                                                                Class46.smethod_0(text28);
                                                                                if (text3 == "OTOPAY")
                                                                                {
                                                                                    text28 = "4201";
                                                                                }
                                                                                else if (text3.Contains("PAYZAP_AIR") & isAPP)
                                                                                {
                                                                                    text28 = "4200";
                                                                                }
                                                                                else if (text3.Contains("PAYTMQR") & !isAPP)
                                                                                {
                                                                                    text28 = "4202";
                                                                                }
                                                                                else if (text3.Contains("PHONEPEQR"))
                                                                                {
                                                                                    text28 = "4203";
                                                                                }
                                                                                else if (text3.Contains("HDFC_DC"))
                                                                                {
                                                                                    text28 = "4204";
                                                                                }
                                                                                else if (text3.Contains("SBI") & isAPP)
                                                                                {
                                                                                    text28 = "4205";
                                                                                }
                                                                                else if (text3.Contains("V_RUPAY"))
                                                                                {
                                                                                    text28 = "4206";
                                                                                }
                                                                                else if (text3.Contains("ICICI") & isAPP)
                                                                                {
                                                                                    text28 = "4207";
                                                                                }
                                                                                switch (int.Parse(text28))
                                                                                {
                                                                                    case 97:
                                                                                        flag15 = bank.method_134(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    //case 116:
                                                                                    //case 111:
                                                                                    //    flag15 = bank.method_159(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                    //    break;
                                                                                    case 91:
                                                                                        //cookie_ = new CookieContainer();
                                                                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=NA";
                                                                                        postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"MOBILE\",\"value\":\"" + class3_0.BNK_MOBILE + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                        ConnectHttp_App2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                        string_92 = response;
                                                                                        flag15 = true;
                                                                                        break;
                                                                                    //case 91:
                                                                                    //    string_92 = "{\"amount\":" + text20 + ",\"bankId\":" + text18 + ",\"errorMsg\":null,\"paramList\":{\"key\":\"MOBILE\",\"value\":\"\"},\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                    //    flag15 = true;
                                                                                    //    break;
                                                                                    case 93:
                                                                                        flag15 = bank.AirtelMoney(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4206:
                                                                                        flag15 = bank.ICICI_Getway_Rupay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4201:
                                                                                        flag15 = bank.method_160_oto(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4203:
                                                                                        flag15 = bank.Method_PhonepeQr(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 147:
                                                                                        flag15 = bank.IRCTC_UPICASHFREE(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4204:
                                                                                        flag15 = bank.HDFC_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);//bank.HDFC_Getway(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4205:
                                                                                        flag15 = bank.PayTM_SBI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        if (bool_54)
                                                                                        {
                                                                                            bool_54 = false;
                                                                                        }
                                                                                        break;
                                                                                    case 4207:
                                                                                        flag15 = bank.PayTM_ICICI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        if (bool_54)
                                                                                        {
                                                                                            bool_54 = false;
                                                                                        }
                                                                                        break;
                                                                                    case 96:
                                                                                        string_92 = response;
                                                                                        flag15 = true;
                                                                                        break;
                                                                                    case 98:
                                                                                    case 108:

                                                                                    case 125:
                                                                                        flag15 = bank.PayU_(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 120:
                                                                                        flag15 = bank.ICICI_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 69:
                                                                                        flag15 = bank.method_131(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 101:
                                                                                        flag15 = bank.MobiKwikPay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 19:
                                                                                        flag15 = bank.method_128(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 64:
                                                                                        flag15 = bank.method_181(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 15:
                                                                                        flag15 = bank.method_118(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 16:
                                                                                        flag15 = bank.method_135(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 17:
                                                                                        flag15 = bank.method_167(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 66:
                                                                                        flag15 = bank.method_119(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4:
                                                                                        flag15 = bank.method_141(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 5:
                                                                                        flag15 = bank.method_180(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 3:
                                                                                        flag15 = bank.method_109(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 1:
                                                                                        {
                                                                                            CookieContainer cookieContainer_ = null;
                                                                                            if (!(flag15 = bank.SbiNetBanking(response, class3_0.BANKSAVEAS, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus, ref cookieContainer_)) && cookieContainer_ != null)
                                                                                            {
                                                                                                ThreadPool.QueueUserWorkItem(method_110, cookieContainer_);
                                                                                            }
                                                                                            break;
                                                                                        }
                                                                                    case 9:
                                                                                        flag15 = bank.method_127(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 105:
                                                                                    case 106:
                                                                                        flag15 = bank.Multi_RazorPay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 115:

                                                                                        flag15 = bank.ICICI_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 116:
                                                                                    case 111:
                                                                                        flag15 = bank.method_159(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 30:
                                                                                        flag15 = bank.method_142(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 113:
                                                                                    case 118:
                                                                                        flag15 = bank.IRCTC_UPI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 25:
                                                                                        flag15 = bank.method_129(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 41:
                                                                                        flag15 = bank.method_106(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 57:
                                                                                        flag15 = bank.method_115(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 36:
                                                                                        flag15 = bank.method_114(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 45:
                                                                                        flag15 = bank.method_125(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 26:
                                                                                        flag15 = bank.method_126(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 21:
                                                                                        flag15 = bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 122:
                                                                                        flag15 = bank.IRCTC_UPIHDFC(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 144:
                                                                                        if (qrpayment)
                                                                                        {
                                                                                            url = "https://pay.easebuzz.in/pay/ir/secure";
                                                                                            postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            url = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            airpay(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            string[] array2022 = class3_0.easebuz.Split(new string[1] { "/" }, StringSplitOptions.None);
                                                                                            string accesskey = array2022[2];
                                                                                            string coupouns = "[]";
                                                                                            url = "https://pay.easebuzz.in/submitInitiatePayment";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            updTStatus.BeginInvoke(1, text3 + "Step 1...", tCntrlName, null, null);
                                                                                            postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            //string qrlinkk = GetString(response, "qr_link");
                                                                                            updTStatus.BeginInvoke(1, "Scan & Pay..click paid when done", tCntrlName, null, null);
                                                                                            string text15DEF = response.Substring(response.IndexOf("qr_link") + 11);
                                                                                            string enccccF = text15DEF.Substring(0, text15DEF.IndexOf(","));
                                                                                            char[] charsToTrim = { '"' };
                                                                                            string cleanString = enccccF.Trim(charsToTrim);
                                                                                            QRCodeGenerator qrGenerator = new QRCodeGenerator();
                                                                                            QRCodeData qrCodeData = qrGenerator.CreateQrCode(cleanString, QRCodeGenerator.ECCLevel.Q);
                                                                                            Base64QRCode qrCode = new Base64QRCode(qrCodeData);
                                                                                            string qrCodeImageAsBase64 = qrCode.GetGraphic(20);
                                                                                            FrmQr frmOTPP = new FrmQr();
                                                                                            frmOTPP.Form1_Load(qrCodeImageAsBase64, TktName, text20);
                                                                                        ILrestat:
                                                                                            url = "https://pay.easebuzz.in/upi/checkStatus";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            if (!response.Contains("Payment Successful"))
                                                                                            {
                                                                                                goto ILrestat;
                                                                                            }
                                                                                            updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                            url = "https://pay.easebuzz.in/response/hecupiresp";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            string text15DEE = response.Substring(response.IndexOf("encdata") + 16);
                                                                                            string ENCDATA = text15DEE.Substring(0, text15DEE.IndexOf("\"/>"));
                                                                                            class3_0.easebuzDATA = ENCDATA;
                                                                                            string text15DEEf = response.Substring(response.IndexOf("form action") + 13);
                                                                                            if (failissuefix)
                                                                                            {
                                                                                                url = text15DEEf.Substring(0, text15DEEf.IndexOf("' method"));
                                                                                                Reffral = "https://pay.easebuzz.in/";
                                                                                                postdata = "bankCode=EASEBUZZ_MOB_AG" + "&appType=ANDROID" + "&encdata=" + class3_0.easebuzDATA;
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            }

                                                                                            string_92 = response;
                                                                                            flag15 = true;
                                                                                            break;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            string[] arrayv = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                            string vpa = arrayv[0].Trim();
                                                                                            url = "https://pay.easebuzz.in/pay/ir/secure";
                                                                                            postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            url = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            airpay(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            string[] array2022 = class3_0.easebuz.Split(new string[1] { "/" }, StringSplitOptions.None);
                                                                                            string accesskey = array2022[2];
                                                                                            string coupouns = "[]";
                                                                                            url = "https://pay.easebuzz.in/submitInitiatePayment";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            updTStatus.BeginInvoke(1, text3 + "  Step 1...", tCntrlName, null, null);
                                                                                            postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            //string qrlinkk = GetString(response, "qr_link");
                                                                                            updTStatus.BeginInvoke(1, "Accept Request From Mobile", tCntrlName, null, null);

                                                                                        ILrestat:
                                                                                            url = "https://pay.easebuzz.in/upi/checkStatus";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";
                                                                                            //postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            if (!response.Contains("Payment Successful"))
                                                                                            {
                                                                                                goto ILrestat;
                                                                                            }
                                                                                            updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                            url = "https://pay.easebuzz.in/response/hecupiresp";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";
                                                                                            //postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            string text15DEE = response.Substring(response.IndexOf("encdata") + 16);
                                                                                            string ENCDATA = text15DEE.Substring(0, text15DEE.IndexOf("\"/>"));
                                                                                            class3_0.easebuzDATA = ENCDATA;
                                                                                            string text15DEEf = response.Substring(response.IndexOf("form action") + 13);
                                                                                            if (failissuefix)
                                                                                            {
                                                                                                url = text15DEEf.Substring(0, text15DEEf.IndexOf("' method"));
                                                                                                Reffral = "https://pay.easebuzz.in/";
                                                                                                postdata = "bankCode=EASEBUZZ_MOB_AG" + "&appType=ANDROID" + "&encdata=" + class3_0.easebuzDATA;
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            }

                                                                                            string_92 = response;
                                                                                            flag15 = true;
                                                                                            break;
                                                                                        }

                                                                                    case 121:
                                                                                        updTStatus.BeginInvoke(1, text3 + "  Payment Step 1....", tCntrlName, null, null);
                                                                                        url = "https://irctc.nowpay.co.in/";
                                                                                        postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                        Reffral = "https://irctc.nowpay.co.in/";
                                                                                        string text15D = response.Substring(response.IndexOf("privatekey") + 19);
                                                                                        string privatekey = text15D.Substring(0, text15D.IndexOf("\">"));
                                                                                        string text15e = response.Substring(response.IndexOf("mercid") + 14);
                                                                                        string mercid = text15e.Substring(0, text15e.IndexOf("\">"));
                                                                                        string text15f = response.Substring(response.IndexOf("orderid") + 16);
                                                                                        string orderid = text15f.Substring(0, text15f.IndexOf("\">"));
                                                                                        string currency = "356";
                                                                                        string chmod = "upi";
                                                                                        string text15g = response.Substring(response.IndexOf("amount") + 15);
                                                                                        string amount = text15g.Substring(0, text15g.IndexOf("\">"));
                                                                                        string buyerEmail = "customer@irctc.co.in";
                                                                                        string buyerFirstName = "";
                                                                                        string buyerLastName = "";
                                                                                        string text15h = response.Substring(response.IndexOf("checksum") + 17);
                                                                                        string checksum = text15h.Substring(0, text15h.IndexOf("\">"));
                                                                                        postdata = "privatekey=" + privatekey + "&mercid=28688" + "&orderid=" + orderid + "&currency=" + currency + "&isocurrency=" + "INR" + "&chmod=" + chmod + "&amount=" + amount + "&buyerEmail=" + WebUtility.UrlEncode(buyerEmail) + "&buyerFirstName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum + "&arpyVer=3";
                                                                                        url = "https://payments.airpay.co.in/pay/index.php";
                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                        updTStatus.BeginInvoke(1, text3 + "  Payment Step 2....", tCntrlName, null, null);
                                                                                        string text15DE = response.Substring(response.IndexOf("paymentChannelsData") + 23);
                                                                                        string encccc = text15DE.Substring(0, text15DE.IndexOf("';"));

                                                                                        Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                        url = "https://payments.airpay.co.in/pageLoadTime.php";
                                                                                        string orig = Decrypt(encccc);
                                                                                        string transaction_id = jsonData_Serial(orig, "transaction_id");
                                                                                        string amountss = jsonData_Serial(orig, "amount");
                                                                                        string timef = "1407";
                                                                                        string b4 = Base64Encode(Base64Encode("1407@28688@" + transaction_id + "@c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d"));
                                                                                        string test = "{\"loadTime\":\"" + timef + "\",\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"" + privatekey + "\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                        test = "{\"loadTime\":1407,\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                        string outputTest = Encrypt(test);
                                                                                        outputTest = HttpUtility.UrlEncode(outputTest);
                                                                                        postdata = "requestParam=" + outputTest + "&scriptencrypt=Y";
                                                                                        airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_, "payment");

                                                                                        if (qrpayment)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(1, "Scan Qr and Pay....", tCntrlName, null, null);
                                                                                            encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"qrcode\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                            encccc = Encrypt(encccc);
                                                                                            url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                            encccc = HttpUtility.UrlEncode(encccc);
                                                                                            postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                            Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                            airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                            string ogbase64 = jsonData_Serial(response, "image");
                                                                                            //string RID = jsonData_Serial(response, "RID");
                                                                                            ogbase64 = ogbase64.Replace("data:image\\/png;base64,", "");
                                                                                            ogbase64 = ogbase64.Replace("\\/", "/");
                                                                                            FrmQr frmOTPPP = new FrmQr();
                                                                                            frmOTPPP.Form1_Load(ogbase64, TktName, text20);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            updTStatus.BeginInvoke(1, "Accept Request from Mobile....", tCntrlName, null, null);
                                                                                            string[] arrayvA = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                            string vpaA = arrayvA[0].Trim();
                                                                                            encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"" + vpaA + "\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"upi_vpa\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                            encccc = Encrypt(encccc);
                                                                                            url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                            encccc = HttpUtility.UrlEncode(encccc);
                                                                                            postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                            Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                            airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                            if (response.Contains("Invalid Payee Virtual address"))
                                                                                            {
                                                                                                updTStatus.BeginInvoke(1, "Invalid Upi Adress...", tCntrlName, null, null);
                                                                                                return false;
                                                                                            }

                                                                                        }


                                                                                        //step4
                                                                                        string RID = jsonData_Serial(response, "RID");
                                                                                    //step4
                                                                                    ILREEEE:
                                                                                        postdata = "privatekey=" + privatekey + "&orderid=" + orderid + "&transaction_id=" + transaction_id + "&mercid=28688&amount=" + amountss + "&isocurrency=inr&customvar=&checksum=" + checksum + "&RID=" + RID + "&ch_id=" + transaction_id + "&submode=vpa";
                                                                                        Reffral = "https://payments.airpay.co.in/";
                                                                                        url = "https://secure.airpay.co.in/upi/npci/response_upi.php";
                                                                                        airpayF(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                        if (!response.Contains("\"BANKRESPONSEMSG\":\"SUCCESS\""))
                                                                                        {
                                                                                            goto ILREEEE;
                                                                                        }
                                                                                        updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                        //update
                                                                                        //postdata = "privatekey=" + privatekey + "&orderid=" + orderid + "&transaction_id=" + transaction_id + "&mercid=28688&amount=" + amountss + "&isocurrency=inr&customvar=&checksum=" + checksum + "&RID=" + RID + "&ch_id=" + transaction_id + "&submode=vpa";
                                                                                        postdata = "action=failed_transaction&privatekey=" + privatekey + "&orderid=" + orderid + "&transaction_id=" + transaction_id + "&TRANSACTIONTYPE=320&mercid=28688&amount=" + amountss + "&tabselect=upi&customvar=&checksum=" + checksum + "&RID=" + RID + "&chid=" + transaction_id;
                                                                                        Reffral = "https://payments.airpay.co.in/";
                                                                                        url = "https://secure.airpay.co.in/upi/npci/response_manage.php ";
                                                                                        airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                        postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                        //step6
                                                                                        if (!response.Contains("https://www.irctc.co.in/eticketing/mbi/MobileBankResponse"))
                                                                                        {
                                                                                            string_92 = response;
                                                                                            flag15 = false;
                                                                                            break;
                                                                                        }
                                                                                        updTStatus.BeginInvoke(1, "Redirecting to PNR serever.....", tCntrlName, null, null);
                                                                                        string encair = response.Substring(response.IndexOf("encdata") + 16);
                                                                                        encairf = encair.Substring(0, encair.IndexOf("\">"));
                                                                                        if (failissuefix)
                                                                                        {
                                                                                            url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse";
                                                                                            Reffral = "https://irctc.nowpay.co.in/";
                                                                                            postdata = "bankCode=AIRP_MOB_AG" + "&appType=ANDROID" + "&encdata=" + encairf;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                        }
                                                                                        string_92 = response;
                                                                                        flag15 = true;
                                                                                        break;
                                                                                    case 0:
                                                                                    case 71:
                                                                                    case 77:
                                                                                    case 78:
                                                                                    case 104:
                                                                                    case 112:
                                                                                    case 117:
                                                                                    case 119:
                                                                                        flag15 = bank.PayTM(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        if (bool_54)
                                                                                        {
                                                                                            bool_54 = false;
                                                                                        }
                                                                                        break;
                                                                                }
                                                                            }
                                                                            catch (Exception)
                                                                            {
                                                                            }
                                                                            num26 = 0;
                                                                            Lock0("PayProcess", stopwatch, string_92);
                                                                            if (!flag15)
                                                                            {
                                                                                if (bool_52)
                                                                                {
                                                                                    updTStatus.BeginInvoke(2, "insufficient balance", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                                if (string_95 == "00000")
                                                                                {
                                                                                    string_95 = "insufficient funds";
                                                                                }
                                                                                updTStatus.BeginInvoke(1, string_95 + " Failed!", tCntrlName, null, null);
                                                                                if ((!string_95.Contains("Invaild Bank's Details") || !string_95.Contains("Invaild Bank Bypass Detail") || !string_95.Contains("OTP Cancelled by User") || !string_95.Contains("Clear Balance Funds not available") || !string_95.Contains("Invaild Card's Details")) && !list_12.Contains(text3 + "_Fail"))
                                                                                {
                                                                                    list_12.Add(text3 + "_Fail");
                                                                                }
                                                                                lock (object_9)
                                                                                {
                                                                                    if (list_PaySTART.Contains(TktName))
                                                                                    {
                                                                                        list_PaySTART.Remove(TktName);
                                                                                    }
                                                                                    if (list_PaySUCCESS.Contains(TktName))
                                                                                    {
                                                                                        list_PaySUCCESS.Remove(TktName);
                                                                                    }
                                                                                }
                                                                                ((ComboBox)control.Controls["cboGateway"]).Enabled = true;
                                                                                updTStatus?.BeginInvoke(1, "Choose another Payment.", tCntrlName, null, null);
                                                                                frmPayment frmPayment8 = new frmPayment();
                                                                                frmPayment8.string_1 = string_95 + "\r\n" + text21;
                                                                                frmPayment8.tktname.Text = TktName;
                                                                                frmPayment8.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                if (frmPayment8.DialogResult != DialogResult.OK)
                                                                                {
                                                                                    frmPayment8.Dispose();
                                                                                    updTStatus.BeginInvoke(2, "Paymnent Choice Cancelled by User! " + errormsg, tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                                ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                text = ((ComboBox)control.Controls["cboGateway"]).SelectedItem.ToString();
                                                                                frmPayment8.Dispose();
                                                                                updTStatus.BeginInvoke(1, "Going To Bank", tCntrlName, null, null);
                                                                                continue;
                                                                            }
                                                                            Reffral = string_95;
                                                                            goto IL_699f;
                                                                        IL_699f:
                                                                            updTStatus.BeginInvoke(1, "Payment Successful!", tCntrlName, null, null);
                                                                            int num34 = 0;
                                                                            flag3 = false;
                                                                            lock (object_9)
                                                                            {
                                                                                if (list_PaySUCCESS.Contains(TktName))
                                                                                {
                                                                                    flag3 = true;
                                                                                }
                                                                            }
                                                                            if (flag3)
                                                                            {
                                                                                frmPayment frmPayment9 = new frmPayment();
                                                                                if (flag3)
                                                                                {
                                                                                    frmPayment9.bool_3 = true;
                                                                                }
                                                                                else
                                                                                {
                                                                                    frmPayment9.bool_2 = true;
                                                                                }
                                                                                frmPayment9.string_1 = "anOther Ticket On Final Process";
                                                                                frmPayment frmPayment10 = frmPayment9;
                                                                                frmPayment10.string_1 = frmPayment10.string_1 + "\r\r" + text4;
                                                                                frmPayment9.tktname.Text = TktName;
                                                                                frmPayment9.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                int dialogResult4 = (int)frmPayment9.DialogResult;
                                                                                frmPayment9.Dispose();
                                                                                if (dialogResult4 != 1)
                                                                                {
                                                                                    updTStatus.BeginInvoke(2, "User Select to Stop Booking! ", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            if (!flag3)
                                                                            {
                                                                                list_PaySUCCESS.Add(TktName);
                                                                            }
                                                                            lock (object_10)
                                                                            {
                                                                                if (list_PNR.Contains(TktName))
                                                                                {
                                                                                    updTStatus.BeginInvoke(204, "PNR Booked in another Pair", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            postdata = class3_0.Method_SerialInp0(string_92, ref url, bool_14: true);
                                                                            while (true)
                                                                            {
                                                                                if (text3 == "AIRTELMONEY")
                                                                                {
                                                                                    if (isAPP)
                                                                                    {
                                                                                        string text29 = "";
                                                                                        if (dictionary_5.ContainsKey(key))
                                                                                        {
                                                                                            text29 = dictionary_5[key];
                                                                                            dictionary_5.Remove(key);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            frmOTP frmOTP3 = new frmOTP();
                                                                                            frmOTP3.method_1(control_0, rectangle_0, bool_2: true, "AIRTELMONEY", class3_0.BANKSAVEAS);
                                                                                            if (frmOTP3.DialogResult != DialogResult.OK)
                                                                                            {
                                                                                                frmOTP3.Dispose();
                                                                                                updTStatus?.BeginInvoke(1, "OTP Cancell by User", tCntrlName, null, null);
                                                                                                return false;
                                                                                            }
                                                                                            text29 = frmOTP3.string_0;
                                                                                            frmOTP3.Dispose();
                                                                                        }
                                                                                        postdata = "{\"amount\":" + text20 + ",\"bankId\":91,\"errorMsg\":null,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + text29 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                        dsed = postdata;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        BankSuccess = true;
                                                                                        url = string_92;
                                                                                        postdata = string_92.Replace("https://www.irctc.co.in/eticketing/BankResponse?", "");
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    string expression = postdata.Replace("&", ",");
                                                                                    string[] array12 = Strings.Split(expression, ",");
                                                                                    if (!((text3 == "EAZEBUZZQR") | (text3 == "AIRPAYQR") | (text3 == "CASHFREEUPI") | (text18 == "113") | (text18 == "122") | (text18 == "118") | (text3 == "OTOPAY")))
                                                                                    {
                                                                                        int num35 = Information.UBound(array12);
                                                                                        string text30 = "";
                                                                                        for (int i = 0; i <= num35; i++)
                                                                                        {
                                                                                            string[] array13 = Strings.Split(array12[i], "=");
                                                                                            text30 = text30 + "{\"key\":\"" + array13[0] + "\",\"value\":\"" + HttpUtility.UrlDecode(array13[1]) + "\"}";
                                                                                            if (i + 2 <= array12.Length)
                                                                                            {
                                                                                                text30 += ",";
                                                                                            }
                                                                                        }
                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"paramList\":[" + text30 + "],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    if (text18 == "118" & text3 != "OTOPAY")
                                                                                    {
                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + string_92 + "\"}],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    else if (text3 == "OTOPAY")
                                                                                    {
                                                                                        string Enc = jsonData_Serial(class3_0.otopaydata, "encdata");
                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":118,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                        if (failissuefix)
                                                                                        {
                                                                                            string reff = "https://www.irctcipay.com/";
                                                                                            Request_Type = "Bank";
                                                                                            string data = "encdata=" + Enc;//class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                            url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse?bankCode=IRCTC_MOB_AG&appType=ANDROID";
                                                                                            bool flag20 = airpay(url, data, reff, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Bank");

                                                                                        }

                                                                                        //dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"paramList\":[" + Enc + "],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    else if (text18 == "121")
                                                                                    {
                                                                                        string Enc = encairf;

                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":121,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    else if (text18 == "122")
                                                                                    {
                                                                                        string Enc = class3_0.hdfcupi;

                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":122,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":59,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    else if (text18 == "147")
                                                                                    {
                                                                                        string Enc = class3_0.cashfree;

                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":147,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    else if (text18 == "144")
                                                                                    {
                                                                                        string Enc = class3_0.easebuzDATA;//jsonData_Serial(string_92, "encdata");

                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":144,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }
                                                                                }
                                                                                if (!isAPP && class3_0.TKT_ISADV)
                                                                                {
                                                                                    if (class3_0.bool_SL_TQ)
                                                                                    {
                                                                                        minmPaymentTime -= 4320.0;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        minmPaymentTime -= 1320.0;
                                                                                    }
                                                                                }
                                                                                int num36 = (int)minmPaymentTime - (int)(DateTime.Now - dateTimePayStart).TotalMilliseconds;
                                                                                num34++;
                                                                                if (num36 > 10)
                                                                                {
                                                                                    DateTime dateTime7 = DateTime.Now.AddMilliseconds(num36);
                                                                                    while (true)
                                                                                    {
                                                                                        TimeSpan timeSpan3 = dateTime7 - DateTime.Now;
                                                                                        string text31 = timeSpan3.Seconds + ":" + timeSpan3.Milliseconds;
                                                                                        if (timeSpan3.TotalMilliseconds <= 1.0)
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        updTStatus.BeginInvoke(1, "Final Count: " + text31, tCntrlName, null, null);
                                                                                        Thread.Sleep(50);
                                                                                        Application.DoEvents();
                                                                                    }
                                                                                }
                                                                                stopwatch2 = new Stopwatch();
                                                                                stopwatch2.Start();
                                                                                if (!isAPP)
                                                                                {
                                                                                    dictionary_TimeP["RdIRCTC"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                    updTStatus.BeginInvoke(1, "Final Hit For PNR ....", tCntrlName, null, null);
                                                                                    postdata = class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                    if (text18 == "113")
                                                                                    {
                                                                                        postdata = string_92;
                                                                                    }
                                                                                    do
                                                                                    {
                                                                                    IL_6039:
                                                                                        if (text3 != "AIRTELMONEY")
                                                                                        {
                                                                                            url = "https://www.irctc.co.in/eticketing/BankResponse";
                                                                                        }
                                                                                        Status = "Redirect to IRCTC";
                                                                                        bool flag20 = _httpRequest_Nex(url, postdata, Reffral, "Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                        if (response.IndexOf("<form action=\"/eticketing/BankResponse\" method=\"post\">") >= 0)
                                                                                        {
                                                                                            string text32 = response.Substring(response.IndexOf("setTimeout"));
                                                                                            text32 = text32.Substring(text32.IndexOf("},") + 3);
                                                                                            text32 = text32.Substring(0, text32.IndexOf(")"));
                                                                                            int num37 = int.Parse(text32);
                                                                                            if (num37 > 50)
                                                                                            {
                                                                                                Thread.Sleep(num37);
                                                                                                goto IL_6039;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    while ((response == "retry") | string.IsNullOrEmpty(response));
                                                                                    DateTime dateTime8 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                                                                    long num38 = (long)(DateTime.UtcNow - dateTime8).TotalMilliseconds;
                                                                                    class3_0.token = num38.ToString();
                                                                                    isPremium_p = false;
                                                                                    Lock0("RdIRCTC", stopwatch2, response);
                                                                                }
                                                                                postdata = null;
                                                                                stopwatch2 = new Stopwatch();
                                                                                stopwatch2.Start();
                                                                                dictionary_TimeP["FinalHit"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                Reffral = "";
                                                                                string text33 = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingData/" + class3_0.TransactionID;
                                                                                updTStatus?.BeginInvoke(1, "Final Hit For PNR ....", tCntrlName, null, null);
                                                                                int num39 = 0;
                                                                                int num40 = 0;
                                                                                string text34 = "";
                                                                                Request_Type = "json";
                                                                                while (true)
                                                                                {
                                                                                    num40++;
                                                                                    Status = "Final Hit";
                                                                                    bool flag21 = false;
                                                                                    flag21 = _httpRequest_Nex(text33, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                    if (!flag21 | (response == "new:retry") | string.IsNullOrEmpty(response))
                                                                                    {
                                                                                        num39++;
                                                                                        if (num39 > 9)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "Service Unavailable Check History" + errormsg, tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        Thread.Sleep(300);
                                                                                        continue;
                                                                                    }
                                                                                    if (num40 == 1)
                                                                                    {
                                                                                        text34 = response;
                                                                                    }
                                                                                    string text35 = "";
                                                                                    string text36 = "";
                                                                                    if (!string.IsNullOrEmpty(errormsg))
                                                                                    {
                                                                                        text35 = errormsg;
                                                                                    }
                                                                                    if (Exception_ != null)
                                                                                    {
                                                                                        text36 = Exception_.ToString();
                                                                                    }
                                                                                    Lock0("FinalHit", stopwatch2, response + "\r\n" + text35 + "\r\n" + text36);
                                                                                    if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) > 0)
                                                                                    {
                                                                                        if ((text18 == "113") | (text18 == "118"))
                                                                                        {
                                                                                            text3 = "PHONEPE_IRCTC";
                                                                                        }
                                                                                        if (text3 == "HDFC")
                                                                                        {
                                                                                            text3 = "HDFC_Net";
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        WriteLog();
                                                                                        if (response == "retry" && num40 < 3)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        if (response.Contains("Unable To Process Your Request.\",\"retryBooking") & (text18 == "91"))
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        if ((response.Contains("Unable to process") && num40 < 3) || ((response.Contains("Unable to perform Transaction") | response.Contains("No Transaction found")) && num40 < 6))
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }
                                                                                    if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) <= 0)
                                                                                    {
                                                                                        if ((text18 == "113") | (text18 == "118"))
                                                                                        {
                                                                                            text3 = "PHONEPE_IRCTC";
                                                                                        }
                                                                                        response = text34;
                                                                                        if (response.Contains("timeStamp"))
                                                                                        {
                                                                                            dateTime_1 = DateTime.Parse(GetString(response, "timeStamp"));
                                                                                            if (response.Contains("errorMessage"))
                                                                                            {
                                                                                                text8 = GetString_(response, "errorMessage", "\"");
                                                                                            }
                                                                                            else if (response.Contains("bankErrorFlag\":\"true"))
                                                                                            {
                                                                                                text8 = "Payment Failed";
                                                                                            }
                                                                                            string text37 = text8.ToLower();
                                                                                            if (text37.Contains("berths") || text37.Contains("seat"))
                                                                                            {
                                                                                                string state = text3 + "||" + text8 + "||" + dateTime_1.ToString("hh:mm:ss");
                                                                                                string_91 = "faield";
                                                                                                ThreadPool.QueueUserWorkItem(sendLogToServer, state);
                                                                                                updTStatus.BeginInvoke(2, text8, tCntrlName, null, null);
                                                                                                return result;
                                                                                            }
                                                                                        }
                                                                                        string _response = "";
                                                                                        text33 = "https://www.irctc.co.in/eticketing/protected/mapps1/recentTxnsDetails";
                                                                                        string deta = null;
                                                                                        Status = "Re-Check For PNR";
                                                                                        updTStatus.BeginInvoke(1, "Re-Check For PNR...", tCntrlName, null, null);
                                                                                        if (!_httpRequest_Nex(text33, deta, Reffral, "Plain123Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref _response, ref errormsg, ref Exception_))
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "Booking Faield Check History" + errormsg, tCntrlName, null, null);
                                                                                            return result;
                                                                                        }
                                                                                        if (_response.Contains("BOOKED"))
                                                                                        {
                                                                                            lock (object_10)
                                                                                            {
                                                                                                list_PaySUCCESS.Add(TktName);
                                                                                                if (!list_PNR.Contains(TktName))
                                                                                                {
                                                                                                    list_PNR.Add(TktName);
                                                                                                }
                                                                                            }
                                                                                            try
                                                                                            {
                                                                                                string text38 = dateTime_1.ToString("hh:mm:ss");
                                                                                                updTStatus.BeginInvoke(203, "Sucess PNR:0000000000", tCntrlName, null, null);
                                                                                                string_90 = "0000000000 - " + text3 + (A_ ? "_Debit" : "_NB") + " - " + class3_0.TRAIN_NO + " - " + double_0 / 1000.0 + " - " + " - " + LoginType;
                                                                                                string text39 = "0000000000|" + text38 + "|" + text3 + "|" + LoginType + "|" + class3_0.BRD_STN + "-" + class3_0.DEST_STN + "-" + class3_0.TRAIN_NO + "|" + LoginType + "|" + class3_0.int_TotalPax;
                                                                                                Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG) VALUES('PNR','" + text39 + "')");
                                                                                                updTStatus.BeginInvoke(5, LoginType + ": Success by GADAR : " + text38, tCntrlName, null, null);
                                                                                                class3_0.method_4(bool_14: true, "Booking Success", text20, "0000000000", ConnectionGroupName_);
                                                                                                string status = string.Concat(new string[3]
                                                                                                {
                                                                                                    "Success",
                                                                                                    Log_(int_Slot, text3),
                                                                                                    text38
                                                                                                });
                                                                                                updTStatus.BeginInvoke(4, status, tCntrlName, null, null);
                                                                                            }
                                                                                            catch
                                                                                            {
                                                                                            }
                                                                                            result = true;
                                                                                            return result;
                                                                                        }
                                                                                        string state2 = text3 + "||" + text8 + "||" + dateTime_1.ToString("hh:mm:ss");
                                                                                        string_91 = "faield";
                                                                                        ThreadPool.QueueUserWorkItem(sendLogToServer, state2);
                                                                                        updTStatus.BeginInvoke(2, text8, tCntrlName, null, null);
                                                                                        return result;
                                                                                    }
                                                                                    lock (object_10)
                                                                                    {
                                                                                        if (!list_PNR.Contains(TktName))
                                                                                        {
                                                                                            list_PNR.Add(TktName);
                                                                                        }
                                                                                    }
                                                                                    dateTime_1 = DateTime.Parse(GetString(response, "bookingDate"));
                                                                                    string environmentVariable3 = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
                                                                                    if (environmentVariable3 != "ADMIN000056" && class3_0.TKT_ISADV)
                                                                                    {
                                                                                        if (class3_0.bool_SL_TQ)
                                                                                        {
                                                                                            dateTime_1 = dateTime_1.AddSeconds(-45.0);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            dateTime_1 = dateTime_1.AddSeconds(-12.0);
                                                                                        }
                                                                                    }
                                                                                    string text40 = dateTime_1.ToString("hh:mm:ss");
                                                                                    string string3 = GetString(response, "pnrNumber");
                                                                                    updTStatus.BeginInvoke(203, "Sup-Succes by GADAR: " + text40, tCntrlName, null, null);
                                                                                    string_90 = string3 + " - " + text3 + (A_ ? "_Debit" : "_NB") + " - " + class3_0.TRAIN_NO + " - " + double_0 / 1000.0 + " - " + LoginType;
                                                                                    try
                                                                                    {
                                                                                        class3_0.method_4(bool_14: true, "Booking Success", text20, string3, ConnectionGroupName_);
                                                                                        string text41 = string3 + "|" + text40 + "|" + text3 + "|" + LoginType + "|" + class3_0.BRD_STN + "-" + class3_0.DEST_STN + "-" + class3_0.TRAIN_NO + "|" + LoginType + "|" + class3_0.int_TotalPax;
                                                                                        Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG) VALUES('PNR','" + text41 + "')");
                                                                                        updTStatus.BeginInvoke(5, "Sup-Succes by GADAR: " + text40, tCntrlName, null, null);
                                                                                        bool flag22 = false;
                                                                                        string text42 = "";
                                                                                        string text43 = "0";
                                                                                        int millisecond = DateTime.Now.Millisecond;
                                                                                        DateTime dateTime9 = default(DateTime);
                                                                                        try
                                                                                        {
                                                                                        }
                                                                                        catch
                                                                                        {
                                                                                        }
                                                                                        text41 = string.Concat(new string[3]
                                                                                        {
                                                                                            "Success",
                                                                                            Log_(int_Slot, text3),
                                                                                            text40
                                                                                        });
                                                                                        if (flag22)
                                                                                        {
                                                                                            text41 = "Success" + Log_(int_Slot, text3) + text40 + "#txn" + text43 + "|" + text42;
                                                                                        }
                                                                                        updTStatus.BeginInvoke(4, text41, tCntrlName, null, null);
                                                                                        string_27 = response;
                                                                                        ThreadPool.QueueUserWorkItem(PrintTicketAPP, text41);
                                                                                        result = true;
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                        result = true;
                                                                                        return result;
                                                                                    }
                                                                                    result = true;
                                                                                    goto end_IL_582f;
                                                                                }
                                                                                continue;
                                                                            end_IL_582f:
                                                                                break;
                                                                            }
                                                                            goto end_IL_0f65;
                                                                        }
                                                                        break;
                                                                    }
                                                                    if (response.Contains("No seats available"))
                                                                    {
                                                                        updTStatus.BeginInvoke(2, "No seats available", tCntrlName, null, null);
                                                                        return false;
                                                                    }
                                                                    if (response.Contains("captchaQuestion"))
                                                                    {
                                                                        if (num10 > 2)
                                                                        {
                                                                            flag13 = true;
                                                                        }
                                                                    }
                                                                    else if (response.Contains("errorMessage"))
                                                                    {
                                                                        updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                                        return false;
                                                                    }
                                                                }
                                                                break;
                                                            }
                                                            //File.WriteAllText("Passenger_Error_" + class3_0.TransactionID, url + "\n" + postdata + "\n" + response);
                                                            if (response.IndexOf("availablityStatus") > 0)
                                                            {
                                                                updTStatus.BeginInvoke(2, GetString(response, "availablityStatus"), tCntrlName, null, null);
                                                                return false;
                                                            }
                                                            if (response.IndexOf("Unable to perform Transaction") >= 0)
                                                            {
                                                                unable = true;
                                                                break;
                                                            }
                                                            if (response.IndexOf("Unable to process current transaction") >= 0)
                                                            {
                                                                unable = true;
                                                                continue;
                                                            }
                                                            if (response.IndexOf("Invalid access token") >= 0)
                                                            {
                                                                break;
                                                            }
                                                            updTStatus.BeginInvoke(2, GetString(response, "errorMessage"), tCntrlName, null, null);
                                                            return false;
                                                        }
                                                        updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                        return false;
                                                    IL_3000:
                                                        unable = true;
                                                    IL_271d:
                                                        Lock0("Availablity", stopwatch2, response);
                                                        class3_0.TransactionID = class3_0.method_6();
                                                        updTStatus.BeginInvoke(1, "Get Bkg captcha..", tCntrlName, null, null);
                                                        class3_0.GetBookPost(ref url, ref postdata, ref Reffral, isAPP, class3_0.TKT_ISADV);
                                                        num10 = 0;
                                                        num19 = 0;
                                                        while (true)
                                                        {
                                                            
                                                            stopwatch2 = new Stopwatch();
                                                            stopwatch2.Start();
                                                            Status = "Book Ticket";
                                                            dictionary_TimeP["Book"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                            bool flag23 = _httpRequest_Nex(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                            if (response.Contains("Invalid access token"))
                                                            {
                                                                break;
                                                            }

                                                            if (response.Contains("Booking not allowed") & autorelogin)
                                                            {
                                                                continue;
                                                            }
                                                            //
                                                            if (!(response != "retry" && flag23))
                                                            {
                                                                if (!(response == "retry") || num10 <= 5)
                                                                {
                                                                    continue;
                                                                }
                                                                break;
                                                            }
                                                            goto IL_2854;
                                                        }
                                                        break;
                                                        continue;
                                                    end_IL_205c:
                                                        break;
                                                    }
                                                    break;
                                                }
                                                if (num10 >= 3)
                                                {
                                                    updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                    return false;
                                                }
                                            }
                                            else if (num10 > 3)
                                            {
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                    while (num10 <= 3);
                                    break;
                                }
                                if (response.IndexOf("Bad credentials") > 0 || response.Contains("Invalid User"))
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                    Class11.smethod_1("TBL_USER", "UserState", "Invalid||" + class3_0.string_3, class3_0.IRCTC_ID);
                                    updTStatus.BeginInvoke(2, "Bad credentials! ", tCntrlName, null, null);
                                    return false;
                                }
                                if (response.IndexOf("Invalid Captcha") > 0)
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                    break;
                                }
                                if (response.IndexOf("User is disabled") > 0)
                                {
                                    Class11.smethod_1("TBL_USER", "UserState", "Disabled||" + class3_0.string_3, class3_0.IRCTC_ID);
                                    updTStatus.BeginInvoke(2, "IRCTC ID is Disabled", tCntrlName, null, null);
                                    result = false;
                                    return result;
                                }
                                isLogin_Self = false;
                                isLogin = false;
                                break;
                            }
                            num6++;
                            if (num6 > 2)
                            {
                                s_Data_Private = "";
                                isLogin_Self = false;
                                isLogin = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        isLogin_Self = false;
                        isLogin = false;
                    }
                    continue;
                end_IL_0f65:
                    break;
                }
            }
        }
        catch (ThreadAbortException ex3)
        {
            Thread.ResetAbort();
            ("Send Log, " + ex3.Message).Contains("Thread was being aborted");
        }
        catch (Exception ex4)
        {
            try
            {
                string text44 = "";
                if (Exception_ != null)
                {
                    text44 = Exception_.ToString();
                }
                string contents = ex4.ToString() + "\n\n\n\n" + string_92 + "\n\n\n\n" + isPremium_p + "\n\n\n\n" + response + "\n\n\n\n" + text44;
                string path2 = "IRLOG/" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + "_" + DateTime.Now.ToString("hhmmssfff");
                File.WriteAllText(path2, contents);
            }
            catch (Exception)
            {
            }
            string text45 = "Send Log, " + ex4.Message;
            CountL = 0;
            failCount++;
            isLogin = false;
            updTStatus?.BeginInvoke(2, "Unable to process current Request", tCntrlName, null, null);
            method_74("PerformB:OuterCatch: ", text45 + " <ErrorDestination>" + ex4.StackTrace.ToString());
            if (!list_12.Contains(text45))
            {
                list_12.Add(text45);
                method_78(text45 + "|" + ConnectionGroupName_);
            }
        }
        finally
        {
            windowCount--;
            if (isLogin_Self)
            {
                CountL = 0;
                failCount++;
                isLogin = false;
            }
            object_4 = new object();
            lock (object_4)
            {
                if (list_IrctcID.Contains(class3_0.IRCTC_ID))
                {
                    list_IrctcID.Remove(class3_0.IRCTC_ID);
                }
            }
            if (cookie_ != null)
            {
                ThreadPool.QueueUserWorkItem(LogedOUT, false);
            }
            try
            {
                method_78(string_87 + "|" + ConnectionGroupName_);
                Write_Lock_File(updTStatus, tCntrlName, "Result=" + result);
            }
            catch
            {
            }
            if (dictionary_Pair_Process.ContainsKey(class3_0.string_20))
            {
                int num41 = dictionary_Pair_Process[class3_0.string_20];
                if (num41 != 0)
                {
                    dictionary_Pair_Process[class3_0.string_20] = num41 - 1;
                }
            }
            bool flag24 = false;
            obj2 = object_6;
            lock (obj2)
            {
                if (dictionary_2.ContainsKey(TktName))
                {
                    int num42 = dictionary_2[TktName] - 1;
                    if (num42 <= 0)
                    {
                        Interlocked.Decrement(ref int_4);
                        dictionary_2.Remove(TktName);
                        flag24 = true;
                    }
                    else
                    {
                        dictionary_2[TktName] = num42;
                    }
                }
            }
            if (flag24)
            {
                obj2 = object_8;
                lock (obj2)
                {
                    list_PaySTART.Remove(TktName);
                }
                obj2 = object_11;
                lock (obj2)
                {
                    if (list_11.Contains(TktName))
                    {
                        list_11.Remove(TktName);
                    }
                }
                if (list_IrctcID.Count <= 0)
                {
                    obj2 = object_10;
                    lock (obj2)
                    {
                        list_PNR.Clear();
                    }
                }
            }
            if (waitCallback_0 == null)
            {
                waitCallback_0 = smethod_13;
            }
            ThreadPool.QueueUserWorkItem(waitCallback_0);
        }
        return result;
    }

    private bool _validateuser(UpdateTStatus updTStatus)
    {
        if (!isAPP)
        {
            return true;
        }
        bool result = false;
        Request_Type = "Logincnf";
        string text = (postdata = jwtutils.getStringRandomCngKeyForSendingToServer(randomGeneratedKey));
        url = "https://www.irctc.co.in/eticketing/protected/mapps1/agreeOnKey?reqSource=1&loginType=N";
        if (ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Logincnf") && response.IndexOf("Bad credentials") <= 0 && !response.Contains("Invalid User"))
        {
            result = true;
            keyFromServer = response;
        }
        return result;
    }

    public void BmskCookieOffline_P(bool flag)
    {
        flag = false;
        while (flag)
        {
            try
            {
                while (IRComm.doesSurf)
                {
                    Thread.Sleep(500);
                }
                IRComm.doesSurf = true;
                if (string.IsNullOrEmpty(IRComm.NgetV3Token))
                {
                    while (true)
                    {
                        try
                        {
                        }
                        catch (Exception)
                        {
                        }
                        bool flag2 = true;
                    }
                }
                string text = "";
                if (IRComm.NgetV3Token.Length > 100)
                {
                    string[] array = IRComm.NgetV3Token.Split(new string[1] { "||~~||" }, StringSplitOptions.RemoveEmptyEntries);
                    if (array.Length != 0)
                    {
                        text = array[0];
                        array[0] = "";
                        IRComm.NgetV3Token = string.Join("||~~||", array);
                    }
                }
                IRComm.doesSurf = false;
                if (text == "")
                {
                    continue;
                }
                cookieBmsk_0 = new CookieContainer();
                string[] array2 = text.Split('\n');
                string text2 = "";
                string[] array3 = array2;
                string[] array4 = array3;
                string[] array5 = array4;
                foreach (string text3 in array5)
                {
                    if (text3 != "" && text3.IndexOf("name") > 0)
                    {
                        string text4 = text3.Substring(text3.IndexOf("name=") + 6);
                        text4 = text4.Substring(0, text4.IndexOf("'"));
                        text4 = text4.Trim();
                        string text5 = text3.Substring(text3.IndexOf("value=") + 7);
                        text5 = text5.Substring(0, text5.IndexOf("'"));
                        text5 = text5.Trim();
                        string text6 = text3.Substring(text3.IndexOf("secure=") + 7);
                        text6 = text6.Substring(0, text6.IndexOf(","));
                        bool secure = bool.Parse(text6);
                        string text7 = text3.Substring(text3.IndexOf("httpOnly=") + 9);
                        text7 = text7.Substring(0, text7.IndexOf(","));
                        bool httpOnly = bool.Parse(text7);
                        Cookie cookie = new Cookie(text4, text5)
                        {
                            Domain = "www.irctc.co.in",
                            Secure = secure,
                            HttpOnly = httpOnly
                        };
                        text2 += text5;
                        cookieBmsk_0.Add(cookie);
                    }
                }
                return;
            }
            catch (Exception ex2)
            {
                MessageBox.Show(".NetCok-22-" + ex2.Message.ToString());
                return;
            }
        }
        try
        {
            Chrome_Create_First("https://www.irctc.co.in/", 0);
            string text8 = "c1";
            string text9 = "";
            string path = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\Downloads";
            DirectoryInfo directoryInfo = new DirectoryInfo(path);
            int num = 0;
            while (num == 0)
            {
                Thread.Sleep(3000);
                FileInfo[] files = directoryInfo.GetFiles("*.txt");
                FileInfo[] array6 = files;
                FileInfo[] array7 = array6;
                foreach (FileInfo fileInfo in array7)
                {
                    string name = fileInfo.Name;
                    if (!name.Contains("Robot"))
                    {
                        continue;
                    }
                    switch (text8)
                    {
                        case "v2":
                            if (!name.Contains("captchaV2Response"))
                            {
                                continue;
                            }
                            break;
                        case "v3":
                            if (!name.Contains("captchaV3Response"))
                            {
                                continue;
                            }
                            break;
                        case "c1":
                            if (!name.Contains("RobotDetails"))
                            {
                                continue;
                            }
                            break;
                    }
                    num++;
                    text9 = File.ReadAllText(fileInfo.FullName);
                    text9 = text9.Replace(">", "Z");
                    text9 = text9.Replace("?", "w");
                    text9 = text9.Replace("!", "=");
                    text9 = text9.Replace("@", "A");
                    byte[] bytes = Convert.FromBase64String(text9);
                    string @string = Encoding.ASCII.GetString(bytes);
                    text9 = @string;
                    fileInfo.Delete();
                    break;
                }
            }
            IRComm.doesSurf = false;
            cookieBmsk_2 = new CookieContainer();
            string[] array8 = text9.Split('\n');
            string text10 = "";
            string[] array9 = array8;
            string[] array10 = array9;
            string[] array11 = array10;
            foreach (string text11 in array11)
            {
                if (text11 != "")
                {
                    string[] array12 = text11.Split('#');
                    Cookie cookie2 = new Cookie(array12[3], array12[4])
                    {
                        Domain = ".irctc.co.in",
                        Secure = Convert.ToBoolean(array12[1])
                    };
                    text10 += array12[3];
                    cookieBmsk_2.Add(cookie2);
                }
            }
        }
        catch (Exception ex3)
        {
            MessageBox.Show(".Cok  -" + ex3.Message.ToString());
        }
    }


    public void getandclear()
    {
        string userName = Environment.UserName;
        string[] array = new string[17]
        {
			//default
			"C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History",
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History Provider Cache",
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History-journal",
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies",
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies-journal",
			//profile1
			"C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 1\\Network\\Cookies-journal",
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 1\\Network\\Cookies",
			//profile2
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 2\\Network\\Cookies-journal",
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 2\\Network\\Cookies",
			//profile3
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 3\\Network\\Cookies-journal",
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 3\\Network\\Cookies",
			//profile4
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 4\\Network\\Cookies-journal",
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 4\\Network\\Cookies",
			//profile5
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 5\\Network\\Cookies-journal",
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 5\\Network\\Cookies",
			//profile6
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 6\\Network\\Cookies-journal",
            "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 6\\Network\\Cookies",


        };
        string[] array2 = array;
        string[] array3 = array2;
        foreach (string path in array3)
        {
            if (File.Exists(path))
            {
                File.Delete(path);
            }
        }
        string path2 = "C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\default\\Cache";
        DirectoryInfo directoryInfo = new DirectoryInfo(path2);
        if (Directory.Exists(path2))
        {
            FileInfo[] files = directoryInfo.GetFiles();
            FileInfo[] array4 = files;
            foreach (FileInfo fileInfo in array4)
            {
                fileInfo.Delete();
            }
            DirectoryInfo[] directories = directoryInfo.GetDirectories();
            DirectoryInfo[] array5 = directories;
            foreach (DirectoryInfo directoryInfo2 in array5)
            {
                directoryInfo2.Delete(true);
            }
        }
    }


    public void Chrome_Create_First(string Url, int e)
    {
        Chrome_CloseSetup();
        getandclear();
        try
        {
            string path = Path.Combine(Application.StartupPath, "Data-dir-0");
            if (Directory.Exists(path))
            {
                Directory.Delete(path, true);
            }
        }
        catch
        {
        }
        int num = 1;
        int num2 = 0;
        int width = Screen.PrimaryScreen.WorkingArea.Width;
        int height = Screen.PrimaryScreen.WorkingArea.Height;
        double num3 = 525.0;
        num3 = width / 2;
        double num4 = 525.0;
        num4 = height;
        double num5 = (double)width - num3;
        double num6 = (double)e * num4;
        string text = "5015" + e;
        switch (num)
        {
            case 1:
                {
                    string text3 = "C:\\Program Files (x86)\\Google\\Chrome\\Application";
                    using (RegistryKey registryKey = Registry.ClassesRoot.OpenSubKey("ChromeHTML\\DefaultIcon"))
                    {
                        string[] valueNames = registryKey.GetValueNames();
                        string[] array = valueNames;
                        string[] array2 = array;
                        foreach (string name in array2)
                        {
                            string text4 = registryKey.GetValue(name).ToString();
                            text3 = text4.Replace("\\chrome.exe,0", "");
                        }
                    }
                    string strFileText = Path.Combine(text3);
                    string text5 = Path.Combine(Application.StartupPath, "chrome-win");
                    if (Directory.Exists(text5))
                    {
                        strFileText = text5;
                    }
                    string text6 = "chrome.exe";
                    string text7 = " --chrome-frame";
                    text7 = "";
                    string text8 = " --headless";
                    text8 = "";
                    string text9 = " --disable-gpu";
                    text9 = "";
                    string text10 = " --window-size=" + num3 + "," + num4;
                    string text11 = " --window-position=" + num5 + "," + num6;
                    string text12 = " --force-device-scale-factor=1 --no-first-run --no-default-browser-check";
                    text12 = "";
                    string text13 = " --app=" + Url;
                    string text14 = "";
                    if (Url.Contains("irctc.co.in/"))
                    {
                        text14 = Path.Combine("C:\\ProgramData", "Microsoft", "Edge");
                        string text15 = "Edge.zip";
                        if (!Directory.Exists(text14))
                        {
                            MessageBox.Show("Web OCR Not Found Kindly Update software and restarrt GADAR");
                            //if (!File.Exists(Path.Combine("C:\\ProgramData", "Microsoft", text15)))
                            //{
                            //    ExtractEmbeeded(Path.Combine("C:\\ProgramData", "Microsoft", text15), text15);
                            //}
                            //if (File.Exists(Path.Combine("C:\\ProgramData", "Microsoft", text15)))
                            //{
                            //    ExtractZipFile(Path.Combine("C:\\ProgramData", "Microsoft", text15), Path.Combine("C:\\ProgramData", "Microsoft", text15), "");
                            //    File.Delete(Path.Combine("C:\\ProgramData", "Microsoft", text15));
                            //}
                        }
                    }
                    string text16 = " --load-extension=" + text14;
                    //string texttest = "--auto-open-devtools-for-tabs";
                    string text17 = " --remote-debugging-port=" + text;
                    string text18 = " --user-data-dir=" + Path.Combine(Application.StartupPath, "Data-dir-0");
                    text18 = "";
                    string text19 = "";
                    string jtrFileText = text6;
                    //string texttest = "--auto-open-devtools-for-tabs";
                    string text20 = text13 + text7 + text8 + text9 + text10 + text11 + text17 + text18 + text16 + text19;
                    text6 += text20;
                    Chrome_Save_Profil(strFileText, text6, jtrFileText, text20);
                    int num7 = 10;
                    num7 = 1;
                    Chrome_Run_Second();
                    Console.WriteLine("Successfully Launch Google With Script");
                    break;
                }
            case 2:
                {
                    string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                    string text2 = Path.Combine(folderPath, "Google\\Chrome\\User Data");
                    text2 = Path.Combine(Application.StartupPath, "Data-dir-0");
                    break;
                }
        }
    }


    public void Chrome_CloseSetup()
    {
        try
        {
            Process process = new Process();
            process.StartInfo.FileName = "cmd.exe";
            process.StartInfo.RedirectStandardInput = true;
            process.StartInfo.RedirectStandardOutput = true;
            process.StartInfo.CreateNoWindow = true;
            process.StartInfo.UseShellExecute = false;
            process.Start();
            process.StandardInput.WriteLine("TASKKILL /IM chrome.exe /F");
            process.StandardInput.Flush();
            process.StandardInput.Close();
            Process[] processesByName = Process.GetProcessesByName("chrome");
            Process[] array = processesByName;
            Process[] array2 = array;
            Process[] array3 = array2;
            foreach (Process process2 in array3)
            {
                process2.Kill();
            }
            Process[] processesByName2 = Process.GetProcessesByName("chromedriver");
            Process[] array4 = processesByName2;
            Process[] array5 = array4;
            Process[] array6 = array5;
            foreach (Process process3 in array6)
            {
                process3.Kill();
            }
        }
        catch
        {
        }
    }

    public void excalibur()
    {
        try
        {
            if (webadvlogin)
            {
                string excalibur = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ");
                url = "https://excalibur.pinacalabs.com/clients";
                //updTStatus?.BeginInvoke(1, "Loading Login Captcha...", tCntrlName, null, null);
                postdata = excalibur + "AEQl8ACDrAAzCpWAEnl0iphAEol1CqC8ACDrAAADDl3lr/ADFl2FsUADIl8ACDrAAzFslADalgFtLADglTFtb8ACDrAAADqk6FuCAD0kgluqAD8k8ACDrAAQlvHAD/kHlvoAEAj/lwI8ACDrAAAEAjulwpAD8jglxGADwj8ACDrAATlxoADrjMlx+ADpjLFyT8ACDrAAADojYlz+ADvjnl0fAD2j8ACDrAAyl09AD7j5F1UAEBkMl1z8ACDrAAAD6kwF2bADslEF26ADnl8ACDrAAIl3ZADllJF3pADglKl4a8ACDrAAADclJl6YADWlGl6nADIk8ACDrAA+l7XADGk8l7qADCk6F8I8ACDrAAADBk4l8gADAk3F9SAC/k8ACDrAA0l9zAC+k0F+CAC9kyl+w8ACDrAAAC9k3GISAC9k5GIbAC9l8ACDrAAAGI4AC+lAmJnAC5k7GK48ACDrAAAC4k4mLZAC4k3GL4AC4k8ACDrAA2mPCAC4k2GQEAC4k1mRA8ACDrAAAC4k1GT1AC4k1WT1AC4k8ACDrAA1GT2AC6k1Gc3AERkumdX8ACDrAAAGZkumdrAKDkimeNAOjk8ACDrAAHGezAQdj6mfGAT0jvmfu8ACDrAAAVAjsGgBAWNjkGgvAWYj8ACDrAAimhBAWijdmh7AW3jaGig8ACDrAAAXCjYGi3AXRjWGjEAX8j8ACDrAALGjpAX/i+mkIAX/i0Gkj8ACDrAAAX/ihmlHAX/idmlnAX/i8ACDrAAammFAX/iYmmWAX/iPmm58ACDrAAAX+iHGnSAX7iBmoEAX7i8ACDrAAAmoPAX7iAGpJAX7h+mpk8ACDrAAAX7h8mp6AX7h6mqQAX+h8ACDrAA3Gq0AX/h2GrXAX/h1mr28ACDrAAAX+itnAbAX9iuHBUAX8i8ACDrAAunBjAX1iwnBzAXCi1HCR8ACDrAAATMjOHC/ARAjOHDYAOUj8ACDrAACHD8AMAi4nEeAK8i0HFH8ACDrAAAKOi0HFWAJuiynGDAJli8ACDrAAynGNAJgizHG0AJfizHIq8ACDrAAAJfiynI9AJeiynJFAJci8ACDrAAynKGAJbixnKSAJXitHKz8ACDrAAAJViqHLVAJVimnL1AJVi8ACDrAAnnOCAJVipHORAJVisnOv8ACDrAAAJWitHPFAJWitXXBAJWi8ACDrAAtnhQAJcjCHhoAJkjbniA8ACDrAAAJzkPnifAKCk3HjGAKIl8ACDrAABHjeAKNlKHj/AKQlNnkk8ACDrAAAKQlOHkvAKQlOnl/AKRl8ACDrAAOnm0AKSlNnm7AKUlGnnY8ACDrAAAKUlBHn7AKUlAnoOAKSk8ACDrAA+no6AKSk+HpdAKSk8Hp38ACDrAAAKQk5HqUAKQk4HsrAKQk8ACDrAA4XvqAKBk9HyaAI+lUHzC8ACDrAAAINlgnzeAHQltnz/AGwl8ACDrAAxn0dAGXl0H08AGAl2H1b8ACDrAAAAAgAX2qADVl0moZADjl8ACDrAAuGooADzloGo4AELlgmpV8ACDrAAAEylXGp5AFdlOmqXAFrl8ACDrAAJGqnAGUkwmrUAGkkamr+8ACDrAAAGkkUGsLAGjkFGszAGfk8ACDrAABmtTAGcj/GtwAGWj1GuR8ACDrAAAGUjvGuxAGUjtGvOAGcj8ACDrAAlmvuAGkjemwQAGkjdmwe8ACDrAAAGljemzlAGnjhGzpAGsj8ACDrAAnm0JAGtjom2tAGtjo25A8ACDrAAAHojjHNsAODjSnOeAPYj8ACDrAAOnPFAPZjOnQkASDjHHR08ACDrAAAVxi7HSUAXcivHSwAX5i8ACDrAAqnTVAX8ipHTsAX8ionUC8ACDrAAAX/imnU6AX/ilnVJAX/i8ACDrAAdHV5AX/iVHWZAX9iSnWx8ACDrAAAX7iRHXAAX7iQnX/AXoi8ACDrAAVnY4AXKigHZKAUVjZHZo8ACDrAAAQnkKHaHAMzk4nawAMNl8ACDrAAAnbGAL9lEnbnALdlFncF8ACDrAAAKUlCncpAJ+lCnc2AIsl8ACDrAAIHdjAILlMneYAHolYHfz8ACDrAAAGclqngwAFLl3niDADdl8ACDrAA4EFtAD4lqkGOAFMlREGt8ACDrAAAG6koEHLAHkkQkHsAHtk8ACDrAAEkILAHwkBkIrAHvkBkKE8ACDrAAAHpkDEKkAHokDEK1AH/j8ACDrAA9kLiAKYjwkMCAM9jskMV8ACDrAAAUAjGENBAU8i3kNiAVBi8ACDrAA1kNxAVaiwkOWAV+ioEO+8ACDrAAAWIimkPPAWRiikP0AWqi8ACDrAAeEQbAW8icEQrAXciYERa8ACDrAAAXgiWkRpAXsiIkSRAX1h8ACDrAA9ESwAX3h4kTPAX7h0kTv8ACDrAAAX8hyEUOAX8hxEUiAX8h8ACDrAAwkWAAX9hwkWJAX+hwkWY8ACDrAAAX/hvEXMAX/hsEXmAX/h8ACDrAAqEYHAX/hokYnAX3jBkzS8ACDrAAAXqjFk0DAXNjOE0nAPgk8ACDrAAzk2CAPMk2E2UAO9k4k2l8ACDrAAAOuk5k24AOfk7E3EAN1l8ACDrAAAk3mAIikvE6vAHlkik7N8ACDrAAAHWkck7YAHMkSE75AHJk8ACDrAAKk8XAHGkEk9LAHEkBk9b8ACDrAAAHDkAE95AHDj/k+5AHHk8ACDrAAElBWAHIkGFC/AHIkGlEV8ACDrAAAHIkHFE1aHR0cHM6Ly938ACDrAAd3cuaXJjdGMuY28uaW4v8ACDrAAbmdldC9ib29raW5nL3Jl8ACDrAAdmlld0Jvb2tpbmcAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAABBTkdM8ACDrAARSAoR29vZ2xlLCBWdWxr8ACDrAAYW4gMS4zLjAgKFN3aWZ08ACDrAAU2hhZGVyIERldmljZSAo8ACDrAAU3ViemVybykgKDB4MDAw8ACDrAAMEMwREUpKSwgU3dpZnRT8ACDrAAaGFkZXIgZHJpdmVyKQAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAE1vemlsbGEvNS4wIChX8ACDrAAaW5kb3dzIE5UIDEwLjA78ACDrAAIFdpbjY0OyB4NjQpIEFw8ACDrAAcGxlV2ViS2l0LzUzNy4z8ACDrAANiAoS0hUTUwsIGxpa2Ug8ACDrAAR2Vja28pIENocm9tZS8x8ACDrAAMTIuMC4wLjAgU2FmYXJp8ACDrAALzUzNy4zNgAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAV2luMzIAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAAAAAAAAAAAAAAAAAAAAA8ACDrAAADM4ODA0YzVlMDkwYjRh8ACDrAAYzNlNWJlMDRmNjE0NmIz8ACDrAAMTkwYzA2MzAyYTBiNzUw8ACDrAAN2NmMjhlOGU2NTUyNTEz8ACDrAAOWIyOWI0MmMwMjA2Zjdi8ACDrAAMTIxNWQzAMATYD+gAAAA8ACDrAAwBLyAAA=c7a39358bd608ACDrAAdfc6de3fbce516be8d688ACDrAAcc36b0a08ACDrAA";
                _httpRequest(url, postdata, Reffral, "Plain1Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_);
            }
            else
            {
            }
        }
        catch
        {
        }
    }


    public void Chrome_Save_Profil(string strFileText, string strCmdText, string JtrFileText, string JtrCmdText)
    {
        string contents = "@echo off\r\ncd /d \"" + strFileText + "\"\r\ntimeout 1\r\nstart " + strCmdText + "\r\n//pause \r\n exit";
        string path = "Chrm-Auto.bat";
        File.WriteAllText(path, contents);
        string text = Path.Combine(strFileText, JtrFileText);
        path = "Chrm-Prto.bat";
        File.WriteAllText(path, text.Trim() + "||" + JtrCmdText.Trim());
    }

    public void Chrome_Run_Second()
    {
        string path = "Chrm-Prto.bat";
        int num = 0;
        DateTime dateTime = DateTime.Now.AddSeconds(20.0);
        int num2 = num;
        Thread.Sleep(3000);
        if (File.Exists(path))
        {
            string text = File.ReadAllText(path);
            string[] array = text.Split(new string[1] { "||" }, StringSplitOptions.None);
            string fileName = array[0];
            string arguments = array[1];
            Process.Start(fileName, arguments);
            do
            {
                Thread.Sleep(1000);
                num2 = 1;
            }
            while (!(DateTime.Now > dateTime) && num2 <= num);
        }
        try
        {
            if (File.Exists("Chrm-Auto.bat"))
            {
                File.Delete("Chrm-Auto.bat");
            }
            if (File.Exists("Chrm-Prto.bat"))
            {
                File.Delete("Chrm-Prto.bat");
            }
        }
        catch
        {
        }
    }



    private void WriteLog()
    {
        try
        {
            string text = "";
            foreach (KeyValuePair<string, string> item in dictionary_TimeP)
            {
                text = text + "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n" + item.Key + "-" + item.Value;
            }
            string path = "IRLOG/" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + "_" + DateTime.Now.ToString("hhmmssfff");
            File.WriteAllText(path, text);
        }
        catch
        {
        }
    }

    private void Lock0(string v, Stopwatch stopwatch2, string res)
    {
        try
        {
            Dictionary<string, string> dictionary = dictionary_TimeP;
            dictionary[v] = dictionary[v] + "[" + stopwatch2.Elapsed.Seconds + ":" + stopwatch2.Elapsed.Milliseconds + "]\n\n\n\n\n" + res;
        }
        catch
        {
        }
    }

    private void SourceDestination_Correction(string response)
    {
        try
        {
            if (!(class3_0.TRAIN_NO == "12296"))
            {
                return;
            }
            string[] array = response.Split(new string[1] { "arrivalTime" }, StringSplitOptions.None);
            string[] array2 = array;
            string[] array3 = array2;
            foreach (string text in array3)
            {
                if (text.Contains(class3_0.TRAIN_NO))
                {
                    string @string = GetString(text, "fromStnCode");
                    string string2 = GetString(text, "toStnCode");
                    class3_0.SRC_STN = @string;
                    class3_0.DEST_STN = string2;
                    break;
                }
            }
        }
        catch
        {
        }
    }

    private string Log_(int int_Slot, string BankName)
    {
        string result = "";
        try
        {
            string text = "";
            if (isPremium_p)
            {
                text = "ADV : ";
            }
            string text2 = "";
            foreach (KeyValuePair<string, string> item in dictionary_TimeP)
            {
                text2 = text2 + "\r\n" + item.Key + "-" + item.Value.Split(new string[1] { "\n\n\n\n\n" }, StringSplitOptions.None)[0];
            }
            string text3 = "|" + class3_0.TRAIN_NO + "|" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + class3_0.serverid + "|{ " + text + (isAPP ? "APP" : "WEB") + "\r\n" + class3_0.TKT_CLASS + "\r\n" + class3_0.TKT_QUOTA + "\r\nPsgn:" + class3_0.int_TotalPax + " Slot:" + int_Slot + "\r\n" + text2 + " }|" + BankName + "#";
            result = text3;
        }
        catch
        {
        }
        return result;
    }

    private string Log_Disha(int int_Slot, string BankName)
    {
        string result = "";
        try
        {
            string text = "";
            if (isPremium_p)
            {
                text = "ADV : ";
            }
            text = "ADV";
            string text2 = "";
            foreach (KeyValuePair<string, string> item in dictionary_TimeP)
            {
                text2 = text2 + "\r\n" + item.Key + "-" + item.Value.Split(new string[1] { "\n\n\n\n\n" }, StringSplitOptions.None)[0];
            }
            string text3 = "|" + class3_0.TRAIN_NO + "|" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + "|{ " + text + "\r\n" + class3_0.TKT_CLASS + "\r\n" + class3_0.TKT_QUOTA + "\r\nPsgn:" + class3_0.int_TotalPax + " Slot:" + int_Slot + "\r\n" + text2 + " }|" + BankName + "#";
            result = text3;
        }
        catch
        {
        }
        return result;
    }

    private void sendLogToServer(object j)
    {
        mac = Environment.GetEnvironmentVariable("mac", EnvironmentVariableTarget.Process);
        clientID = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
        int num = 0;
        bool flag = false;
        do
        {
            try
            {
                string text = "";
                if (isPremium_p)
                {
                    text = "ADV : ";
                }
                string text2 = (isAPP ? ("{" + text + "APP") : "{WEB");
                text2 = text2 + "\r\n" + class3_0.TKT_CLASS + "\r\n" + class3_0.TKT_QUOTA + "\r\nPsgn:" + class3_0.int_TotalPax;
                foreach (KeyValuePair<string, string> item in dictionary_TimeP)
                {
                    text2 = text2 + "\r\n" + item.Key + "-" + item.Value.Split(new string[1] { "\n\n\n\n\n" }, StringSplitOptions.None)[0];
                }
                text2 += "}";
                num++;
                string[] array = j.ToString().Split(new string[1] { "||" }, StringSplitOptions.None);
                string text3 = class3_0.SRC_STN + "_" + class3_0.DEST_STN;
                string tRAIN_NO = class3_0.TRAIN_NO;
                string text4 = array[0];
                string text5 = array[1];
                string text6 = array[2];
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create("http://httpsweb.in/api/nexus/success");
                string value = "{\"UserID\":\"" + clientID + "\",\"Mac\":\"" + mac + "\",\"Log\":\"" + text2 + "\",\"Src_Dest\":\"" + text3 + "\",\"TrainNo\":\"" + tRAIN_NO + "\",\"Gateway\":\"" + text4 + "\",\"base64image\":\"\",\"PNR_Time\":\"" + text6 + "\",\"Status\":\"" + text5 + "\"}";
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "POST";
                using (StreamWriter streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    streamWriter.Write(value);
                }
                HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                string text7 = new StreamReader(httpWebResponse.GetResponseStream()).ReadToEnd();
                flag = true;
            }
            catch (Exception)
            {
            }
        }
        while (!flag && num < 4);
    }

    private bool setNewBank(ref string BankName, ref string BankID, Control control)
    {
        bool A_ = false;
        string bANKDETAILS = "";
        string text = ((ComboBox)control.Controls["cboGateway"]).SelectedItem.ToString();
        if (text.Contains(BankName))
        {
            bANKDETAILS = class3_0.dictionary_BnkData[text];
        }
        else if ((BankName.Contains("BHIMUPI") || BankName.Contains("PHONEPE") || BankName.Contains("PTMBHIMUPI")) && text.Contains("@"))
        {
            bANKDETAILS = class3_0.dictionary_BnkData[text];
        }
        string text2 = smethod_10(text);
        string bankID = GetBankID(text2, ref A_);
        if (method_42(class3_0.string_32, bankID, text))
        {
            class3_0.BANKSAVEAS = text;
            class3_0.BANKDETAILS = bANKDETAILS;
            BankName = text2;
            BankID = bankID;
            A_ = true;
        }
        return A_;
    }


    private bool _validateuser_Sik(UpdateTStatus updTStatus)
    {
        //isAPP = true;
        if (!isAPP)
        {
            return true;
        }
        bool result = false;
        Request_Type = "Logincnf";
        string stringRandomCngKeyForSendingToServer = jwtutils.getStringRandomCngKeyForSendingToServer(randomGeneratedKey);
        url = "https://www.irctc.co.in/eticketing/protected/mapps1/agreeOnKey?reqSource=1&loginType=N";
        postdata = stringRandomCngKeyForSendingToServer;
        if (ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Logincnf") && response.IndexOf("Bad credentials") <= 0 && !response.Contains("Invalid User"))
        {
            result = true;
            keyFromServer = response;
        }
        return result;
    }
    private bool _validateuser_SikL()
    {
        //isAPP = true;
        if (!isAPP)
        {
            return true;
        }
        bool result = false;
        Request_Type = "Logincnf";
        string stringRandomCngKeyForSendingToServer = jwtutils.getStringRandomCngKeyForSendingToServer(randomGeneratedKey);
        url = "https://www.irctc.co.in/eticketing/protected/mapps1/agreeOnKey?reqSource=1&loginType=N";
        postdata = stringRandomCngKeyForSendingToServer;
        if (ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Logincnf") && response.IndexOf("Bad credentials") <= 0 && !response.Contains("Invalid User"))
        {
            result = true;
            keyFromServer = response;
        }
        return result;
    }

    private bool _validateuser_SARTH(UpdateTStatus updTStatus)
    {
        //isAPP = true;
        if (!isAPP)
        {
            return true;
        }
        bool result = false;
        Request_Type = "Logincnf";
        string stringRandomCngKeyForSendingToServer = jwtutils.getStringRandomCngKeyForSendingToServer(randomGeneratedKey);
        url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/agreeOnKey?reqSource=2&loginType=N";
        postdata = stringRandomCngKeyForSendingToServer;
        if (ConnectHttp_App2(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Logincnf") && response.IndexOf("Bad credentials") <= 0 && !response.Contains("Invalid User"))
        {
            result = true;
            keyFromServer = response;
        }
        return result;
    }



    private bool veriFyID(string USER)
    {
        bool result = false;
        try
        {
            url = "https://www.irctc.co.in/eticketing/protected/mapps1/loginCaptcha?nlpCaptchaException=true";
            DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            long num = (long)(DateTime.UtcNow - dateTime).TotalMilliseconds;
            class3_0._greq = num.ToString();
            class3_0.token = null;
            class3_0._Authorization = "";
            cookie_ = new CookieContainer();
            NgtHttpReq(url, null, Reffral, Proxy_, ref cookie_, true, true, 160000, 160000, ref response, ref errormsg, ref Exception_, "");
            class3_0._greq = GetString(response, "status");
            url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaganetate/l69imx5n/FORGOT_PASSWORD";
            if (NgtHttpReq(url, null, Reffral, Proxy_, ref cookie_, true, true, 160000, 160000, ref response, ref errormsg, ref Exception_, "") && response.Contains("captchaQuestion"))
            {
                string text = "";
                if (response.IndexOf("captchaQuestion") > 0)
                {
                    string text2 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                    text = text2.Substring(0, text2.IndexOf("\""));
                }
                Stopwatch stopwatch = new Stopwatch();
                stopwatch.Start();
                Bitmap bitmap = (Bitmap)method_55(text);
                frmCaptcha frmCaptcha2 = new frmCaptcha(this, cookie_, "", "");
                string text3 = frmCaptcha2.SolveCaptcha(text);
                frmCaptcha2.Dispose();
                url = "https://www.irctc.co.in/eticketing/protected/mapps1/forgotPasswordInit/l69imx5n/" + USER + "?captcha=" + text3;
                if (NgtHttpReq(url, null, Reffral, Proxy_, ref cookie_, true, true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Plain0Other") && response.Contains("Verification code is sent to your registered Email"))
                {
                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaganetate/l69imx5n/FORGOT_PASSWORD";
                    if (NgtHttpReq(url, null, Reffral, Proxy_, ref cookie_, true, true, 160000, 160000, ref response, ref errormsg, ref Exception_, "") && response.Contains("captchaQuestion"))
                    {
                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/forgotPasswordInit/l69imx5n/" + USER + "?captcha=" + text3;
                        NgtHttpReq(url, null, Reffral, Proxy_, ref cookie_, true, true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Plain0Other");
                        result = true;
                    }
                }
            }
        }
        catch
        {
            result = false;
        }
        return result;
    }


    private bool IRCTC_Server2(Control control_2, Rectangle rectangle_1, string TktName, string string_87, string string_88, string tCntrlName, ref string string_90, bool bool_63, bool bool_64, bool bool_65, int int_Slot, UpdateTStatus updTStatus, string string_91)
    {

        //if (File.Exists("MySql.Data.dll"))
        //{
        //    File.Delete("MySql.Data.dll");
        //}
        string @lastupdatetime = "";
        bool opening = true;
        bool opening1 = true;
        string PNRTIME = "";
        string balanceee = "";
        int ewalletamount = 0;
        int ewalletbalance = 0;
        string ewalletamounts = "";
        string encairf = "";
        //bool failissuefix = false;
        bool qrpayment = false;
        bool result = false;

        string[] array202 = validationstart.Split(new string[1] { "#" }, StringSplitOptions.None);

        //failissuefix = Convert.ToBoolean(array202[4]);
        phonepeid = array202[5];
        PAYZAPDCID = array202[6];
        paxminus = Convert.ToBoolean(array202[9]);
        int nopax = int.Parse(array202[10]);
        bool test1day = Convert.ToBoolean(array202[11]);
        bmikey = array202[15];
        try
        {
            bmikey = DecryptDataWithAes(bmikey.Trim(), "b14ca4040a4e4133bbce2ea2315a1000");
        }
        catch
        {
            bmikey = "99E1A0691356795F7A09EA2320681741";
        }
        isPremium_p = false;
        TktName_ = TktName;
        updateTStatus_0 = updTStatus;
        string text = "";
        string text2 = "";
        string text3 = "";
        string key = "";
        control_0 = control_2;
        Control control = control_2.Controls[0];
        control_1 = control_2.Controls[0];
        Control control2 = control_1.Controls["Applogin"];
        rectangle_0 = rectangle_1;
        string[] array = new string[1];
        bool flag = false;
        string[] array2 = string_88.Split(new string[1] { "||" }, StringSplitOptions.None);
        string text4 = "";
        double num = 0.0;
        bool flag2 = false;
        new List<Class27>();
        bool flag3 = false;
        minmPsgnInputTime2 = 20000.0;
        minmPsgnInputTime4 = 25000.0;
        minmPsgnInputTime6 = 30000.0;
        minmPaymentTime = 21060.0;
        string[] array3 = string_90.Split(new string[1] { "-.-" }, StringSplitOptions.RemoveEmptyEntries);
        string_90 = "";
        string[] array4 = array3[1].Split(new string[1] { "-+-" }, StringSplitOptions.RemoveEmptyEntries);
        if (!string.IsNullOrEmpty(string_87))
        {
            array = string_87.Split(new string[1] { "||" }, StringSplitOptions.None);
            if (array.Length > 2)
            {
                if (string_56.Length < 1)
                {
                    string_56 = array[2];
                }
                int.TryParse(array[3], out int_3);
                if (int_3 < 2)
                {
                    int_3 = 2;
                }
                int_3 *= 2;
                NetworkInterface_(array[4]);
            }
        }
        class3_0 = new clsPostData();
        class3_0.LoginType = (isAPP ? "APP" : "WEB");
        LoginType = class3_0.LoginType;
        if (!class3_0.ReadDataFromDB(TktName))
        {
            updTStatus?.BeginInvoke(53, "Error Occured while Reading Saved Ticket! ", tCntrlName, null, null);
            return result;
        }
        try
        {
            Chrome_CloseSetup();
            updTStatus?.BeginInvoke(53, "Closing CHrome... ", tCntrlName, null, null);

        }
        catch
        {

        }
        method_CheckForAdvance();
        if (class3_0.dateTime_1 < new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day))
        {
            updTStatus?.BeginInvoke(53, "Date of Journey cannot less than Today!", tCntrlName, null, null);
            return result;
        }
        string text5 = smethod_10(class3_0.BANKSAVEAS);
        class3_0.IRCTC_ID = array2[0];
        class3_0.IRCTC_PWD = array2[1];
        if (array2.Length >= 3 && array2[2] != null)
        {
            if (array2[2] != class3_0.TKT_QUOTA)
            {
                class3_0.TKT_QUOTA = array2[2];
            }
            if (array2[3] != class3_0.TKT_CLASS)
            {
                class3_0.TKT_CLASS = array2[3];
            }
            if (array2.Length > 4 && array2[4] != null && !string.IsNullOrEmpty(array2[4]))
            {
                class3_0.SRC_STN = array2[4];
                class3_0.DEST_STN = array2[5];
                class3_0.TRAIN_NO = array2[6];
            }
        }
        class3_0.string_3 = class3_0.method_2(class3_0.IRCTC_ID);
        clsPostData clsPostData2 = class3_0;
        clsPostData2.BANKSAVEAS = ((ComboBox)control.Controls["cboGateway"]).SelectedItem.ToString();
        clsPostData2.BANKDETAILS = clsPostData2.dictionary_BnkData[clsPostData2.BANKSAVEAS];
        webProxy_2 = null;
        try
        {
            string[] array5 = class3_0.BANKSAVEAS.Split(new string[1] { "_" }, StringSplitOptions.None);
            if (array5[0] == "E-WALLET")
            {
                class3_0.EWALLET = array5[1];
            }
            if (array5[0] == "EAZEBUZQR" | array5[0] == "AIRPAYQR")
            {
                DialogResult dialogResult1 = MessageBox.Show("Kya aap Ye ticket ka payment QR code scan karke karna chahte hai agr haa to ok karna warna No par click kare jisse apko mobilse payment krna hoga", "QR PAYMENT CONFIRMATION", MessageBoxButtons.YesNo);
                if (dialogResult1 == DialogResult.Yes)
                {
                    qrpayment = true;
                }
                else if (dialogResult1 == DialogResult.No)
                {
                    qrpayment = false;
                }
            }
            if (array5[0] == "MOBIKWIK")
            {
                frmOTP frmOTP2 = new frmOTP();
                frmOTP2.method_1(control_0, rectangle_0, bool_2: false, "Enter Otp Mobikwik", class3_0.BANKSAVEAS);
                if (frmOTP2.DialogResult != DialogResult.OK)
                {
                    updTStatus.BeginInvoke(2, "Otp Not Entered", tCntrlName, null, null);
                    return false;
                }
                class3_0.airtelotp = frmOTP2.string_0.Trim();
                frmOTP2.Dispose();
            }
            if ((array5[0] == "AIRTELMONEY") | (array5[0] == "iMudra"))
            {
                string[] array6 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                if (array5[0] == "iMudra")
                {
                    string value = "0";
                    if (!dictionary_8.ContainsKey(class3_0.BANKSAVEAS))
                    {
                        dictionary_8.Add(class3_0.BANKSAVEAS, value);
                        frmOTP frmOTP2 = new frmOTP();
                        frmOTP2.method_1(control_0, rectangle_0, bool_2: false, "iMudra", class3_0.BANKSAVEAS);
                        if (frmOTP2.DialogResult != DialogResult.OK)
                        {
                            updTStatus.BeginInvoke(2, "iMudra OTP Not Found", tCntrlName, null, null);
                            return false;
                        }
                        value = frmOTP2.string_0;
                        dictionary_8.Remove(class3_0.BANKSAVEAS);
                        dictionary_8.Add(class3_0.BANKSAVEAS, value);
                        frmOTP2.Dispose();
                    }
                }
                long num2 = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
            }
            if (array3.Length > 5)
            {
                num = Conversion.Val(array3[5].Trim());
                if (num <= 0.0)
                {
                    num = 0.0;
                }
            }
            if (num <= 0.0 && dictionary_4.ContainsKey(TktName))
            {
                num = dictionary_4[TktName];
            }
        }
        catch
        {
        }
        string string_92 = "";
        string text6 = "\r\n\r\nTrainNo: " + class3_0.TRAIN_NO + " Form: " + class3_0.SRC_STN + " To: " + class3_0.DEST_STN + "\r\n\r\nNo. of Passengers: " + class3_0.list_0.Count + " Name of First Pax: " + class3_0.list_0[0].string_0;
        string environmentVariable = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
        text4 = "Pax: " + class3_0.list_0[0].string_0 + ((class3_0.list_0.Count > 1) ? (" and (" + (class3_0.list_0.Count - 1) + ") Others") : "");
        updateTStatus_1 = updTStatus;
        tCntrlName_ = tCntrlName;
        if (class3_0.method_0())
        {
            bool_ptSL = true;
        }
        Method_GetBookingHRS();
        if (!class3_0.TKT_ISADV & !class3_0.bool_1)
        {
            int_AvlHRS = 4;
            int_BookHRS = 5;
        }
        if (class3_0.BRD_STN.ToUpper() == class3_0.DEST_STN.ToUpper())
        {
            updTStatus?.BeginInvoke(2, "Invalid Boarding_Station!", tCntrlName, null, null);
            return result;
        }
        object obj2 = object_4;
        lock (obj2)
        {
            if (list_IrctcID.Contains(class3_0.IRCTC_ID))
            {
                updTStatus?.BeginInvoke(2, "Current IRCTC-ID Already Used, Change It.", tCntrlName, null, null);
                return result;
            }
            list_IrctcID.Add(class3_0.IRCTC_ID);
        }
        obj2 = object_6;
        lock (obj2)
        {
            if (dictionary_2.ContainsKey(TktName))
            {
                dictionary_2[TktName]++;
                int_Pair = dictionary_2[TktName];
            }
            else
            {
                dictionary_2.Add(TktName, 1);
                Interlocked.Increment(ref int_4);
                int_Pair = dictionary_2[TktName];
            }
        }
        dictionary_TimeP = new Dictionary<string, string>();
        if (class3_0.TKT_QUOTA.ToUpper() == "CK")
        {
            class3_0.TKT_QUOTA = "TQ";
        }
        if (int_Pair == 1 && class3_0.BANKSAVEAS.Split('_')[0].Contains("AIRTELMONEY") && !dictionary_7.ContainsKey(class3_0.BANKSAVEAS))
        {
            string environmentVariable2 = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
            if (dictionary_7.ContainsKey(class3_0.BANKSAVEAS))
            {
                dictionary_7.Remove(class3_0.BANKSAVEAS);
            }
            dictionary_7.Add(class3_0.BANKSAVEAS, environmentVariable2);
        }
        response = "";
        Exception_ = new WebException();
        try
        {
            Lock("Ticket " + TktName + " Started Pair " + int_Pair);
            bool flag4 = false;
            if ((class3_0.TKT_QUOTA == "CK" || class3_0.TKT_QUOTA == "PT" || class3_0.TKT_QUOTA == "TQ") && class3_0.dateTime_1 > DateTime.Now)
            {
                flag4 = true;
            }
            if (DateTime.Now.Hour != 9 || !bool_ptSL || !flag4 || MessageBox.Show("For Non-AC Classes, Tatkal will open at 11Am\r\n\r\nDo you want to Continue?", "Non AC", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk) != DialogResult.No)
            {
                if (DateTime.Now.Hour == 7 && DateTime.Now.Minute >= 30 && !class3_0.bool_opening && !flag4 && (class3_0.dateTime_1 - DateTime.Now).TotalDays >= 10.0 && MessageBox.Show("Is it Opening Ticket? If it is then Click YES.\r\n\r\nKya ye Opening ki Ticket he? agar haan to YES Click karen.", "Opening Ticket", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    int_AvlHRS = 7;
                    int_BookHRS = 8;
                    class3_0.bool_opening = true;
                    class3_0.TKT_ISADV = true;
                }
                int second = 0;
                int minute = 53;
                if (class3_0.bool_opening && DateTime.Now.Hour > 7)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.bool_AC_TQ && DateTime.Now.Hour > 9)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.bool_SL_TQ && DateTime.Now.Hour > 10)
                {
                    class3_0.TKT_ISADV = false;
                }
                if (class3_0.TKT_ISADV)
                {
                    int num3 = (int)new TimeSpan(new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_AvlHRS, minute, second, 0).Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                    if (num3 > 0)
                    {
                        int num4 = 0;
                        Random random = new Random();
                        num4 = random.Next(10, 179000);
                        DateTime dateTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_AvlHRS, minute, second, 0);
                        dateTime = dateTime.AddMilliseconds(num4);
                        updTStatus.BeginInvoke(1, "Waiting till " + int_AvlHRS + ":" + dateTime.Minute.ToString("00") + ":" + dateTime.Second + " AM", tCntrlName, null, null);
                        Application.DoEvents();
                        num3 += num4;
                        if (num3 > 5)
                        {
                            Thread.Sleep(num3);
                        }
                    }
                }
                Lock("Ready Login=" + class3_0.IRCTC_ID);
                int hour = DateTime.Now.Hour;
                int minute2 = DateTime.Now.Minute;
                int second2 = DateTime.Now.Second;
                string[] array7 = string_91.Split(new string[1] { "#" }, StringSplitOptions.None);
                if (array7.Length > 1 && array7[1] != "" && array7[2] != "")
                {
                    AC_AvailibalityTime = int.Parse(array7[1]);
                    SL_AvailibalityTime = int.Parse(array7[2]);
                }
                string text7 = array7[0];
                if (!string.IsNullOrEmpty(text7) && int_Slot > 2)
                {
                    try
                    {
                        string[] array8 = text7.Split(new string[1] { "||" }, StringSplitOptions.None);
                        if (array8.Length > 3)
                        {
                            Proxy_ = new WebProxy(array8[0].Trim(), int.Parse(array8[1].Trim()));
                            Proxy_.BypassProxyOnLocal = true;
                            Proxy_.Credentials = new NetworkCredential(array8[2].Trim(), array8[3].Trim());
                            Lock("\n\n\nProxy=" + array8[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        method_74("Creating Proxy", ex.Message);
                        updTStatus?.BeginInvoke(2, "IP Issue, Try Another slot!", tCntrlName, null, null);
                        return false;
                    }
                }
                if (vpn & !string.IsNullOrEmpty(vpnip))
                {
                    try
                    {
                        string[] array8P = vpnip.Split(new string[1] { ":" }, StringSplitOptions.None);
                        if (array8P.Length > 3)
                        {
                            Proxy_ = new WebProxy(array8P[0].Trim(), int.Parse(array8P[1].Trim()));
                            Proxy_.BypassProxyOnLocal = true;
                            Proxy_.Credentials = new NetworkCredential(array8P[2].Trim(), array8P[3].Trim());
                            Lock("\n\n\nProxy=" + array8P[0]);
                        }
                    }
                    catch (Exception ex)
                    {
                        method_74("Creating Proxy", ex.Message);
                        updTStatus?.BeginInvoke(2, "IP Issue, Try Another slot!", tCntrlName, null, null);
                        return false;
                    }
                }
                string text8 = "Booking Faield Check History";
                int num5 = 0;
                bool flag5 = isAPP;
                int num6 = 0;
                bool flag6 = true;
                while (true)
                {
                    if (num < 0.0)
                    {
                        num = 0.0;
                    }
                    if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                    {
                        Thread thread = new Thread(StartUPI_);
                        thread.IsBackground = true;
                        thread.Start(class3_0.BANKDETAILS + "||True||5||0000000000");
                    }
                il_starttt:
                    staticWEB = false;
                    string text9 = "";
                    isPremium_p = false;
                    sensor_data = "0";
                    bool flag7 = true;
                    string string_93 = "";
                    string text10 = "";
                    string string_94 = "";
                    webProxy_3 = null;
                    postdata = null;
                    Reffral = "https://www.irctc.co.in";
                    response = "";
                    errormsg = "";
                    Exception_ = null;
                    int_TimeDiff = 0;
                    bool_22 = true;
                    class3_0._greq = "";
                    class3_0._Authorization = "";
                    int num7 = 0;
                    bool flag8 = true;
                    randomGeneratedKey = jwtutils.getRandomAppCngKey();
                    keyFromServer = "";
                    greq = "";
                    _Authrization = "";
                    access_token = "";
                    jwtToken = "";
                    bool_48 = true;
                    cookie_ = null;
                    mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                    cookie_ = new CookieContainer();
                    cookie_bkp = null;
                    cookie_bkp = new CookieContainer();
                    isAPP = false;
                    LoginType = "APP";
                    int loginType = 2;
                    if (loginType == 2)
                    {
                        isAPP = true;
                        LoginType = "APP";
                    }
                    if (isAPP)
                    {
                        if (!dictionary_PaxStart.ContainsKey(TktName_ + "_APP"))
                        {
                            dictionary_PaxStart.Add(TktName_ + "_APP", 0);
                        }
                    }
                    else if (!dictionary_PaxStart.ContainsKey(TktName_ + "_WEB"))
                    {
                        dictionary_PaxStart.Add(TktName_ + "_WEB", 0);
                    }

                    num7++;
                    DateTime dateTime2 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                    long num8 = (long)(DateTime.UtcNow - dateTime2).TotalMilliseconds;
                    class3_0._greq = num8.ToString();
                    greq = jwtutils.GetHash(ref mup);
                    mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                    class3_0.token = null;
                    Stopwatch stopwatch = new Stopwatch();
                    stopwatch.Start();
                    Status = "Login";
                    Request_Type = "Base";
                    if (isAPP)
                    {
                        updTStatus?.BeginInvoke(1, "Saarthi Login Start...", tCntrlName, null, null);

                        url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/appVersion/ANDROID/5.2.12";
                        ConnectHttp_App2(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Base");
                    }
                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/loginCaptcha?nlpCaptchaException=true";
                    updTStatus?.BeginInvoke(1, "Loading Login Captcha", tCntrlName, null, null);
                    Lock("First Hit Irctc: In = " + url);
                    bool flag9 = _httpRequest_App2(url, postdata, Reffral, "Plain1Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                    Lock("First Hit Irctc: Out = " + response);
                    dateTime_2 = DateTime.Now;
                    if (response.Contains("retry") & !response.Contains("captchaQuestion"))
                    {
                        goto il_starttt;
                    }
                    if (!string.IsNullOrEmpty(response))
                    {
                        if (response.Contains("status"))
                        {
                            class3_0._greq = GetString(response, "status");//serverId
                        }
                        try
                        {
                            class3_0.serverid = GetString(response, "serverId");
                        }
                        catch
                        {

                        }

                        string text11 = response.Substring(response.IndexOf("timeStamp") + 23);
                        text11 = text11.Substring(0, text11.IndexOf("\""));
                        DateTime dateTime3 = DateTime.Parse(text11);
                        if (dateTime3.Hour == int_BookHRS)
                        {
                            class3_0.TKT_ISADV = false;
                        }
                        int_TimeDiff = (int)new TimeSpan(dateTime3.Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                        int num9 = int_TimeDiff;
                        updTStatus.BeginInvoke(900, num9.ToString(), tCntrlName, null, null);
                        dictionary_TimeP["TimeDiff"] = int_TimeDiff.ToString();
                        int num10 = 0;
                        string[] array9 = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                        if ((text5 == "AIRTELMONEY") & !list_7.Contains(array9[0]) & class3_0.TKT_ISADV)
                        {
                            list_7.Add(array9[0]);
                            AirtelMoneyOTP(class3_0.BANKDETAILS);
                        }
                        if (response.Contains("status"))
                        {
                            //class3_0._greq = GetString(response, "status");
                            try
                            {
                                if (response.Contains("status"))
                                {
                                    Lock("Captcha Ricev: In = ");
                                    class3_0._greq = GetString(response, "status");
                                    string[] array99 = class3_0._greq.Split(new string[1] { "=" }, StringSplitOptions.None);
                                    mup = "";
                                    int num12 = 0;
                                    string[] array10 = array99;
                                    string[] array11 = array10;
                                    string[] array12 = array11;
                                    foreach (string text12 in array12)
                                    {
                                        if (num12 == 0)
                                        {
                                            mup += text12.Remove(text12.Length - 1);
                                        }
                                        else
                                        {
                                            mup = mup + "-" + text12.Remove(text12.Length - 1);
                                        }
                                        num12++;
                                    }
                                }
                            }
                            catch
                            {
                                class3_0._greq = GetString(response, "status");
                            }
                        }
                        if (response.IndexOf("captchaQuestion") > 0)
                        {
                            string text12 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                            string_93 = text12.Substring(0, text12.IndexOf("\""));
                        }
                        frmCaptcha frmCaptcha2 = new frmCaptcha(this, cookie_, "", "");
                        frmCaptcha2.lblWrongCaptcha.Text = "Enter Captcha";
                        frmCaptcha2.dateTime_0 = dateTime_2;
                        frmCaptcha2.string_1 = string_93;
                        frmCaptcha2.bool_0 = flag;
                        frmCaptcha2.method_2(control_2, rectangle_1, string_93);
                        bool flag10 = frmCaptcha2.DialogResult != DialogResult.Cancel;
                        text10 = frmCaptcha2.txtImageData.Text.Trim();
                        frmCaptcha2.Dispose();
                        Lock("Captcha Solve: = ");
                        if (!flag10)
                        {
                            isLogin_Self = false;
                            isLogin = false;
                            updTStatus.BeginInvoke(2, "Captcha Cancell by User", tCntrlName, null, null);
                            return false;
                        }
                        url = "https://www.irctc.co.in/authprovider/webtoken";
                        postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + frmCaptcha.Base64Encode(class3_0.IRCTC_PWD) + "&captcha=" + text10 + "&uid=" + class3_0._greq + "&otpLogin=false&nlpIdentifier=&nlpAnswer=&nlpToken=&lso=&encodedPwd=true";
                        if (isAPP)
                        {
                            postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + frmCaptcha.Base64Encode(class3_0.IRCTC_PWD) + "&captcha=" + text10 + "&uid=" + greq + "&otpLogin=false&encodedPwd=true";
                            byte[] bytes = Encoding.UTF8.GetBytes(class3_0.IRCTC_ID + ":" + class3_0.IRCTC_PWD);
                            _Authrization = Convert.ToBase64String(bytes);
                            url = "https://www.irctc.co.in/authprovider/webmtoken";
                        }
                        updTStatus?.BeginInvoke(1, "Start Login...", tCntrlName, null, null);
                        num6 = 0;
                        while (true)
                        {
                            Request_Type = "Login";
                            num10++;
                            Status = "Login Confirm";
                            if (_httpRequest_App2(url, postdata, Reffral, "Plain0Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 120000, 120000, ref response, ref errormsg, ref Exception_))
                            {
                                if (response.Contains("retry") & !response.Contains("SUCESS"))
                                {
                                    goto il_starttt;
                                }
                                if (response.Contains("SUCESS"))
                                {
                                    class3_0.string_61 = response.Substring(response.IndexOf("access_token") + 15, 36);
                                    class3_0._Authorization = "Bearer " + class3_0.string_61;
                                    _Authrization = class3_0._Authorization;
                                    updTStatus.BeginInvoke(1, "Login Sucess! ", tCntrlName, null, null);
                                    if (!_validateuser_SARTH(updTStatus))
                                    {
                                        break;
                                    }
                                    Request_Type = "json";
                                    num10 = 0;
                                    dictionary_TimeP["Login"] = DateAndTime.Now.ToString("hh:mm:ss:fff");
                                    do
                                    {
                                        updTStatus?.BeginInvoke(1, "Login Sucessfull...", tCntrlName, null, null);
                                        DateTime dateTime4 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                        long num11 = (long)(DateTime.UtcNow - dateTime4).TotalMilliseconds;
                                        class3_0.token = num11.ToString();
                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/validateUser?source=2";
                                        postdata = null;
                                        dateTime_3 = DateTime.Now;
                                        Status = "ValidateUser";
                                        num10++;
                                        if (!_httpRequest_App2(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                        {
                                            continue;
                                        }
                                        if (response.IndexOf("minmPsgnInputTime") < 0)
                                        {
                                            break;
                                        }
                                        string text14S = response.Substring(response.IndexOf("userId") + 9);
                                        string s = text14S.Substring(0, text14S.IndexOf("\""));
                                        string ewalmobile = jsonData_Serial(response, "mobile");
                                        bmikey = jsonData_Serial(response, "userIdHash");
                                        if (class3_0.BANKSAVEAS.Contains("E-WALLET"))
                                        {
                                            if (class3_0.EWALLET != ewalmobile)
                                            {
                                                MessageBox.Show("E-Wallet Mobile Number and IRCTC Id Mobile Number DOnt Match Please use same irctc id...");
                                                return false;
                                            }

                                        }
                                        string[] array10 = GetString(response, "minmPsgnInputTime").ToUpper().Split(new string[1] { "#" }, StringSplitOptions.None);
                                        double.TryParse(array10[0], out minmPsgnInputTime2);
                                        double.TryParse(array10[2], out minmPsgnInputTime4);
                                        double.TryParse(array10[4], out minmPsgnInputTime6);
                                        double.TryParse(GetString(response, "minmPaymentTime").ToUpper(), out minmPaymentTime);
                                        long num12 = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
                                        if (74000 > num12 || num12 > 115900)
                                        {
                                            minmPsgnInputTime2 = 6000.0;
                                        }
                                        class3_0.string_62 = response;
                                        if (response.IndexOf("userEnableState\"") > 0)
                                        {
                                            response.IndexOf("userEnableState\":\"5");
                                            if (response.IndexOf("userEnableState\":\"3") > 0)
                                            {
                                                Class11.smethod_1("TBL_USER", "UserState", "Suspend||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                updTStatus.BeginInvoke(2, "Your Account Has Suspended! ", tCntrlName, null, null);
                                                result = false;
                                                return result;
                                            }
                                            response.IndexOf("userEnableState\":\"1");
                                            if (response.IndexOf("verified\":\"false") > 0)
                                            {
                                                isAPP = false;
                                                updTStatus.BeginInvoke(2, "Verifying IRCTC ID...", tCntrlName, null, null);
                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/loginCaptcha?nlpCaptchaException=true";
                                                DateTime dateTime2S = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                                long num9S = (long)(DateTime.UtcNow - dateTime2S).TotalMilliseconds;
                                                class3_0._greq = num9S.ToString();
                                                //greq = HighQualityRandomString();//jwtutils.GetHash(ref mup);
                                                greq = jwtutils.GetHash(ref mup);
                                                mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                                                class3_0.token = null;
                                                cookie_ = new CookieContainer();
                                                _httpRequest(url, null, Reffral, "Plain1Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                //class3_0._greq = GetString(response, "status");
                                                if (response.Contains("status"))
                                                {
                                                    class3_0._greq = GetString(response, "status");
                                                }
                                                long userId = long.Parse(s);
                                                string text15 = "";
                                                class3_0.TransactionID = jwtutils.getClientTransactionId(userId);
                                                string text16 = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaganetate/" + class3_0.TransactionID + "/FORGOT_PASSWORD";
                                                string data = null;
                                                string reff = "https://www.irctc.co.in/nget/profile/forgot-password?pageType=P";
                                                _httpRequest(text16, null, reff, "Plain1Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                if (response.IndexOf("captchaQuestion") > 0)
                                                {
                                                    string text17 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                                                    text = text17.Substring(0, text17.IndexOf("\""));
                                                }
                                                new Stopwatch().Start();
                                                _ = (Bitmap)method_55(text);
                                                frmCaptcha frmCaptcha3 = new frmCaptcha(this, cookie_, "", "");
                                                string text18 = frmCaptcha3.SolveCaptcha(text);
                                                frmCaptcha3.Dispose();
                                                Thread.Sleep(3000);
                                                text16 = "https://www.irctc.co.in/eticketing/protected/mapps1/forgotPasswordInit/" + class3_0.TransactionID + "/" + class3_0.IRCTC_ID + "?captcha=" + text18;
                                                _httpRequest(text16, null, reff, "Plain1Other", false, Proxy_, ref cookie_, true, true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                if (response.Contains("Verification code is sent to your registered Email id"))
                                                {
                                                    Class11.smethod_1("TBL_USER", "UserState", "Active||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                    updTStatus.BeginInvoke(2, "Verification sucess login again", tCntrlName, null, null);
                                                    result = false;
                                                    return result;
                                                }
                                                else
                                                {
                                                    Class11.smethod_1("TBL_USER", "UserState", "Unverified||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                    updTStatus.BeginInvoke(2, "ID Not Verfied try again or change id", tCntrlName, null, null);
                                                    result = false;
                                                    return result;
                                                }

                                            }
                                        }
                                        num10 = 0;
                                        updTStatus.BeginInvoke(1, "Hitting Train List...", tCntrlName, null, null);
                                        while (true)
                                        {
                                            Stopwatch stopwatch2 = new Stopwatch();
                                            stopwatch2.Start();
                                            dictionary_TimeP["FindTrain"] = DateAndTime.Now.ToString("mm:ss:fff");
                                            num10++;
                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/altAvlEnq/TC";
                                            postdata = "{\"concessionBooking\":false,\"srcStn\":\"" + class3_0.SRC_STN + "\",\"destStn\":\"" + class3_0.DEST_STN + "\",\"jrnyClass\":\"" + class3_0.TKT_CLASS + "\",\"jrnyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"currentBooking\":\"false\",\"flexiFlag\":true,\"handicapFlag\":false,\"ticketType\":\"E\",\"loyaltyRedemptionBooking\":false,\"ftBooking\":false}";
                                            Status = "Getting Train List";
                                            CookieContainer cookieContainer = new CookieContainer();
                                            if (_httpRequest_App2(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                            {
                                                if (response.Contains("Your login activity is not completed successfuly"))
                                                {
                                                    Class11.smethod_1("TBL_USER", "UserState", "InCompleteProfile||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                    updTStatus.BeginInvoke(2, "Verify IRCTC ID", tCntrlName, null, null);
                                                    return false;
                                                }
                                                string text13 = response.Substring(response.IndexOf("timeStamp") + 23);
                                                text13 = text13.Substring(0, text13.IndexOf("\""));
                                                int_TimeDiff = (int)new TimeSpan(DateTime.Parse(text13).Ticks - DateTime.Now.Ticks).TotalMilliseconds;
                                                if (response.Contains("trainBtwnStnsList"))
                                                {
                                                    Lock0("FindTrain", stopwatch2, response);
                                                    dateTime_3 = DateTime.Parse(GetString(response, "timeStamp"));
                                                    while (true)
                                                    {
                                                        SourceDestination_Correction(response);
                                                        bool flag11 = true;
                                                        Method_GetBookingHRS();
                                                        int num13 = 0;
                                                        if (int_BookHRS == 8)
                                                        {
                                                            num13 = 54000;
                                                        }
                                                        if (int_BookHRS == 10)
                                                        {
                                                            num13 = (60 - AC_AvailibalityTime) * 1000;
                                                        }
                                                        if (int_BookHRS == 11)
                                                        {
                                                            num13 = (60 - SL_AvailibalityTime) * 1000;
                                                        }
                                                        if (class3_0.TKT_ISADV & (DateTime.Now.Hour < int_BookHRS))
                                                        {
                                                            updTStatus.BeginInvoke(1, "Wait For PG Open...", tCntrlName, null, null);
                                                            DateTime dateTime5 = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, int_BookHRS, 0, 0, 0);
                                                            TimeSpan timeSpan = new TimeSpan(dateTime5.Ticks - DateTime.Now.Ticks);
                                                            int num14 = (int)timeSpan.TotalMilliseconds - int_TimeDiff;
                                                            Random random2 = new Random();
                                                            int num15 = random2.Next(1, 300);
                                                            int num16 = 6000 + num15 + int_Pair * 459;
                                                            if (class3_0.TKT_CLASS == "SL")
                                                            {
                                                                num16 = 32000 + num15 + int_Pair * 759;
                                                            }
                                                            num14 -= num16;
                                                            if (num14 > 0)
                                                            {
                                                                Application.DoEvents();
                                                                Thread.Sleep(num14);
                                                                Application.DoEvents();
                                                            }
                                                        }
                                                        updTStatus.BeginInvoke(1, "Hitting Availablity....", tCntrlName, null, null);
                                                        num10 = 0;
                                                        int num17 = 0;
                                                        Status = "Getting Availablity";
                                                        Reffral = "https://www.irctc.co.in/nget/booking/train-list";
                                                        postdata = "{\"paymentFlag\":\"N\",\"concessionBooking\":false,\"ftBooking\":false,\"loyaltyRedemptionBooking\":false,\"ticketType\":\"E\",\"quotaCode\":\"" + class3_0.TKT_QUOTA + "\",\"moreThanOneDay\":true,\"trainNumber\":\"" + class3_0.TRAIN_NO + "\",\"fromStnCode\":\"" + class3_0.SRC_STN + "\",\"toStnCode\":\"" + class3_0.DEST_STN + "\",\"isLogedinReq\":true,\"journeyDate\":\"" + class3_0.dateTime_0.ToString("yyyMMdd") + "\",\"classCode\":\"" + class3_0.TKT_CLASS + "\"}";
                                                        if (isAPP)
                                                        {
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";
                                                            postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"addMealDetail\":null,\"agentDeviceId\":null,\"agentOtpBooking\":false,\"applyLimitCheck\":false,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"bankId\":0,\"boardingStation\":null,\"bookNowPressTimeDiff\":0,\"bookingInitTime\":0,\"bookingOTP\":null,\"captcha\":null,\"captureAddress\":0,\"choiceIgnored\":false,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"concessionBooking\":false,\"connectedPnrDataDTO\":null,\"connectingJourney\":false,\"covid19\":false,\"enquiryType\":\"3\",\"enrouteStation\":null,\"extraActivity\":null,\"freeCanFeesFlag\":null,\"ftBooking\":false,\"generalPsgn\":false,\"generalistChildConfirm\":false,\"gnToCkOpted\":false,\"gstDetails\":null,\"hrmsTxnId\":0,\"iTicketDetailsDTO\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"loyaltyAccrualBookingFlag\":false,\"loyaltyNo\":0,\"loyaltyRedemptionBooking\":false,\"mainJourneyPnr\":null,\"mainJourneyTktId\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"mpBooking\":false,\"mpPsgnPresent\":false,\"mpSecType\":null,\"multiLapBooking\":false,\"name\":null,\"nget_transaction_id\":0,\"nlpCaptchaVarsDTO\":null,\"nosbBooking\":false,\"onwardFlag\":\"N\",\"otpBooking\":false,\"passengerList\":null,\"paymentType\":1,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"returnJourney\":false,\"rlyPassBooking\":false,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"tktAddress\":null,\"trainOwner\":null,\"travelInsuranceOpted\":null,\"twoPhaseAuthRequired\":false,\"viaPointStation\":null,\"warrentType\":null,\"zeroServiceCharge\":false}";

                                                        }
                                                        
                                                        while (true)
                                                        {
                                                            num17++;
                                                            response = null;
                                                            dictionary_TimeP["Availablity"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                            //class3_0.TKT_QUOTAGN = "GN";
                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/avlFarenquiry/" + class3_0.TRAIN_NO + "/" + class3_0.dateTime_0.ToString("yyyMMdd") + "/" + class3_0.SRC_STN + "/" + class3_0.DEST_STN + "/" + class3_0.TKT_CLASS + "/" + class3_0.TKT_QUOTA + "/N";
                                                            stopwatch2 = new Stopwatch();
                                                            stopwatch2.Start();
                                                            if (_httpRequest_App2(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 58000, 58000, ref response, ref errormsg, ref Exception_) && !string.IsNullOrEmpty(response) && response.Contains("avlDayList"))
                                                            {
                                                                if (response.Contains("Invalid access token") && num10 > 2)
                                                                {
                                                                    break;
                                                                }
                                                                class3_0.string_30 = response;
                                                                string @string = GetString(response, "availablityStatus");
                                                                //if (num17 == 1)
                                                                //{
                                                                //    @string = @string + "#";
                                                                //}
                                                                //try
                                                                //{
                                                                //    if (!opening1 & class3_0.TKT_ISADV & int_BookHRS != 8)
                                                                //    {
                                                                //        updTStatus.BeginInvoke(1, "Checking Bkg Allowance " + num17, tCntrlName, null, null);
                                                                //        @lastupdatetime = GetString(response, "lastUpdateTime");
                                                                //        if (string.IsNullOrEmpty(@lastupdatetime))
                                                                //        {
                                                                //            continue;
                                                                //        }
                                                                //        string[] updaterti = @lastupdatetime.Split(new string[1] { "and" }, StringSplitOptions.None);
                                                                //        if (updaterti[0].Trim() != "0 Minutes")
                                                                //        {
                                                                //            continue;
                                                                //        }
                                                                //        Thread.Sleep(3000);
                                                                //    }
                                                                //}
                                                                //catch
                                                                //{

                                                                //}
                                                                if (response.IndexOf("avlDayList") > 0 && class3_0.TKT_ISADV)
                                                                {
                                                                    //if (test1day)
                                                                    //{
                                                                    //    updTStatus.BeginInvoke(1, "Wait for ## Remove", tCntrlName, null, null);
                                                                    //    Method_CheckBookingTime(response);
                                                                    //}
                                                                    if (int_BookHRS == 8 & opening)
                                                                    {
                                                                        updTStatus.BeginInvoke(1, "Wait for ## Remove", tCntrlName, null, null);
                                                                        opening = false;
                                                                        Method_CheckBookingTime_Test(response);
                                                                    }


                                                                    updTStatus.BeginInvoke(1, "Avl Check Int - " + num17, tCntrlName, null, null);
                                                                    string text14 = response.Substring(response.IndexOf("timeStamp") + 23);
                                                                    text14 = text14.Substring(0, text14.IndexOf("\""));
                                                                    DateTime dateTime6 = DateTime.Parse(text14);
                                                                    if (!(!@string.Contains("#") & (dateTime6.Hour >= int_BookHRS)))
                                                                    {
                                                                        double totalMilliseconds = stopwatch2.Elapsed.TotalMilliseconds;
                                                                        stopwatch2.Stop();
                                                                        int num18 = dateTime6.Second * 1000 + dateTime6.Millisecond;
                                                                        if (num17 >= 10)
                                                                        {
                                                                            num17 = 0;
                                                                            Application.DoEvents();
                                                                            Thread.Sleep(2500);
                                                                        }
                                                                        else
                                                                        {
                                                                            Application.DoEvents();
                                                                            Thread.Sleep(300);
                                                                        }
                                                                        continue;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (response.Contains("availablityStatus") && @string == "NOT AVAILABLE" && class3_0.TKT_QUOTA == "PT")
                                                                    {
                                                                        frmPayment frmPayment2 = new frmPayment();
                                                                        frmPayment2.tktname.Text = TktName;
                                                                        frmPayment2.bool_7 = true;
                                                                        frmPayment2.string_1 = "PT Not Available Do You Want To Change Your Quota into TQ And Book.";
                                                                        frmPayment2.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                        DialogResult dialogResult = frmPayment2.DialogResult;
                                                                        frmPayment2.Dispose();
                                                                        if (dialogResult == DialogResult.Cancel)
                                                                        {
                                                                            updTStatus.BeginInvoke(2, @string, tCntrlName, null, null);
                                                                            return false;
                                                                        }
                                                                        class3_0.TKT_QUOTA = "TQ";
                                                                        continue;
                                                                    }
                                                                    if (@string.Contains("REGRET") || @string.Contains("TRAIN DEPARTED") || @string.Contains("TRAIN CANCELLED") || @string.Contains("NOT AVAILABLE"))
                                                                    {
                                                                        updTStatus.BeginInvoke(2, @string, tCntrlName, null, null);
                                                                        return false;
                                                                    }
                                                                }
                                                                goto IL_2732;
                                                            }
                                                            if (num10 > 3)
                                                            {
                                                                break;
                                                            }
                                                        }
                                                        break;
                                                    IL_2869:
                                                        dateTime_2 = GetTimeStamp(response, int_TimeDiff);
                                                        dateTime_2 = DateTime.Now.AddMilliseconds(200.0);
                                                        Lock0("Book", stopwatch2, response);
                                                        int num19;
                                                        if (response.Contains("departureTime") && !response.Contains("errorMessage"))
                                                        {
                                                            try
                                                            {
                                                                string food = GetString(response, "foodChoiceEnabled");
                                                                class3_0.fooden = Convert.ToBoolean(food);
                                                            }

                                                            catch
                                                            {

                                                            }
                                                            if (class3_0.int_TotalPax > 2)
                                                            {
                                                                minmPsgnInputTime2 = minmPsgnInputTime4;
                                                            }
                                                            if (class3_0.int_TotalPax > 4)
                                                            {
                                                                minmPsgnInputTime2 = minmPsgnInputTime6;
                                                            }
                                                            string text15 = stopwatch2.Elapsed.TotalMilliseconds.ToString();
                                                            string[] array11 = text15.Split('.');
                                                            text15 = array11[0];
                                                            num19 = int.Parse(text15);
                                                            num19 /= nopax;
                                                            bool flag12 = true;
                                                            lock (object_16)
                                                            {
                                                                if (dictionary_5.TryGetValue(tCntrlName + " WL_Status", out var value2))
                                                                {
                                                                    if (value2 == "WL Allow")
                                                                    {
                                                                        class3_0.TKT_ISCONFIRM = false;
                                                                    }
                                                                    else
                                                                    {
                                                                        class3_0.TKT_ISCONFIRM = true;
                                                                    }
                                                                }
                                                            }
                                                            string_70 = null;
                                                            text3 = smethod_10(class3_0.BANKSAVEAS);
                                                            if (isAPP)
                                                            {
                                                                postdata = class3_0.GetPassengerPOST_App(class3_0.TransactionID, text3, response);
                                                            }
                                                            else
                                                            {
                                                                postdata = class3_0.GetPassengerPOST(class3_0.TransactionID, text3, response);
                                                            }
                                                            if (class3_0.TKT_ISADV & (class3_0.TKT_QUOTA != "GN") & !unable & paxminus)
                                                            {
                                                                if (isAPP)
                                                                {
                                                                    int num20 = dictionary_PaxStart[TktName_ + "_APP"];
                                                                    if (num20 > 1)
                                                                    {
                                                                        minmPsgnInputTime2 -= num19;
                                                                    }
                                                                    dictionary_PaxStart[TktName_ + "_APP"] = num20 + 1;
                                                                }
                                                                else
                                                                {
                                                                    int num21 = dictionary_PaxStart[TktName_ + "_WEB"];
                                                                    if (num21 > 1)
                                                                    {
                                                                        minmPsgnInputTime2 -= num19;
                                                                    }
                                                                    dictionary_PaxStart[TktName_ + "_WEB"] = num21 + 1;
                                                                }
                                                            }
                                                            if (minmPsgnInputTime2 < 10000)
                                                            {
                                                                minmPsgnInputTime2 = 10000;
                                                            }
                                                            int num22 = (int)minmPsgnInputTime2 - (int)(DateTime.Now - dateTime_2).TotalMilliseconds;
                                                            if (num22 > 0)
                                                            {
                                                                DateTime now = DateTime.Now;
                                                                int num23 = (int)(DateTime.Now - dateTime_2).TotalMilliseconds;
                                                                num23 = (int)(minmPsgnInputTime2 - (double)num23);
                                                                now = now.AddMilliseconds(num23);
                                                                while (true)
                                                                {
                                                                    TimeSpan timeSpan2 = now - DateTime.Now;
                                                                    string text16 = timeSpan2.Seconds + ":" + timeSpan2.Milliseconds;
                                                                    if (timeSpan2.TotalMilliseconds <= 1.0)
                                                                    {
                                                                        break;
                                                                    }
                                                                    updTStatus.BeginInvoke(1, "Submit Pax In - " + text16, tCntrlName, null, null);
                                                                    Thread.Sleep(50);
                                                                }
                                                            }
                                                            num10 = 0;
                                                            while (true)
                                                            {
                                                                num10++;
                                                                Status = "Passenger";
                                                                stopwatch2 = new Stopwatch();
                                                                stopwatch2.Start();
                                                                dictionary_TimeP["Passenger"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                updTStatus.BeginInvoke(1, "Submiting Pax Data....", tCntrlName, null, null);
                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/allLapAvlFareEnq/Y";
                                                                Reffral = "";
                                                                if (NgtHttpReq_App2(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Plain123json"))
                                                                {
                                                                    break;
                                                                }
                                                                if (num10 > 3)
                                                                {
                                                                    goto end_IL_206e;
                                                                }
                                                            }
                                                            if ((response.IndexOf("bankDetailDTO") > 0) | (response.IndexOf("baseFare") > 0) | (response.IndexOf("captchaTime") > 0))
                                                            {
                                                                Lock0("Passenger", stopwatch2, response);
                                                                class3_0.PassengerResponse = response;
                                                                class3_0.PassengerResponse = response;
                                                                num10 = 0;
                                                                int num24 = 0;
                                                                bool flag13 = false;
                                                                while (true)
                                                                {
                                                                    num10++;
                                                                    stopwatch2 = new Stopwatch();
                                                                    stopwatch2.Start();
                                                                    dictionary_TimeP["Captcha"] = "[" + num10 + "]" + DateAndTime.Now.ToString("mm:ss:fff");
                                                                    updTStatus.BeginInvoke(1, "Loading final Captcha..", tCntrlName, null, null);
                                                                    GetString(response, "captcha");
                                                                    if (response.IndexOf("nlpKeyValue") <= 0)
                                                                    {
                                                                        string text17 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                                                                        string_93 = text17.Substring(0, text17.IndexOf("\""));
                                                                        if (!flag13)
                                                                        {
                                                                            frmCaptcha frmCaptcha3 = new frmCaptcha(this, cookie_, "", "");
                                                                            text10 = frmCaptcha3.SolveCaptcha(string_93);
                                                                            frmCaptcha3.Dispose();
                                                                            if (text10.Length < 3)
                                                                            {
                                                                                if (num24 > 2)
                                                                                {
                                                                                    flag13 = true;
                                                                                }
                                                                                num24++;
                                                                                string _reponse = "";
                                                                                Status = "Passenger";
                                                                                dictionary_TimeP["Passenger"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaganetate/" + class3_0.TransactionID + "/BOOKINGWS?nlpCaptchaException=true";
                                                                                Reffral = "";
                                                                                postdata = null;
                                                                                if (ConnectHttp_App2(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref _reponse, ref errormsg, ref Exception_, "Plain123json"))
                                                                                {
                                                                                    if (_reponse.Contains("captchaQuestion"))
                                                                                    {
                                                                                        response = _reponse;
                                                                                    }
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaverify/" + class3_0.TransactionID + "/BOOKINGWS/" + text10;
                                                                                postdata = null;
                                                                            }
                                                                        }
                                                                        else if (response.Contains("captchaQuestion"))
                                                                        {
                                                                            text10 = "0";
                                                                            isFinalCaptcha = true;
                                                                            frmCaptcha frmCaptcha4 = new frmCaptcha(this, cookie_, "", "");
                                                                            frmCaptcha4.lblWrongCaptcha.Text = "Enter Captcha";
                                                                            frmCaptcha4.dateTime_0 = dateTime_2;
                                                                            frmCaptcha4.string_1 = string_93;
                                                                            frmCaptcha4.bool_0 = flag;
                                                                            frmCaptcha4.method_2(control_2, rectangle_1, string_93);
                                                                            if (frmCaptcha4.DialogResult == DialogResult.Cancel)
                                                                            {
                                                                                frmCaptcha4.Dispose();
                                                                                updTStatus.BeginInvoke(2, "Captcha Cancel!", tCntrlName, null, null);
                                                                                return false;
                                                                            }
                                                                            text10 = frmCaptcha4.txtImageData.Text.Trim();
                                                                            if (!string.IsNullOrEmpty(text10) | (text10.Length > 2))
                                                                            {
                                                                                frmCaptcha4.Dispose();
                                                                                url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaverify/" + class3_0.TransactionID + "/BOOKINGWS/" + text10;
                                                                                postdata = null;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        string string2 = GetString(response, "nlpKeyValue");
                                                                        LoadNlpCaptcha(string2, ref string_94, ref bitmap_1, ref string_93);
                                                                        Reffral = null;
                                                                        frmCAP frmCAP2 = new frmCAP(this);
                                                                        frmCAP2.tktname.Text = TktName;
                                                                        frmCAP2.method_4(control_0, rectangle_0, bitmap_1, string2, string_94, string_93);
                                                                        if (frmCAP2.DialogResult == DialogResult.Cancel)
                                                                        {
                                                                            frmCAP2.Dispose();
                                                                            updTStatus.BeginInvoke(2, "Captcha Cancel!", tCntrlName, null, null);
                                                                            return false;
                                                                        }
                                                                        text10 = frmCAP2.txtImageData.Text;
                                                                        string_94 = frmCAP2.string_2;
                                                                        frmCAP2.Dispose();
                                                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/nlpcaptchaverify/" + class3_0.TransactionID + "/BOOKINGWS/" + text10;
                                                                        postdata = "{\"nlpIdentifier\":\"" + string_94 + "\",\"nlpAnswer\":\"" + text10 + "\",\"nlpToken\":\"" + string2 + "\",\"nlpType\":\"MOB_BOOKING\"}";
                                                                    }
                                                                    Status = "Final Captcha";
                                                                    Reffral = "https://www.irctc.co.in/nget/booking/reviewBooking";
                                                                    updTStatus.BeginInvoke(1, "Verifying Final Captcha", tCntrlName, null, null);
                                                                    //bool fastttt = true;
                                                                    //if (fastttt)
                                                                    //{
                                                                    //    string string7777 = "95.85.71.151||3128||jayesh||jayesh";
                                                                    //    string[] array88 = string7777.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                    //    Proxy_C = new WebProxy(array88[0].Trim(), int.Parse(array88[1].Trim()));
                                                                    //    Proxy_C.BypassProxyOnLocal = true;
                                                                    //    Proxy_C.Credentials = new NetworkCredential(array88[2].Trim(), array88[3].Trim());
                                                                    //    Lock("\n\n\nProxy=" + array88[0]);
                                                                    //}
                                                                    if (!_httpRequest_App2(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                                                                    {
                                                                        break;
                                                                    }
                                                                    if (response.Contains("SUCCESS"))
                                                                    {
                                                                        Lock0("Captcha", stopwatch2, response);
                                                                        bool flag14 = true;
                                                                        response = class3_0.PassengerResponse;
                                                                        num5++;
                                                                        string text18 = "";
                                                                        string text19 = "1";
                                                                        bool A_ = false;
                                                                        string text20 = "0.0";
                                                                        int num25 = 0;
                                                                        int_6 = 10;
                                                                        stopwatch2 = new Stopwatch();
                                                                        stopwatch2.Start();
                                                                        if (response.IndexOf("totalCollectibleAmount") > 0)
                                                                        {
                                                                            text20 = GetString(response, "totalCollectibleAmount");
                                                                            class3_0.Txnamt = text19;
                                                                            text9 = GetString(response, "availablityStatus").ToUpper();
                                                                            updTStatus.BeginInvoke(999, "Going To Bank$" + text20 + "$" + text9, tCntrlName, null, null);
                                                                        }
                                                                        if (text9.Contains("NOT AVAILABLE") || text9.Contains("REGRET") || text9.Contains("TRAIN DEPARTED") || text9.Contains("TRAIN CANCELLED"))
                                                                        {
                                                                            updTStatus.BeginInvoke(2, "Availability: " + text9 + ", Ticket Stopped!", tCntrlName, null, null);
                                                                            return false;
                                                                        }
                                                                        text = array4[0];
                                                                        int num26 = 0;
                                                                        while (true)
                                                                        {
                                                                            num26 = 0;
                                                                            stopwatch = new Stopwatch();
                                                                            stopwatch.Start();
                                                                            response = class3_0.PassengerResponse;
                                                                            num25++;
                                                                            method_102();
                                                                            if (!string.IsNullOrEmpty(text))
                                                                            {
                                                                                text2 = class3_0.dictionary_BnkData[text];
                                                                                class3_0.BANKSAVEAS = text;
                                                                                class3_0.BANKDETAILS = text2;
                                                                            }
                                                                            text3 = smethod_10(class3_0.BANKSAVEAS);
                                                                            text18 = GetBankID(text3, ref A_);
                                                                            if (text18 == "121" & isAPP & text3 == "PAYZAP_DC")
                                                                            {
                                                                                text3 = "PAYZAP_AIRPAY";
                                                                            }
                                                                            if (text18 == "74" || (text18 == "91"))
                                                                            {

                                                                                string[] array202M = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                class3_0.BNK_MOBILE = array202M[0];
                                                                            }
                                                                            if (text18.Length <= 0)
                                                                            {
                                                                                goto IL_6845;
                                                                            }
                                                                            try
                                                                            {
                                                                                bool_63 = ((CheckBox)control.Controls["chkConfirmation"]).Checked;
                                                                                ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                            }
                                                                            catch
                                                                            {
                                                                            }
                                                                            text6 = "\r\n\r\nFare: " + text20 + text6;
                                                                            if (num > 0.0)
                                                                            {
                                                                                double num27 = Conversion.Val(text20.Trim());
                                                                                if (num27 > 0.0 && num27 > num + (double)class3_0.int_4 * 0.49 + 40.0)
                                                                                {
                                                                                    flag2 = true;
                                                                                }
                                                                            }
                                                                            string string_95;
                                                                            string text21;
                                                                            bool flag15;
                                                                            while (true)
                                                                            {
                                                                                dictionary_TimeP["Fare"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                string_95 = "";
                                                                                text21 = "";
                                                                                flag15 = false;
                                                                                updTStatus.BeginInvoke(1, "Redirect To Bank Server....", tCntrlName, null, null);
                                                                                Reffral = url;
                                                                                if (isAPP)
                                                                                {
                                                                                    int num28 = 0;
                                                                                    while (true)
                                                                                    {
                                                                                        updTStatus.BeginInvoke(1, "Collecting Payment Info", tCntrlName, null, null);
                                                                                        Reffral = null;
                                                                                        if (text18 != "74" & (text18 != "91"))
                                                                                        {
                                                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=N.A";
                                                                                            postdata = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                            if (text18 == "1000")
                                                                                            {
                                                                                                postdata = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":1000,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"TXN_PASSWORD\",\"value\":\"\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":7,\"upiModeOpted\":0}";
                                                                                            }
                                                                                            else if (text18 == "122")
                                                                                            {
                                                                                                postdata = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":59,\"upiModeOpted\":0}";
                                                                                            }
                                                                                            if (!ConnectHttp_App2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json"))
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }
                                                                                        if (text18 == "1000")
                                                                                        {
                                                                                            if (!response.Contains("RDS balance is below total ticket transaction amount. Please top up your master RDS account"))
                                                                                            {
                                                                                                balanceee = jsonData_Serial(response, "BALANCE\",\"value");
                                                                                                ewalletamounts = jsonData_Serial(response, "AMOUNT\",\"value");
                                                                                                break;
                                                                                            }

                                                                                            else
                                                                                            {
                                                                                                updTStatus.BeginInvoke(1, "Insuf Balance in your E-Wallet", tCntrlName, null, null);
                                                                                                return false;
                                                                                            }
                                                                                        }
                                                                                        if (text18 == "101" || text18 == "108")
                                                                                        {
                                                                                            string text22 = "netbanking";
                                                                                            string text23 = "SBI";
                                                                                            string text24 = "State Bank of India";
                                                                                            string text25 = "9999999999";
                                                                                            string text26 = "IrctcCustomer@example.com";
                                                                                            if (text18 == "108")
                                                                                            {
                                                                                                text23 = "HDFB";
                                                                                                text24 = "HDFC Bank";
                                                                                            }
                                                                                            postdata = "{\"amount\":" + text20 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text18 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text23 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text24 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text25 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text26 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                            url = "https://www.irctc.co.in/eticketing/protected/mapps1/paymentProcessService/" + class3_0.TransactionID;
                                                                                            bool flag16 = ConnectHttp_App2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                        }
                                                                                        if (text18 == "74" || (text18 == "91"))
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        if (response.Contains("CHECKSUMHASH") | response.Contains("ORDER_ID") | response.Contains("encdata") | response.Contains("DO_REDIRECT"))
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        else if (response.Contains("https://mercury-t2.phonepe.com/transact/v2"))
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        if (response.Contains("errorMsg"))
                                                                                        {
                                                                                            string string_96 = GetString_(response, "errorMsg", "\"");
                                                                                            string_96 = "Blacklist ID! Change Password!!!";
                                                                                            if (!string.IsNullOrEmpty(string_96))
                                                                                            {
                                                                                                Class11.smethod_1("TBL_USER", "UserState", "Blacklisted||" + class3_0.string_3, class3_0.IRCTC_ID);
                                                                                                updTStatus.BeginInvoke(2, string_96, tCntrlName, null, null);
                                                                                                return false;
                                                                                            }
                                                                                        }

                                                                                        if (!((text18 == "91") & response.Contains("txnDate")))
                                                                                        {
                                                                                            if (num28 > 3)
                                                                                            {
                                                                                                goto end_IL_38d1;
                                                                                            }
                                                                                            continue;
                                                                                        }
                                                                                        goto IL_3cb9;
                                                                                    }
                                                                                    dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                    Lock0("Fare", stopwatch2, response);
                                                                                }
                                                                                else
                                                                                {
                                                                                    Task_response = null;
                                                                                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=";
                                                                                    postdata = "{\"bankId\":\"" + text18 + "\",\"txnType\":" + text19 + ",\"paramList\":[" + "" + "],\"amount\":\"" + text20 + "\",\"transationId\":0,\"txnStatus\":1}";
                                                                                    Task_errormsg = "";
                                                                                    Task_Exception_ = null;
                                                                                    Task_response = "";
                                                                                    Task<bool> task = Task_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, bool_64: true, bool_65: true, 68000, 68000);
                                                                                    int num29 = 0;
                                                                                    while (true)
                                                                                    {
                                                                                        if (!string.IsNullOrEmpty(Task_response))
                                                                                        {
                                                                                            if (Task_response.Contains("REDIRECT\",\"value\":\"TRUE"))
                                                                                            {
                                                                                                break;
                                                                                            }
                                                                                            if (Task_response.Contains("errorMsg"))
                                                                                            {
                                                                                                string string_96 = GetString_(Task_response, "errorMsg", "\"");
                                                                                                if (!string.IsNullOrEmpty(string_96))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(2, string_96, tCntrlName, null, null);
                                                                                                    return false;
                                                                                                }
                                                                                            }
                                                                                            if (Task_response.Contains("errorMessage"))
                                                                                            {
                                                                                                string string_97 = GetString_(Task_response, "errorMessage", "\"");
                                                                                                if (!string.IsNullOrEmpty(string_97))
                                                                                                {
                                                                                                    updTStatus.BeginInvoke(2, string_97, tCntrlName, null, null);
                                                                                                    return false;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (num29 > 650)
                                                                                            {
                                                                                                break;
                                                                                            }
                                                                                            num29 += 23;
                                                                                            Application.DoEvents();
                                                                                            Thread.Sleep(23);
                                                                                        }
                                                                                    }
                                                                                    Lock0("Fare", stopwatch2, response);
                                                                                    dictionary_TimeP["RedBNK"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                    url = "https://www.irctc.co.in/eticketing/PaymentRedirect";
                                                                                    Reffral = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=";
                                                                                    class3_0.string_61 = class3_0._Authorization.Replace("Bearer ", "");
                                                                                    postdata = "token=" + class3_0.string_61 + "&txn=" + class3_0.IRCTC_ID + "%3A" + class3_0.TransactionID;
                                                                                    int num30 = 0;
                                                                                    bool flag17;
                                                                                    do
                                                                                    {
                                                                                        stopwatch2 = new Stopwatch();
                                                                                        stopwatch2.Start();
                                                                                        num30++;
                                                                                        Status = "Redirect to Bank";
                                                                                        flag17 = _httpRequest_App2(url, postdata, Reffral, "Other", bool_63: true, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                    }
                                                                                    while (!(response.IndexOf("Please Wait") > 0 && flag17) && ((response.Contains("retry") | (response.Length < 30)) || !(!string.IsNullOrEmpty(response) && flag17)));
                                                                                    dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                    Lock0("RedBNK", stopwatch2, response);
                                                                                }
                                                                                goto IL_419f;
                                                                            IL_419f:
                                                                                stopwatch_0 = new Stopwatch();
                                                                                stopwatch_0.Start();
                                                                                if (num26 <= 0)
                                                                                {
                                                                                    int num31 = 0;
                                                                                    bool flag19;
                                                                                    while (true)
                                                                                    {
                                                                                        bool flag18 = true;
                                                                                        ((ComboBox)control.Controls["cboGateway"]).Enabled = true;
                                                                                        if (class3_0.TKT_ISCONFIRM & text9.Contains("WL"))
                                                                                        {
                                                                                            num31 = 2;
                                                                                            frmPayment frmPayment3 = new frmPayment();
                                                                                            frmPayment3.tktname.Text = TktName;
                                                                                            frmPayment3.btnSubmit.Text = "Pay 4 WL";
                                                                                            frmPayment3.bool_7 = true;
                                                                                            frmPayment3.string_1 = text9;
                                                                                            frmPayment3.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                            DialogResult dialogResult2 = frmPayment3.DialogResult;
                                                                                            frmPayment3.Dispose();
                                                                                            if (dialogResult2 == DialogResult.Cancel)
                                                                                            {
                                                                                                updTStatus.BeginInvoke(2, "Availability: " + text9 + ", Ticket Stopped!", tCntrlName, null, null);
                                                                                                frmPayment3.Dispose();
                                                                                                return false;
                                                                                            }
                                                                                            flag18 = false;
                                                                                        }
                                                                                        num26++;
                                                                                        if (flag2 && flag18)
                                                                                        {
                                                                                            num31 = 2;
                                                                                            frmPayment frmPayment4 = new frmPayment();
                                                                                            frmPayment4.bool_4 = flag2;
                                                                                            frmPayment frmPayment5 = frmPayment4;
                                                                                            frmPayment5.string_1 = frmPayment5.string_1 + "FARE HIGHER THAN SET LIMIT\nRs." + text20 + " - " + text9;
                                                                                            frmPayment4.tktname.Text = TktName;
                                                                                            frmPayment4.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                            DialogResult dialogResult3 = frmPayment4.DialogResult;
                                                                                            frmPayment4.Dispose();
                                                                                            if (dialogResult3 != DialogResult.OK)
                                                                                            {
                                                                                                updTStatus.BeginInvoke(2, "User Select to Stop Payment! ", tCntrlName, null, null);
                                                                                                frmPayment4.Dispose();
                                                                                                return false;
                                                                                            }
                                                                                            flag18 = false;
                                                                                        }
                                                                                        bool_63 = ((CheckBox)control.Controls["chkConfirmation"]).Checked;
                                                                                        if (bool_63 && flag18)
                                                                                        {
                                                                                            num31 = 2;
                                                                                            frmPayment frmPayment6 = new frmPayment();
                                                                                            frmPayment frmPayment7 = frmPayment6;
                                                                                            frmPayment7.string_1 = frmPayment7.string_1 + "You Have Selected Stop Pay\nRs." + text20 + " - " + text9;
                                                                                            frmPayment6.tktname.Text = TktName;
                                                                                            frmPayment6.bool_0 = true;
                                                                                            frmPayment6.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                            if (frmPayment6.DialogResult != DialogResult.OK)
                                                                                            {
                                                                                                updTStatus.BeginInvoke(2, "User Select to Stop Payment! ", tCntrlName, null, null);
                                                                                                frmPayment6.Dispose();
                                                                                                return false;
                                                                                            }
                                                                                            frmPayment6.Dispose();
                                                                                            flag18 = false;
                                                                                        }
                                                                                        flag19 = false;
                                                                                        lock (object_8)
                                                                                        {
                                                                                            if (list_PaySTART.Contains(TktName) && flag18)
                                                                                            {
                                                                                                flag19 = true;
                                                                                            }
                                                                                        }
                                                                                        if (flag19)
                                                                                        {
                                                                                            num31 = 2;
                                                                                            frmPayment frmPayment6 = new frmPayment();
                                                                                            frmPayment6.bool_3 = flag19;
                                                                                            frmPayment6.string_1 = "Another Ticket already Procced\nRs." + text20 + " - " + text9;
                                                                                            frmPayment6.tktname.Text = TktName;
                                                                                            frmPayment6.bool_0 = true;
                                                                                            frmPayment6.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                            if (frmPayment6.DialogResult != DialogResult.OK)
                                                                                            {
                                                                                                updTStatus.BeginInvoke(201, "Another Ticket already Proceed", tCntrlName, null, null);
                                                                                                frmPayment6.Dispose();
                                                                                                return false;
                                                                                            }
                                                                                            frmPayment6.Dispose();
                                                                                        }
                                                                                        if (num31 <= 1)
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        if (!setNewBank(ref text3, ref text18, control))
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        if (class3_0.BANKSAVEAS.Contains("@axisbank"))
                                                                                        {
                                                                                            Thread thread2 = new Thread(StartUPI_);
                                                                                            thread2.IsBackground = true;
                                                                                            thread2.Start(class3_0.BANKDETAILS + "||True||5||0000000000");
                                                                                        }
                                                                                        break;
                                                                                    }
                                                                                    lock (object_10)
                                                                                    {
                                                                                        ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                        if (list_PNR.Contains(TktName))
                                                                                        {
                                                                                            updTStatus.BeginInvoke(204, "PNR Booked in another Pair", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                    }
                                                                                    if (!flag19)
                                                                                    {
                                                                                        list_PaySTART.Add(TktName);
                                                                                    }
                                                                                    updTStatus.BeginInvoke(202, string.Concat(new object[5] { "Selecting_ ", text3, " for Payment!-(", "0", ")" }), tCntrlName, null, null);
                                                                                    if (text18 == "96" && num26 == 1)
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                goto IL_4899;
                                                                            IL_3cb9:
                                                                                dateTimePayStart = DateTime.Now.AddMilliseconds(300.0);
                                                                                Lock0("Fare", stopwatch2, response);
                                                                                goto IL_419f;
                                                                                continue;
                                                                            end_IL_38d1:
                                                                                break;
                                                                            }
                                                                            break;
                                                                        IL_4899:
                                                                            try
                                                                            {
                                                                                try
                                                                                {
                                                                                    string path = Path.Combine(Environment.SystemDirectory, "drivers\\etc\\hosts");
                                                                                    if (File.Exists(path))
                                                                                    {
                                                                                        File.Delete(path);
                                                                                    }
                                                                                }
                                                                                catch
                                                                                {
                                                                                }
                                                                                bool_52 = false;
                                                                                class3_0.LoginType = "APP";
                                                                                dictionary_TimeP["PayProcess"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                bank = new Bank(this, class3_0);
                                                                                bank.updateTStatus_1 = updTStatus;
                                                                                string text27 = text18.ToUpper().Trim();
                                                                                if (text3 == "OTOPAY")
                                                                                {
                                                                                    text27 = "4201";
                                                                                }
                                                                                else if (text3.Contains("PAYZAP_AIR"))
                                                                                {
                                                                                    text27 = "4200";
                                                                                }
                                                                                else if (text3.Contains("PAYTMQR") & !isAPP)
                                                                                {
                                                                                    text27 = "4202";
                                                                                }
                                                                                else if (text3.Contains("PHONEPEQR"))
                                                                                {
                                                                                    text27 = "4203";
                                                                                }
                                                                                else if (text3.Contains("HDFC_DC"))
                                                                                {
                                                                                    text27 = "4204";
                                                                                }
                                                                                else if (text3.Contains("SBI"))
                                                                                {
                                                                                    text27 = "4205";
                                                                                }
                                                                                else if (text3.Contains("V_RUPAY"))
                                                                                {
                                                                                    text27 = "4206";
                                                                                }
                                                                                else if (text3.Contains("ICICI") & isAPP)
                                                                                {
                                                                                    text27 = "4207";
                                                                                }

                                                                                Class46.smethod_0(text27);
                                                                                switch (int.Parse(text27))
                                                                                {
                                                                                    case 97:
                                                                                        flag15 = bank.method_134(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4204:
                                                                                        flag15 = bank.HDFC_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);//bank.HDFC_Getway(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 74:
                                                                                    case 91:
                                                                                        //cookie_ = new CookieContainer();
                                                                                        url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingInitPayment/" + class3_0.TransactionID + "?insurenceApplicable=NA";
                                                                                        postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"MOBILE\",\"value\":\"" + class3_0.BNK_MOBILE + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                        ConnectHttp_App2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "json");
                                                                                        string_92 = response;
                                                                                        flag15 = true;
                                                                                        break;
                                                                                    case 93:
                                                                                        flag15 = bank.AirtelMoney(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4206:
                                                                                        flag15 = bank.ICICI_Getway_Rupay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4201:
                                                                                        flag15 = bank.method_160_oto(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4203:
                                                                                        flag15 = bank.Method_PhonepeQr(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 96:
                                                                                        string_92 = response;
                                                                                        flag15 = true;
                                                                                        break;
                                                                                    case 98:
                                                                                    case 108:
                                                                                    //case 121:
                                                                                    case 125:
                                                                                        flag15 = bank.PayU_(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 121:
                                                                                        updTStatus.BeginInvoke(1, text3 + "  Payment Step 1....", tCntrlName, null, null);
                                                                                        url = "https://irctc.nowpay.co.in/";
                                                                                        postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                        Reffral = "https://irctc.nowpay.co.in/";
                                                                                        string text15D = response.Substring(response.IndexOf("privatekey") + 19);
                                                                                        string privatekey = text15D.Substring(0, text15D.IndexOf("\">"));
                                                                                        string text15e = response.Substring(response.IndexOf("mercid") + 14);
                                                                                        string mercid = text15e.Substring(0, text15e.IndexOf("\">"));
                                                                                        string text15f = response.Substring(response.IndexOf("orderid") + 16);
                                                                                        string orderid = text15f.Substring(0, text15f.IndexOf("\">"));
                                                                                        string currency = "356";
                                                                                        string chmod = "upi";
                                                                                        string text15g = response.Substring(response.IndexOf("amount") + 15);
                                                                                        string amount = text15g.Substring(0, text15g.IndexOf("\">"));
                                                                                        string buyerEmail = "customer@irctc.co.in";
                                                                                        string buyerFirstName = "";
                                                                                        string buyerLastName = "";
                                                                                        string text15h = response.Substring(response.IndexOf("checksum") + 17);
                                                                                        string checksum = text15h.Substring(0, text15h.IndexOf("\">"));
                                                                                        postdata = "privatekey=" + privatekey + "&mercid=28688" + "&orderid=" + orderid + "&currency=" + currency + "&isocurrency=" + "INR" + "&chmod=" + chmod + "&amount=" + amount + "&buyerEmail=" + WebUtility.UrlEncode(buyerEmail) + "&buyerFirstName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum + "&arpyVer=3";
                                                                                        url = "https://payments.airpay.co.in/pay/index.php";
                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                        updTStatus.BeginInvoke(1, text3 + "  Payment Step 2....", tCntrlName, null, null);
                                                                                        string text15DE = response.Substring(response.IndexOf("paymentChannelsData") + 23);
                                                                                        string encccc = text15DE.Substring(0, text15DE.IndexOf("';"));

                                                                                        Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                        url = "https://payments.airpay.co.in/pageLoadTime.php";
                                                                                        string orig = Decrypt(encccc);
                                                                                        string transaction_id = jsonData_Serial(orig, "transaction_id");
                                                                                        string amountss = jsonData_Serial(orig, "amount");
                                                                                        string timef = "1407";
                                                                                        string b4 = Base64Encode(Base64Encode("1407@28688@" + transaction_id + "@c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d"));
                                                                                        string test = "{\"loadTime\":\"" + timef + "\",\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"" + privatekey + "\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                        test = "{\"loadTime\":1407,\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                        string outputTest = Encrypt(test);
                                                                                        outputTest = HttpUtility.UrlEncode(outputTest);
                                                                                        postdata = "requestParam=" + outputTest + "&scriptencrypt=Y";
                                                                                        airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_, "payment");

                                                                                        if (qrpayment)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(1, "Scan Qr and Pay....", tCntrlName, null, null);
                                                                                            encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"qrcode\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                            encccc = Encrypt(encccc);
                                                                                            url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                            encccc = HttpUtility.UrlEncode(encccc);
                                                                                            postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                            Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                            airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                            string ogbase64 = jsonData_Serial(response, "image");
                                                                                            //string RID = jsonData_Serial(response, "RID");
                                                                                            ogbase64 = ogbase64.Replace("data:image\\/png;base64,", "");
                                                                                            ogbase64 = ogbase64.Replace("\\/", "/");
                                                                                            FrmQr frmOTPPP = new FrmQr();
                                                                                            frmOTPPP.Form1_Load(ogbase64, TktName, text20);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            updTStatus.BeginInvoke(1, "Accept Request from Mobile....", tCntrlName, null, null);
                                                                                            string[] arrayvA = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                            string vpaA = arrayvA[0].Trim();
                                                                                            encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"" + vpaA + "\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"upi_vpa\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                            encccc = Encrypt(encccc);
                                                                                            url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                            encccc = HttpUtility.UrlEncode(encccc);
                                                                                            postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                            Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                            airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                            if (response.Contains("Invalid Payee Virtual address"))
                                                                                            {
                                                                                                updTStatus.BeginInvoke(1, "Invalid Upi Adress...", tCntrlName, null, null);
                                                                                                return false;
                                                                                            }

                                                                                        }


                                                                                        //step4
                                                                                        string RID = jsonData_Serial(response, "RID");
                                                                                    //step4
                                                                                    ILREEEE:
                                                                                        postdata = "privatekey=" + privatekey + "&orderid=" + orderid + "&transaction_id=" + transaction_id + "&mercid=28688&amount=" + amountss + "&isocurrency=inr&customvar=&checksum=" + checksum + "&RID=" + RID + "&ch_id=" + transaction_id + "&submode=vpa";
                                                                                        Reffral = "https://payments.airpay.co.in/";
                                                                                        url = "https://secure.airpay.co.in/upi/npci/response_upi.php";
                                                                                        airpayF(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                        if (!response.Contains("\"BANKRESPONSEMSG\":\"SUCCESS\""))
                                                                                        {
                                                                                            goto ILREEEE;
                                                                                        }
                                                                                        updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                        //update
                                                                                        //postdata = "privatekey=" + privatekey + "&orderid=" + orderid + "&transaction_id=" + transaction_id + "&mercid=28688&amount=" + amountss + "&isocurrency=inr&customvar=&checksum=" + checksum + "&RID=" + RID + "&ch_id=" + transaction_id + "&submode=vpa";
                                                                                        postdata = "action=failed_transaction&privatekey=" + privatekey + "&orderid=" + orderid + "&transaction_id=" + transaction_id + "&TRANSACTIONTYPE=320&mercid=28688&amount=" + amountss + "&tabselect=upi&customvar=&checksum=" + checksum + "&RID=" + RID + "&chid=" + transaction_id;
                                                                                        Reffral = "https://payments.airpay.co.in/";
                                                                                        url = "https://secure.airpay.co.in/upi/npci/response_manage.php ";
                                                                                        airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                        postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                        //step6
                                                                                        if (!response.Contains("https://www.irctc.co.in/eticketing/mbi/MobileBankResponse"))
                                                                                        {
                                                                                            string_92 = response;
                                                                                            flag15 = false;
                                                                                            break;
                                                                                        }
                                                                                        updTStatus.BeginInvoke(1, "Redirecting to PNR serever.....", tCntrlName, null, null);
                                                                                        string encair = response.Substring(response.IndexOf("encdata") + 16);
                                                                                        encairf = encair.Substring(0, encair.IndexOf("\">"));
                                                                                        if (failissuefix)
                                                                                        {
                                                                                            url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse";
                                                                                            Reffral = "https://irctc.nowpay.co.in/";
                                                                                            postdata = "bankCode=AIRP_MOB_AG" + "&appType=ANDROID" + "&encdata=" + encairf;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                        }
                                                                                        string_92 = response;
                                                                                        flag15 = true;
                                                                                        break;
                                                                                    case 120:
                                                                                        flag15 = bank.ICICI_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 144:
                                                                                        if (qrpayment)
                                                                                        {
                                                                                            url = "https://pay.easebuzz.in/pay/ir/secure";
                                                                                            postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            url = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            airpay(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            string[] array2022 = class3_0.easebuz.Split(new string[1] { "/" }, StringSplitOptions.None);
                                                                                            string accesskey = array2022[2];
                                                                                            string coupouns = "[]";
                                                                                            url = "https://pay.easebuzz.in/submitInitiatePayment";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            updTStatus.BeginInvoke(1, text3 + "Step 1...", tCntrlName, null, null);
                                                                                            postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            //string qrlinkk = GetString(response, "qr_link");
                                                                                            updTStatus.BeginInvoke(1, "Scan & Pay..click paid when done", tCntrlName, null, null);
                                                                                            string text15DEF = response.Substring(response.IndexOf("qr_link") + 11);
                                                                                            string enccccF = text15DEF.Substring(0, text15DEF.IndexOf(","));
                                                                                            char[] charsToTrim = { '"' };
                                                                                            string cleanString = enccccF.Trim(charsToTrim);
                                                                                            QRCodeGenerator qrGenerator = new QRCodeGenerator();
                                                                                            QRCodeData qrCodeData = qrGenerator.CreateQrCode(cleanString, QRCodeGenerator.ECCLevel.Q);
                                                                                            Base64QRCode qrCode = new Base64QRCode(qrCodeData);
                                                                                            string qrCodeImageAsBase64 = qrCode.GetGraphic(20);
                                                                                            FrmQr frmOTPP = new FrmQr();
                                                                                            frmOTPP.Form1_Load(qrCodeImageAsBase64, TktName, text20);
                                                                                        ILrestat:
                                                                                            url = "https://pay.easebuzz.in/upi/checkStatus";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            if (!response.Contains("Payment Successful"))
                                                                                            {
                                                                                                goto ILrestat;
                                                                                            }
                                                                                            updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                            url = "https://pay.easebuzz.in/response/hecupiresp";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            string text15DEE = response.Substring(response.IndexOf("encdata") + 16);
                                                                                            string ENCDATA = text15DEE.Substring(0, text15DEE.IndexOf("\"/>"));
                                                                                            class3_0.easebuzDATA = ENCDATA;
                                                                                            string text15DEEf = response.Substring(response.IndexOf("form action") + 13);
                                                                                            if (failissuefix)
                                                                                            {
                                                                                                url = text15DEEf.Substring(0, text15DEEf.IndexOf("' method"));
                                                                                                Reffral = "https://pay.easebuzz.in/";
                                                                                                postdata = "bankCode=EASEBUZZ_MOB_AG" + "&appType=ANDROID" + "&encdata=" + class3_0.easebuzDATA;
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            }

                                                                                            string_92 = response;
                                                                                            flag15 = true;
                                                                                            break;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            string[] arrayv = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                            string vpa = arrayv[0].Trim();
                                                                                            url = "https://pay.easebuzz.in/pay/ir/secure";
                                                                                            postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            url = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            airpay(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            string[] array2022 = class3_0.easebuz.Split(new string[1] { "/" }, StringSplitOptions.None);
                                                                                            string accesskey = array2022[2];
                                                                                            string coupouns = "[]";
                                                                                            url = "https://pay.easebuzz.in/submitInitiatePayment";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            updTStatus.BeginInvoke(1, text3 + "  Step 1...", tCntrlName, null, null);
                                                                                            postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            //string qrlinkk = GetString(response, "qr_link");
                                                                                            updTStatus.BeginInvoke(1, "Accept Request From Mobile", tCntrlName, null, null);

                                                                                        ILrestat:
                                                                                            url = "https://pay.easebuzz.in/upi/checkStatus";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";
                                                                                            //postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            if (!response.Contains("Payment Successful"))
                                                                                            {
                                                                                                goto ILrestat;
                                                                                            }
                                                                                            updTStatus.BeginInvoke(1, "Payment Sucessfull...", tCntrlName, null, null);
                                                                                            url = "https://pay.easebuzz.in/response/hecupiresp";
                                                                                            Reffral = "https://pay.easebuzz.in" + class3_0.easebuz;
                                                                                            postdata = "upiVA=" + vpa + "&upiQR=false" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";
                                                                                            //postdata = "upiVA=" + "&upiQR=true" + "&access_key=" + accesskey + "&selected_coupon=" + HttpUtility.UrlEncode(coupouns) + "&userAgent=" + "&device=" + "&paymentoption=upiview";// tName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            string text15DEE = response.Substring(response.IndexOf("encdata") + 16);
                                                                                            string ENCDATA = text15DEE.Substring(0, text15DEE.IndexOf("\"/>"));
                                                                                            class3_0.easebuzDATA = ENCDATA;
                                                                                            string text15DEEf = response.Substring(response.IndexOf("form action") + 13);
                                                                                            if (failissuefix)
                                                                                            {
                                                                                                url = text15DEEf.Substring(0, text15DEEf.IndexOf("' method"));
                                                                                                Reffral = "https://pay.easebuzz.in/";
                                                                                                postdata = "bankCode=EASEBUZZ_MOB_AG" + "&appType=ANDROID" + "&encdata=" + class3_0.easebuzDATA;
                                                                                                airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                            }

                                                                                            string_92 = response;
                                                                                            flag15 = true;
                                                                                            break;
                                                                                        }
                                                                                    case 69:
                                                                                        flag15 = bank.method_131(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 101:
                                                                                        flag15 = bank.MobiKwikPay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 19:
                                                                                        flag15 = bank.method_128(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 64:
                                                                                        flag15 = bank.method_181(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 15:
                                                                                        flag15 = bank.method_118(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 16:
                                                                                        flag15 = bank.method_135(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 17:
                                                                                        flag15 = bank.method_167(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 66:
                                                                                        flag15 = bank.method_119(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4:
                                                                                        flag15 = bank.method_141(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 5:
                                                                                        flag15 = bank.method_180(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 3:
                                                                                        flag15 = bank.method_109(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 1:
                                                                                        {
                                                                                            CookieContainer cookieContainer_ = null;
                                                                                            if (!(flag15 = bank.SbiNetBanking(response, class3_0.BANKSAVEAS, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus, ref cookieContainer_)) && cookieContainer_ != null)
                                                                                            {
                                                                                                ThreadPool.QueueUserWorkItem(method_110, cookieContainer_);
                                                                                            }
                                                                                            break;
                                                                                        }
                                                                                    case 9:
                                                                                        flag15 = bank.method_127(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 105:
                                                                                    case 106:
                                                                                    case 141:
                                                                                        flag15 = bank.Multi_RazorPay(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 115:
                                                                                        flag15 = bank.ICICI_Getway(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4200:
                                                                                        updTStatus.BeginInvoke(1, text3 + " Payment Step 1....", tCntrlName, null, null);
                                                                                        url = "https://irctc.nowpay.co.in/";
                                                                                        postdata = "encdata=" + GetString_(response, "encdata\",\"value", "\"");
                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");
                                                                                        Reffral = "https://irctc.nowpay.co.in/";
                                                                                        text15D = response.Substring(response.IndexOf("privatekey") + 19);
                                                                                        privatekey = text15D.Substring(0, text15D.IndexOf("\">"));
                                                                                        text15e = response.Substring(response.IndexOf("mercid") + 14);
                                                                                        mercid = text15e.Substring(0, text15e.IndexOf("\">"));
                                                                                        text15f = response.Substring(response.IndexOf("orderid") + 16);
                                                                                        orderid = text15f.Substring(0, text15f.IndexOf("\">"));
                                                                                        currency = "356";
                                                                                        chmod = "pg_nb_wallet_ppc";
                                                                                        text15g = response.Substring(response.IndexOf("amount") + 15);
                                                                                        amount = text15g.Substring(0, text15g.IndexOf("\">"));
                                                                                        buyerEmail = "customer@irctc.co.in";
                                                                                        buyerFirstName = "";
                                                                                        buyerLastName = "";
                                                                                        text15h = response.Substring(response.IndexOf("checksum") + 17);
                                                                                        checksum = text15h.Substring(0, text15h.IndexOf("\">"));
                                                                                        postdata = "privatekey=" + privatekey + "&mercid=28688" + "&orderid=" + orderid + "&currency=" + currency + "&isocurrency=" + "INR" + "&chmod=" + chmod + "&amount=" + amount + "&buyerEmail=" + WebUtility.UrlEncode(buyerEmail) + "&buyerFirstName=" + buyerFirstName + "&buyerLastName=" + buyerLastName + "&checksum=" + checksum + "&arpyVer=3";
                                                                                        url = "https://payments.airpay.co.in/pay/index.php";
                                                                                        airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                        updTStatus.BeginInvoke(1, text3 + " Payment Step 2....", tCntrlName, null, null);
                                                                                        text15DE = response.Substring(response.IndexOf("paymentChannelsData") + 23);
                                                                                        encccc = text15DE.Substring(0, text15DE.IndexOf("';"));

                                                                                        Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                        url = "https://payments.airpay.co.in/pageLoadTime.php";
                                                                                        orig = Decrypt(encccc);
                                                                                        transaction_id = jsonData_Serial(orig, "transaction_id");
                                                                                        amountss = jsonData_Serial(orig, "amount");
                                                                                        timef = "1407";
                                                                                        b4 = Base64Encode(Base64Encode("1407@28688@" + transaction_id + "@c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d"));
                                                                                        test = "{\"loadTime\":\"" + timef + "\",\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"" + privatekey + "\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                        test = "{\"loadTime\":1407,\"mercid\":\"28688\",\"transaction_id\":\"" + transaction_id + "\",\"privateKey\":\"c0d48b839fcad61a1de859a7fbf28666ac6245b3c864d820b03af1105d359e8d\",\"checksum\":\"" + b4 + "\",\"errorLog\":[]}";
                                                                                        outputTest = Encrypt(test);
                                                                                        outputTest = HttpUtility.UrlEncode(outputTest);
                                                                                        postdata = "requestParam=" + outputTest + "&scriptencrypt=Y";
                                                                                        airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref responseCl, ref errormsg, ref Exception_, "payment");
                                                                                        string[] splitbank = class3_0.BANKDETAILS.Split(new string[1] { "||" }, StringSplitOptions.None);
                                                                                        string ccnum = splitbank[0];

                                                                                        string cccccc = ccnum;
                                                                                        cccccc = cccccc.Insert(4, " ");
                                                                                        cccccc = cccccc.Insert(9, " ");
                                                                                        cccccc = cccccc.Insert(14, " ");
                                                                                        string bincc = Base64Encode(ccnum.Substring(0, 8));
                                                                                        string expmonth = splitbank[1];
                                                                                        string expyear = splitbank[2];
                                                                                        expyear = expyear.Substring(2);

                                                                                        string pass3d = splitbank[3];
                                                                                        string cvv = splitbank[4];
                                                                                        string namecc = splitbank[6];
                                                                                        updTStatus.BeginInvoke(1, text3 + " Payment Step 3....", tCntrlName, null, null);
                                                                                        encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"qrcode\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                        encccc = Encrypt("{\"cardnum\":\"" + bincc + "\",\"mercid\":\"28688\",\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"privatekey\":\"" + privatekey + "\",\"txn_id\":\"" + transaction_id + "\",\"mode\":\"pg\",\"errorLog\":[]}");
                                                                                        url = "https://payments.airpay.co.in/pay/v2/singleclickuser/validate_cardtype_api.php";
                                                                                        encccc = HttpUtility.UrlEncode(encccc);
                                                                                        postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                        Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                        airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                        amountss = jsonData_Serial(response, "totalamount");
                                                                                        //pay
                                                                                        //updTStatus.BeginInvoke(1, "Scan Qr and Pay....", tCntrlName, null, null);
                                                                                        encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amountss + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"upi\",\"prv_chmod\":\"\",\"customvar\":\"\",\"txnsubtype\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.00\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"13\",\"surcharge_rule\":\"{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"13\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_UPI_lessth_2k\\\",\\\"CHANNELID\\\":\\\"13\\\",\\\"CHANNEL\\\":\\\"upi\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":[],\\\"AMOUNT_FILTER_TYPE\\\":\\\"L\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"2001.00\\\",\\\"FEES_MSF\\\":\\\"0.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"action\":\"qrcode\",\"apiName\":\"collectVPA\",\"ref_url\":\"\",\"response_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX3VwaS5waHA=\",\"response_manage_upi\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmluL3VwaS9ucGNpL3Jlc3BvbnNlX21hbmFnZS5waHA=\",\"RID\":\"check\",\"VPA_TIMEOUT\":\"5\",\"QR_TIMEOUT\":\"5\",\"submode\":\"barcode\",\"errorLog\":[],\"channel_mode\":\"upi\",\"isIOS_mode\":\"android\"}";
                                                                                        encccc = "{\"transCancelledMsg\":\"TRANSACTION CANCELLED\",\"transCancelledStatus\":\"502\",\"cancel_url\":\"aHR0cHM6Ly9pcmN0Yy5ub3dwYXkuY28uaW4vcmVzcG9uc2Vmcm9tYWlycGF5LnBocA==\",\"privatekey\":\"" + privatekey + "\",\"checksum\":\"" + checksum + "\",\"mercid\":\"28688\",\"buyerEmail\":\"customer@irctc.co.in\",\"buyerPhone\":\"\",\"buyerPinCode\":\"\",\"buyerFirstName\":\"\",\"buyerLastName\":\"\",\"buyerAddress\":null,\"buyerCity\":null,\"buyerState\":null,\"buyerCountry\":null,\"amount\":\"" + amount + "\",\"orderid\":\"" + orderid + "\",\"currency\":\"356\",\"isocurrency\":\"inr\",\"chmod\":\"pg_nb_wallet_ppc\",\"prv_chmod\":\"\",\"customvar\":\"\",\"pageversion\":\"v_normal\",\"loginKey\":\"N\",\"scLoginFlag\":\"N\",\"scDefault\":\"N\",\"scUserRegistered\":\"\",\"scUserRegisteredWith\":\"\",\"tokenflg\":\"N\",\"token\":\"\",\"mer_dom\":\"aHR0cHMlM0ElMkYlMkZpcmN0Yy5ub3dwYXkuY28uaW4=\",\"transaction_id\":\"" + transaction_id + "\",\"kit_type\":\"\",\"multicurrency\":\"\",\"multicurrency_amount\":\"\",\"multicurrency_oAmt\":\"\",\"transaction_cancel\":\"Yw==\",\"transaction_bounce\":\"Yg==\",\"errormsg\":\"\",\"txn_mode\":\"LIVE\",\"expressloginflg\":\"N\",\"wallet\":\"\",\"walletflg\":\"N\",\"language\":\"\",\"merchantwalletactive\":\"\",\"scriptencrypt\":\"Y\",\"surcharge_flag\":\"Y\",\"surcharge_amount\":\"0.75\",\"subscription_flag\":\"N\",\"dunningid\":\"\",\"validatePenny\":null,\"UID\":null,\"payer_vpa\":\"\",\"sb_card_expiry_flg\":\"N\",\"RTYFLAG\":\"N\",\"PAYMENTS_DOMAIN\":\"aHR0cHM6Ly9wYXltZW50cy5haXJwYXkuY28uaW4=\",\"SECURE_DOMAIN\":\"aHR0cHM6Ly9zZWN1cmUuYWlycGF5LmNvLmlu\",\"webintent\":\"N\",\"arpyVer\":\"3\",\"onlyqrintent\":\"N\",\"offer_amt\":null,\"offer_applied\":\"N\",\"surcharge_id\":\"\",\"surcharge_rule\":\"{\\\"status\\\":\\\"200\\\",\\\"cardtype\\\":\\\"C\\\",\\\"bankname\\\":[],\\\"companyname\\\":\\\"visa\\\",\\\"country\\\":\\\"india\\\",\\\"surcharge\\\":\\\"0.75\\\",\\\"surcharge_rule\\\":{\\\"SURCHARGE_GLOBAL_RULE_ID\\\":\\\"4\\\",\\\"SURCHARGE_RULE_NAME\\\":\\\"8299_pg_cc_dom\\\",\\\"CHANNELID\\\":\\\"3\\\",\\\"CHANNEL\\\":\\\"pg\\\",\\\"PRI_TYPE\\\":\\\"0\\\",\\\"PRI_SCHEME\\\":[],\\\"CARD_COUNTRY\\\":\\\"D\\\",\\\"CHANNEL_PG_ID\\\":\\\"0\\\",\\\"CHANNEL_PG_CODE\\\":[],\\\"CARD_TYPE\\\":\\\"C\\\",\\\"AMOUNT_FILTER_TYPE\\\":\\\"G\\\",\\\"AMOUNT_FILTER_VALUE\\\":\\\"0.00\\\",\\\"FEES_MSF\\\":\\\"1.00\\\",\\\"FEES_PTC\\\":\\\"0.00\\\",\\\"SURCHARGE_CAT\\\":\\\"M\\\",\\\"SURCHARGE_BIN_FLAG\\\":\\\"N\\\"},\\\"totalamount\\\":\\\"" + amountss + "\\\"}\",\"service_tax\":18,\"billed_amt\":\"" + amountss + "\",\"user_language\":\"EN\",\"browserLanguage\":\"en-US\",\"browserColorDepth\":24,\"browserScreenHeight\":806,\"browserScreenWidth\":360,\"browserTZ\":-330,\"javaEnabled\":\"javaEnabled\",\"jsEnabled\":\"jsEnabled\",\"channel_mode\":\"credit\",\"cnumtxt\":\"" + cccccc + "\",\"cnum\":\"" + ccnum + "\",\"fullname\":\"" + namecc + "\",\"cexpiry_mm\":\"" + expmonth + "\",\"cexpiry_yy\":\"" + expyear + "\",\"cvv\":\"" + cvv + "\",\"sc_savecard\":\"N\",\"checkSurchargeCardType\":\"C\",\"checkSurchargeCardPri\":\"visa\",\"checkSurchargeCardCountry\":\"india\",\"isFormSubmit\":false,\"errorLog\":[]}";

                                                                                        encccc = Encrypt(encccc);
                                                                                        url = "https://payments.airpay.co.in/pay/v2/payment.php";
                                                                                        encccc = HttpUtility.UrlEncode(encccc);
                                                                                        postdata = "requestParam=" + encccc + "&scriptencrypt=Y";
                                                                                        Reffral = "https://payments.airpay.co.in/pay/index.php";
                                                                                        airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                        url = jsonData_Serial(response, "redirect");
                                                                                        string cardinal = url + "&3ds=1";
                                                                                        string cardref = url;
                                                                                        updTStatus.BeginInvoke(1, text3 + " Payment Step 4....", tCntrlName, null, null);
                                                                                        airpay2(url, null, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                        //otp
                                                                                        string string_96 = "";
                                                                                        string string_97 = response;
                                                                                        if (string_97.Contains("JWT"))
                                                                                        {
                                                                                            updTStatus.BeginInvoke(1, text3 + " Payment Step 5....", tCntrlName, null, null);
                                                                                            postdata = class3_0.Method_SerialInp(string_97, ref url, false);

                                                                                            bool_51 = true;
                                                                                            if (_Request(url, postdata, string_92, Proxy_, ref cookie_, true, true, 60000, 60000, ref response, ref errormsg, ref Exception_) && !string.IsNullOrEmpty(string_97))
                                                                                            {



                                                                                                Reffral = "https://secure.airpay.co.in/";
                                                                                                postdata = class3_0.Method_SerialInp(response, ref url, false);

                                                                                                string text15M = response.Substring(response.IndexOf("dfUrlFullValue") + 37);
                                                                                                url = text15M.Substring(0, text15M.IndexOf("\">"));
                                                                                                url = url + "&origin=CruiseAPI";
                                                                                                url = url.Replace("amp;", "");
                                                                                                postdata = "nonce=" + HighQualityRandomString();//ba90847b-2fa2-40eb-bf22-cb54f0585b84";


                                                                                                bool_51 = true;
                                                                                                if (_Request(url, postdata, "https://centinelapi.cardinalcommerce.com/", Proxy_, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_))
                                                                                                {
                                                                                                    Reffral = url;
                                                                                                    url = "https://geo.cardinalcommerce.com/DeviceFingerprintWeb/V2/Browser/SaveBrowserData";
                                                                                                    postdata = "{\"BinConfigIdentifiers\":[],\"Cookies\":{\"Legacy\":false,\"LocalStorage\":null,\"SessionStorage\":true},\"DeviceChannel\":\"Browser\",\"Extended\":{\"Browser\":{\"Adblock\":true,\"AvailableJsFonts\":[],\"DoNotTrack\":\"unknown\",\"JavaEnabled\":false},\"Device\":{\"ColorDepth\":24,\"Cpu\":\"unknown\",\"Platform\":\"Linux armv8l\",\"TouchSupport\":{\"MaxTouchPoints\":5,\"OnTouchStartAvailable\":true,\"TouchEventCreationSuccessful\":true}}},\"Fingerprint\":\"b000b500436d597e95a48c7c2b25bac9\",\"FingerprintingTime\":510,\"FingerprintDetails\":{\"Version\":\"1.5.1\"},\"Language\":\"en-US\",\"Latitude\":null,\"Longitude\":null,\"OrgUnitId\":\"6034c49e287c36651cb3d1a8\",\"Origin\":\"CruiseAPI\",\"Plugins\":[],\"ReferenceId\":\"8a7ea4a4-1325-433f-bb0d-2dc24dc7e2e2\",\"Referrer\":\"https://centinelapi.cardinalcommerce.com/\",\"Screen\":{\"FakedResolution\":false,\"Ratio\":2.238888888888889,\"Resolution\":\"806x360\",\"UsableResolution\":\"806x360\",\"CCAScreenSize\":\"01\"},\"CallSignEnabled\":null,\"ThreatMetrixEnabled\":\"false\",\"ThreatMetrixEventType\":\"PAYMENT\",\"ThreatMetrixAlias\":\"Default\",\"TimeOffset\":-330,\"UserAgent\":\"Mozilla/5.0 (Linux; Android 12; TECNO BF7 Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/111.0.5563.58 Mobile Safari/537.36\",\"UserAgentDetails\":{\"FakedOS\":false,\"FakedBrowser\":false},\"BinSessionId\":\"ba90847b-2fa2-40eb-bf22-cb54f0585b84\"}";
                                                                                                    airpayFuck(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                    //otp
                                                                                                    updTStatus.BeginInvoke(1, text3 + " Payment Step 6....", tCntrlName, null, null);
                                                                                                    airpay2(cardinal, null, cardref, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                    if (response.Contains("TermUrl"))
                                                                                                    {

                                                                                                        string_94 = class3_0.Method_SerialInp(response, ref string_93, false);
                                                                                                        text9 = response.Substring(response.IndexOf("PaReq") + 14);
                                                                                                        string text12 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                        text9 = response.Substring(response.IndexOf("name=\"MD") + 17);
                                                                                                        string text13MM = text9.Substring(0, text9.IndexOf("\""));
                                                                                                        text9 = response.Substring(response.IndexOf("name=\"TermUrl") + 22);
                                                                                                        string text14 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                        text14 = text14.Replace("amp;", "");
                                                                                                        if (text13MM.Contains("_______"))
                                                                                                        {
                                                                                                            text12 = WebUtility.UrlEncode(text12);
                                                                                                            text12 = text12.Replace("%0A", "%0D%0A");
                                                                                                            string_94 = "PaReq=" + text12 + "&TermUrl=" + WebUtility.UrlEncode(text14) + "&MD=" + WebUtility.UrlEncode(text13MM);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            string_94 = "MD=" + text13MM + "&PaReq=" + HttpUtility.UrlEncode(text12) + "&TermUrl=" + WebUtility.UrlEncode(text14);
                                                                                                        }
                                                                                                        bool_51 = true;
                                                                                                        if (_Request(string_93, string_94, string_92, webProxy_3, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_) && string_97.IndexOf("PayZapp secure PIN") > 0)
                                                                                                        {
                                                                                                            string_92 = string_93;
                                                                                                            string_94 = class3_0.Method_SerialInp(string_97, ref string_93, false);
                                                                                                            string_94 = clsPostData.SetPost(string_94, "txtPassword", pass3d);
                                                                                                            string text15MM = string_97.Substring(string_97.IndexOf("XID") + 12);
                                                                                                            string value5 = text15MM.Substring(0, text15MM.IndexOf("\""));
                                                                                                            string_94 = "XID=" + WebUtility.UrlEncode(value5) + "&txtLogin=-1&txtPassword=" + pass3d + "&xdeviceId=&bTz=";
                                                                                                            string_93 = "https://hdfc-acs.wibmo.com" + string_93;

                                                                                                            updTStatus.BeginInvoke(1, text3 + " Payment Step 7....", tCntrlName, null, null);
                                                                                                            bool_51 = true;
                                                                                                            if (_Request(string_93, string_94, string_92, webProxy_3, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_))
                                                                                                            {
                                                                                                                Lock("5th Hit output = " + string_97);
                                                                                                                if (string_97.IndexOf("Authentication failed") > 0)
                                                                                                                {
                                                                                                                    if (updateTStatus_1 != null)
                                                                                                                    {
                                                                                                                        updateTStatus_1.BeginInvoke(1, "Invalid PIN", tCntrlName_, null, null);
                                                                                                                    }
                                                                                                                    return false;
                                                                                                                }
                                                                                                                string_92 = string_93;
                                                                                                                string_94 = class3_0.Method_SerialInp(string_97, ref string_93, true);
                                                                                                                text9 = string_97.Substring(string_97.IndexOf("PaRes") + 14);
                                                                                                                string value6 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                text9 = string_97.Substring(string_97.IndexOf("name=\"MD") + 17);
                                                                                                                string value7 = text9.Substring(0, text9.IndexOf("\""));
                                                                                                                string_94 = "MD=" + WebUtility.UrlEncode(value7) + "&PaRes=" + WebUtility.UrlEncode(value6);
                                                                                                                //updateTStatus_1.BeginInvoke(1, "PAYZAP_Getway Int { 7/7 }", tCntrlName_, null, null);
                                                                                                                Lock("6th Hit Inp = " + string_94);
                                                                                                                if (_Request(string_93, string_94, string_92, webProxy_3, ref cookie_, true, true, 60000, 60000, ref string_97, ref string_96, ref Exception_))
                                                                                                                {
                                                                                                                    Lock("6th Hit output = " + string_97);
                                                                                                                    Reffral = string_93;
                                                                                                                    response = string_97;
                                                                                                                    //return true;
                                                                                                                }
                                                                                                                if (!response.Contains("SUCCESS"))
                                                                                                                {
                                                                                                                    flag15 = false;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                                    break;
                                                                                                                }

                                                                                                            }

                                                                                                        }
                                                                                                        else if (string_97.Contains("Notification sent to PayZapp"))
                                                                                                        {
                                                                                                            updTStatus.BeginInvoke(1, "Confirm Payment from Payzapp App..", tCntrlName, null, null);
                                                                                                            string authenticateid = string_97.Substring(string_97.IndexOf("auth-context-id") + 24);
                                                                                                            authenticateid = authenticateid.Substring(0, authenticateid.IndexOf("\" />"));
                                                                                                        ILpayzapp:
                                                                                                            url = "https://api.tachyon.hdfcbank.com/cipher3ds/edith/v1.0/tenants/1/authenticate/getStatus?authContextId=" + authenticateid;
                                                                                                            airpayPAYZAPP(url, null, "https://api.tachyon.hdfcbank.com/cipher3ds/visacipher/visacipher/pareq", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            if (response.Contains("PENDING"))
                                                                                                            {
                                                                                                                goto ILpayzapp;
                                                                                                            }
                                                                                                            response = DecodeEncodedNonAsciiCharacters(response);
                                                                                                            url = response.Substring(response.IndexOf("redirect-form") + 25);
                                                                                                            url = url.Substring(0, url.IndexOf("\""));
                                                                                                            url = url.Replace("\\", "");
                                                                                                            string mdpayzapp = response.Substring(response.IndexOf("MD\\") + 29);
                                                                                                            mdpayzapp = mdpayzapp.Substring(0, mdpayzapp.IndexOf("\""));
                                                                                                            mdpayzapp = mdpayzapp.Replace("\\", "");
                                                                                                            string pararesp = response.Substring(response.IndexOf("PaRes") + 32);
                                                                                                            pararesp = pararesp.Substring(0, pararesp.IndexOf("\""));
                                                                                                            pararesp = pararesp.Replace("\\", "");
                                                                                                            postdata = "PaRes=" + HttpUtility.UrlEncode(pararesp) + "&MD=" + mdpayzapp;
                                                                                                            airpay2(url, postdata, "https://api.tachyon.hdfcbank.com/", Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                                            if (response.Contains("FAIL"))
                                                                                                            {
                                                                                                                flag15 = false;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                        airpay2(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                        if (!response.Contains("https://www.irctc.co.in/eticketing/mbi/MobileBankResponse"))
                                                                                        {
                                                                                            flag15 = false;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                            break;
                                                                                        }
                                                                                        //postdata = class3_0.Method_SerialInp(response, ref url, false);
                                                                                        //airpay2(cardinal, null, cardref, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "payment");
                                                                                        //updTStatus.BeginInvoke(1, "Redirecting to PNR serever.....", tCntrlName, null, null);
                                                                                        encair = response.Substring(response.IndexOf("encdata") + 16);
                                                                                        encairf = encair.Substring(0, encair.IndexOf("\">"));
                                                                                        if (failissuefix)
                                                                                        {
                                                                                            url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse";
                                                                                            Reffral = "https://irctc.nowpay.co.in/";
                                                                                            postdata = "bankCode=AIRP_MOB_AG" + "&appType=ANDROID" + "&encdata=" + encairf;
                                                                                            airpay(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "air");

                                                                                        }
                                                                                        string_92 = response;
                                                                                        flag15 = true;//bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 116:
                                                                                    case 111:
                                                                                        flag15 = bank.method_159(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 30:
                                                                                        flag15 = bank.method_142(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 113:
                                                                                    case 118:
                                                                                        flag15 = bank.IRCTC_UPI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 122:
                                                                                        flag15 = bank.IRCTC_UPIHDFC(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 25:
                                                                                        flag15 = bank.method_129(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 41:
                                                                                        flag15 = bank.method_106(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 57:
                                                                                        flag15 = bank.method_115(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 36:
                                                                                        flag15 = bank.method_114(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 45:
                                                                                        flag15 = bank.method_125(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 26:
                                                                                        flag15 = bank.method_126(response, class3_0.BANKDETAILS, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 21:
                                                                                        flag15 = bank.method_165(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 1000:
                                                                                        frmOTP frmOTP22 = new frmOTP();
                                                                                        frmOTP22.method_1(control_0, rectangle_0, bool_2: false, balanceee, class3_0.BANKSAVEAS);
                                                                                        if (frmOTP22.DialogResult != DialogResult.OK)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "Enter otp", tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        class3_0.ewalletotp = frmOTP22.string_0.Trim();
                                                                                        frmOTP22.Dispose();
                                                                                        flag15 = true; //bank.PayU_Indus(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 0:
                                                                                    case 71:
                                                                                    case 77:
                                                                                    case 78:
                                                                                    case 104:
                                                                                    case 112:
                                                                                    case 117:
                                                                                    case 119:
                                                                                        flag15 = bank.PayTM(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        if (bool_54)
                                                                                        {
                                                                                            bool_54 = false;
                                                                                        }
                                                                                        break;
                                                                                    case 4205:
                                                                                        flag15 = bank.PayTM_SBI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        if (bool_54)
                                                                                        {
                                                                                            bool_54 = false;
                                                                                        }
                                                                                        break;
                                                                                    case 147:
                                                                                        flag15 = bank.IRCTC_UPICASHFREE(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        break;
                                                                                    case 4207:
                                                                                        flag15 = bank.PayTM_ICICI(response, class3_0.BANKDETAILS, text3, text6, ref string_92, ref string_95, updTStatus);
                                                                                        if (bool_54)
                                                                                        {
                                                                                            bool_54 = false;
                                                                                        }
                                                                                        break;
                                                                                }
                                                                            }
                                                                            catch (Exception)
                                                                            {
                                                                            }
                                                                            num26 = 0;
                                                                            Lock0("PayProcess", stopwatch, string_92);
                                                                            if (!flag15)
                                                                            {
                                                                                if (bool_52)
                                                                                {
                                                                                    updTStatus.BeginInvoke(2, "insufficient balance", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                                if (string_95 == "00000")
                                                                                {
                                                                                    string_95 = "insufficient funds";
                                                                                }
                                                                                updTStatus.BeginInvoke(1, string_95 + " Failed!", tCntrlName, null, null);
                                                                                if ((!string_95.Contains("Invaild Bank's Details") || !string_95.Contains("Invaild Bank Bypass Detail") || !string_95.Contains("OTP Cancelled by User") || !string_95.Contains("Clear Balance Funds not available") || !string_95.Contains("Invaild Card's Details")) && !list_12.Contains(text3 + "_Fail"))
                                                                                {
                                                                                    list_12.Add(text3 + "_Fail");
                                                                                }
                                                                                lock (object_9)
                                                                                {
                                                                                    if (list_PaySTART.Contains(TktName))
                                                                                    {
                                                                                        list_PaySTART.Remove(TktName);
                                                                                    }
                                                                                    if (list_PaySUCCESS.Contains(TktName))
                                                                                    {
                                                                                        list_PaySUCCESS.Remove(TktName);
                                                                                    }
                                                                                }
                                                                                ((ComboBox)control.Controls["cboGateway"]).Enabled = true;
                                                                                updTStatus?.BeginInvoke(1, "Choose another Payment.", tCntrlName, null, null);
                                                                                frmPayment frmPayment8 = new frmPayment();
                                                                                frmPayment8.string_1 = string_95 + "\r\n" + text21;
                                                                                frmPayment8.tktname.Text = TktName;
                                                                                frmPayment8.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                if (frmPayment8.DialogResult != DialogResult.OK)
                                                                                {
                                                                                    frmPayment8.Dispose();
                                                                                    updTStatus.BeginInvoke(2, "Paymnent Choice Cancelled by User! " + errormsg, tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                                ((ComboBox)control.Controls["cboGateway"]).Enabled = false;
                                                                                text = ((ComboBox)control.Controls["cboGateway"]).SelectedItem.ToString();
                                                                                frmPayment8.Dispose();
                                                                                updTStatus.BeginInvoke(1, "Going To Bank", tCntrlName, null, null);
                                                                                continue;
                                                                            }
                                                                            Reffral = string_95;
                                                                            goto IL_6845;
                                                                        IL_6845:
                                                                            DateTime datetime_1P = DateTime.Now;
                                                                            PNRTIME = datetime_1P.ToString("hh:mm:ss");
                                                                            updTStatus.BeginInvoke(1, "Payment Successful!", tCntrlName, null, null);
                                                                            int num32 = 0;
                                                                            flag3 = false;
                                                                            lock (object_9)
                                                                            {
                                                                                if (list_PaySUCCESS.Contains(TktName))
                                                                                {
                                                                                    flag3 = true;
                                                                                }
                                                                            }
                                                                            if (flag3)
                                                                            {
                                                                                frmPayment frmPayment9 = new frmPayment();
                                                                                if (flag3)
                                                                                {
                                                                                    frmPayment9.bool_3 = true;
                                                                                }
                                                                                else
                                                                                {
                                                                                    frmPayment9.bool_2 = true;
                                                                                }
                                                                                frmPayment9.string_1 = "anOther Ticket On Final Process";
                                                                                frmPayment frmPayment10 = frmPayment9;
                                                                                frmPayment10.string_1 = frmPayment10.string_1 + "\r\r" + text4;
                                                                                frmPayment9.tktname.Text = TktName;
                                                                                frmPayment9.method_1(control_2, rectangle_1, class3_0, class3_0.BANKSAVEAS);
                                                                                int dialogResult4 = (int)frmPayment9.DialogResult;
                                                                                frmPayment9.Dispose();
                                                                                if (dialogResult4 != 1)
                                                                                {
                                                                                    updTStatus.BeginInvoke(2, "User Select to Stop Booking! ", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            if (!flag3)
                                                                            {
                                                                                list_PaySUCCESS.Add(TktName);
                                                                            }
                                                                            lock (object_10)
                                                                            {
                                                                                if (list_PNR.Contains(TktName))
                                                                                {
                                                                                    updTStatus.BeginInvoke(204, "PNR Booked in another Pair", tCntrlName, null, null);
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            postdata = class3_0.Method_SerialInp0(string_92, ref url, bool_14: true);
                                                                            while (true)
                                                                            {
                                                                                if (text3 == "AIRTELMONEY")
                                                                                {
                                                                                    if (isAPP)
                                                                                    {
                                                                                        string text28 = "";
                                                                                        if (dictionary_5.ContainsKey(key))
                                                                                        {
                                                                                            text28 = dictionary_5[key];
                                                                                            dictionary_5.Remove(key);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            frmOTP frmOTP3 = new frmOTP();
                                                                                            frmOTP3.method_1(control_0, rectangle_0, bool_2: true, "AIRTELMONEY", class3_0.BANKSAVEAS);
                                                                                            if (frmOTP3.DialogResult != DialogResult.OK)
                                                                                            {
                                                                                                frmOTP3.Dispose();
                                                                                                updTStatus?.BeginInvoke(1, "OTP Cancell by User", tCntrlName, null, null);
                                                                                                return false;
                                                                                            }
                                                                                            text28 = frmOTP3.string_0;
                                                                                            frmOTP3.Dispose();
                                                                                        }
                                                                                        postdata = "{\"amount\":" + text20 + ",\"bankId\":91,\"errorMsg\":null,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + text28 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                        dsed = postdata;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        BankSuccess = true;
                                                                                        url = string_92;
                                                                                        postdata = string_92.Replace("https://www.irctc.co.in/eticketing/BankResponse?", "");
                                                                                    }
                                                                                }
                                                                                else if (text3 == "MOBIKWIK")
                                                                                {
                                                                                    postdata = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.airtelotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";//"{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text17 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text21 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text23 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text24 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text25 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                    dsed = postdata;
                                                                                }
                                                                                else
                                                                                {
                                                                                    string expression = postdata.Replace("&", ",");
                                                                                    string[] array12 = Strings.Split(expression, ",");
                                                                                    if ((text18 != "118" & text18 != "144" & text18 != "121"& text18 != "147" & text3 != "OTOPAY" & text3 != "E-WALLET" & text18 != "122"))//) & (text18 != "113"))

                                                                                    {
                                                                                        int num33 = Information.UBound(array12);
                                                                                        string text29 = "";
                                                                                        for (int i = 0; i <= num33; i++)
                                                                                        {
                                                                                            string[] array13 = Strings.Split(array12[i], "=");
                                                                                            text29 = text29 + "{\"key\":\"" + array13[0] + "\",\"value\":\"" + HttpUtility.UrlDecode(array13[1]) + "\"}";
                                                                                            if (i + 2 <= array12.Length)
                                                                                            {
                                                                                                text29 += ",";
                                                                                            }
                                                                                        }
                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"paramList\":[" + text29 + "],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    if (isAPP & failissuefix)
                                                                                    {
                                                                                        updTStatus.BeginInvoke(1, "Redirect To PNR Server", tCntrlName, null, null);
                                                                                        string reff = "";
                                                                                        if (text3 == "PHONEPE")
                                                                                        {
                                                                                            reff = "https://mercury-t2.phonepe.com/";
                                                                                        }
                                                                                        else if (text3 == "RAZORPAYUPI")
                                                                                        {
                                                                                            reff = "https://api.razorpay.com/v1/checkout/public/";
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            reff = "https://securegw.paytm.in";
                                                                                        }

                                                                                        Request_Type = "Bank";
                                                                                        string data = class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                        bool flag20 = airpay(url, data, reff, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Bank");
                                                                                    }
                                                                                    else if (text18 == "144")
                                                                                    {
                                                                                        string Enc = class3_0.easebuzDATA;//jsonData_Serial(string_92, "encdata");

                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":144,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    else if (text3 == "E-WALLET")
                                                                                    {
                                                                                        //postdata = "";//"{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.airtelotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";//"{\"amount\":" + text19 + ",\"apiName\":\"TRANSACT\",\"bankId\":" + text17 + ",\"paramList\":[{\"key\":\"PAYMENT_MODE\",\"value\":\"" + text21 + "\"},{\"key\":\"BANK_ID\",\"value\":\"" + text22 + "\"},{\"key\":\"BANK_NAME\",\"value\":\"" + text23 + "\"},{\"key\":\"MOBILE\",\"value\":\"" + text24 + "\"},{\"key\":\"EMAIL\",\"value\":\"" + text25 + "\"}],\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13}";
                                                                                        //postdata = "{\"transationId\":\"0\",\"bankId\":\"0\",\"txnType\":\"0\",\"txnStatus\":\"12\",\"txnDate\":\"" + class3_0.ewallettxndate + "\",\"amount\":\"" + class3_0.ewalletamount + "\",\"serverId\":\"" + class3_0.serverid + "\",\"timeStamp\":\"" + class3_0.ewallettimestamp + "\",\"upiModeOpted\":\"0\",\"remainingBalance\":\"0.0\",\"loyaltyNum\":\"0\",\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.ewalletotp + "\"},{\"key\":\"TXN_TYPE\",\"value\":\"undefined\"}]}";
                                                                                        postdata = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":1000,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"OTP\",\"value\":\"" + class3_0.ewalletotp + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":7,\"upiModeOpted\":0}";
                                                                                        dsed = postdata;
                                                                                    }
                                                                                    else if (text18 == "121")
                                                                                    {
                                                                                        string Enc = encairf;

                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":121,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    else if (text18 == "122")
                                                                                    {
                                                                                        string Enc = class3_0.hdfcupi;

                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":122,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":59,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    else if (text18 == "147")
                                                                                    {
                                                                                        string Enc = class3_0.cashfree;

                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":147,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }
                                                                                    else if (text18 == "118" & text3 != "OTOPAY")
                                                                                    {
                                                                                        //string Enc = jsonData_Serial(string_92, "encdata");
                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":" + text18 + ",\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + string_92 + "\"}],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";


                                                                                        //dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":118,\"captchaDto\":null,\"juspayLoadDTO\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                        if (failissuefix)
                                                                                        {
                                                                                            string reff = "https://www.irctcipay.com/";
                                                                                            Request_Type = "Bank";
                                                                                            string data = "encdata=" + string_92;//class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                            url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse?bankCode=IRCTC_MOB_AG&appType=ANDROID";
                                                                                            bool flag20 = airpay(url, data, reff, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Bank");

                                                                                        }

                                                                                    }
                                                                                    else if (text3 == "OTOPAY")
                                                                                    {
                                                                                        string Enc = jsonData_Serial(class3_0.otopaydata, "encdata");
                                                                                        dsed = "{\"amount\":" + text20 + ",\"apiName\":null,\"bankId\":118,\"juspayLoadDTO\":null,\"captchaDto\":null,\"errorMsg\":null,\"loyaltyNum\":0,\"paramList\":[{\"key\":\"encdata\",\"value\":\"" + Enc + "\"}],\"remainingBalance\":0.0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                        if (failissuefix)
                                                                                        {
                                                                                            string reff = "https://www.irctcipay.com/";
                                                                                            Request_Type = "Bank";
                                                                                            string data = "encdata=" + Enc;//class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                            url = "https://www.irctc.co.in/eticketing/mbi/MobileBankResponse?bankCode=IRCTC_MOB_AG&appType=ANDROID";
                                                                                            bool flag20 = airpay(url, data, reff, Proxy_, ref cookie_, bool_63: true, bool_64: true, 180000, 180000, ref response, ref errormsg, ref Exception_, "Bank");

                                                                                        }

                                                                                        //dsed = "{\"amount\":" + text19 + ",\"apiName\":null,\"bankId\":" + text17 + ",\"captchaDto\":null,\"errorMsg\":null,\"paramList\":[" + Enc + "],\"remainingBalance\":0,\"serverId\":null,\"timeStamp\":null,\"transationId\":0,\"txnDate\":null,\"txnStatus\":1,\"txnType\":13,\"upiModeOpted\":0}";
                                                                                    }

                                                                                }

                                                                                if (!isAPP && class3_0.TKT_ISADV)
                                                                                {
                                                                                    if (class3_0.bool_SL_TQ)
                                                                                    {
                                                                                        minmPaymentTime -= 4320.0;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        minmPaymentTime -= 1320.0;
                                                                                    }
                                                                                }
                                                                                int num34 = (int)minmPaymentTime - (int)(DateTime.Now - dateTimePayStart).TotalMilliseconds;
                                                                                num32++;
                                                                                if (num34 > 10)
                                                                                {
                                                                                    DateTime dateTime7 = DateTime.Now.AddMilliseconds(num34);
                                                                                    while (true)
                                                                                    {
                                                                                        TimeSpan timeSpan3 = dateTime7 - DateTime.Now;
                                                                                        string text30 = timeSpan3.Seconds + ":" + timeSpan3.Milliseconds;
                                                                                        if (timeSpan3.TotalMilliseconds <= 1.0)
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        updTStatus.BeginInvoke(1, "Final Count: " + text30, tCntrlName, null, null);
                                                                                        Thread.Sleep(50);
                                                                                        Application.DoEvents();
                                                                                    }
                                                                                }
                                                                                stopwatch2 = new Stopwatch();
                                                                                stopwatch2.Start();
                                                                                if (!isAPP)
                                                                                {
                                                                                    dictionary_TimeP["RdIRCTC"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                    updTStatus.BeginInvoke(1, "Final Hit For PNR ....", tCntrlName, null, null);
                                                                                    postdata = class3_0.Method_SerialInp(string_92, ref url, bool_14: true);
                                                                                    if (text18 == "113")
                                                                                    {
                                                                                        postdata = string_92;
                                                                                    }
                                                                                    do
                                                                                    {
                                                                                    IL_5ef7:
                                                                                        if (text3 != "AIRTELMONEY")
                                                                                        {
                                                                                            url = "https://www.irctc.co.in/eticketing/BankResponse";
                                                                                        }
                                                                                        Status = "Redirect to IRCTC";
                                                                                        bool flag20 = _httpRequest_App2(url, postdata, Reffral, "Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                        if (response.IndexOf("<form action=\"/eticketing/BankResponse\" method=\"post\">") >= 0)
                                                                                        {
                                                                                            string text31 = response.Substring(response.IndexOf("setTimeout"));
                                                                                            text31 = text31.Substring(text31.IndexOf("},") + 3);
                                                                                            text31 = text31.Substring(0, text31.IndexOf(")"));
                                                                                            int num35 = int.Parse(text31);
                                                                                            if (num35 > 50)
                                                                                            {
                                                                                                Thread.Sleep(num35);
                                                                                                goto IL_5ef7;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    while ((response == "retry") | string.IsNullOrEmpty(response));
                                                                                    DateTime dateTime8 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                                                                                    long num36 = (long)(DateTime.UtcNow - dateTime8).TotalMilliseconds;
                                                                                    class3_0.token = num36.ToString();
                                                                                    isPremium_p = false;
                                                                                    Lock0("RdIRCTC", stopwatch2, response);
                                                                                }
                                                                                postdata = null;
                                                                                stopwatch2 = new Stopwatch();
                                                                                stopwatch2.Start();
                                                                                dictionary_TimeP["FinalHit"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                                                Reffral = "";
                                                                                string text32 = "https://www.irctc.co.in/eticketing/protected/mapps1/bookingData/" + class3_0.TransactionID;
                                                                                updTStatus?.BeginInvoke(1, "Final Hit For PNR ....", tCntrlName, null, null);
                                                                                int num37 = 0;
                                                                                int num38 = 0;
                                                                                string text33 = "";
                                                                                Request_Type = "json";
                                                                                while (true)
                                                                                {
                                                                                    num38++;
                                                                                    Status = "Final Hit";
                                                                                    bool flag21 = false;
                                                                                    flag21 = _httpRequest_App2(text32, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                                                    if (!flag21 | (response == "new:retry") | string.IsNullOrEmpty(response))
                                                                                    {
                                                                                        num37++;
                                                                                        if (num37 > 9)
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "Service Unavailable Check History" + errormsg, tCntrlName, null, null);
                                                                                            return false;
                                                                                        }
                                                                                        Thread.Sleep(300);
                                                                                        continue;
                                                                                    }
                                                                                    if (num38 == 1)
                                                                                    {
                                                                                        text33 = response;
                                                                                    }
                                                                                    string text34 = "";
                                                                                    string text35 = "";
                                                                                    if (!string.IsNullOrEmpty(errormsg))
                                                                                    {
                                                                                        text34 = errormsg;
                                                                                    }
                                                                                    if (Exception_ != null)
                                                                                    {
                                                                                        text35 = Exception_.ToString();
                                                                                    }
                                                                                    Lock0("FinalHit", stopwatch2, response + "\r\n" + text34 + "\r\n" + text35);
                                                                                    if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) > 0)
                                                                                    {
                                                                                        if (text18 == "113")
                                                                                        {
                                                                                            text3 = "PHONEPE_IRCTC";
                                                                                        }
                                                                                        if (text3 == "HDFC")
                                                                                        {
                                                                                            text3 = "HDFC_Net";
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        WriteLog();
                                                                                        if (response == "retry" && num38 < 3)
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        if (response.Contains("Unable To Process Your Request.\",\"retryBooking") & (text18 == "91"))
                                                                                        {
                                                                                            break;
                                                                                        }
                                                                                        if ((response.Contains("Unable to process") && num38 < 3) || ((response.Contains("Unable to perform Transaction") | response.Contains("No Transaction found")) && num38 < 6))
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }
                                                                                    if (response.IndexOf("pnrNumber", StringComparison.CurrentCultureIgnoreCase) <= 0)
                                                                                    {
                                                                                        if ((text18 == "113") & !isAPP)
                                                                                        {
                                                                                            text3 = "PHONEPE_IRCTC";
                                                                                        }
                                                                                        response = text33;
                                                                                        if (response.Contains("timeStamp"))
                                                                                        {
                                                                                            dateTime_1 = DateTime.Parse(GetString(response, "timeStamp"));
                                                                                            if (response.Contains("errorMessage"))
                                                                                            {
                                                                                                text8 = GetString_(response, "errorMessage", "\"");
                                                                                            }
                                                                                            else if (response.Contains("bankErrorFlag\":\"true"))
                                                                                            {
                                                                                                text8 = "Payment Failed";
                                                                                            }
                                                                                            string text36 = text8.ToLower();
                                                                                            if (text36.Contains("berths") || text36.Contains("seat"))
                                                                                            {
                                                                                                string state = text3 + "||" + text8 + "||" + dateTime_1.ToString("hh:mm:ss");
                                                                                                string_91 = "faield";
                                                                                                ThreadPool.QueueUserWorkItem(sendLogToServer, state);
                                                                                                updTStatus.BeginInvoke(2, text8, tCntrlName, null, null);
                                                                                                return result;
                                                                                            }
                                                                                        }
                                                                                        string _response = "";
                                                                                        text32 = "https://www.irctc.co.in/eticketing/protected/mapps1/recentTxnsDetails";
                                                                                        string deta = null;
                                                                                        Status = "Re-Check For PNR";
                                                                                        updTStatus.BeginInvoke(1, "Re-Check For PNR...", tCntrlName, null, null);
                                                                                        if (!_httpRequest_App2(text32, deta, Reffral, "Plain123Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref _response, ref errormsg, ref Exception_))
                                                                                        {
                                                                                            updTStatus.BeginInvoke(2, "Booking Faield Check History" + errormsg, tCntrlName, null, null);
                                                                                            return result;
                                                                                        }
                                                                                        if (_response.Contains("BOOKED"))
                                                                                        {
                                                                                            lock (object_10)
                                                                                            {
                                                                                                list_PaySUCCESS.Add(TktName);
                                                                                                if (!list_PNR.Contains(TktName))
                                                                                                {
                                                                                                    list_PNR.Add(TktName);
                                                                                                }
                                                                                            }
                                                                                            try
                                                                                            {
                                                                                                string text37 = PNRTIME;//dateTime_1.ToString("hh:mm:ss");
                                                                                                updTStatus.BeginInvoke(203, "Sucess PNR:0000000000", tCntrlName, null, null);
                                                                                                string_90 = "0000000000 - " + text3 + (A_ ? "_Debit" : "_NB") + " - " + class3_0.TRAIN_NO + " - " + double_0 / 1000.0 + " - " + " - " + LoginType;
                                                                                                string text38 = "0000000000|" + text37 + "|" + text3 + "|" + LoginType + "|" + class3_0.BRD_STN + "-" + class3_0.DEST_STN + "-" + class3_0.TRAIN_NO + "|" + LoginType + "|" + class3_0.int_TotalPax;
                                                                                                Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG) VALUES('PNR','" + text38 + "')");
                                                                                                updTStatus.BeginInvoke(5, "APP2-Succes by GADAR " + text37, tCntrlName, null, null);
                                                                                                class3_0.method_4(bool_14: true, "Booking Success", text20, "0000000000", ConnectionGroupName_);
                                                                                                string status = string.Concat(new string[3]
                                                                                                {
                                                                                                    "Success",
                                                                                                    Log_(int_Slot, text3),
                                                                                                    text37
                                                                                                });
                                                                                                updTStatus.BeginInvoke(4, status, tCntrlName, null, null);
                                                                                            }
                                                                                            catch
                                                                                            {
                                                                                            }
                                                                                            result = true;
                                                                                            return result;
                                                                                        }
                                                                                        string state2 = text3 + "||" + text8 + "||" + dateTime_1.ToString("hh:mm:ss");
                                                                                        string_91 = "faield";
                                                                                        ThreadPool.QueueUserWorkItem(sendLogToServer, state2);
                                                                                        updTStatus.BeginInvoke(2, text8, tCntrlName, null, null);
                                                                                        return result;
                                                                                    }
                                                                                    lock (object_10)
                                                                                    {
                                                                                        if (!list_PNR.Contains(TktName))
                                                                                        {
                                                                                            list_PNR.Add(TktName);
                                                                                        }
                                                                                    }
                                                                                    dateTime_1 = DateTime.Parse(GetString(response, "bookingDate"));
                                                                                    string environmentVariable3 = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
                                                                                    if (environmentVariable3 != "ADMIN000056" && class3_0.TKT_ISADV)
                                                                                    {
                                                                                        if (class3_0.bool_SL_TQ)
                                                                                        {
                                                                                            dateTime_1 = dateTime_1.AddSeconds(-40.0);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            dateTime_1 = dateTime_1.AddSeconds(-8.0);
                                                                                        }
                                                                                    }
                                                                                    string text39 = PNRTIME;//dateTime_1.ToString("hh:mm:ss");
                                                                                    string string3 = GetString(response, "pnrNumber");
                                                                                    updTStatus.BeginInvoke(203, "Sucess PNR:" + string3, tCntrlName, null, null);
                                                                                    string_90 = string3 + " - " + text3 + (A_ ? "_Debit" : "_NB") + " - " + class3_0.TRAIN_NO + " - " + double_0 / 1000.0 + " - " + LoginType;
                                                                                    try
                                                                                    {
                                                                                        class3_0.method_4(bool_14: true, "Booking Success", text20, string3, ConnectionGroupName_);
                                                                                        string text40 = string3 + "|" + text39 + "|" + text3 + "|" + LoginType + "|" + class3_0.BRD_STN + "-" + class3_0.DEST_STN + "-" + class3_0.TRAIN_NO + "|" + LoginType + "|" + class3_0.int_TotalPax;
                                                                                        Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG) VALUES('PNR','" + text40 + "')");
                                                                                        updTStatus.BeginInvoke(5, "APP2-Succes by GADAR " + text39, tCntrlName, null, null);
                                                                                        bool flag22 = false;
                                                                                        string text41 = "";
                                                                                        string text42 = "0";
                                                                                        int millisecond = DateTime.Now.Millisecond;
                                                                                        DateTime dateTime9 = default(DateTime);
                                                                                        try
                                                                                        {
                                                                                        }
                                                                                        catch
                                                                                        {
                                                                                        }
                                                                                        text40 = string.Concat(new string[3]
                                                                                        {
                                                                                            "Success",
                                                                                            Log_(int_Slot, text3),
                                                                                            text39
                                                                                        });
                                                                                        if (flag22)
                                                                                        {
                                                                                            text40 = "Success" + Log_(int_Slot, text3) + text39 + "#txn" + text42 + "|" + text41;
                                                                                        }
                                                                                        updTStatus.BeginInvoke(4, text40, tCntrlName, null, null);
                                                                                        string_27 = response;
                                                                                        ThreadPool.QueueUserWorkItem(PrintTicketAPP, text40);
                                                                                        result = true;
                                                                                    }
                                                                                    catch
                                                                                    {
                                                                                        result = true;
                                                                                        return result;
                                                                                    }
                                                                                    result = true;
                                                                                    goto end_IL_5775;
                                                                                }
                                                                                continue;
                                                                            end_IL_5775:
                                                                                break;
                                                                            }
                                                                            goto end_IL_0f65;
                                                                        }
                                                                        break;
                                                                    }
                                                                    if (response.Contains("No seats available"))
                                                                    {
                                                                        updTStatus.BeginInvoke(2, "No seats available", tCntrlName, null, null);
                                                                        return false;
                                                                    }
                                                                    if (response.Contains("captchaQuestion"))
                                                                    {
                                                                        if (num10 > 2)
                                                                        {
                                                                            flag13 = true;
                                                                        }
                                                                    }
                                                                    else if (response.Contains("errorMessage"))
                                                                    {
                                                                        updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                                        return false;
                                                                    }
                                                                }
                                                                break;
                                                            }
                                                            //File.WriteAllText("Passenger_Error_" + class3_0.TransactionID, url + "\n" + postdata + "\n" + response);
                                                            if (response.IndexOf("availablityStatus") > 0)
                                                            {
                                                                updTStatus.BeginInvoke(2, GetString(response, "availablityStatus"), tCntrlName, null, null);
                                                                return false;
                                                            }
                                                            if (response.IndexOf("Unable to perform Transaction") >= 0)
                                                            {
                                                                unable = true;
                                                                break;
                                                            }
                                                            if (response.IndexOf("Unable to process current transaction") >= 0)
                                                            {
                                                                unable = true;
                                                                continue;
                                                            }
                                                            if (response.IndexOf("Invalid access token") >= 0)
                                                            {
                                                                break;
                                                            }
                                                            updTStatus.BeginInvoke(2, GetString(response, "errorMessage"), tCntrlName, null, null);
                                                            return false;
                                                        }
                                                        updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                        return false;
                                                    IL_2732:
                                                        Lock0("Availablity", stopwatch2, response);
                                                        //class3_0.TransactionID = class3_0.method_6();
                                                        long userIdd = long.Parse(s);
                                                        class3_0.TransactionID = jwtutils.getClientTransactionId(userIdd);
                                                        updTStatus.BeginInvoke(1, "Getting Bkg Captcha...", tCntrlName, null, null);
                                                        class3_0.GetBookPost(ref url, ref postdata, ref Reffral, isAPP, class3_0.TKT_ISADV);
                                                        num10 = 0;
                                                        num19 = 0;
                                                        while (true)
                                                        {
                                                            stopwatch2 = new Stopwatch();
                                                            stopwatch2.Start();
                                                            Status = "Book Ticket";
                                                            dictionary_TimeP["Book"] = DateAndTime.Now.ToString("mm:ss:fff");
                                                            bool flag23 = _httpRequest_App2(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                                                            if (response.Contains("Invalid access token"))
                                                            {
                                                                break;
                                                            }
                                                            if (response.Contains("Booking not allowed") & autorelogin)
                                                            {
                                                                continue;
                                                            }
                                                            if (!(response != "retry" && flag23))
                                                            {
                                                                if (!(response == "retry") || num10 <= 5)
                                                                {
                                                                    continue;
                                                                }
                                                                break;
                                                            }
                                                            goto IL_2869;
                                                        }
                                                        break;
                                                        continue;
                                                    end_IL_206e:
                                                        break;
                                                    }
                                                    break;
                                                }
                                                if (num10 >= 3)
                                                {
                                                    updTStatus.BeginInvoke(2, GetString_(response, "errorMessage", "\""), tCntrlName, null, null);
                                                    return false;
                                                }
                                            }
                                            else if (num10 > 3)
                                            {
                                                break;
                                            }
                                        }
                                        break;
                                    }
                                    while (num10 <= 3);
                                    break;
                                }
                                if (response.Contains("User is disabled"))
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                    Class11.smethod_1("TBL_USER", "UserState", "Disabled||" + class3_0.string_3, class3_0.IRCTC_ID);
                                    updTStatus.BeginInvoke(2, "User Is Disabled! ", tCntrlName, null, null);
                                    return false;
                                }
                                if (response.IndexOf("Bad credentials") > 0 || response.Contains("Invalid User"))
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                    Class11.smethod_1("TBL_USER", "UserState", "Invalid||" + class3_0.string_3, class3_0.IRCTC_ID);
                                    updTStatus.BeginInvoke(2, "Bad credentials! ", tCntrlName, null, null);
                                    return false;
                                }
                                if (response.IndexOf("Invalid Captcha") > 0)
                                {
                                    isLogin_Self = false;
                                    isLogin = false;
                                    break;
                                }
                                if (response.IndexOf("User is disabled") > 0)
                                {
                                    Class11.smethod_1("TBL_USER", "UserState", "Disabled||" + class3_0.string_3, class3_0.IRCTC_ID);
                                    updTStatus.BeginInvoke(2, "IRCTC ID is Disabled", tCntrlName, null, null);
                                    result = false;
                                    return result;
                                }
                                isLogin_Self = false;
                                isLogin = false;
                                break;
                            }
                            num6++;
                            if (num6 > 2)
                            {
                                s_Data_Private = "";
                                isLogin_Self = false;
                                isLogin = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        isLogin_Self = false;
                        isLogin = false;
                    }
                    continue;
                end_IL_0f65:
                    break;
                }
            }
        }
        catch (ThreadAbortException ex3)
        {
            Thread.ResetAbort();
            ("Send Log, " + ex3.Message).Contains("Thread was being aborted");
        }
        catch (Exception ex4)
        {
            try
            {
                string text43 = "";
                if (Exception_ != null)
                {
                    text43 = Exception_.ToString();
                }
                string contents = ex4.ToString() + "\n\n\n\n" + string_92 + "\n\n\n\n" + isPremium_p + "\n\n\n\n" + response + "\n\n\n\n" + text43;
                string path2 = "IRLOG/" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + "_" + DateTime.Now.ToString("hhmmssfff");
                File.WriteAllText(path2, contents);
            }
            catch (Exception)
            {
            }
            string text44 = "Send Log, " + ex4.Message;
            CountL = 0;
            failCount++;
            isLogin = false;
            updTStatus?.BeginInvoke(2, "Unable to process current Request", tCntrlName, null, null);
            method_74("PerformB:OuterCatch: ", text44 + " <ErrorDestination>" + ex4.StackTrace.ToString());
            if (!list_12.Contains(text44))
            {
                list_12.Add(text44);
                method_78(text44 + "|" + ConnectionGroupName_);
            }
        }
        finally
        {
            windowCount--;
            if (isLogin_Self)
            {
                CountL = 0;
                failCount++;
                isLogin = false;
            }
            object_4 = new object();
            lock (object_4)
            {
                if (list_IrctcID.Contains(class3_0.IRCTC_ID))
                {
                    list_IrctcID.Remove(class3_0.IRCTC_ID);
                }
            }
            if (cookie_ != null)
            {
                ThreadPool.QueueUserWorkItem(LogedOUT, false);
            }
            try
            {
                method_78(string_87 + "|" + ConnectionGroupName_);
                Write_Lock_File(updTStatus, tCntrlName, "Result=" + result);
            }
            catch
            {
            }
            if (dictionary_Pair_Process.ContainsKey(class3_0.string_20))
            {
                int num39 = dictionary_Pair_Process[class3_0.string_20];
                if (num39 != 0)
                {
                    dictionary_Pair_Process[class3_0.string_20] = num39 - 1;
                }
            }
            bool flag24 = false;
            obj2 = object_6;
            lock (obj2)
            {
                if (dictionary_2.ContainsKey(TktName))
                {
                    int num40 = dictionary_2[TktName] - 1;
                    if (num40 <= 0)
                    {
                        Interlocked.Decrement(ref int_4);
                        dictionary_2.Remove(TktName);
                        flag24 = true;
                    }
                    else
                    {
                        dictionary_2[TktName] = num40;
                    }
                }
            }
            if (flag24)
            {
                obj2 = object_8;
                lock (obj2)
                {
                    list_PaySTART.Remove(TktName);
                }
                obj2 = object_11;
                lock (obj2)
                {
                    if (list_11.Contains(TktName))
                    {
                        list_11.Remove(TktName);
                    }
                }
                if (list_IrctcID.Count <= 0)
                {
                    obj2 = object_10;
                    lock (obj2)
                    {
                        list_PNR.Clear();
                    }
                }
            }
            if (waitCallback_0 == null)
            {
                waitCallback_0 = smethod_13;
            }
            ThreadPool.QueueUserWorkItem(waitCallback_0);
        }
        return result;
    }

    private bool _httpRequest_Nex(string _url, string _deta, string _reff, string _type, bool bool_63, WebProxy webProxy_5, ref CookieContainer cookieContainer_2, bool bool_64, bool bool_65, int int_28, int int_29, ref string _response, ref string _error, ref WebException webException_1)
    {
        if (!isAPP)
        {
            int num = 0;
            bool flag = bool_21;
            if (bool_21)
            {
                bool_21 = false;
            }
            dateTime_0 = DateTime.Now;
            bool result;
            while (true)
            {
                result = false;
                bool flag2 = false;
                bool flag3 = false;
                num++;
                if (_url.Contains("bookingData") & isPremium_p)
                {
                    _url = _url.Replace("bookingData", "verifyPayment");
                    _deta = dsed;
                }
                long_0 = long_1;
                Stopwatch stopwatch = new Stopwatch();
                stopwatch.Start();
                _error = "";
                _response = "";
                string text = "";
                webException_1 = null;
                HttpWebResponse httpWebResponse = null;
                string text2 = "";
                try
                {
                    Uri uri = new Uri(_url);
                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                    if (_url.Contains("verifyPayment") & isPremium_p)
                    {
                        uriPNR = _url;
                        httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                    }
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                    httpWebRequest.ServerCertificateValidationCallback = CheckCertificate;
                    ServicePointManager.Expect100Continue = false;
                    ServicePointManager.MaxServicePoints = 10000;
                    ServicePointManager.DefaultConnectionLimit = int.MaxValue;
                    httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                    httpWebRequest.Proxy = webProxy_5;
                    httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                    httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                    HttpRequestCachePolicy cachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.NoCacheNoStore);
                    new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0));
                    httpWebRequest.CachePolicy = cachePolicy;
                    httpWebRequest.KeepAlive = true;
                    httpWebRequest.Connection = "keepalive";
                    httpWebRequest.Timeout = int_28;
                    httpWebRequest.ReadWriteTimeout = int_29;
                    httpWebRequest.Accept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, *";
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.AllowAutoRedirect = true;
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                    httpWebRequest.Headers.Add("Origin", "https://www.irctc.co.in");
                    httpWebRequest.Headers.Add("bmirak", "webbm");
                    if (flag)
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                        if (webProxy_5 != null)
                        {
                            httpWebRequest.Headers.Add("Cache-Control", "no-cache");
                            httpWebRequest.Headers.Add("Pragma", "no-cache");
                        }
                        bool_21 = false;
                    }
                    if (cookieContainer_2 == null)
                    {
                        cookieContainer_2 = new CookieContainer();
                    }
                    httpWebRequest.CookieContainer = cookieContainer_2;
                    if (_type.Contains("Plain"))
                    {
                        httpWebRequest.Accept = "application/json, text/plain, */*";
                    }
                    else if (_type.Contains("text"))
                    {
                        httpWebRequest.Accept = "text/plain";
                    }
                    else if (_type.Contains("Java"))
                    {
                        httpWebRequest.Accept = "application/json";
                    }
                    if (_type.Contains("1") && !string.IsNullOrEmpty(class3_0._greq))
                    {
                        httpWebRequest.Headers.Add("greq", class3_0._greq);
                    }
                    if (_type.Contains("2"))
                    {
                        httpWebRequest.Headers.Add("spa-csrf-token", class3_0.token);
                    }
                    if (_type.Contains("3"))
                    {
                        httpWebRequest.Headers.Add("Authorization", class3_0._Authorization);
                    }
                    if (_type.Contains("Final"))
                    {
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    }
                    else if (_type.Contains("text"))
                    {
                        httpWebRequest.ContentType = "text/plain";
                    }
                    else if (_type.Contains("json"))
                    {
                        httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    }
                    else
                    {
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    }
                    if (!string.IsNullOrEmpty(string_70))
                    {
                        string value = string_70;
                        string_70 = null;
                        httpWebRequest.Headers.Add("lso", value);
                        string_70 = null;
                    }
                    if (bool_0)
                    {
                        bool_0 = false;
                        httpWebRequest.Headers.Add("authority", "www.google.com");
                        httpWebRequest.Accept = "*/*";
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded;charset=UTF-8";
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                        if (!string.IsNullOrEmpty(string_64))
                        {
                            httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/" + string_64 + " Safari/537.36";
                        }
                        httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                        httpWebRequest.Headers.Add("origin", "https://www.google.com");
                        httpWebRequest.Headers.Add("sec-fetch-dest", "empty");
                        httpWebRequest.Headers.Add("sec-fetch-mode", "cors");
                        httpWebRequest.Headers.Add("sec-fetch-site", "same-origin");
                        httpWebRequest.Headers.Add("x-client-data", "CKG1yQEIjrbJAQimtskBCMG2yQEIqZ3KAQi3uMoBCKzHygEI9cfKAQjnyMoBCOnIygEItMvKAQiNz8oBCNvVygEYisHKAQ==");
                    }
                    if (_url.Contains("https://www.irctc.co.in/eticketing/PaymentRedirect"))
                    {
                        httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                        HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.NoCacheNoStore));
                    }
                    if (_type.Contains("akm"))
                    {
                        httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                        httpWebRequest.ContentType = "text/plain;charset=UTF-8";
                        _reff = "https://www.irctc.co.in/nget/train-search";
                    }
                    if (!string.IsNullOrEmpty(_reff))
                    {
                        httpWebRequest.Referer = _reff;
                    }
                    if (!string.IsNullOrEmpty(_deta))
                    {
                        httpWebRequest.Method = "POST";
                        byte[] bytes = Encoding.UTF8.GetBytes(_deta);
                        httpWebRequest.ContentLength = bytes.Length;
                        httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                    }
                    else
                    {
                        httpWebRequest.Method = "GET";
                    }
                    httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                    switch (httpWebResponse.StatusCode)
                    {
                        case HttpStatusCode.MovedPermanently:
                        case HttpStatusCode.Found:
                        case HttpStatusCode.SeeOther:
                        case HttpStatusCode.TemporaryRedirect:
                            text2 = httpWebResponse.GetResponseHeader("Location");
                            if (text2.IndexOf("https://") == 0)
                            {
                                if (num >= 4 || text2.IndexOf("booking-confirm") > 0)
                                {
                                    break;
                                }
                                httpWebResponse.Close();
                                httpWebResponse = null;
                                _url = text2;
                                _deta = "";
                            }
                            else
                            {
                                if (text2.IndexOf("/") != 0 || num >= 4)
                                {
                                    break;
                                }
                                httpWebResponse.Close();
                                httpWebResponse = null;
                                int num2 = text2.IndexOf("/") + 1;
                                int num3 = text2.IndexOf("/", num2);
                                string value2 = text2.Substring(num2, num3 - num2);
                                _url = _url.Substring(0, _url.IndexOf(value2) - 1) + text2;
                                _deta = "";
                            }
                            goto end_IL_00c1;
                        case HttpStatusCode.NotModified:
                        case HttpStatusCode.UseProxy:
                        case HttpStatusCode.Unused:
                            text2 = "retry";
                            break;
                        default:
                            {
                                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                                {
                                    text2 = streamReader.ReadToEnd();
                                }
                                break;
                            }
                    }
                    if (httpWebResponse.Headers["csrf-token"] != null)
                    {
                        class3_0.token = httpWebResponse.Headers["csrf-token"];
                    }
                    _response = text2;
                    flag3 = true;
                    result = true;
                    Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\nURL:" + _url + "\nPostData:" + _deta + "\nReponse:" + _response);
                    if (string.IsNullOrEmpty(_response))
                    {
                        if (_url.Contains("avlFareenquiry"))
                        {
                            class3_0.bool_13 = true;
                        }
                        _response = "retry";
                    }
                    if (_url.Contains("avlFareenquiry") && _response.Contains("Unable to process your request"))
                    {
                        class3_0.bool_13 = true;
                    }
                    goto IL_0da1;
                end_IL_00c1:;
                }
                catch (WebException ex)
                {
                    WebException ex2 = (webException_1 = ex);
                    string text3 = "";
                    HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                    if (ex2.Response != null)
                    {
                        try
                        {
                            if (ex2.Response.Headers["csrf-token"] != null)
                            {
                                class3_0.token = ex2.Response.Headers["csrf-token"];
                            }
                            text3 = (_response = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd());
                        }
                        catch
                        {
                        }
                        httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                    }
                    _error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + ex2.Message + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                    method_74("WebRequestPost WebEx=", _error);
                    flag2 = true;
                    if (_error.Contains("The remote name could not be resolved") | _error.Contains("Unable to connect to the remote server"))
                    {
                        if (num < 3)
                        {
                            if (_error.ToUpper().Contains("SERVICEUNAVAILABLE"))
                            {
                                Thread.Sleep(2000);
                            }
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    if (!_error.Contains("Unable to connect to the remote server"))
                    {
                        if (_error.Contains("The underlying connection was closed:"))
                        {
                            if (_error.Contains("An unexpected error occurred on a send"))
                            {
                                string_52 = "Tls12";
                                if (num < 3)
                                {
                                    Thread.Sleep(400);
                                }
                                else
                                {
                                    flag3 = true;
                                }
                            }
                            else if (_error.Contains("A connection that was expected to be kept alive was closed by the server") || _error.Contains("An unexpected error occurred on a receive"))
                            {
                                Thread.Sleep(5000);
                                _response = "";
                                _error = "A connection that was expected to be kept alive was closed by the server";
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                        {
                            string_52 = "Tls12";
                            if (num < 3)
                            {
                                Thread.Sleep(400);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("The operation has timed out"))
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "The operation has timed out";
                            flag3 = true;
                        }
                        else if (_error.Contains("(406) Not Acceptable") | _error.Contains("(401) Unauthorized"))
                        {
                            flag3 = true;
                        }
                        else if (_error.Contains("(404) Not Found") | _error.Contains("(409) Conflict"))
                        {
                            flag3 = true;
                        }
                        else if (_error.Contains("(400) Bad Request"))
                        {
                            flag3 = true;
                            text = ex2.Response.Headers["csrf-token"];
                        }
                        else if (_error.Contains("(500) Internal Server Error"))
                        {
                            if (num <= 6)
                            {
                                Thread.Sleep(1000);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("(502) Bad Gateway"))
                        {
                            if (num <= 6)
                            {
                                Thread.Sleep(1000);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("(503) Server Unavailable"))
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag3 = true;
                        }
                        else if (_error.Contains("(504) Gateway Timeout"))
                        {
                            if (num < 6)
                            {
                                Thread.Sleep(1000);
                            }
                        }
                        else
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag3 = true;
                        }
                        goto IL_0da1;
                    }
                }
                catch (Exception ex3)
                {
                    _error = ex3.Message;
                    method_74("WebRequestPost Ex=", _error);
                    if (num > 2)
                    {
                        flag3 = true;
                    }
                    goto IL_0da1;
                }
                finally
                {
                    try
                    {
                        httpWebResponse?.Close();
                    }
                    catch
                    {
                    }
                }
                goto IL_0d86;
            IL_0d86:
                if (!bool_63 && !flag2)
                {
                    return result;
                }
                continue;
            IL_0da1:
                if (!string.IsNullOrEmpty(text))
                {
                    class3_0.token = text;
                }
                if (flag3)
                {
                    break;
                }
                if (num > 3)
                {
                }
                goto IL_0d86;
            }
            return result;
        }
        return ConnectHttp_Nex(_url, _deta, null, webProxy_5, ref cookieContainer_2, bool_63: true, bool_64: true, int_28, int_29, ref _response, ref _error, ref webException_1, _type);
    }

    private bool NgtHttpReq_App2(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _resp, ref string _error, ref WebException webEx, string _type)
    {
        if (!isAPP)
        {
            int num = 0;
            int num2 = 0;
            bool flag = false;
            bool flag2 = bool_21;
            long_0 = long_1;
            if (bool_21)
            {
                bool_21 = false;
            }
            dateTime_0 = DateTime.Now;
            bool flag4;
            bool flag5;
            bool result;
            do
            {
                bool flag3 = false;
                flag4 = false;
                flag5 = false;
                Stopwatch stopwatch = new Stopwatch();
                stopwatch.Start();
                _error = "";
                _resp = "";
                webEx = null;
                result = false;
                HttpWebResponse httpWebResponse = null;
                string text = "";
                try
                {
                    Uri requestUri = new Uri(_url);
                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUri);
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                    HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                    ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                    ServicePointManager.Expect100Continue = false;
                    httpWebRequest.KeepAlive = true;
                    httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                    httpWebRequest.Proxy = webProxy_5;
                    httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                    httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                    httpWebRequest.Timeout = int_28;
                    httpWebRequest.ReadWriteTimeout = int_29;
                    httpWebRequest.CookieContainer = _cookie;
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.AllowAutoRedirect = false;
                    httpWebRequest.Connection = "keepalive";
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                    httpWebRequest.Headers.Add("bmirak", "webbm");
                    if (_url.Contains("secure.paytm.in/oltp-web/processTransaction") && _data.Contains("MSISDN"))
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*;q=0.8";
                        httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                        httpWebRequest.Headers.Set("Accept-Language", "en-GB,en-US;q=0.8");
                        httpWebRequest.Headers.Set("Origin", "null");
                    }
                    if (_type == "Bank")
                    {
                        httpWebRequest.Headers.Set("Accept-Language", "en-US,en;q=0.8");
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                    }
                    if (flag2)
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                        bool_21 = false;
                    }
                    if (_type.Contains("Plain"))
                    {
                        httpWebRequest.Accept = "application/json, text/plain, */*";
                        httpWebRequest.Headers.Add("Content-Language", "en");
                    }
                    else if (_type.Contains("text"))
                    {
                        httpWebRequest.Accept = "text/plain";
                    }
                    else if (_type.Contains("Java"))
                    {
                        httpWebRequest.Accept = "application/json";
                    }
                    if (!string.IsNullOrEmpty(class3_0._greq))
                    {
                        httpWebRequest.Headers.Add("greq", class3_0._greq);
                    }
                    if (!string.IsNullOrEmpty(class3_0.token))
                    {
                        httpWebRequest.Headers.Add("spa-csrf-token", class3_0.token);
                    }
                    if (!string.IsNullOrEmpty(class3_0._Authorization))
                    {
                        httpWebRequest.Headers.Add("Authorization", class3_0._Authorization);
                    }
                    if (_type.Contains("text"))
                    {
                        httpWebRequest.ContentType = "text/plain";
                    }
                    else if (_type.Contains("json"))
                    {
                        httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    }
                    else
                    {
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    }
                    if (!string.IsNullOrEmpty(_reff))
                    {
                        httpWebRequest.Referer = _reff;
                    }
                    if (!string.IsNullOrEmpty(_data))
                    {
                        httpWebRequest.Method = "POST";
                        byte[] bytes = Encoding.UTF8.GetBytes(_data);
                        httpWebRequest.ContentLength = bytes.Length;
                        httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                    }
                    else
                    {
                        httpWebRequest.Method = "GET";
                    }
                    httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                    if (flag3 && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num2 < 20)
                    {
                        Thread.Sleep(200);
                        num2++;
                        httpWebResponse.Close();
                        httpWebResponse = null;
                        continue;
                    }
                    if (bool_22)
                    {
                        dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                    }
                    if (bool_24)
                    {
                        string_29 = httpWebResponse.ResponseUri.ToString();
                    }
                    using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                    {
                        if (bool_64)
                        {
                            text = streamReader.ReadToEnd();
                        }
                        else
                        {
                            httpWebRequest.Abort();
                        }
                    }
                    if (httpWebResponse.Headers["csrf-token"] != null)
                    {
                        class3_0.token = httpWebResponse.Headers["csrf-token"];
                    }
                    if (bool_22)
                    {
                        dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                    }
                    _resp = text;
                    result = true;
                    stopwatch.Stop();
                    long_1 = stopwatch.ElapsedMilliseconds;
                    long_2 = (long_1 + long_0) / 2;
                    Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\nURL:" + _url + "\nPostData:" + _data + "\nReponse:" + _resp);
                }
                catch (WebException ex)
                {
                    WebException ex2 = (webEx = ex);
                    string text2 = "";
                    HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                    if (ex2.Response != null)
                    {
                        try
                        {
                            if (ex2.Response.Headers["csrf-token"] != null)
                            {
                                class3_0.token = ex2.Response.Headers["csrf-token"];
                            }
                            text2 = (_resp = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd());
                        }
                        catch
                        {
                        }
                        httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                    }
                    _error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + ex2.Message + "</ErrorCode>\t<ResponseCode>" + text2 + "</ResponseCode>";
                    method_74("WebRequestPost WebEx=\t", _error);
                    flag4 = true;
                    if (_error.Contains("The remote name could not be resolved") | _error.Contains("Unable to connect to the remote server"))
                    {
                        if (num < 3)
                        {
                            method_74("WebRequestPost Error ", "SERVICE UNAVAILABLE Rehit = " + num);
                            if (_error.ToUpper().Contains("SERVICEUNAVAILABLE"))
                            {
                                Thread.Sleep(2000);
                            }
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("The underlying connection was closed:"))
                    {
                        if (_error.Contains("An unexpected error occurred on a send"))
                        {
                            if (num < 3)
                            {
                                Thread.Sleep(400);
                            }
                            else
                            {
                                flag5 = true;
                            }
                        }
                        else if (_error.Contains("A connection that was expected to be kept alive was closed by the server") || _error.Contains("An unexpected error occurred on a receive"))
                        {
                            _resp = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                    {
                        if (num < 3)
                        {
                            Thread.Sleep(400);
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("The operation has timed out"))
                    {
                        _resp = "new:goahead";
                        _error = "The operation has timed out";
                        flag5 = true;
                    }
                    else if (_error.Contains("(401) Unauthorized"))
                    {
                        flag5 = true;
                    }
                    else if (_error.Contains("(406) Not Acceptable"))
                    {
                        _resp = "";
                        flag5 = true;
                    }
                    else if (_error.Contains("(400) Bad Request"))
                    {
                        flag5 = true;
                    }
                    else if (_error.Contains("(404) Not Found") | _error.Contains("(409) Conflict"))
                    {
                        flag5 = true;
                    }
                    else if (_error.Contains("(500) Internal Server Error"))
                    {
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("(502) Bad Gateway"))
                    {
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("(503) Server Unavailable"))
                    {
                        _resp = "";
                        _error = "A connection that was expected to be kept alive was closed by the server";
                        flag5 = true;
                    }
                    else if (_error.Contains("(504) Gateway Timeout"))
                    {
                        if (num < 6)
                        {
                            Thread.Sleep(1000);
                        }
                    }
                    else
                    {
                        _resp = "new:goahead";
                        _error = "A connection that was expected to be kept alive was closed by the server";
                        flag5 = true;
                    }
                }
                catch (Exception ex3)
                {
                    _error = ex3.Message;
                    method_74("WebRequestPost Ex=\t", _error);
                }
                finally
                {
                    try
                    {
                        httpWebResponse?.Close();
                    }
                    catch
                    {
                    }
                }
            }
            while (!flag5 && (flag || flag4));
            return result;
        }
        return ConnectHttp_App2(_url, _data, null, webProxy_5, ref _cookie, bool_63: true, bool_64: true, int_28, int_29, ref _resp, ref _error, ref webEx, _type);
    }

    private bool ConnectHttp_Nex(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        if (_url.Contains("www.irctc") & (_Type_ != "Bank"))
        {
            _url = _url.Replace("www", "www.contents");
        }
        if (_url.Contains("validateUser?source=3"))
        {
            _url = _url.Replace("validateUser?source=3", "validateUser?source=1");
        }
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.UserAgent = "IRCTC Rail Connect/3.1.38iOS";
                httpWebRequest.Headers.Add("bmirak", "iosbm");
                httpWebRequest.Headers.Add("bmiyek", bmikey);
                if (_url.Contains("secure.paytm.in/oltp-web/processTransaction") && _data.Contains("MSISDN"))
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                    httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 7.0; SM-G925F Build/LMY47X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36";
                    httpWebRequest.Headers.Set("Accept-Language", "en-GB,en-US;q=0.8");
                    httpWebRequest.Headers.Set("Origin", "null");
                }
                if (_Type_ == "Bank")
                {
                    httpWebRequest.Headers.Set("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.Headers.Set("Accept-Language", "en-US,en-IN;q=0.9,en;q=0.8");
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 12; CPH2413 Build/SKQ1.220303.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.5481.153 Mobile Safari/537.36";
                    httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                }
                if ((_Type_ != "Bank") & (_Type_ != "pay"))
                {
                    httpWebRequest.Accept = "application/json; charset=UTF-8";
                    if (_Type_ != "Login")
                    {
                        httpWebRequest.Headers.Set("greq", greq);
                        httpWebRequest.Headers.Set("mup", mup);
                    }
                }
                if (_Type_ == "pay")
                {
                    httpWebRequest.UserAgent = "Dalvik/2.1.0 (Linux; U; Android 6.0.1; SM-J500F Build/MMB29M)";
                    httpWebRequest.AllowAutoRedirect = true;
                }
                if ((_Type_ == "validateUser") | (_Type_ == "GetTrain"))
                {
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Logincnf")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }
                if (_Type_ == "json")
                {
                    httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    httpWebRequest.Accept = "application/json; charset=UTF-8";
                    httpWebRequest.Headers.Add("content-language", "en");
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Plain135text")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                    httpWebRequest.Headers.Set("greq", greq);
                }
                if (_Type_ == "Login")
                {
                    httpWebRequest.Headers.Add("Authorization", "Basic " + _Authrization);
                    httpWebRequest.Accept = "*/*";
                    httpWebRequest.Headers.Add("content-language", "en-IN,en-GB;q=0.9,en;q=0.8");
                }
                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        _reponse = "retry";
                    }
                    goto IL_0ce0;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                    }
                    goto IL_0ce0;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0ce0;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0ce0;
            IL_0ce0:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }

    private bool ConnectHttp_App2(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        if (_url.Contains("www.irctc") & (_Type_ != "Bank"))
        {
            _url = _url.Replace("www", "www.contents");
        }
        if (_url.Contains("validateUser?source=3"))
        {
            _url = _url.Replace("validateUser?source=3", "validateUser?source=1");
        }
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.UserAgent = "IRCTC Rail Connect - for RAIL SAARTHI/5.2.12Android";
                httpWebRequest.Headers.Add("bmirak", "androidbm");
                //httpWebRequest.Headers.Add("bmiyek", "84B79C6BB893629D26B99D123359F3CB");99E1A0691356795F7A09EA2320681741
                httpWebRequest.Headers.Add("bmiyek", bmikey);
                if (_url.Contains("secure.paytm.in/oltp-web/processTransaction") && _data.Contains("MSISDN"))
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                    httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 7.0; SM-G925F Build/LMY47X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36";
                    httpWebRequest.Headers.Set("Accept-Language", "en-GB,en-US;q=0.8");
                    httpWebRequest.Headers.Set("Origin", "null");
                }
                if (_Type_ == "Bank")
                {
                    httpWebRequest.Headers.Set("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.Headers.Set("Accept-Language", "en-US,en-IN;q=0.9,en;q=0.8");
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 12; CPH2413 Build/SKQ1.220303.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.5481.153 Mobile Safari/537.36";
                    httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                }
                if ((_Type_ != "Bank") & (_Type_ != "pay"))
                {
                    httpWebRequest.Accept = "application/json; charset=UTF-8";
                    if (_Type_ != "Login")
                    {
                        httpWebRequest.Headers.Set("greq", greq);
                        httpWebRequest.Headers.Set("mup", mup);
                    }
                }
                if (_Type_ == "pay")
                {
                    httpWebRequest.UserAgent = "Dalvik/2.1.0 (Linux; U; Android 6.0.1; SM-J500F Build/MMB29M)";
                    httpWebRequest.AllowAutoRedirect = true;
                }
                if ((_Type_ == "validateUser") | (_Type_ == "GetTrain"))
                {
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Logincnf")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }
                if (_Type_ == "json")
                {
                    httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    httpWebRequest.Accept = "application/json; charset=UTF-8";
                    httpWebRequest.Headers.Add("content-language", "en");
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Plain135text")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                    httpWebRequest.Headers.Set("greq", greq);
                }
                if (_Type_ == "Login")
                {
                    httpWebRequest.Headers.Add("Authorization", "Basic " + _Authrization);
                    httpWebRequest.Accept = "*/*";
                    httpWebRequest.Headers.Add("content-language", "en-IN,en-GB;q=0.9,en;q=0.8");
                }
                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        _reponse = "retry";
                    }
                    goto IL_0ce0;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                    }
                    goto IL_0ce0;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0ce0;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0ce0;
            IL_0ce0:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }

    public static string RandomString(int length)
    {
        return new string((from s in Enumerable.Repeat("0123456789", length)
                           select s[random.Next(s.Length)]).ToArray());
    }

    private bool _httpRequest_App2(string _url, string _deta, string _reff, string _type, bool bool_63, WebProxy webProxy_5, ref CookieContainer cookieContainer_2, bool bool_64, bool bool_65, int int_28, int int_29, ref string _response, ref string _error, ref WebException webException_1)
    {
        if (!isAPP)
        {
            int num = 0;
            bool flag = bool_21;
            if (bool_21)
            {
                bool_21 = false;
            }
            dateTime_0 = DateTime.Now;
            bool result;
            while (true)
            {
                result = false;
                bool flag2 = false;
                bool flag3 = false;
                num++;
                if (_url.Contains("bookingData") & isPremium_p)
                {
                    _url = _url.Replace("bookingData", "verifyPayment");
                    _deta = dsed;
                }
                long_0 = long_1;
                Stopwatch stopwatch = new Stopwatch();
                stopwatch.Start();
                _error = "";
                _response = "";
                string text = "";
                webException_1 = null;
                HttpWebResponse httpWebResponse = null;
                string text2 = "";
                try
                {
                    Uri uri = new Uri(_url);
                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                    if (_url.Contains("verifyPayment") & isPremium_p)
                    {
                        uriPNR = _url;
                        httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                    }
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                    httpWebRequest.ServerCertificateValidationCallback = CheckCertificate;
                    ServicePointManager.Expect100Continue = false;
                    ServicePointManager.MaxServicePoints = 10000;
                    ServicePointManager.DefaultConnectionLimit = int.MaxValue;
                    httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                    httpWebRequest.Proxy = webProxy_5;
                    httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                    httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                    HttpRequestCachePolicy cachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.NoCacheNoStore);
                    new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0));
                    httpWebRequest.CachePolicy = cachePolicy;
                    httpWebRequest.KeepAlive = true;
                    httpWebRequest.Connection = "keepalive";
                    httpWebRequest.Timeout = int_28;
                    httpWebRequest.ReadWriteTimeout = int_29;
                    httpWebRequest.Accept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*";
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.AllowAutoRedirect = true;
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                    httpWebRequest.Headers.Add("Origin", "https://www.irctc.co.in");
                    httpWebRequest.Headers.Add("bmirak", "webbm");
                    if (flag)
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                        if (webProxy_5 != null)
                        {
                            httpWebRequest.Headers.Add("Cache-Control", "no-cache");
                            httpWebRequest.Headers.Add("Pragma", "no-cache");
                        }
                        bool_21 = false;
                    }
                    if (cookieContainer_2 == null)
                    {
                        cookieContainer_2 = new CookieContainer();
                    }
                    httpWebRequest.CookieContainer = cookieContainer_2;
                    if (_type.Contains("Plain"))
                    {
                        httpWebRequest.Accept = "application/json, text/plain, */*";
                    }
                    else if (_type.Contains("text"))
                    {
                        httpWebRequest.Accept = "text/plain";
                    }
                    else if (_type.Contains("Java"))
                    {
                        httpWebRequest.Accept = "application/json";
                    }
                    if (_type.Contains("1") && !string.IsNullOrEmpty(class3_0._greq))
                    {
                        httpWebRequest.Headers.Add("greq", class3_0._greq);
                    }
                    if (_type.Contains("2"))
                    {
                        httpWebRequest.Headers.Add("spa-csrf-token", class3_0.token);
                    }
                    if (_type.Contains("3"))
                    {
                        httpWebRequest.Headers.Add("Authorization", class3_0._Authorization);
                    }
                    if (_type.Contains("Final"))
                    {
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    }
                    else if (_type.Contains("text"))
                    {
                        httpWebRequest.ContentType = "text/plain";
                    }
                    else if (_type.Contains("json"))
                    {
                        httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    }
                    else
                    {
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    }
                    if (!string.IsNullOrEmpty(string_70))
                    {
                        string value = string_70;
                        string_70 = null;
                        httpWebRequest.Headers.Add("lso", value);
                        string_70 = null;
                    }
                    if (bool_0)
                    {
                        bool_0 = false;
                        httpWebRequest.Headers.Add("authority", "www.google.com");
                        httpWebRequest.Accept = "*/*";
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded;charset=UTF-8";
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                        if (!string.IsNullOrEmpty(string_64))
                        {
                            httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/" + string_64 + " Safari/537.36";
                        }
                        httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                        httpWebRequest.Headers.Add("origin", "https://www.google.com");
                        httpWebRequest.Headers.Add("sec-fetch-dest", "empty");
                        httpWebRequest.Headers.Add("sec-fetch-mode", "cors");
                        httpWebRequest.Headers.Add("sec-fetch-site", "same-origin");
                        httpWebRequest.Headers.Add("x-client-data", "CKG1yQEIjrbJAQimtskBCMG2yQEIqZ3KAQi3uMoBCKzHygEI9cfKAQjnyMoBCOnIygEItMvKAQiNz8oBCNvVygEYisHKAQ==");
                    }
                    if (_url.Contains("https://www.irctc.co.in/eticketing/PaymentRedirect"))
                    {
                        httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                        HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.NoCacheNoStore));
                    }
                    if (_type.Contains("akm"))
                    {
                        httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                        httpWebRequest.ContentType = "text/plain;charset=UTF-8";
                        _reff = "https://www.irctc.co.in/nget/train-search";
                    }
                    if (!string.IsNullOrEmpty(_reff))
                    {
                        httpWebRequest.Referer = _reff;
                    }
                    if (!string.IsNullOrEmpty(_deta))
                    {
                        httpWebRequest.Method = "POST";
                        byte[] bytes = Encoding.UTF8.GetBytes(_deta);
                        httpWebRequest.ContentLength = bytes.Length;
                        httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                    }
                    else
                    {
                        httpWebRequest.Method = "GET";
                    }
                    httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                    switch (httpWebResponse.StatusCode)
                    {
                        case HttpStatusCode.MovedPermanently:
                        case HttpStatusCode.Found:
                        case HttpStatusCode.SeeOther:
                        case HttpStatusCode.TemporaryRedirect:
                            text2 = httpWebResponse.GetResponseHeader("Location");
                            if (text2.IndexOf("https://") == 0)
                            {
                                if (num >= 4 || text2.IndexOf("booking-confirm") > 0)
                                {
                                    break;
                                }
                                httpWebResponse.Close();
                                httpWebResponse = null;
                                _url = text2;
                                _deta = "";
                            }
                            else
                            {
                                if (text2.IndexOf("/") != 0 || num >= 4)
                                {
                                    break;
                                }
                                httpWebResponse.Close();
                                httpWebResponse = null;
                                int num2 = text2.IndexOf("/") + 1;
                                int num3 = text2.IndexOf("/", num2);
                                string value2 = text2.Substring(num2, num3 - num2);
                                _url = _url.Substring(0, _url.IndexOf(value2) - 1) + text2;
                                _deta = "";
                            }
                            goto end_IL_00c1;
                        case HttpStatusCode.NotModified:
                        case HttpStatusCode.UseProxy:
                        case HttpStatusCode.Unused:
                            text2 = "retry";
                            break;
                        default:
                            {
                                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                                {
                                    text2 = streamReader.ReadToEnd();
                                }
                                break;
                            }
                    }
                    if (httpWebResponse.Headers["csrf-token"] != null)
                    {
                        class3_0.token = httpWebResponse.Headers["csrf-token"];
                    }
                    _response = text2;
                    flag3 = true;
                    result = true;
                    Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\nURL:" + _url + "\nPostData:" + _deta + "\nReponse:" + _response);
                    if (string.IsNullOrEmpty(_response))
                    {
                        if (_url.Contains("avlFareenquiry"))
                        {
                            class3_0.bool_13 = true;
                        }
                        _response = "retry";
                    }
                    if (_url.Contains("avlFareenquiry") && _response.Contains("Unable to process your request"))
                    {
                        class3_0.bool_13 = true;
                    }
                    goto IL_0da1;
                end_IL_00c1:;
                }
                catch (WebException ex)
                {
                    WebException ex2 = (webException_1 = ex);
                    string text3 = "";
                    HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                    if (ex2.Response != null)
                    {
                        try
                        {
                            if (ex2.Response.Headers["csrf-token"] != null)
                            {
                                class3_0.token = ex2.Response.Headers["csrf-token"];
                            }
                            text3 = (_response = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd());
                        }
                        catch
                        {
                        }
                        httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                    }
                    _error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + ex2.Message + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                    method_74("WebRequestPost WebEx=", _error);
                    flag2 = true;
                    if (_error.Contains("The remote name could not be resolved") | _error.Contains("Unable to connect to the remote server"))
                    {
                        if (num < 3)
                        {
                            if (_error.ToUpper().Contains("SERVICEUNAVAILABLE"))
                            {
                                Thread.Sleep(2000);
                            }
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    if (!_error.Contains("Unable to connect to the remote server"))
                    {
                        if (_error.Contains("The underlying connection was closed:"))
                        {
                            if (_error.Contains("An unexpected error occurred on a send"))
                            {
                                string_52 = "Tls12";
                                if (num < 3)
                                {
                                    Thread.Sleep(400);
                                }
                                else
                                {
                                    flag3 = true;
                                }
                            }
                            else if (_error.Contains("A connection that was expected to be kept alive was closed by the server") || _error.Contains("An unexpected error occurred on a receive"))
                            {
                                Thread.Sleep(5000);
                                _response = "";
                                _error = "A connection that was expected to be kept alive was closed by the server";
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                        {
                            string_52 = "Tls12";
                            if (num < 3)
                            {
                                Thread.Sleep(400);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("The operation has timed out"))
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "The operation has timed out";
                            flag3 = true;
                        }
                        else if (_error.Contains("(406) Not Acceptable") | _error.Contains("(401) Unauthorized"))
                        {
                            flag3 = true;
                        }
                        else if (_error.Contains("(404) Not Found") | _error.Contains("(409) Conflict"))
                        {
                            flag3 = true;
                        }
                        else if (_error.Contains("(400) Bad Request"))
                        {
                            flag3 = true;
                            text = ex2.Response.Headers["csrf-token"];
                        }
                        else if (_error.Contains("(500) Internal Server Error"))
                        {
                            if (num <= 6)
                            {
                                Thread.Sleep(1000);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("(502) Bad Gateway"))
                        {
                            if (num <= 6)
                            {
                                Thread.Sleep(1000);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("(503) Server Unavailable"))
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag3 = true;
                        }
                        else if (_error.Contains("(504) Gateway Timeout"))
                        {
                            if (num < 6)
                            {
                                Thread.Sleep(1000);
                            }
                        }
                        else
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag3 = true;
                        }
                        goto IL_0da1;
                    }
                }
                catch (Exception ex3)
                {
                    _error = ex3.Message;
                    method_74("WebRequestPost Ex=", _error);
                    if (num > 2)
                    {
                        flag3 = true;
                    }
                    goto IL_0da1;
                }
                finally
                {
                    try
                    {
                        httpWebResponse?.Close();
                    }
                    catch
                    {
                    }
                }
                goto IL_0d86;
            IL_0d86:
                if (!bool_63 && !flag2)
                {
                    return result;
                }
                continue;
            IL_0da1:
                if (!string.IsNullOrEmpty(text))
                {
                    class3_0.token = text;
                }
                if (flag3)
                {
                    break;
                }
                if (num > 3)
                {
                }
                goto IL_0d86;
            }
            return result;
        }
        return ConnectHttp_App2(_url, _deta, null, webProxy_5, ref cookieContainer_2, bool_63: true, bool_64: true, int_28, int_29, ref _response, ref _error, ref webException_1, _type);
    }

    private bool ConnectHttp_server2(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        if (_url.Contains("www.irctc") & (_Type_ != "Bank"))
        {
            _url = _url.Replace("www", "www.contents");
        }
        if (_url.Contains("nlpCaptchaException=true"))
        {
            _url = _url.Replace("nlpCaptchaException=true", "nlpCaptchaException=nil");
        }
        if (_url.Contains("validateUser?source=3"))
        {
            _url = ((!s_Data_Private.Contains("3,a,")) ? _url.Replace("validateUser?source=3", "validateUser?source=1") : _url.Replace("validateUser?source=3", "validateUser"));
        }
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        if (Request_Type == "Base")
        {
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                //httpWebRequest.UserAgent = "IRCTC Rail Connect/4.2.0Android";
                httpWebRequest.UserAgent = "IRCTC Rail Connect/3.1.32iOS";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.Headers.Add("bmirak", "iosbm");
                if (_url.Contains("secure.paytm.in/oltp-web/processTransaction") && _data.Contains("MSISDN"))
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                    httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 7.0; SM-G925F Build/LMY47X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36";
                    httpWebRequest.Headers.Set("Accept-Language", "en-GB,en-US;q=0.8");
                    httpWebRequest.Headers.Set("Origin", "null");
                }
                if (_Type_ == "Bank")
                {
                    httpWebRequest.Headers.Set("Accept-Language", "en-US,en;q=0.8");
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*;q=0.8";
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 7.0; SM-G935F Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36";
                }
                //if (s_Data_Private.Contains("3,a,"))
                //{
                //    s_Data_Private = s_Data_Private.Replace(" ", "+");
                //    if (SensorDataSend)
                //    {
                //    }
                //    httpWebRequest.UserAgent = "IRCTC Rail Connect/3.1.30iOS";
                //    httpWebRequest.Headers.Add("bmirak", "androidbm");
                //}
                //else
                //{
                //    if (SensorDataSend)
                //    {
                //    }
                //    httpWebRequest.UserAgent = "IRCTC Rail Connect/3.1.30iOS";
                //    httpWebRequest.Headers.Add("bmirak", "iosbm");
                //}
                if ((_Type_ != "Bank") & (_Type_ != "pay"))
                {
                    httpWebRequest.Accept = "application/json";
                    if (_Type_ != "Login")
                    {
                        httpWebRequest.Headers.Set("greq", greq);
                        httpWebRequest.Headers.Set("mup", mup);
                    }
                }
                if (_Type_ == "pay")
                {
                    httpWebRequest.UserAgent = "Dalvik/2.1.0 (Linux; U; Android 6.0.1; SM-J500F Build/MMB29M)";
                    httpWebRequest.AllowAutoRedirect = true;
                }
                if ((_Type_ == "validateUser") | (_Type_ == "GetTrain"))
                {
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Logincnf")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }
                if (_Type_ == "json")
                {
                    httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    httpWebRequest.Accept = "application/json";
                    httpWebRequest.Headers.Add("content-language", "en");
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Plain135text")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                    httpWebRequest.Headers.Set("greq", greq);
                }
                if (_Type_ == "Login")
                {
                    httpWebRequest.Headers.Add("Authorization", "Basic " + _Authrization);
                    httpWebRequest.Accept = "*/*";
                    httpWebRequest.Headers.Add("content-language", "en-IN,en-GB;q=0.9,en;q=0.8");
                }
                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_22)
                {
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        _reponse = "retry";
                    }
                    goto IL_0d9e;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                    }
                    goto IL_0d9e;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0d9e;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0d9e;
            IL_0d9e:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }

    private void Sensor_Data_offline()
    {
        while (true)
        {
            try
            {
                mac = Environment.GetEnvironmentVariable("mac", EnvironmentVariableTarget.Process);
                clientID = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
                string text = string.Concat(new string[3] { "{\"data\":\"", clientID, "\",\"sCount\":14,\"MSG\":\"false\"}" });
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create("https://akamai-data.com/api/enter/offline");
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                httpWebRequest.Timeout = 60000;
                httpWebRequest.ReadWriteTimeout = 60000;
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "POST";
                using (StreamWriter streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    string value = text;
                    streamWriter.Write(value);
                }
                HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    string text2 = streamReader.ReadToEnd();
                    if (text2.Length > 100)
                    {
                        string text3 = text2.Replace("\"", "");
                        list_SensorData_ADV = new List<string>();
                        if (text3.Contains("|--|"))
                        {
                            string[] array = text3.Split(new string[1] { "|--|" }, StringSplitOptions.None);
                            for (int i = 0; i < array.Length - i; i++)
                            {
                                string text4 = array[array.Length - i - 1];
                                array[array.Length - i - 1] = array[i];
                                array[i] = text4;
                            }
                            string[] array2 = array;
                            string[] array3 = array2;
                            foreach (string text5 in array3)
                            {
                                if (text5.Length > 100)
                                {
                                    list_SensorData_ADV.Add(text5);
                                }
                            }
                        }
                        akmint = 0;
                        break;
                    }
                    if (text2.Contains("\"") || text2.Contains("Maximum limit reach"))
                    {
                        break;
                    }
                }
                Application.DoEvents();
                Thread.Sleep(3000);
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("(404) Not Found"))
                {
                    MessageBox.Show("Please Restart Application");
                    break;
                }
                Application.DoEvents();
                Thread.Sleep(3000);
            }
        }
    }


    private void Akamai_Sensor_Data_Test(object j)
    {
        string text = "";
        bool flag = true;
        try
        {
            mac = Environment.GetEnvironmentVariable("mac", EnvironmentVariableTarget.Process);
            clientID = Environment.GetEnvironmentVariable("clientID", EnvironmentVariableTarget.Process);
            string text2 = "{\"data\":\"" + edata + "\",\"macAddress\":\"" + mac + "\",\"MSG\":\"false\"}";
            HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create("https://akamai-data.com/api/enter/DTS");
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
            httpWebRequest.Timeout = 60000;
            httpWebRequest.ReadWriteTimeout = 60000;
            httpWebRequest.ContentType = "application/json";
            httpWebRequest.Method = "POST";
            using (StreamWriter streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
            {
                string value = text2;
                streamWriter.Write(value);
            }
            HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
            using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
            {
                string text3 = streamReader.ReadToEnd();
                if (text3.Length > 100)
                {
                    list_SensorData = new List<string>();
                    text = text3.Replace("\"", "");
                    list_SensorData.Add(text);
                    list_SensorData.Add(text);
                    list_SensorData.Add(text);
                }
            }
        }
        catch (Exception)
        {
        }
    }



    private bool method_42(string string_86, string string_87, string string_88)
    {
        bool result = false;
        string_87 = "\"bankId\":\"" + string_87.Trim() + "\"";
        try
        {
            result = true;
            string text = string_86.Substring(string_86.IndexOf("bankDetailDTO"));
            text = text.Substring(text.IndexOf("[") + 1);
            text = text.Substring(0, text.LastIndexOf("]"));
            List<string> list = class3_0.method_11(text);
            int count = list.Count;
            result = false;
            for (int i = 0; i < count; i++)
            {
                if (list[i].ToString().Split(',')[0].Contains(string_87))
                {
                    result = true;
                }
            }
            return result;
        }
        catch
        {
            return result;
        }
    }

    internal bool LoadNlpCaptcha(string string_86, ref string string_87, ref Bitmap bitmap_2, ref string string_88)
    {
        while (true)
        {
            bool result = false;
            try
            {
                string string_89;
                string text5;
                while (true)
                {
                    string text = string_86.ToString();
                    CookieContainer cookieContainer = new CookieContainer();
                    string_89 = "";
                    string string_90 = "";
                    string s = "{\"key\":\"af0fae7e47f828891f5f9ed48aae2ce0\",\"ajax\":1,\"token\":\"" + text + "\",\"flashsupport\":0,\"html5audio\":\"wav\",\"url\":\"https%3A%2F%2Firctclive.nlpcaptcha.in%2F\",\"mandatorytype\":\"\",\"nlpRefCnt\":\"2\",\"theme_size\":\"20x120\"}";
                    string text3;
                    if (isAPP)
                    {
                        string text2 = Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
                        text3 = "https://irctclive.nlpcaptcha.in/index.php/nlpgen/nlpimg/refresh/" + text2;
                    }
                    else
                    {
                        new Cookie("WMONID", "P5k5aty6TgV").Domain = "irctclive.nlpcaptcha.in";
                        new Cookie("nlpcaptchasessid", "nlpcaptcha9a7a519c419997c608a5e3d85f12c422").Domain = "irctclive.nlpcaptcha.in";
                        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                        long num = (long)(DateTime.UtcNow - dateTime).TotalMilliseconds;
                        s = "{\"irctc_class_code\":\"" + class3_0.TKT_CLASS + "\",\"irctc_arrival_date\":\"" + class3_0.dateTime_0.ToString("ddMMyyy") + "\",\"irctc_journey_date\":\"" + class3_0.dateTime_0.ToString("ddMMyyy") + "\",\"irctc_from_station_code\":\"" + class3_0.SRC_STN + "\",\"irctc_quota\":\"" + class3_0.TKT_QUOTA + "\",\"irctc_to_station\":\"" + class3_0.DEST_STN + "\",\"irctc_train_type\":\"O\",\"irctc_age\":44,\"irctc_gender\":\"M\",\"key\":\"f2c5d744485b0b4251461454db791111\",\"ajax\":1,\"ajaxContainer\":\"ShowNLPCaptcha\",\"token\":\"" + text + "\",\"html5audio\":\"wav\",\"t\":" + num + ",\"mandatorytype\":\"\",\"nlpRefCnt\":\"2\",\"theme_size\":\"20x120\"}";
                        string text4 = Convert.ToBase64String(Encoding.UTF8.GetBytes(s));
                        text3 = "https://irctclive.nlpcaptcha.in/index.php/nlpgen/nlpimg/refresh/" + text4;
                    }
                    string string_91 = "https://www.irctc.co.in/nget/booking/psgninput";
                    if (method_83(text3, "", string_91, webProxy_3, ref cookieContainer, true, true, 180000, 180000, ref string_89, ref string_90, ref Exception_, access_token))
                    {
                        if (string_89.Contains("png;base64"))
                        {
                            text5 = string_89.Substring(string_89.IndexOf("data") + 5);
                            text5 = text5.Substring(text5.IndexOf("data") + 5);
                            text5 = text5.Substring(text5.IndexOf("base64,") + 7);
                            text5 = text5.Substring(0, text5.IndexOf("\""));
                            bitmap_0 = new Bitmap(method_23(string_88 = text5.Replace("\\", "")));
                            if (bitmap_0 != null)
                            {
                                break;
                            }
                        }
                        if (!string_89.Contains("captcha"))
                        {
                            Thread.Sleep(3000);
                        }
                        else if (!string_89.Contains("gethtml5location"))
                        {
                            string_91 = text3;
                            text5 = string_89.Substring(string_89.IndexOf("nlpIdentifier") + 45);
                            string_87 = text5.Substring(0, text5.IndexOf("\\"));
                            if (string_89.Contains("getTC"))
                            {
                                text5 = string_89.Substring(string_89.IndexOf("getTC") + 7);
                                text3 = "https://irctclive.nlpcaptcha.in/index.php/media/getTC/" + text5.Substring(0, text5.IndexOf("\\")) + "/banner";
                            }
                            else if (string_89.Contains("classicaptcha"))
                            {
                                text5 = string_89.Substring(string_89.IndexOf("classicaptcha") + 14);
                                text3 = "https://irctclive.nlpcaptcha.in/index.php/media/classicaptcha/" + text5.Substring(0, text5.IndexOf("\\\"")) + "/100x150";
                            }
                            else
                            {
                                text5 = string_89.Substring(string_89.IndexOf("getit") + 7);
                                text3 = "https://irctclive.nlpcaptcha.in/index.php/media/getit/" + text5.Substring(0, text5.IndexOf("\\\"")) + "/banner";
                            }
                            bool bool_ = false;
                            string string_92 = "";
                            int int_ = 0;
                            DateTime dateTime_ = DateTime.Now.AddMilliseconds(400.0);
                            bitmap_0 = method_101(text3, string_91, webProxy_2, ref cookieContainer, true, 40000, ref bool_, ref Exception_, ref string_92, ref dateTime_, ref int_);
                            if (bitmap_0 != null)
                            {
                                string_88 = method_48(bitmap_0);
                                bitmap_2 = bitmap_0;
                                return true;
                            }
                            return result;
                        }
                        continue;
                    }
                    return result;
                }
                text5 = string_89.Substring(string_89.IndexOf("nlpIdentifier") + 45);
                string_87 = text5.Substring(0, text5.IndexOf("\\"));
                bitmap_2 = bitmap_0;
                return true;
            }
            catch (Exception)
            {
                Application.DoEvents();
                Thread.Sleep(5000);
            }
        }
    }

    private string method_48(Image image_0)
    {
        try
        {
            MemoryStream memoryStream = new MemoryStream();
            image_0.Save(memoryStream, ImageFormat.Bmp);
            memoryStream.Position = 0L;
            return Convert.ToBase64String(memoryStream.ToArray());
        }
        catch (Exception)
        {
            return "Error converting image to base64!";
        }
    }

    private string GetString_(string string_86, string string_87, string string_88)
    {
        try
        {
            int num = string_87.Length + 3;
            string text = string_86.Substring(string_86.IndexOf(string_87) + num);
            return text.Substring(0, text.IndexOf(string_88));
        }
        catch (Exception ex)
        {
            return ex.ToString();
        }
    }

    private DateTime GetTimeStamp(string string_86, int int_28)
    {
        DateTime result = DateTime.Now;
        try
        {
            result = DateTime.Parse(GetString_(string_86, "timeStamp", "\"")).AddMilliseconds(0.0 - (double)int_28);
            return result;
        }
        catch
        {
            return result;
        }
    }

    private void Method_GetBookingHRS()
    {
        if (class3_0.bool_opening)
        {
            int_AvlHRS = 7;
            int_BookHRS = 8;
        }
        else if (bool_ptSL)
        {
            int_AvlHRS = 10;
            int_BookHRS = 11;
        }
        else if (!bool_ptSL)
        {
            int_AvlHRS = 9;
            int_BookHRS = 10;
        }
    }

    private void Write_Lock_File(UpdateTStatus updateTStatus_2, string string_86, string string_87)
    {
        ThreadPool.QueueUserWorkItem(method_78, string_87 + "|" + ConnectionGroupName_);
    }

    internal Image method_55(string string_86)
    {
        Image result = null;
        try
        {
            byte[] array = Convert.FromBase64String(string_86);
            using (MemoryStream stream = new MemoryStream(array, 0, array.Length))
            {
                result = Image.FromStream(stream, true);
                return result;
            }
        }
        catch
        {
            return result;
        }
    }

    private void LogedOUT(object object_18)
    {
        try
        {
            CookieContainer cookieContainer = cookie_;
            bool flag = (bool)object_18;
            int int_ = 10000;
            if (flag)
            {
                int_ = 3000;
            }
            Reffral = url;
            url = "https://www.irctc.co.in/eticketing/protected/mapps1/logout";
            method_100(url, Reffral, null, ref cookieContainer, true, false, int_, ref response, ref bool_19, ref Exception_, ref httpStatusCode_0, ref errormsg);
        }
        catch
        {
        }
    }


    private void PrintTicketAPP_Old(object object_18)
    {

        string text = string_27;
        object_18.ToString();
        try
        {
            string text2 = text.Substring(text.IndexOf("destArrvDate") + 15);
            text2 = text2.Substring(0, text2.IndexOf("\""));
            string newValue = DateTime.Parse(text2).ToString("dd-MMM-yyyy HH:mm");
            text2 = text.Substring(text.IndexOf("bookingDate") + 14);
            text2 = text2.Substring(0, text2.IndexOf("\""));
            DateTime dateTime = default(DateTime);
            dateTime = DateTime.Parse(text2);
            if (class3_0.bool_AC_TQ)
            {
                dateTime = dateTime.AddSeconds(-7.0);
            }
            if (class3_0.bool_SL_TQ & class3_0.TKT_ISADV)
            {
                dateTime = dateTime.AddSeconds(-40.0);
            }
            string newValue2 = dateTime.ToString("dd-MMM-yyyy HH:mm:ss");
            text2 = text.Substring(text.IndexOf("qrCodeText"));
            string text3 = Gettext(string_27, "boardingDate");
            text3 = text3.Replace(":\"", "").Replace("\"", "");
            DateTime dateTime2 = default(DateTime);
            text3 = DateTime.Parse(text3).ToString("HH:mm dd-MMM-yyyyy");
            string newValue3 = Gettext(text2, "Class");
            string newValue4 = Gettext(text2, "Quota");
            string @string = GetString(text, "pnrNumber");
            string string2 = GetString(text, "trainNumber");
            string string3 = GetString(text, "trainName");
            string2 = string2 + " / " + string3;
            string newValue5 = Gettext(text, "TXN ID");
            string string4 = GetString(text, "resvnUptoStnName");
            string4 = string4 + "(" + GetString(text, "resvnUptoStn") + ")";
            string string5 = GetString(text, "boardingStnName");
            string5 = string5 + "(" + GetString(text, "boardingStn") + ")";
            string string6 = GetString(text, "distance");
            string string7 = GetString(text, "sacCode");
            string string8 = GetString(text, "totalFare");
            string string9 = GetString(text, "serviceChargeTotal");
            string string10 = GetString(text, "totalCollectibleAmount");
            string ticket = Class13.Ticket;
            ticket = ticket.Replace("pnrno_", @string).Replace("18183 / TATA DNR EXP", string2).Replace("GENERAL (GN)", newValue4)
                .Replace("invoiceno_", newValue5)
                .Replace("30-Jul-2022 21:10:46 Hrs", newValue2)
                .Replace("SECOND SITTING (2S)", newValue3)
                .Replace("MOKAMEH JN (MKA)", string4)
                .Replace("HATHIDAH JN (HTZ)", string5)
                .Replace("8 KM", string6 + " KM")
                .Replace("16:52 05-Aug-2022", text3)
                .Replace("17:06 05-Aug-2022", newValue)
                .Replace("45.00", string8)
                .Replace("45.0", string8)
                .Replace("11.80", string9)
                .Replace("56.80", string10);
            text2 = text.Substring(text.IndexOf("qrCodeText"));
            string text4;
            if (text.IndexOf("psgnDtlList\":[") > 0)
            {
                text4 = text.Substring(text.IndexOf("psgnDtlList\":[") + "psgnDtlList\":[".Length);
                text4 = text4.Substring(0, text4.IndexOf("]"));
            }
            else
            {
                text4 = text.Substring(text.IndexOf("psgnDtlList\":") + "psgnDtlList\":".Length);
                text4 = text4.Substring(0, text4.IndexOf("}"));
            }
            string[] array = text4.Split(new string[1] { "},{" }, StringSplitOptions.None);
            string string11 = GetString(text2, "qrCodeText");
            text2 = "";
            int num = 0;
            string text5 = "<tr _ngcontent-els-c88=\"\" align=\"center\" style=\"padding-top: 10px; font-family: Calibri; font-size: 14px; color: black;\" class=\"ng-star-inserted\"><td _ngcontent-els-c88=\"\" width=\"3%\">paxnum_.</td><td _ngcontent-els-c88=\"\" width=\"19%\" align=\"left\">AKRAM</td><td _ngcontent-els-c88=\"\" width=\"7%\" align=\"left\">&nbsp;&nbsp;numage_</td><td _ngcontent-els-c88=\"\" width=\"9%\" align=\"left\">&nbsp;&nbsp;<span _ngcontent-els-c88=\"\" class=\"ng-star-inserted\">&nbsp;&nbsp;</span><!---->numgender_</td><!----><td width=\"25%\" style=\"font-family: Calibri; font-size: 14px; color: black;\" class=\"ng-star-inserted\" align=\"left\" _ngcontent-bce-c88=\"\"> &nbsp;<span _ngcontent-vlb-c88=\"\" class=\"ng-star-inserted\">CNF/00/00/NO CHOICE</span></td><!----><!----><!----><!----><!----><td width=\"25%\" style=\"font-family: Calibri; font-size: 14px; color: black;\" class=\"ng-star-inserted\" align=\"left\" _ngcontent-bce-c88=\"\"> &nbsp;<span _ngcontent-vlb-c88=\"\" class=\"ng-star-inserted\">CNF/00/00/NO CHOICE</span></td><!----><!----><!----><!----><!----><!----></tr>";
            for (int i = 0; i < array.Length; i++)
            {
                num++;
                string text6 = array[i].Substring(array[i].IndexOf("currentStatus\":"));
                string text7 = text6.Substring(text6.IndexOf("currentStatus\":") + ("currentStatus\":".Length + 1));
                string text8 = text7.Substring(0, text7.IndexOf("\""));
                string newValue6 = text8 + "/" + GetString(array[i], "currentCoachId") + "/" + GetString(array[i], "currentBerthNo") + "/" + GetString(array[i], "currentBerthCode");
                text2 += text5.Replace("paxnum_", num.ToString()).Replace("AKRAM", GetString(array[i], "passengerName")).Replace("numage_", GetString(array[i], "passengerAge"))
                    .Replace("numgender_", GetString(array[i], "passengerGender").Replace("M", "Male").Replace("F", "Female"))
                    .Replace("CNF/00/00/NO CHOICE", newValue6);
            }
            ticket = ticket.Replace("paxdata_", text2).Replace("28-Jun-2022 12:10:29 HRS", newValue2).Replace("Adult: 2 Child: 1", "Adult: 0 Child: 0");
            Image graphic = new QRCode(new QRCodeGenerator().CreateQrCode(string11, QRCodeGenerator.ECCLevel.L)).GetGraphic(20);
            string newValue7 = method_48(graphic);
            ticket = ticket.Replace("base_64", newValue7);
            string path = "Print_" + @string + "_" + string5 + "_" + string4 + ".htm";
            string text9 = "Print_" + string5 + "_" + string4 + "_" + @string;
            byte[] bytes = Encoding.ASCII.GetBytes(ticket);
            ticket = Encoding.ASCII.GetString(bytes).Replace("?", "");
            string path2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "Print");
            path2 = Path.Combine(path2, "WEB");
            if (!Directory.Exists(path2))
            {
                Directory.CreateDirectory(path2);
            }
            string text10 = Path.Combine(path2, path);
            File.WriteAllText(text10, ticket, Encoding.GetEncoding("windows-1255"));
            try
            {
                new GetService().GetServic(text10, text9);
            }
            catch (Exception)
            {
            }
        }
        catch
        {
        }
    }

    //testt
    private void PrintTicketAPP(object object_18)
    {
        //string pathhhh = @"C:\Users\Administrator\Desktop\new 10.txt";
        //string_27 = File.ReadAllText(pathhhh);
        string text = string_27;
        object_18.ToString();
        try
        {
            string text2 = text.Substring(text.IndexOf("destArrvDate") + 15);
            text2 = text2.Substring(0, text2.IndexOf("\""));
            string newValue = DateTime.Parse(text2).ToString("dd-MMM-yyyy HH:mm");
            text2 = text.Substring(text.IndexOf("bookingDate") + 14);
            text2 = text2.Substring(0, text2.IndexOf("\""));
            DateTime dateTime = default(DateTime);
            dateTime = DateTime.Parse(text2);
            if (class3_0.bool_AC_TQ)
            {
                dateTime = dateTime.AddSeconds(-7.0);
            }
            if (class3_0.bool_SL_TQ & class3_0.TKT_ISADV)
            {
                dateTime = dateTime.AddSeconds(-40.0);
            }
            string newValue2 = dateTime.ToString("dd-MMM-yyyy HH:mm:ss");
            text2 = text.Substring(text.IndexOf("qrCodeText"));
            string text3 = Gettext(string_27, "boardingDate");
            text3 = text3.Replace(":\"", "").Replace("\"", "");
            DateTime dateTime2 = default(DateTime);
            text3 = DateTime.Parse(text3).ToString("HH:mm dd-MMM-yyyyy");
            string text33 = DateTime.Parse(text3).ToString("dd-MMM-yyyyy");
            string newValue3 = Gettext(text2, "Class");
            string newValue4 = Gettext(text2, "Quota");
            string @string = GetString(text, "pnrNumber");
            string string2 = GetString(text, "trainNumber");
            string string3 = GetString(text, "trainName");
            string2 = string2 + " / " + string3;
            string newValue5 = Gettext(text, "TXN ID");
            string string4 = GetString(text, "resvnUptoStnName");
            string4 = string4 + " - " + GetString(text, "resvnUptoStn");

            string string5 = GetString(text, "boardingStnName");
            string5 = string5 + " - " + GetString(text, "boardingStn");
            string string55 = GetString(text, "boardingStnName");
            string55 = string55 + "(" + GetString(text, "boardingStn") + ")";

            string string6 = GetString(text, "distance");
            string string7 = GetString(text, "sacCode");
            string string8 = GetString(text, "totalFare");
            string string9 = GetString(text, "serviceChargeTotal");
            string string10 = GetString(text, "totalCollectibleAmount");
            string reservationid = GetString(text, "reservationid");

            string ticket = Class13.Tickettt;
            ticket = ticket.Replace("pnrno_", @string).Replace("13018 / GANADEVTA EXP", string2).Replace("GENERAL (GN)", newValue4)
                .Replace("invoiceno_", newValue5)
                .Replace("05-Sep-2023 22:02:06 HRS", newValue2)
                .Replace("SECOND SITTING (2S)", newValue3)
                .Replace("HOWRAH JN - HWH (Howrah / Kolkata)", string4)
                .Replace("SEORAPHULI - SHE (Howrah / Kolkata)", string5)
                .Replace("SEORAPHULI (SHE)", string55)
                .Replace("23 KM", string6 + " KM")
                .Replace("21:01 10-Sep-2022", text3)
                .Replace("10-Sep-2022", text33)
                .Replace("21:45ss 10-SepP-2021", newValue)
                .Replace("21:45ss","")
                .Replace("45.00", string8)
                .Replace("45.0", string8)
                .Replace("11.80", string9)
                .Replace("56.80", string10)
                .Replace("100004422328824", reservationid);
            text2 = text.Substring(text.IndexOf("qrCodeText"));
            string text4;
            if (text.IndexOf("psgnDtlList\":[") > 0)
            {
                text4 = text.Substring(text.IndexOf("psgnDtlList\":[") + "psgnDtlList\":[".Length);
                text4 = text4.Substring(0, text4.IndexOf("]"));
            }
            else
            {
                text4 = text.Substring(text.IndexOf("psgnDtlList\":") + "psgnDtlList\":".Length);
                text4 = text4.Substring(0, text4.IndexOf("}"));
            }
            string[] array = text4.Split(new string[1] { "},{" }, StringSplitOptions.None);
            string string11 = GetString(text2, "qrCodeText");
            text2 = "";
            int num = 0;
            string text5 = "<tr _ngcontent-els-c88=\"\" align=\"center\" style=\"padding-top: 10px; font-family: Calibri; font-size: 14px; color: black;\" class=\"ng-star-inserted\"><td _ngcontent-els-c88=\"\" width=\"3%\">paxnum_.</td><td _ngcontent-els-c88=\"\" width=\"19%\" align=\"left\">AKRAM</td><td _ngcontent-els-c88=\"\" width=\"7%\" align=\"left\">&nbsp;&nbsp;numage_</td><td _ngcontent-els-c88=\"\" width=\"9%\" align=\"left\">&nbsp;&nbsp;<span _ngcontent-els-c88=\"\" class=\"ng-star-inserted\">&nbsp;&nbsp;</span><!---->numgender_</td><!----><td width=\"25%\" style=\"font-family: Calibri; font-size: 14px; color: black;\" class=\"ng-star-inserted\" align=\"left\" _ngcontent-bce-c88=\"\"> &nbsp;<span _ngcontent-vlb-c88=\"\" class=\"ng-star-inserted\">CNF/00/00/NO CHOICE</span></td><!----><!----><!----><!----><!----><td width=\"25%\" style=\"font-family: Calibri; font-size: 14px; color: black;\" class=\"ng-star-inserted\" align=\"left\" _ngcontent-bce-c88=\"\"> &nbsp;<span _ngcontent-vlb-c88=\"\" class=\"ng-star-inserted\">CNF/00/00/NO CHOICE</span></td><!----><!----><!----><!----><!----><!----></tr>";
            for (int i = 0; i < array.Length; i++)
            {
                num++;
                string text6 = array[i].Substring(array[i].IndexOf("currentStatus\":"));
                string text7 = text6.Substring(text6.IndexOf("currentStatus\":") + ("currentStatus\":".Length + 1));
                string text8 = text7.Substring(0, text7.IndexOf("\""));
                string newValue6 = text8 + "/" + GetString(array[i], "currentCoachId") + "/" + GetString(array[i], "currentBerthNo") + "/" + GetString(array[i], "currentBerthCode");
                text2 += text5.Replace("paxnum_", num.ToString()).Replace("AKRAM", GetString(array[i], "passengerName")).Replace("numage_", GetString(array[i], "passengerAge"))
                    .Replace("numgender_", GetString(array[i], "passengerGender").Replace("M", "Male").Replace("F", "Female"))
                    .Replace("CNF/00/00/NO CHOICE", newValue6);
            }
            ticket = ticket.Replace("paxdata_", text2).Replace("28-Jun-2022 12:10:29 HRS", newValue2).Replace("Adult: 2 Child: 1", "Adult: 0 Child: 0");
            Image graphic = new QRCode(new QRCodeGenerator().CreateQrCode(string11, QRCodeGenerator.ECCLevel.L)).GetGraphic(20);
            string newValue7 = method_48(graphic);
            ticket = ticket.Replace("base_64", newValue7);
            string path = "Print_" + @string + "_" + string5 + "_" + string4 + ".htm";
            string text9 = "Print_" + string5 + "_" + string4 + "_" + @string;
            byte[] bytes = Encoding.ASCII.GetBytes(ticket);
            ticket = Encoding.ASCII.GetString(bytes).Replace("?", "");
            string path2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "Print");
            path2 = Path.Combine(path2, "WEB");
            if (!Directory.Exists(path2))
            {
                Directory.CreateDirectory(path2);
            }
            string text10 = Path.Combine(path2, path);
            File.WriteAllText(text10, ticket, Encoding.GetEncoding("windows-1255"));
            try
            {
                new GetService().GetServic(text10, text9);
            }
            catch (Exception)
            {
            }
        }
        catch
        {
        }
    }

    private void PrintTicket(object object_18)
    {
        //string pathhhh = @"C:\Users\Administrator\Desktop\MyTest - Copy.txt";
        //string_27 = File.ReadAllText(pathhhh);
        // IL_0893: Unknown result type(might be due to invalid IL or missing references)
        string text = string_27;
        object_18.ToString();
        try
        {
            string @string = GetString(text, "pnrNumber");
            string string2 = GetString(text, "trainNo");
            string newValue = string2;
            string string3 = GetString(text, "trainName");
            string2 = string2 + " / " + string3;
            string string4 = GetString(text, "quota");
            string string5 = GetString(text, "invoiceNumber");
            string string6 = GetString(text, "dateOfBooking");
            string6 = string6.Replace(" HRS", "");
            DateTime dateTime = default(DateTime);
            dateTime = DateTime.Parse(string6);
            if (class3_0.bool_AC_TQ)
            {
                dateTime = dateTime.AddSeconds(-7.0);
            }
            if (class3_0.bool_SL_TQ & class3_0.TKT_ISADV)
            {
                dateTime = dateTime.AddSeconds(-40.0);
            }
            string6 = dateTime.ToString("dd-MMM-yyyy HH:mm:ss");
            string6 += " HRS";
            string string7 = GetString(text, "classCode");
            string string8 = GetString(text, "fromStationName");
            string8 = string8 + " - " + GetString(text, "fromStation");
            string8 = string8 + "(" + GetString(text, "fromStnCityName") +")";

            string string9 = GetString(text, "toStationName");
            string9 = string9 + " - " + GetString(text, "toStation");
            string9 = string9 + "(" + GetString(text, "toStnCityName") + ")";

            string string10 = GetString(text, "boardingAtName");
            string10 = string10 + "(" + GetString(text, "boardingAt") + ")";
            
            string string11 = GetString(text, "dateOfJourney");
            string string12 = GetString(text, "dateOfBoarding");
            string string13 = GetString(text, "mobileNumber");
            string string14 = GetString(text, "distance");
            string string15 = GetString(text, "scheduledDepartureTime");
            string string16 = GetString(text, "scheduledArrivalTime");
            string string17 = GetString(text, "sacCode");
            string text2 = text.Substring(text.IndexOf("fareInfoData"));
            text2 = text2.Substring(0, text2.IndexOf("]"));
            string string18 = GetString(text2, "message");
            text2 = text2.Substring(text2.IndexOf(",{") + 1);
            string string19 = GetString(text2, "message");
            text2 = text2.Substring(text2.IndexOf(",{") + 1);
            string string20 = GetString(text2, "message");
            text2 = text2.Substring(text2.IndexOf(",{") + 1);
            string string21 = GetString(text2, "message");
            string txnid = GetString(text, "transactionID");
            string dateOfBooking = GetString(text, "dateOfBooking");
            string scheduledArrivalTime = GetString(text, "scheduledArrivalTime");
            //string ticket = Class13.Ticket;
            string ticket = Class13.Tickettt;
            ticket = ticket.Replace("pnrno_", @string).Replace("13018 / GANADEVTA EXP", string2).Replace("GENERAL (GN)", string4)
                .Replace("invoiceno_", string5)
                .Replace("05-Sep-2023 22:02:06 HRS", string6)
                .Replace("SECOND SITTING (2S)", string7)
                .Replace("SEORAPHULI - SHE (Howrah / Kolkata)", string8)
                .Replace("HOWRAH JN - HWH (Howrah / Kolkata)", string9)
                .Replace("SEORAPHULI (SHE)", string10)
                //.Replace("9892222222", string13)
                .Replace("23 KM", string14 + " KM")
                .Replace("21:01 10-Sep-2022", string15)
                .Replace("10-Sep-2022", string11)
                .Replace("996411", string17)
                .Replace("45.00", string18)
                .Replace("45.0", string18)
                .Replace("11.80", string19)
                .Replace("56.80", string20)
                .Replace("100004422328824", string5)
                .Replace("Arrival* 21:45ss 10-SepP-2021", "Arrival*" + scheduledArrivalTime)
                .Replace("21:45ss" , "");

            string text3 = "PNR No.:2415857148,\r\nTXN ID:100002560914991,\r\npassengerdata\r\nQuota:TATKAL (TQ),\r\nTrain No.:09090,\r\nTrain Name:GKP ADI SPL,\r\nScheduled Departure:06-Feb-2021 14:50,\r\nDate Of Journey:06-Feb-2021,\r\nBoarding Station:VARANASI JN - BSB,\r\nClass:SLEEPER_CLASS (SL),\r\nFrom:VARANASI JN - BSB,\r\nTo:SURAT - ST,\r\nTicket Fare:#) 2415.0,\r\nIRCTC C Fee:11.8+PG Charges Extra";
            text3 = text3.Replace("2415857148", @string).Replace("100002560914991", string5).Replace("TATKAL (TQ)", string4)
                .Replace("09090", newValue)
                .Replace("GKP ADI SPL", string3)
                .Replace("Scheduled Departure:06-Feb-2021 14:50", "Scheduled Departure:" + string15)
                .Replace("06-Feb-2021", string11)
                .Replace("Station:VARANASI JN - BSB", "Station:" + string10.Replace("(", " - ").Replace(")", ""))
                .Replace("From:VARANASI JN - BSB", "From:" + string8.Replace("(", " - ").Replace(")", ""))
                .Replace("SURAT - ST", string9.Replace("(", " - ").Replace(")", ""))
                .Replace("2415.0", string18)
                .Replace("11.8", string19);
            string text4 = GetString(text, "passengerBarCode").Replace("\r\n", "").Replace("\\r\\n", "");
            string text5 = text.Substring(text.IndexOf("passengerList"));
            text5 = text5.Substring(0, text5.IndexOf("]"));
            string text6 = "";
            string text7 = "";
            int num = 0;
            string text8 = "Passenger Name:ARMAN,\r\n\t\tGender:M,\r\n\t\tAge:22,\r\n\t\tStatus:CNF/D1/57/NO CHOICE\r\n";
            string text9 = "<tr _ngcontent-els-c88=\"\" align=\"center\" style=\"padding-top: 10px; font-family: Calibri; font-size: 14px; color: black;\" class=\"ng-star-inserted\"><td _ngcontent-els-c88=\"\" width=\"3%\">paxnum_.</td><td _ngcontent-els-c88=\"\" width=\"19%\" align=\"left\">ARMAN</td><td _ngcontent-els-c88=\"\" width=\"7%\" align=\"left\">&nbsp;&nbsp;numage_</td><td _ngcontent-els-c88=\"\" width=\"9%\" align=\"left\">&nbsp;&nbsp;<span _ngcontent-els-c88=\"\" class=\"ng-star-inserted\">&nbsp;&nbsp;</span><!---->numgender_</td><!----><td width=\"25%\" style=\"font-family: Calibri; font-size: 14px; color: black;\" class=\"ng-star-inserted\" align=\"left\" _ngcontent-bce-c88=\"\"> &nbsp;<span _ngcontent-vlb-c88=\"\" class=\"ng-star-inserted\">CNF/D1/57/NO CHOICE</span></td><!----><!----><!----><!----><!----><td width=\"25%\" style=\"font-family: Calibri; font-size: 14px; color: black;\" class=\"ng-star-inserted\" align=\"left\" _ngcontent-bce-c88=\"\"> &nbsp;<span _ngcontent-vlb-c88=\"\" class=\"ng-star-inserted\">CNF/D1/57/NO CHOICE</span></td><!----><!----><!----><!----><!----><!----></tr>";
            int num2 = 0;
            int num3 = 0;
            for (int i = 1; i <= 7; i++)
            {
                num = text4.IndexOf(":", num) + 1;
                if (num <= 0)
                {
                    break;
                }
                text5 = text5.Substring(text5.IndexOf("bookingBerthCode"));
                string newValue2 = text4.Substring(num, text4.IndexOf(",", num) - num);
                num = text4.IndexOf(":", num) + 1;
                string text10 = text4.Substring(num, text4.IndexOf(",", num) - num);
                num = text4.IndexOf(":", num) + 1;
                string text11 = text4.Substring(num, text4.IndexOf(",", num) - num);
                int result = 0;
                if (int.TryParse(text11, out result))
                {
                    if (result > 11)
                    {
                        num2++;
                    }
                    else
                    {
                        num3++;
                    }
                }
                num = text4.IndexOf(":", num) + 1;
                string text12 = text4.Substring(num, text4.IndexOf(",", num) - num);
                string string22 = GetString(text5, "currentBerthChoice");
                text5 = text5.Substring(text5.IndexOf("}"));
                text6 += text9.Replace("paxnum_", i.ToString()).Replace("ARMAN", newValue2).Replace("numage_", text11)
                    .Replace("numgender_", text10)
                    .Replace("CNF/D1/57/NO CHOICE", text12 + "/" + string22);
                text7 += text8.Replace("ARMAN", newValue2).Replace("22", text11).Replace("Male", Class13.smethod_3(text10))
                    .Replace("CNF/D1/57/NO CHOICE", text12 + Class21.smethod_3(string22));
            }
            ticket = ticket.Replace("paxdata_", text6).Replace("28-Jun-2022 12:10:29 HRS", string6).Replace("Adult: 2 Child: 1", "Adult: " + num2 + " Child: " + num3);
            text7 = Class13.replaceLastFour(text7);
            text3 = text3.Replace("passengerdata", text7);
            Image graphic = new QRCode(new QRCodeGenerator().CreateQrCode(text3, QRCodeGenerator.ECCLevel.L)).GetGraphic(20);
            string newValue3 = method_48(graphic);
            ticket = ticket.Replace("base_64", newValue3);
            //old
            //string path = "Print_" + @string + "_" + string8 + "_" + string9 + ".htm";
            //string text13 = "Print_" + string8 + "_" + string9 + "_" + @string;
            //
            string path = "Print_" + @string + "_" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + ".htm";
            string text13 = "Print_" + class3_0.SRC_STN + "_" + class3_0.DEST_STN + "_" + @string;

            byte[] bytes = Encoding.ASCII.GetBytes(ticket);
            ticket = Encoding.ASCII.GetString(bytes).Replace("?", "");
            string path2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "Print");
            path2 = Path.Combine(path2, "WEB");
            if (!Directory.Exists(path2))
            {
                Directory.CreateDirectory(path2);
            }
            string text14 = Path.Combine(path2, path);
            File.WriteAllText(text14, ticket, Encoding.GetEncoding("windows-1255"));
            try
            {
                new GetService().GetServic(text14, text13);
            }
            catch (Exception)
            {
            }
        }
        catch
        {
        }
    }


    internal bool GetTBSN(string string_86, string string_87, DateTime dateTime_7, ref List<string> list_19)
    {
        bool result = false;
        string text = string_86;
        string value = "-";
        if (text.Contains(value))
        {
            string text2 = string_86;
            int startIndex = string_86.IndexOf("-") + 1;
            string_86 = text2.Substring(startIndex).Trim();
        }
        if (string_87.Contains("-"))
        {
            string text3 = string_87;
            string text4 = string_87;
            string value2 = "-";
            int startIndex2 = text4.IndexOf(value2) + 1;
            string_87 = text3.Substring(startIndex2).Trim();
        }
        try
        {
            string string_88 = "http://erail.in/Rail/GetTrains.aspx?Station_From=" + string_86 + "&Station_To=" + string_87;
            CookieContainer cookieContainer = null;
            string string_89 = "";
            if (!method_100(string_88, "", null, ref cookieContainer, false, true, 120000, ref string_89, ref bool_19, ref Exception_, ref httpStatusCode_0, ref errormsg))
            {
                return false;
            }
            list_19 = new List<string>();
            string[] array = string_89.Split(new string[1] { "^" }, StringSplitOptions.RemoveEmptyEntries);
            int num = 0;
            string[] array2 = array;
            string[] array3 = array2;
            foreach (string text5 in array3)
            {
                num++;
                if (num != 1)
                {
                    string text6 = text5;
                    string[] array4 = new string[1];
                    string[] array5 = array4;
                    Class18.int_0 = num;
                    array5[0] = "~";
                    string[] array6 = text6.Split(array4, StringSplitOptions.RemoveEmptyEntries);
                    if (array6.Length > 2)
                    {
                        list_19.Add(array6[0] + " - " + array6[1] + method_63(array6[13]));
                    }
                }
            }
            result = true;
        }
        catch (Exception)
        {
        }
        return result;
    }

    private string method_63(string string_86)
    {
        string text = " - { ";
        if (string_86 == "1111111")
        {
            return " - { All Days }";
        }
        for (int i = 0; i < string_86.Length; i++)
        {
            if (string_86[i] == '1')
            {
                switch (i)
                {
                    case 0:
                        text += "M, ";
                        break;
                    case 1:
                        text += "TU, ";
                        break;
                    case 2:
                        text += "W, ";
                        break;
                    case 3:
                        text += "TH, ";
                        break;
                    case 4:
                        text += "F, ";
                        break;
                    case 5:
                        text += "SA, ";
                        break;
                    case 6:
                        text += "SU, ";
                        break;
                }
            }
        }
        return " " + text.Trim().Substring(0, text.Length - 2) + " }";
    }

    internal string GetF(string string_86, string string_87, string string_88, string string_89)
    {
        return "";
    }

    internal List<string> GetPType()
    {
        return new List<string> { "Select Payment Method", "Netbanking - Auto", "Debit Card - Auto", "Credit Card - Auto" };
    }

    internal Dictionary<string, string> GetNet()
    {
        Dictionary<string, string> dictionary = new Dictionary<string, string>();
        dictionary.Add("E-WALLET", "User Name|Password|Txn Password");
        dictionary.Add("BHIMUPI", "UPI Id|BHIM Password|UPI PIN");
        dictionary.Add("SBI", "User Name|Password|Profile Pwd");
        dictionary.Add("AXIS", "User Name|Password|Txn Password");
        dictionary.Add("HDFC", "User Name|Password");
        dictionary.Add("IDBI", "User Name|Password|Txn Password");
        dictionary.Add("INDUSIND", "User Name|Password|Txn Password");
        string key = "ICICI";
        dictionary.Add(key, "User Name|Password");
        dictionary.Add("UNION", "User Name|Password|Txn Password");
        dictionary.Add("CORP", "User Name|Password|Txn Password");
        dictionary.Add("SBINEPAL", "User Name|Password|Txn Password");
        dictionary.Add("FREECHARGE", "Mobile|Password");
        dictionary.Add("MOBIKWIK", "Email|Password");
        dictionary.Add("OXIGEN", "Mobile|Password");
        return dictionary;
    }

    internal Dictionary<string, string> GetD()
    {
        return new Dictionary<string, string>
        {
            { "SBI", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin" },
            { "ICICI", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin|CVV" },
            { "HDFC", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin" },
            { "INDIAN", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin" },
            { "AXIS", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin" },
            { "UNION", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin" },
            { "CANARA", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin" },
            { "PNB", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin|CVV" },
            { "ANDHRA", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin" },
            { "BOI", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin" },
            { "IOB", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin" },
            { "CITI", "Card No.|Holder Name|Exp Month|Exp Year|CVV|IPIN" },
            { "CBI", "Card No.|Holder Name|Exp Month|Exp Year|ATM Pin" },
            { "SBI_HDF_CC", "Card No.|Visa Pin|Exp Month|Exp Year|Visa/Master|CVV|Pin" },
            { "HDFC_HDF_CC", "Card No.|Visa Pin|Exp Month|Exp Year|Visa/Master|CVV|Pin" },
            { "SBI_ICI_CC", "Card No.|Visa Pin|Exp Month|Exp Year|Visa/Master|CVV|Pin" },
            { "HDFC_ICI_CC", "Card No.|Visa Pin|Exp Month|Exp Year|Visa/Master|CVV|Pin" },
            { "SBI_CIT_CC", "Card No.|Visa Pin|Exp Month|Exp Year|Visa/Master|CVV|Pin" },
            { "HDFC_CIT_CC", "Card No.|Visa Pin|Exp Month|Exp Year|Visa/Master|CVV|Pin" },
            { "SBI_PTM_CC", "Card No.|Visa Pin|Exp Month|Exp Year|Visa/Master|CVV|Pin" },
            { "HDFC_PTM_CC", "Card No.|Visa Pin|Exp Month|Exp Year|Visa/Master|CVV|Pin" }
        };
    }

    internal string isLV(string string_86, string string_87, ref string string_88)
    {
        
        string result = "";
        try
        {
            isAPP = false;
            LoginType = "WEB";
            isAPP = true;
            LoginType = "APP";
            if (string_86 == "update_time")
            {
                return "";
            }
            string environmentVariable = Environment.GetEnvironmentVariable("PrivateProxy", EnvironmentVariableTarget.Process);
            bool flag = false;
            string text = string_88;
            string[] arrayweb = string_88.Split(new string[1] { "||" }, StringSplitOptions.None);
            if (arrayweb.Length > 1)
            {
                vpnip = arrayweb[1];
                vpn = true;
            }
                
            if (class3_0 == null)
            {
                class3_0 = new clsPostData();
            }
            if (class19_0 == null)
            {
                class19_0 = new Class19();
            }
            if (string_87 == "verifi_iid")
            {
                if (veriFyID(string_86))
                {
                    Class11.smethod_1("TBL_USER", "UserState", "Active||" + DateTime.Now.Date.ToString("dd/M/yyyy"), string_86);
                    string_88 = "true";
                }
                return result;
            }
            //vpn = true;
            if (vpn)
            {
                try
                {
                    //vpnip = "103.167.32.237:49155:indproxyz:dv6Yx8RUXG";
                    string[] array8P = vpnip.Split(new string[1] { ":" }, StringSplitOptions.None);
                    if (array8P.Length > 3)
                    {
                        Proxy_ = new WebProxy(array8P[0].Trim(), int.Parse(array8P[1].Trim()));
                        Proxy_.BypassProxyOnLocal = true;
                        Proxy_.Credentials = new NetworkCredential(array8P[2].Trim(), array8P[3].Trim());
                        Lock("\n\n\nProxy=" + array8P[0]);
                    }
                }
                catch (Exception ex)
                {
                    
                }
            }
            isAPP = true;
            string text2 = "";
            DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            long num = (long)(DateTime.UtcNow - dateTime).TotalMilliseconds;
            class3_0._greq = num.ToString();
            if (string_86 == "fetchpin")
            {
                Lock("Loading Home Page, Login: ");
                string text3 = "https://www.irctc.co.in/eticketing/protected/mapps1/pin/" + string_87;
                cookie_ = new CookieContainer();
                string data = null;
                NgtHttpReq(text3, data, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, "Plain13text");
                if (response.Contains("Invalid City") | response.Contains("Not any State is found"))
                {
                    return "Invalid City";
                }
                string @string = GetString(response, "cityList");
                text3 = "https://www.irctc.co.in/eticketing/protected/mapps1/pin/" + string_87 + "?city=" + @string;
                NgtHttpReq(text3, data, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, "Plain13text");
                return @string + "||" + response;
            }
            if (!flag)
            {
                cookie_ = new CookieContainer();
                string text4 = "https://www.irctc.co.in";
                class3_0.token = null;
                Status = "Login";
                Request_Type = "Base";
                class3_0._Authorization = null;
                int num2 = 0;
                while (true)
                {
                    dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                    num = (long)(DateTime.UtcNow - dateTime).TotalMilliseconds;
                    class3_0._greq = num.ToString();
                    if (isAPP)
                    {
                        randomGeneratedKey = jwtutils.getRandomAppCngKey();
                        class3_0._greq = HighQualityRandomString();
                        greq = HighQualityRandomString();
                        mup = jwtutils.RandomString(16, "abcdhijklmnopqrwxyz0123456789");
                        postdata = null;
                        //updTStatus?.BeginInvoke(1, "Finding Fast Server plz wait..", tCntrlName, null, null);
                        url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/appVersion/ANDROID/4.2.12";
                        ConnectHttp(url, postdata, null, Proxy_, ref cookie_, bool_63: true, bool_64: true, 160000, 160000, ref response, ref errormsg, ref Exception_, "Base");
                    }
                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/loginCaptcha?nlpCaptchaException=true";
                    postdata = null;
                    int_6 = 0;
                    _httpRequest(url, postdata, Reffral, "Plain1Other", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_);
                    string text5 = "";
                    if (!(string_86 == "update_time"))
                    {
                        if (string_86 == "DEvA65")
                        {
                        }
                        if (response.IndexOf("captchaQuestion") > 0)
                        {
                            string text6 = response.Substring(response.IndexOf("captchaQuestion") + 18);
                            text5 = text6.Substring(0, text6.IndexOf("\""));
                            class3_0._greq = GetString(response, "status");
                        }
                        string text7 = "";
                        Bitmap bitmap = (Bitmap)method_55(text5);
                        if (bitmap != null)
                        {
                            //text7 = result = IRCTCOCR(text5);
                            frmCaptcha frmCaptcha2 = new frmCaptcha(this, cookie_, "", "");
                            text7 = frmCaptcha2.SolveCaptcha(text5);
                            frmCaptcha2.Dispose();
                        }
                        num2++;
                        Status = "home Login";
                        url = "https://www.irctc.co.in/authprovider/webtoken";
                        class3_0.IRCTC_ID = string_86;
                        if (isAPP)
                        {
                            //postdata = "grant_type=password&username=" + class3_0.IRCTC_ID + "&password=" + class3_0.IRCTC_PWD + "&captcha=" + text10 + "&uid=" + greq + "&otpLogin=false";
                            byte[] bytess = Encoding.UTF8.GetBytes(class3_0.IRCTC_ID + ":" + class3_0.IRCTC_PWD);
                            _Authrization = Convert.ToBase64String(bytess);
                            url = "https://www.irctc.co.in/authprovider/webmtoken";
                        }
                        //url = text4 + "/authprovider/webmtoken";
                        //postdata = "grant_type=password&username=" + string_86 + "&password=" + HttpUtility.UrlEncode(string_87) + "&captcha=" + text7 + "&uid=" + HttpUtility.UrlEncode(class3_0._greq) + "&otpLogin=false&nlpIdentifier=&nlpAnswer=&nlpToken=&lso=";
                        postdata = "grant_type=password&username=" + string_86 + "&password=" + frmCaptcha.Base64Encode(string_87) + "&captcha=" + text7 + "&uid=" + class3_0._greq + "&otpLogin=false&nlpIdentifier=&nlpAnswer=&nlpToken=&lso=&encodedPwd=true";
                        Thread.Sleep(500);
                        byte[] bytes = Encoding.UTF8.GetBytes(string_86 + ":" + string_87);
                        class3_0.string_75 = Convert.ToBase64String(bytes);
                        new Cookie("language", "en_IN").Domain = "www.irctc.co.in";
                        if (NgtHttpReq(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, ""))
                        {
                            if (response.Contains("bearer"))
                            {
                                break;
                            }
                            if (response.Contains("Invalid User") | response.Contains("Bad credentials"))
                            {
                                if (response.Contains("Bad credentials"))
                                {
                                    Class11.smethod_1("TBL_USER", "UserState", "Invalid||" + class3_0.string_3, string_86);
                                    return "error#";
                                }
                                class19_0.bool_0 = false;
                                return "error#";
                            }
                            if (response.Contains("User is disabled"))
                            {
                                //isLogin_Self = false;
                                //isLogin = false;
                                Class11.smethod_1("TBL_USER", "UserState", "Disabled||" + class3_0.string_3, string_86);
                                return "error#";
                            }
                            class19_0.bool_0 = false;
                            return "error#";
                            continue;
                        }
                        Lock("Hitting Validate out Error= " + response);
                        string_88 = "Error:Login";
                        return "#";
                    }
                    ThreadPool.QueueUserWorkItem(method_0, response);
                    return "";
                }
                if (response.Contains("error\":\"unauthorized\","))
                {
                    Lock("Hitting home2 out Error= " + response);
                    Class11.smethod_1("TBL_USER", "UserState", "InvalidAcc||" + class3_0.string_3, string_86);
                    string_88 = "Wrong Credentials";
                    return "#";
                }
                
                
                class19_0.bool_0 = true;
                List<string> list = new List<string>(response.Split(new string[1] { "\"" }, StringSplitOptions.None));
                access_token = "bearer " + list[3];
                class3_0.string_61 = response.Substring(response.IndexOf("access_token") + 15, 36);
                class3_0._Authorization = "Bearer " + class3_0.string_61;
                dateTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                num = (long)(DateTime.UtcNow - dateTime).TotalMilliseconds;
                class3_0.token = num.ToString();
                if(isAPP)
                {
                    class3_0.string_61 = response.Substring(response.IndexOf("access_token") + 15, 36);
                    class3_0._Authorization = "Bearer " + class3_0.string_61;
                    _Authrization = class3_0._Authorization;
                }
                _validateuser_SikL();
                url = "https://www.irctc.co.in/eticketing/protected/mapps1/validateUser?source=3";
                postdata = null;
                Status = "Validateuser";
                Request_Type = "json";
                dateTime_3 = DateTime.Now;
                if (!_httpRequest(url, postdata, Reffral, "Plain123json", bool_63: false, Proxy_, ref cookie_, bool_64: true, bool_65: true, 180000, 180000, ref response, ref errormsg, ref Exception_))
                {
                    Lock("Hitting Validate out Error= " + response);
                    string_88 = "Error:Login";
                    return "#";
                }
                if (string.IsNullOrEmpty(response))
                {
                    MessageBox.Show("Run CC_Cleaner into Your System.\n1.Clean Your System.\n2.Clean Your Clean Temp Folder\n3.Check Your System Date-Time-Zone" + errormsg);
                    return "#";
                }
                response.Contains("email");
                text2 = response;
                if (response.IndexOf("mobile") < 0)
                {
                    Class11.smethod_1("TBL_USER", "UserState", "InvalidAcc||" + DateTime.Now.Date.ToString("dd/M/yyyy"), string_86);
                    return "#";
                }
                if (response.IndexOf("userEnableState\":\"5") > 0)
                {
                    Class11.smethod_1("TBL_USER", "UserState", "InCompleteProfile||" + DateTime.Now.Date.ToString("dd/M/yyyy"), string_86);
                    return "#";
                }
                if (response.IndexOf("userEnableState\":\"1") < 0)
                {
                    Class11.smethod_1("TBL_USER", "UserState", "Suspend||" + DateTime.Now.Date.ToString("dd/M/yyyy"), string_86);
                    return "#";
                }
                if (response.IndexOf("verified\":\"false") > 0)
                {
                    Class11.smethod_1("TBL_USER", "UserState", "Unverify||" + DateTime.Now.Date.ToString("dd/M/yyyy"), string_86);
                    return "#";
                }
                if (Class11.smethod_0(string_86, "UserState").Split(new string[1] { "||" }, StringSplitOptions.RemoveEmptyEntries)[0] == "Unverify")
                {
                    Class11.smethod_1("TBL_USER", "UserState", "Active||" + DateTime.Now.Date.ToString("dd/M/yyyy"), string_86);
                }
            }
            if (text.Contains("2Profile"))
            {
                url = "https://www.irctc.co.in/eticketing/protected/mapps1/userDetails";
                postdata = null;
                Request_Type = "pass";
                if (!ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 120000, 120000, ref response, ref errormsg, ref Exception_, "validateUser"))
                {
                    Lock("Hitting Validate out Error= " + response);
                    string_88 = "Error:Login";
                    return "#";
                }
                text2 += response;
                Class11.smethod_1("TBL_USER", "Remarks", text2, string_86);
            }
            if (text.Contains("Password:"))
            {
                //string text8 = string_88.Substring(string_88.IndexOf(":") + 1);
                string[] arrayweb1 = string_88.Split(new string[1] { ":" }, StringSplitOptions.None);
                string text8 = arrayweb1[1].Trim();
                if (text8.Contains("||"))
                {
                    string[] arrayweb2 = string_88.Split(new string[1] { "||" }, StringSplitOptions.None);
                    text8 = arrayweb2[0].Trim();
                    text8 = text8.Replace("Password:", "");
                }
                url = "https://www.irctc.co.in/eticketing/protected/mapps1/userpasswordchange";
                url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/userpasswordchange";
                postdata = "{\"source\":10,\"userId\":\"" + string_86 + "\",\"oldPassword\":\"" + string_87 + "\",\"newPassword\":\"" + text8 + "\",\"confPassword\":\"" + text8 + "\"}";
                postdata = "{\"captchaDto\":null,\"confPassword\":\"" + text8 + "\",\"errorList\":null,\"ip\":null,\"loginCounterRequested\":null,\"newPassword\":\"" + text8 + "\",\"nlpFlagToStopLoop\":false,\"nonOTPcaptchaStatus\":null,\"oldPassword\":\"" + string_87 + "\",\"otpLogin\":null,\"otpType\":null,\"seqAns\":null,\"seqQuestion\":null,\"seqType\":null,\"serverId\":null,\"source\":4,\"status\":null,\"timeStamp\":null,\"twoPhaseAuthRequired\":false,\"updateFlag\":null,\"userId\":null}";
                Lock("Hitting hist in= " + response);
                Request_Type = "pass";

                if (!NgtHttpReq(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, "Plain123json"))
                {
                    Lock("Hitting Validate out Error= " + response);
                    return "#";
                }
                if (response.Contains("Your Password has been changed Successfully"))
                {
                    Class11.smethod_1("TBL_USER", "strPwd", text8, string_86);
                    Class11.smethod_1("TBL_USER", "UserState", "Active||" + class3_0.string_3, class3_0.IRCTC_ID);
                    return "True";
                }
                return "False";
            }
            if (text.Contains("Blacklisted:"))
            {
                string[] arrayweb1 = string_88.Split(new string[1] { ":" }, StringSplitOptions.None);
                string text8 = arrayweb1[1].Trim();
                if (text8.Contains("||"))
                {
                    string[] arrayweb2 = string_88.Split(new string[1] { "||" }, StringSplitOptions.None);
                    text8 = arrayweb2[0].Trim();
                    text8 = text8.Replace("Blacklisted:", "");
                }
                url = "https://www.contents.irctc.co.in/eticketing/protected/mapps1/userpasswordchange";
                postdata = "{\"source\":10,\"userId\":\"" + string_86 + "\",\"oldPassword\":\"" + string_87 + "\",\"newPassword\":\"" + text8 + "\",\"confPassword\":\"" + text8 + "\"}";
                postdata = "{\"captchaDto\":null,\"confPassword\":\"" + text8 + "\",\"errorList\":null,\"ip\":null,\"loginCounterRequested\":null,\"newPassword\":\"" + text8 + "\",\"nlpFlagToStopLoop\":false,\"nonOTPcaptchaStatus\":null,\"oldPassword\":\"" + string_87 + "\",\"otpLogin\":null,\"otpType\":null,\"seqAns\":null,\"seqQuestion\":null,\"seqType\":null,\"serverId\":null,\"source\":4,\"status\":null,\"timeStamp\":null,\"twoPhaseAuthRequired\":false,\"updateFlag\":null,\"userId\":null}";
                Request_Type = "pass";
                Lock("Hitting hist in= " + response);
                if (!NgtHttpReq(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, "Plain123json"))
                {
                    Lock("Hitting Validate out Error= " + response);
                    return "#";
                }
                if (response.Contains("Your Password has been changed Successfully"))
                {
                    Class11.smethod_1("TBL_USER", "strPwd", text8, string_86);
                    Class11.smethod_1("TBL_USER", "UserState", "Active||" + class3_0.string_3, class3_0.IRCTC_ID);
                    return "True";
                }
                return "False";
            }
            if (text.Contains("Answer:"))
            {
                url = "https://www.irctc.co.in/eticketing/protected/mapps1/";
                postdata = null;
                if (!ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 120000, 120000, ref response, ref errormsg, ref Exception_, "validateUser"))
                {
                    Lock("Hitting Validate out Error= " + response);
                    return "#";
                }
            }
            if (text.Contains("Info:"))
            {
                string[] array = string_88.Substring(string_88.IndexOf(":") + 1).Split(new string[1] { "||" }, StringSplitOptions.None);
                string text9 = array[0];
                string text10 = array[1];
                string text11 = array[2];
                string text12 = array[3];
                string text13 = array[4];
                string text14 = array[5];
                if (text.Contains("Train"))
                {
                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/tbstns/" + text9 + "/" + text10 + "/" + text12;
                    if (!ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 120000, 120000, ref response, ref errormsg, ref Exception_, "validateUser"))
                    {
                        Lock("Hitting train list out Error= " + response);
                        return "#";
                    }
                    return response;
                }
                if (text.Contains("Avail"))
                {
                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/avlFareenquiry/" + text11 + "/" + text12 + "/" + text9 + "/" + text10 + "/" + text13 + "/" + text14 + "/N";
                    postdata = "{\"masterId\":null,\"wsUserLogin\":null,\"wsUserPassword\":null,\"wsUserTransactionPassword\":null,\"agentDeviceId\":null,\"atasOpted\":null,\"autoUpgradationSelected\":false,\"boardingStation\":null,\"clientTransactionId\":null,\"clusterFlag\":\"N\",\"clusterJourneyClass\":null,\"coachId\":null,\"cod\":\"false\",\"enquiryType\":\"3\",\"enrouteStation\":null,\"gnToCkOpted\":false,\"gstDetails\":null,\"ignoreChoiceIfWl\":true,\"infantList\":null,\"mainJourneyPnr\":null,\"mainJourneyTxnId\":null,\"mobileNumber\":null,\"moreThanOneDay\":true,\"onwardFlag\":\"N\",\"passengerList\":null,\"reservationChoice\":null,\"reservationMode\":\"WS_TA_B2C\",\"reservationUptoStation\":null,\"ssQuotaSplitCoach\":null,\"ticketChoiceLowerBerth\":null,\"ticketChoiceSameCoach\":false,\"ticketType\":null,\"travelInsuranceOpted\":null,\"viaPointStation\":null}";
                    if (!ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 120000, 120000, ref response, ref errormsg, ref Exception_, "json"))
                    {
                        Lock("Hitting train list out Error= " + response);
                        return "#";
                    }
                    return response;
                }
                if (text.Contains("Schedule"))
                {
                    url = "https://www.irctc.co.in/eticketing/protected/mapps1/trnscheduleenquiry/" + text11;
                    postdata = null;
                    if (!ConnectHttp(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 120000, 120000, ref response, ref errormsg, ref Exception_, "validateUser"))
                    {
                        Lock("Hitting train list out Error= " + response);
                        return "#";
                    }
                    return response;
                }
            }
            url = "https://www.irctc.co.in/eticketing/protected/mapps1/bookedHistorySearch?lastTxnDtls=ALL";
            postdata = null;
            if (!NgtHttpReq(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 60000, 60000, ref response, ref errormsg, ref Exception_, ""))
            {
                Lock("Hitting Validate out Error= " + response);
                return "#";
            }
            if (text.Contains("Print:"))
            {
                string text15 = string_88.Substring(string_88.IndexOf(":") + 1);
                url = "https://www.irctc.co.in/eticketing/protected/mapps1/printTicket/" + text15 + "/en";
                postdata = null;
                if (!NgtHttpReq(url, postdata, Reffral, Proxy_, ref cookie_, bool_63: true, bool_64: true, 120000, 120000, ref response, ref errormsg, ref Exception_, ""))
                {
                    Lock("Hitting Validate out Error= " + response);
                    return "#";
                }
                if (response.Contains("pnrNumber"))
                {
                    string_27 = response;
                    ThreadPool.QueueUserWorkItem(PrintTicketAPP, response);
                    Thread.Sleep(7000);
                    return "True";
                }
                return "False";
            }
            int num3 = 0;
            int num4 = 0;
            int num5 = 0;
            string text16 = "error";
            string text17 = "";
            try
            {
                BookingHistoryRootObject bookingHistoryRootObject;
                if (response.IndexOf("[{") > 0)
                {
                    bookingHistoryRootObject = JsonConvert.DeserializeObject<BookingHistoryRootObject>(response);
                }
                else
                {
                    SingleBookingHistoryRootObject singleBookingHistoryRootObject = JsonConvert.DeserializeObject<SingleBookingHistoryRootObject>(response);
                    bookingHistoryRootObject = new BookingHistoryRootObject();
                    if (response.IndexOf("bookingResponseList") > 0)
                    {
                        bookingHistoryRootObject.bookingResponseList = new BookingList[1];
                        bookingHistoryRootObject.bookingResponseList[0] = singleBookingHistoryRootObject.bookingResponseList;
                    }
                }
                num3 = bookingHistoryRootObject.bookingResponseList.Length;
                for (int i = 0; i < num3; i++)
                {
                    double totalDays = (DateTime.ParseExact(bookingHistoryRootObject.bookingResponseList[i].boardingDate, "yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture) - DateTime.Now.Date).TotalDays;
                    DateTime dateTime2 = DateTime.ParseExact(bookingHistoryRootObject.bookingResponseList[i].bookingDate, "yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture);
                    if ((dateTime2 - DateTime.Now.Date).TotalDays == 0.0)
                    {
                        num5++;
                    }
                    if (DateTime.Now.Date.Month == dateTime2.Month)
                    {
                        num4++;
                    }
                    string text18 = bookingHistoryRootObject.bookingResponseList[i].boardingDate.Replace("T", "B") + "|" + bookingHistoryRootObject.bookingResponseList[i].bookingDate + "|" + bookingHistoryRootObject.bookingResponseList[i].fromStn.ToString() + "|" + bookingHistoryRootObject.bookingResponseList[i].destStn.ToString() + "|" + bookingHistoryRootObject.bookingResponseList[i].pnrNumber.ToString() + "|" + bookingHistoryRootObject.bookingResponseList[i].trainNumber.ToString() + "@";
                    text17 += text18;
                }
                text17 = text17 + "^" + num3 + "#" + num4 + "#" + num5;
                text16 = text17;
            }
            catch (Exception)
            {
                text17 = text17 + "@^" + num3 + "#" + num4 + "#" + num5;
                text16 = text17;
            }
            Class11.smethod_1("TBL_USER", "History", text16, string_86);
            return text16;
        }
        catch (Exception ex2)
        {
            string_88 = ex2.ToString();
            return "";
        }
    }

    private void method_70(object object_18)
    {
        string[] array = object_18.ToString().Split(new string[1] { "||" }, StringSplitOptions.None);
        array[0].Trim();
        string text = array[1].Trim();
        array[2].Trim();
        string string_ = "";
        if (File.Exists(string_33) && string.IsNullOrEmpty(File.ReadAllText(string_33)))
        {
            return;
        }
        string path = text + "_MobiKwik.txt";
        if (File.Exists(path))
        {
            DateTime lastWriteTime = File.GetLastWriteTime(path);
            if ((DateTime.Now - lastWriteTime).TotalSeconds <= 300.0)
            {
                return;
            }
            File.Delete(path);
        }
        File.WriteAllText(path, "");
        string string_2 = "\r\n\r\n\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n<title>Payment Redirect</title>\r\n</head>\r\n<body>\r\n\t<form action=\"https://walletapi.mobikwik.com/securewallet\" method=\"POST\">\r\n\t\r\n\t\t<input type=\"hidden\" name=\"encdata\" value=\"f4aa6d4e34f31e0b45d7e2316b51adeabe8e9f060f8da51a52edf27c328266a0fe524c499b8623c280f685a9856d1b5ca90977649dcb06fc1deed3182da815a735ff34f3ee1862a7ea82f9da35d0a0b467fa3b590229484596ca6d97d6a0c94ee3bcd14350931dd8998f2210348ee963d347c7181e09dceeeafb08e05504180f1fd5f08169ecf88fb54e87ddfa9ad43d1fa2ed208c5a894b2ef776dfcd16b7fe3f107b2dd1ea677cc202cb33d9103a03027aa0daf5e459c5bcbfd7ac8d185e39f6c2d53a3346a7951cda6da22d7062da1eb9639428a9da2528cc8b08e316d407015eece4f758149f1a6dbc3dc686b42731cf77efe2c6b72774a06a7e1f684f2a3e81d853295a2963ac17be5659d8c09d88820868dee1191f6073755f77a0900a\">\r\n\t\r\n</form>\r\n <center><font size=\"5\" color=\"#3b4455\"> Please Wait...</font></center>\r\n \r\n<script type=\"text/javascript\">\r\n\tdocument.forms[0].submit();\r\n</script>  \r\n\r\n</body>\r\n</html>";
        string string_3 = "https://www.irctc.co.in/eticketing/jpInput.jsf?cid=1";
        string string_4 = "";
        string text2 = clsPostData.smethod_6(string_2, ref string_4, false);
        CookieContainer cookieContainer = null;
        string string_5 = "";
        string string_6 = "";
        if (!File.Exists(string_33))
        {
            return;
        }
        text2 = File.ReadAllText(string_33);
        bool flag = false;
        if (text2.Contains("&"))
        {
            string_4 = "https://walletapi.mobikwik.com/wallet";
        }
        else
        {
            flag = true;
            string_4 = "https://walletapi.mobikwik.com/securewallet ";
        }
        bool_24 = true;
        string_52 = "Tls12";
        if (!method_85(string_4, text2, string_3, webProxy_3, ref cookieContainer, true, true, 60000, 60000, ref string_6, ref string_5, ref Exception_))
        {
            Lock("First Hit Failed. err = " + string_5);
            string_59 = "Mobikwik Not Working - Payment Failed";
        }
        if (flag)
        {
            Lock("First Output htm = " + string_6);
            string_3 = string_4;
            int startIndex = string_6.IndexOf("\"tokenhash") + 5;
            startIndex = string_6.IndexOf(":", startIndex);
            startIndex = string_6.IndexOf("\"", startIndex) + 1;
            int length = string_6.IndexOf("\"", startIndex) - startIndex;
            string text3 = string_6.Substring(startIndex, length).Trim();
            string_4 = "https://walletapi.mobikwik.com/walletapis/sendOtp";
            text2 = ((!text.Contains("@")) ? ("{\"tokenhash\":\"" + text3 + "\",\"cell\":\"" + text + "\"}") : ("{\"tokenhash\":\"" + text3 + "\",\"email\":\"" + text + "\"}"));
            bool_36 = true;
            string_52 = "Tls12";
            if (!method_85(string_4, text2, string_3, webProxy_3, ref cookieContainer, true, true, 60000, 60000, ref string_6, ref string_5, ref Exception_))
            {
                Lock("Second Hit Failed. err = " + string_5);
                string_59 = "Failed while making Payment.";
            }
        }
        else
        {
            string text4 = string_29.Substring(string_29.IndexOf("?") + 4);
            string_4 = "https://walletapi.mobikwik.com/walletapis/redirectflow/fetch-order-details";
            text2 = "{\"id\":\"" + text4 + "\"}";
            bool_36 = true;
            string_52 = "Tls12";
            if (!method_85(string_4, text2, string_3, webProxy_3, ref cookieContainer, true, true, 60000, 60000, ref string_6, ref string_5, ref Exception_))
            {
                Lock("First Hit Failed. err = " + string_5);
                string_59 = "Mobikwik Not Working - Payment Failed";
            }
            string_4 = "https://walletapi.mobikwik.com/walletapis/redirectflow/otpgenrate/resendotp";
            text2 = "{\"id\":\"" + text4 + "\",\"cell\":\"" + text + "\"}";
            bool_36 = true;
            string_52 = "Tls12";
            if (!method_85(string_4, text2, string_3, webProxy_3, ref cookieContainer, true, true, 60000, 60000, ref string_6, ref string_5, ref Exception_))
            {
                Lock("First Hit Failed. err = " + string_5);
                string_59 = "Mobikwik Not Working - Payment Failed";
            }
        }
        if ((string_6.IndexOf("We have sent an OTP to your registered mobile number") > 0) | (string_6.IndexOf("OTP resent successfully") > 0))
        {
            if (method_163("Enter Mobikwik OTP For:.", ref string_, ref errormsg))
            {
                File.WriteAllText(path, string_);
            }
        }
        else if (File.Exists(string_33))
        {
            File.Delete(string_33);
        }
    }

    internal static Form smethod_4()
    {
        Form form = null;
        foreach (object openForm in Application.OpenForms)
        {
            Form form2 = (Form)openForm;
            if (form2.TopMost)
            {
                form = form2;
                break;
            }
        }
        if (form == null || form.IsDisposed)
        {
            form = new Form();
            form.TopMost = true;
        }
        return form;
    }

    internal void method_72(string string_86)
    {
        object obj = object_2;
        object obj2 = obj;
        lock (obj2)
        {
            list_1.Add(string_86);
        }
    }

    internal void Lock(string string_86)
    {
        object obj = object_0;
        object obj2 = obj;
        lock (obj2)
        {
            list_Log.Add(DateTime.Now.ToString("hh:mm:ss.fff") + " : " + ConnectionGroupName_ + " : " + string_86);
        }
    }

    internal void method_74(string string_86, string string_87)
    {
        object obj = object_0;
        object obj2 = obj;
        lock (obj2)
        {
            list_Log.Add(DateTime.Now.ToString("dd-MMM-yyyy hh:mm:ss.fff") + " : " + ConnectionGroupName_ + " : Exception : " + string_86 + " : " + string_87);
        }
    }

    private static string smethod_5(string string_86)
    {
        byte[] byte_ = new byte[8] { 18, 52, 86, 120, 144, 171, 205, 239 };
        return Class12.smethod_6(string_86, Class7.smethod_0(secureString_0).Substring(2, 8), byte_);
    }

    private static string smethod_6()
    {
        string text = "UID-";
        object obj = object_1;
        object obj2 = obj;
        lock (obj2)
        {
            int_2++;
            return text + int_2 + "A";
        }
    }

    private void NetworkInterface_(string string_86)
    {
        bool_23 = false;
        try
        {
            NetworkInterface[] allNetworkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
            NetworkInterface[] array = allNetworkInterfaces;
            foreach (NetworkInterface networkInterface in array)
            {
                if (!(networkInterface.Name + " [ " + networkInterface.Description + " ]" == string_86))
                {
                    continue;
                }
                NetworkInterface networkInterface2 = networkInterface;
                if (networkInterface2 == null)
                {
                    break;
                }
                ipaddress_0 = null;
                ipaddress_1 = null;
                foreach (UnicastIPAddressInformation unicastAddress in networkInterface2.GetIPProperties().UnicastAddresses)
                {
                    if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetwork)
                    {
                        ipaddress_0 = unicastAddress.Address;
                    }
                    else if (unicastAddress.Address.AddressFamily == AddressFamily.InterNetworkV6)
                    {
                        ipaddress_1 = unicastAddress.Address;
                    }
                }
                bool_23 = true;
                break;
            }
        }
        catch (Exception)
        {
            bool_23 = false;
        }
    }

    private IPEndPoint method_76(ServicePoint servicePoint_0, IPEndPoint ipendPoint_0, int int_28)
    {
        if (ipendPoint_0.AddressFamily == AddressFamily.InterNetworkV6)
        {
            return new IPEndPoint(ipaddress_1, 0);
        }
        return new IPEndPoint(ipaddress_0, 0);
    }

    private static void smethod_7()
    {
        try
        {
            if (list_Log.Count <= 0)
            {
                return;
            }
            object obj = object_0;
            object obj2 = obj;
            List<string> list;
            lock (obj2)
            {
                list = list_Log;
                list_Log = new List<string>();
            }
            foreach (string item in list)
            {
                if (item.Length < 1000)
                {
                    streamWriter_0.WriteLine(smethod_5(item));
                }
                else
                {
                    streamWriter_0.WriteLine(Class12.smethod_7(item));
                }
            }
            streamWriter_0.Flush();
            list.Clear();
            list = null;
        }
        catch
        {
        }
    }

    private void method_78(object object_18)
    {
        try
        {
            string[] array = object_18.ToString().Split('|');
            string text = array[0];
            string text2 = array[1];
            bool flag = false;
            DateTime now = DateTime.Now;
            long num = DateTime.Now.Hour * 10000 + DateTime.Now.Minute * 100 + DateTime.Now.Second;
            if ((75000 <= num && num <= 82000) || (95000 <= num && num <= 102000) || (105000 <= num && num <= 112000))
            {
                flag = true;
            }
            StreamWriter streamWriter = new StreamWriter(Path.Combine(string_31, "Iclgs_" + DateTime.Now.ToString("ddMMyyyy") + "_" + text2 + ".lg"), true);
            string text3 = "";
            try
            {
                if (list_Log.Count > 0)
                {
                    object obj = object_0;
                    List<string> list;
                    lock (obj)
                    {
                        list = list_Log;
                    }
                    foreach (string item in list)
                    {
                        if (item.Contains(text2))
                        {
                            int length = item.Length;
                            if (flag)
                            {
                                text3 += "\n\r";
                                text3 += item;
                            }
                            else
                            {
                                streamWriter.WriteLine(item);
                            }
                        }
                    }
                    list.Clear();
                    list = null;
                }
            }
            catch
            {
            }
            streamWriter.Flush();
            if (text3 != "")
            {
                string text4 = "Error_" + text;
                Class11.smethod_4("INSERT INTO TBL_LOG(TYPE, LOG, Remarks) VALUES('" + text4 + "','" + Class12.smethod_25(text3) + "','" + text2 + "')");
            }
        }
        catch
        {
        }
    }


    internal bool method_79()
    {
        bool result = false;
        try
        {
            string reff = "https://www.irctc.co.in/authprovider/webtoken";
            class3_0.token = "1527614427275";
            class3_0.token = method_14();
            string text = "https://www.irctc.co.in/eticketing/protected/mapps1/validateUser?source=3";
            string deta = "";
            string _response = "";
            string _error = "";
            do
            {
                _httpRequest(text, deta, reff, "Plain123Other", false, Proxy_, ref cookie_, true, true, 120000, 120000, ref _response, ref _error, ref Exception_);
                result = true;
            }
            while (string.IsNullOrEmpty(_response));
            return result;
        }
        catch
        {
            return result;
        }
    }

    internal void method_81(frmCaptcha frmCaptcha_0)
    {
        string reff = "https://www.irctc.co.in/";
        string string_ = class3_0.string_65;
        string deta = "";
        string _response = "";
        string _error = "";
        try
        {
            do
            {
                _httpRequest(string_, deta, reff, "Plain123Other", false, Proxy_, ref cookie_, true, true, 120000, 120000, ref _response, ref _error, ref Exception_);
            }
            while (string.IsNullOrEmpty(_response));
        }
        catch
        {
        }
        if (_response.IndexOf("captchaQuestion") > 0)
        {
            string text = _response.Substring(_response.IndexOf("captchaQuestion") + 18);
            frmCaptcha_0.string_1 = text.Substring(0, text.IndexOf("\""));
        }
    }

    internal void method_82(frmCaptcha frmCaptcha_0)
    {
        string _reponse = "";
        url = "https://www.irctc.co.in/eticketing/protected/mapps1/captchaganetate/BOOKINGWS/";
        Lock("Hitting captchaverify in= " + response);
        if (!ConnectHttp(url, null, Reffral, Proxy_, ref cookie_, true, true, 120000, 120000, ref _reponse, ref errormsg, ref Exception_, "GetTrain"))
        {
            Lock("Hitting captchaverify out error= " + response);
        }
        Lock("Hitting captchaverify out= " + response);
        if (_reponse.IndexOf("captchaQuestion") > 0)
        {
            string text = _reponse.Substring(_reponse.IndexOf("captchaQuestion") + 18);
            frmCaptcha_0.string_1 = text.Substring(0, text.IndexOf("\""));
        }
    }

    public static string Base64Encode(string plainText)
    {
        byte[] bytes = Encoding.UTF8.GetBytes(plainText);
        return Convert.ToBase64String(bytes);
    }


    internal bool method_83(string string_86, string string_87, string string_88, WebProxy webProxy_5, ref CookieContainer cookieContainer_2, bool bool_63, bool bool_64, int int_28, int int_29, ref string string_89, ref string string_90, ref WebException webException_1, string string_91)
    {
        int num = 0;
        int num2 = 0;
        int num3 = (bool_21 ? 1 : 0);
        bool flag = bool_36;
        bool flag2 = bool_29;
        bool flag3 = bool_38;
        bool flag4 = bool_37;
        long_0 = long_1;
        if (num3 != 0)
        {
            bool flag5 = bool_RedirectToBank;
        }
        int num4;
        while (true)
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            string_90 = "";
            string_89 = "";
            webException_1 = null;
            num4 = 0;
            Lock(Status + " Getting html in= " + string_86 + "\t Post:" + string_87);
            HttpWebResponse httpWebResponse = null;
            string text = "";
            int num5 = ((string_86.IndexOf("https://www.irctc.co.in", StringComparison.CurrentCultureIgnoreCase) == 0 || string_86.IndexOf("http://www.irctc.co.in", StringComparison.CurrentCultureIgnoreCase) == 0) ? 1 : 0);
            try
            {
                HttpRequestCachePolicy cachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0));
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(string_86);
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.ReadWriteTimeout = int_29;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                httpWebRequest.CookieContainer = cookieContainer_2;
                httpWebRequest.Referer = string_88;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.Headers.Set("Accept-Language", "en-US,en;q=0.9");
                httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36";
                httpWebRequest.Accept = "*/*";
                httpWebRequest.Headers.Set("Content-Language", "en");
                httpWebRequest.Headers.Set("Time", clsPostData.GetLocalTime());
                httpWebRequest.CachePolicy = cachePolicy;
                if (string_86.Contains("nexus-app.net"))
                {
                    httpWebRequest.ContentType = "application/json";
                }
                if (string_87 != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(string_87);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (num5 != 0 && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num2 < 7)
                {
                    Thread.Sleep(200);
                    num2++;
                    text = httpWebResponse.GetResponseHeader("Location");
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                string string_92 = "";
                method_96(httpWebResponse, ref string_92);
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    text = streamReader.ReadToEnd();
                }
                string_89 = text;
                num4 = 1;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("Getting Html out= " + response);
                break;
            }
            catch (WebException ex)
            {
                num4 = 0;
                webException_1 = ex;
                string message = ex.Message;
                bool flag6 = ex.Response != null;
                string text2 = "";
                num++;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (flag6)
                {
                    httpStatusCode = ((HttpWebResponse)ex.Response).StatusCode;
                    try
                    {
                        text2 = ":" + new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
                    }
                    catch
                    {
                    }
                }
                string_90 = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + message + "</ErrorCode>\t<ResponseCode>" + text2 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=", string_90);
                if (num >= 9)
                {
                    break;
                }
                if (message.Contains("The remote name could not be resolved") | message.Contains("Unable to connect to the remote server"))
                {
                    if (!message.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(1000);
                        break;
                    }
                    Thread.Sleep(2000);
                }
                else if (message.Contains("429") || message.Contains("Too Many Requests"))
                {
                    Thread.Sleep(3000);
                    if (num >= 5)
                    {
                        break;
                    }
                }
                else if (message.Contains("The underlying connection was closed:"))
                {
                    if (!message.Contains("An unexpected error occurred on a send") && !message.Contains("A connection that was expected to be kept alive was closed by the server"))
                    {
                        message.Contains("An unexpected error occurred on a receive");
                    }
                    if (num % 2 == 0)
                    {
                        string_52 = "Tls12";
                    }
                    if (num >= 5)
                    {
                        break;
                    }
                }
                else if (message.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    if (num % 2 == 0)
                    {
                        string_52 = "Tls12";
                    }
                    if (num >= 5)
                    {
                        break;
                    }
                }
                else if (message.Contains("The operation has timed out"))
                {
                    if (num >= 5)
                    {
                        break;
                    }
                }
                else if (message.Contains("429"))
                {
                    if (num >= 5)
                    {
                        break;
                    }
                    Thread.Sleep(3000);
                }
                else if (message.Contains("(406) Not Acceptable") || message.Contains("(401) Unauthorized") || message.Contains("(400) Bad Request") || (message.Contains("(404) Not Found") | message.Contains("(409) Conflict")) || (!message.Contains("(500) Internal Server Error") && !message.Contains("(502) Bad Gateway") && !message.Contains("(503) Server Unavailable") && !message.Contains("(504) Gateway Timeout")))
                {
                    break;
                }
            }
            catch (Exception ex2)
            {
                num4 = 0;
                string_90 = ex2.Message;
                method_74("WebRequestPost Ex=", string_90 + "  hitUrl" + string_86 + "  Inp=" + string_87 + " Ref=" + string_88 + " reHitCount=" + num);
                if (num < 3 && string_90.Contains("String reference not set to an instance"))
                {
                    string_90 = "";
                    num++;
                    continue;
                }
                break;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
        return num4 != 0;
    }

    internal bool method_85(string string_86, string string_87, string string_88, WebProxy webProxy_5, ref CookieContainer cookieContainer_2, bool bool_63, bool bool_64, int int_28, int int_29, ref string string_89, ref string string_90, ref WebException webException_1)
    {
        int num = 0;
        int num2 = 0;
        bool flag = false;
        int num3 = (bool_21 ? 1 : 0);
        int num4 = (bool_36 ? 1 : 0);
        int num5 = (bool_29 ? 1 : 0);
        int num6 = (bool_38 ? 1 : 0);
        int num7 = (bool_37 ? 1 : 0);
        string text = "";
        if (!string.IsNullOrEmpty(string_71))
        {
            text = string_71;
        }
        if (string_87 == null)
        {
            string_87 = "";
        }
        long_0 = long_1;
        if (num3 != 0 && bool_RedirectToBank)
        {
            string_90 = "Availability Already Received";
            return false;
        }
        int num8;
        while (true)
        {
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            string_90 = "";
            string_89 = "";
            webException_1 = null;
            num8 = 0;
            Lock(Status + " Getting html in= " + string_86 + "\t Post:" + string_87);
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            int num9 = ((string_86.IndexOf("https://www.irctc.co.in", StringComparison.CurrentCultureIgnoreCase) == 0 || string_86.IndexOf("http://www.irctc.co.in", StringComparison.CurrentCultureIgnoreCase) == 0) ? 1 : 0);
            try
            {
                ServicePointManager.Expect100Continue = false;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(string_86);
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Proxy = webProxy_5;
                if (flag)
                {
                    httpWebRequest.Proxy = webProxy_0;
                    flag = false;
                }
                string_52 = "Tls12";
                ServicePointManager.ServerCertificateValidationCallback = (object object_0, X509Certificate x509Certificate_0, X509Chain x509Chain_0, SslPolicyErrors sslPolicyErrors_0) => true;
                HttpRequestCachePolicy cachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0));
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                if ((string_52 == "Tls") | (string_52 == "Ssl3"))
                {
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls;
                }
                else if (string_52 == "Tls12")
                {
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                }
                if (int_28 > 0)
                {
                    httpWebRequest.Timeout = int_28;
                }
                if (int_29 > 0)
                {
                    httpWebRequest.ReadWriteTimeout = int_29;
                }
                byte[] bytes = Encoding.UTF8.GetBytes(string_87);
                if (bool_63 && cookieContainer_2 == null)
                {
                    cookieContainer_2 = new CookieContainer();
                }
                httpWebRequest.CookieContainer = cookieContainer_2;
                bool flag2;
                if (flag2 = string_87.Length > 0)
                {
                    httpWebRequest.Method = "POST";
                }
                else if (bool_15)
                {
                    httpWebRequest.Method = "POST";
                    bool_15 = false;
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                if (bool_40)
                {
                    httpWebRequest.Method = "PUT";
                    bool_40 = false;
                }
                else if (bool_41)
                {
                    httpWebRequest.Method = "DELETE";
                    bool_41 = false;
                }
                httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.ContentLength = bytes.Length;
                httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36";
                if (string_86.Contains(".paytm.in"))
                {
                    ServicePointManager.Expect100Continue = false;
                    if (bool_13)
                    {
                        bool_13 = false;
                        if (string_86.Contains("https://securegw.paytm.in/instaproxy/bankresponse/ICICIPAY/DC"))
                        {
                            httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                            httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                        }
                        else if (bool_14)
                        {
                            bool_14 = false;
                            httpWebRequest.Headers.Add("sec-ch-ua-mobile", "?0");
                            httpWebRequest.Headers.Add("Cache-Control", "max-age=0");
                            httpWebRequest.Headers.Add("sec-ch-ua-platform", "\"Windows\"");
                            httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                            httpWebRequest.Headers.Add("Sec-Fetch-User", "?1");
                            httpWebRequest.Headers.Add("Sec-Fetch-Dest", "document");
                            httpWebRequest.Headers.Add("Sec-Fetch-Site", "cross-site");
                            httpWebRequest.Headers.Add("Sec-Fetch-Mode", "navigate");
                            httpWebRequest.Headers.Add("sec-ch-ua", "\"Google Chrome\";v=\"95\", \"Chromium\";v=\"95\", \";Not A Brand\";v=\"99\"");
                            httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                            httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                            httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                        }
                        else
                        {
                            httpWebRequest.ContentType = "application/json";
                            httpWebRequest.Accept = "*/*";
                        }
                        httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                    }
                    else
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                        httpWebRequest.Headers.Add("X-Requested-With", "cris.org.in.prs.ima");
                        httpWebRequest.Headers.Add("Accept-Language", "en-IN,en-US;q=0.9,en;q=0.8");
                        httpWebRequest.Headers.Add("accept-encoding", "gzip, deflate");
                        httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                        httpWebRequest.Headers.Add("Cache-Control", "max-age=0");
                    }
                }
                if (string_86.ToLower().Contains("irctc.co.in"))
                {
                    httpWebRequest.AllowWriteStreamBuffering = false;
                }
                if (bool_51)
                {
                    bool_51 = false;
                    httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.Headers.Add("Cache-Control", "max-age=0");
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                }
                else if (string_86.ToLower().Contains("irctc.co.in") && !bool_21)
                {
                    httpWebRequest.Headers.Add("X-Requested-With", "XMLHttpRequest");
                }
                if (num3 != 0)
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                    httpWebRequest.Headers.Add("faces-request", "partial/ajax");
                    if (webProxy_5 != null)
                    {
                        httpWebRequest.Headers.Add("Cache-Control", "no-cache");
                        httpWebRequest.Headers.Add("Pragma", "no-cache");
                    }
                    bool_21 = false;
                }
                if (bool_23)
                {
                    httpWebRequest.ServicePoint.BindIPEndPointDelegate = method_76;
                }
                if (string_86.Contains("fss.co.in") || string_86.Contains("fssnet.co.in"))
                {
                    httpWebRequest.AllowAutoRedirect = false;
                }
                if (string_86.IndexOf("axisbiconnect", StringComparison.CurrentCultureIgnoreCase) > 0)
                {
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)";
                }
                if (string_86.IndexOf("middleware/MWServlet", StringComparison.CurrentCultureIgnoreCase) > 0)
                {
                    httpWebRequest.UserAgent = "Apache-HttpClient/android/" + string_88;
                    httpWebRequest.Connection = "keepalive";
                    httpWebRequest.Headers.Add("Cookie2", "$Version=" + 1);
                }
                if (bool_30)
                {
                    httpWebRequest.AllowAutoRedirect = false;
                    bool_30 = false;
                }
                else if (num9 != 0)
                {
                    httpWebRequest.AllowAutoRedirect = false;
                    httpWebRequest.Headers.Add("X-Priority", "5");
                    httpWebRequest.Headers.Add("x-msg-priority", "9");
                }
                if (num5 != 0)
                {
                    bool_29 = false;
                    httpWebRequest.ContentType = "application/json;charset=UTF-8";
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.5");
                }
                if (num4 != 0)
                {
                    httpWebRequest.ContentType = "application/json";
                    bool_36 = false;
                    if (num7 != 0)
                    {
                        bool_37 = false;
                        httpWebRequest.Headers.Add("browserName", "Chrome");
                        httpWebRequest.Headers.Add("internalIp", "192.168.1.2");
                        httpWebRequest.Headers.Add("assignedClientId", "null");
                        httpWebRequest.Headers.Add("osVersion", "Windows 7");
                        httpWebRequest.Headers.Add("clientId", "Web");
                        httpWebRequest.Headers.Add("deviceId", "null");
                        httpWebRequest.Headers.Add("browserVersion", "27.0.1453.116");
                        httpWebRequest.Headers.Add("userMachineIdentifier", "JNDF");
                        httpWebRequest.Headers.Add("appVersion", "null");
                    }
                    if (string_86.Contains("airtelmoney.in"))
                    {
                        httpWebRequest.Accept = "application/json";
                    }
                }
                if (num6 != 0)
                {
                    httpWebRequest.ContentType = "application/json;charset=UTF-8";
                    httpWebRequest.UserAgent = "Dalvik/2.1.0 (Linux; U; Android 5.1; A1601 Build/LMY47I";
                    httpWebRequest.Accept = "";
                    bool_38 = false;
                }
                if (string_86.Contains("https://checkout.razorpay.com/integration/irctc"))
                {
                    httpWebRequest.AllowAutoRedirect = true;
                }
                if (string_86.Contains("merchant.onlinesbi.sbi"))
                {
                    httpWebRequest.CachePolicy = cachePolicy;
                    httpWebRequest.Headers.Add("sec-ch-ua", "\"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"");
                    httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                }
                if (string_86.Contains("ecomVerifyOtp.action"))
                {
                    httpWebRequest.ContentType = "application/json";
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                }
                if (string_86.Contains("ecomSendOtp.action") || string_86.Contains("ecomDoTxn.action"))
                {
                    httpWebRequest.ContentType = "application/json";
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                    httpWebRequest.Headers.Add("version", "4.0");
                }
                if (string_86.Contains("www.airtel.in/bank/api/v1/auth/login/mpin"))
                {
                    httpWebRequest.ContentType = "application/json";
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                    httpWebRequest.Headers.Add("version", "4.0");
                    httpWebRequest.Headers.Add("channel", "WEB");
                }
                if (!string.IsNullOrEmpty(text))
                {
                    string[] array = Strings.Split(text, "&");
                    int num10 = Information.UBound(array);
                    for (int i = 0; i <= num10; i++)
                    {
                        string[] array2 = Strings.Split(array[i], "=");
                        httpWebRequest.Headers.Set(array2[0], array2[1]);
                    }
                    string_71 = "";
                }
                if (!string.IsNullOrEmpty(string_88))
                {
                    httpWebRequest.Referer = string_88;
                }
                if (flag2)
                {
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (num9 != 0 && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num2 < 20)
                {
                    Thread.Sleep(200);
                    num2++;
                    text2 = httpWebResponse.GetResponseHeader("Location");
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                string string_91 = "";
                method_96(httpWebResponse, ref string_91);
                if (bool_22)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                string_89 = text2;
                num8 = 1;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("Getting Html out= " + response);
                break;
            }
            catch (WebException ex)
            {
                num8 = 0;
                webException_1 = ex;
                string message = ex.Message;
                bool flag3 = ex.Response != null;
                string text3 = "";
                num++;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (flag3)
                {
                    httpStatusCode = ((HttpWebResponse)ex.Response).StatusCode;
                    try
                    {
                        text3 = ":" + new StreamReader(ex.Response.GetResponseStream()).ReadToEnd();
                    }
                    catch
                    {
                    }
                }
                string_90 = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + message + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=", string_90);
                if (num >= 9)
                {
                    break;
                }
                if (message.Contains("The remote name could not be resolved") | message.Contains("Unable to connect to the remote server"))
                {
                    if (!message.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(1000);
                        break;
                    }
                    Thread.Sleep(2000);
                }
                else if (message.Contains("The underlying connection was closed:"))
                {
                    if (!message.Contains("An unexpected error occurred on a send") && !message.Contains("A connection that was expected to be kept alive was closed by the server"))
                    {
                        message.Contains("An unexpected error occurred on a receive");
                    }
                    if (num % 2 == 0)
                    {
                        string_52 = "Tls12";
                    }
                    if (num == 3 || num == 4)
                    {
                        flag = true;
                    }
                    if (num >= 5)
                    {
                        break;
                    }
                }
                else if (message.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    if (num % 2 == 0)
                    {
                        string_52 = "Tls12";
                    }
                    if (num == 3 || num == 4)
                    {
                        flag = true;
                    }
                    if (num >= 5)
                    {
                        break;
                    }
                }
                else if (message.Contains("The operation has timed out"))
                {
                    if (num >= 5)
                    {
                        break;
                    }
                }
                else if (message.Contains("(406) Not Acceptable") || message.Contains("(401) Unauthorized") || message.Contains("(400) Bad Request") || (message.Contains("(404) Not Found") | message.Contains("(409) Conflict")) || (!message.Contains("(500) Internal Server Error") && !message.Contains("(502) Bad Gateway") && !message.Contains("(503) Server Unavailable") && !message.Contains("(504) Gateway Timeout")))
                {
                    break;
                }
            }
            catch (Exception ex2)
            {
                num8 = 0;
                string_90 = ex2.Message;
                method_74("WebRequestPost Ex=", string_90 + "  hitUrl" + string_86 + "  Inp=" + string_87 + " Ref=" + string_88 + " reHitCount=" + num);
                if (num < 3 && string_90.Contains("String reference not set to an instance"))
                {
                    string_90 = "";
                    num++;
                    continue;
                }
                break;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
        return num8 != 0;
    }


    private bool _httpRequest(string _url, string _deta, string _reff, string _type, bool bool_63, WebProxy webProxy_5, ref CookieContainer cookieContainer_2, bool bool_64, bool bool_65, int int_28, int int_29, ref string _response, ref string _error, ref WebException webException_1)
    {
        if (!isAPP)
        {
            int num = 0;
            bool flag = bool_21;
            if (bool_21)
            {
                bool_21 = false;
            }
            dateTime_0 = DateTime.Now;
            bool result;
            while (true)
            {
                result = false;
                bool flag2 = false;
                bool flag3 = false;
                num++;
                if (_url.Contains("bookingData") & isPremium_p)
                {
                    _url = _url.Replace("bookingData", "verifyPayment");
                    _deta = dsed;
                }
                long_0 = long_1;
                Stopwatch stopwatch = new Stopwatch();
                stopwatch.Start();
                _error = "";
                _response = "";
                string text = "";
                webException_1 = null;
                HttpWebResponse httpWebResponse = null;
                string text2 = "";
                try
                {
                    Uri uri = new Uri(_url);
                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                    if (_url.Contains("verifyPayment") & isPremium_p)
                    {
                        uriPNR = _url;
                        httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                    }
                    httpWebRequest.ServerCertificateValidationCallback = CheckCertificate;
                    ServicePointManager.Expect100Continue = false;
                    httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                    httpWebRequest.Proxy = webProxy_5;
                    httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                    httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                    httpWebRequest.KeepAlive = true;
                    httpWebRequest.Connection = "keepalive";
                    httpWebRequest.Timeout = int_28;
                    httpWebRequest.ReadWriteTimeout = int_29;
                    httpWebRequest.Accept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*";
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.AllowAutoRedirect = true;
                    httpWebRequest.Headers.Add("Origin", "https://www.irctc.co.in");
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.155 Safari/537.36";
                    if (!useragenttrue)
                    {
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36";
                        httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                        httpWebRequest.Headers.Add("sec-ch-ua", "\"Google Chrome\"; v = \"116\", \"Chromium\"; v = \"116\", \"Not(A:Brand\"; v = \"24\"");
                        httpWebRequest.Headers.Add("sec-ch-ua-mobile", "?0");
                        httpWebRequest.Headers.Add("sec-ch-ua-platform", "\"Windows\"");

                        httpWebRequest.Headers.Add("Sec-Fetch-Site", "same-origin");
                        httpWebRequest.Headers.Add("Sec-Fetch-Mode", "cors");
                        httpWebRequest.Headers.Add("Sec-Fetch-Dest", "empty");
                        //
                        httpWebRequest.Headers.Add("B2c8Y0FLvI-a", weba);
                        httpWebRequest.Headers.Add("B2c8Y0FLvI-b", webb);
                        httpWebRequest.Headers.Add("B2c8Y0FLvI-c", webc);
                        httpWebRequest.Headers.Add("B2c8Y0FLvI-d", webd);
                        httpWebRequest.Headers.Add("B2c8Y0FLvI-f", webf);
                        httpWebRequest.Headers.Add("B2c8Y0FLvI-z", webz);


                    }
                    httpWebRequest.Headers.Add("bmirak", "webbm");
                    httpWebRequest.Headers.Add("bmiyek", bmikey);

                    if (flag)
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                        if (webProxy_5 != null)
                        {
                            httpWebRequest.Headers.Add("Cache-Control", "no-cache");
                            httpWebRequest.Headers.Add("Pragma", "no-cache");
                        }
                        bool_21 = false;
                    }
                    if (cookieContainer_2 == null)
                    {
                        cookieContainer_2 = new CookieContainer();
                    }
                    httpWebRequest.CookieContainer = cookieContainer_2;
                    if (_type.Contains("Plain"))
                    {
                        httpWebRequest.Accept = "application/json, text/plain, */*";
                    }
                    else if (_type.Contains("text"))
                    {
                        httpWebRequest.Accept = "text/plain";
                    }
                    else if (_type.Contains("Java"))
                    {
                        httpWebRequest.Accept = "application/json";
                    }
                    if (_type.Contains("1") && !string.IsNullOrEmpty(class3_0._greq))
                    {
                        httpWebRequest.Headers.Add("greq", class3_0._greq);
                    }
                    if (_type.Contains("2"))
                    {
                        httpWebRequest.Headers.Add("spa-csrf-token", class3_0.token);
                    }
                    if (_type.Contains("3"))
                    {
                        httpWebRequest.Headers.Add("Authorization", class3_0._Authorization);
                    }
                    if (_type.Contains("Final"))
                    {
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    }
                    else if (_type.Contains("text"))
                    {
                        httpWebRequest.ContentType = "text/plain";
                    }
                    else if (_type.Contains("json"))
                    {
                        httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    }
                    else
                    {
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    }
                    if (!string.IsNullOrEmpty(string_70))
                    {
                        string value = string_70;
                        string_70 = null;
                        httpWebRequest.Headers.Add("lso", value);
                        string_70 = null;
                    }
                    if (bool_0)
                    {
                        bool_0 = false;
                        httpWebRequest.Headers.Add("authority", "www.google.com");
                        httpWebRequest.Accept = "*/*";
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded;charset=UTF-8";
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                        if (!string.IsNullOrEmpty(string_64))
                        {
                            httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/" + string_64 + " Safari/537.36";
                        }
                        httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                        httpWebRequest.Headers.Add("origin", "https://www.google.com");
                        httpWebRequest.Headers.Add("sec-fetch-dest", "empty");
                        httpWebRequest.Headers.Add("sec-fetch-mode", "cors");
                        httpWebRequest.Headers.Add("sec-fetch-site", "same-origin");
                        httpWebRequest.Headers.Add("x-client-data", "CKG1yQEIjrbJAQimtskBCMG2yQEIqZ3KAQi3uMoBCKzHygEI9cfKAQjnyMoBCOnIygEItMvKAQiNz8oBCNvVygEYisHKAQ==");
                    }
                    if (_url == "https://www.irctc.co.in/eticketing/PaymentRedirect")
                    {
                        httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                        HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.NoCacheNoStore));
                    }
                    if (_type.Contains("akm"))
                    {
                        httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                        httpWebRequest.ContentType = "text/plain;charset=UTF-8";
                        _reff = "https://www.irctc.co.in/nget/train-search";
                    }
                    if (!string.IsNullOrEmpty(_reff))
                    {
                        httpWebRequest.Referer = _reff;
                    }
                    if (!string.IsNullOrEmpty(_deta))
                    {
                        httpWebRequest.Method = "POST";
                        byte[] bytes = Encoding.UTF8.GetBytes(_deta);
                        httpWebRequest.ContentLength = bytes.Length;
                        httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                    }
                    else
                    {
                        httpWebRequest.Method = "GET";
                    }
                    httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                    switch (httpWebResponse.StatusCode)
                    {
                        case HttpStatusCode.MovedPermanently:
                        case HttpStatusCode.Found:
                        case HttpStatusCode.SeeOther:
                        case HttpStatusCode.TemporaryRedirect:
                            text2 = httpWebResponse.GetResponseHeader("Location");
                            if (text2.IndexOf("https://") == 0)
                            {
                                if (num >= 4 || text2.IndexOf("booking-confirm") > 0)
                                {
                                    break;
                                }
                                httpWebResponse.Close();
                                httpWebResponse = null;
                                _url = text2;
                                _deta = "";
                            }
                            else
                            {
                                if (text2.IndexOf("/") != 0 || num >= 4)
                                {
                                    break;
                                }
                                httpWebResponse.Close();
                                httpWebResponse = null;
                                int num2 = text2.IndexOf("/") + 1;
                                int num3 = text2.IndexOf("/", num2);
                                string value2 = text2.Substring(num2, num3 - num2);
                                _url = _url.Substring(0, _url.IndexOf(value2) - 1) + text2;
                                _deta = "";
                            }
                            goto end_IL_00c1;
                        case HttpStatusCode.NotModified:
                        case HttpStatusCode.UseProxy:
                        case HttpStatusCode.Unused:
                            text2 = "retry";
                            break;
                        default:
                            {
                                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                                {
                                    text2 = streamReader.ReadToEnd();
                                }
                                break;
                            }
                    }
                    if (httpWebResponse.Headers["csrf-token"] != null)
                    {
                        class3_0.token = httpWebResponse.Headers["csrf-token"];
                    }
                    _response = text2;
                    flag3 = true;
                    result = true;
                    Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\nURL:" + _url + "\nPostData:" + _deta + "\nReponse:" + _response);
                    if (string.IsNullOrEmpty(_response))
                    {
                        if (_url.Contains("avlFareenquiry"))
                        {
                            class3_0.bool_13 = true;
                        }
                        _response = "retry";
                    }
                    if (_url.Contains("avlFareenquiry") && _response.Contains("Unable to process your request"))
                    {
                        class3_0.bool_13 = true;
                    }
                    goto IL_0de2;
                end_IL_00c1:;
                }
                catch (WebException ex)
                {
                    WebException ex2 = (webException_1 = ex);
                    string text3 = "";
                    HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                    if (ex2.Response != null)
                    {
                        try
                        {
                            if (ex2.Response.Headers["csrf-token"] != null)
                            {
                                class3_0.token = ex2.Response.Headers["csrf-token"];
                            }
                            text3 = (_response = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd());
                        }
                        catch
                        {
                        }
                        httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                    }
                    _error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + ex2.Message + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                    method_74("WebRequestPost WebEx=", _error);
                    flag2 = true;
                    if (_error.Contains("The remote name could not be resolved") | _error.Contains("Unable to connect to the remote server"))
                    {
                        if (num < 3)
                        {
                            if (_error.ToUpper().Contains("SERVICEUNAVAILABLE"))
                            {
                                Thread.Sleep(2000);
                            }
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    if (!_error.Contains("Unable to connect to the remote server"))
                    {
                        if (_error.Contains("The underlying connection was closed:"))
                        {
                            if (_error.Contains("An unexpected error occurred on a send"))
                            {
                                string_52 = "Tls12";
                                if (num < 3)
                                {
                                    Thread.Sleep(400);
                                }
                                else
                                {
                                    flag3 = true;
                                }
                            }
                            else if (_error.Contains("A connection that was expected to be kept alive was closed by the server") || _error.Contains("An unexpected error occurred on a receive"))
                            {
                                Thread.Sleep(5000);
                                _response = "";
                                _error = "A connection that was expected to be kept alive was closed by the server";
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                        {
                            string_52 = "Tls12";
                            if (num < 3)
                            {
                                Thread.Sleep(400);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("The operation has timed out"))
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "The operation has timed out";
                            flag3 = true;
                        }
                        else if (_error.Contains("(406) Not Acceptable") | _error.Contains("(401) Unauthorized"))
                        {
                            flag3 = true;
                        }
                        else if (_error.Contains("(404) Not Found") | _error.Contains("(409) Conflict"))
                        {
                            flag3 = true;
                        }
                        else if (_error.Contains("(400) Bad Request"))
                        {
                            flag3 = true;
                            text = ex2.Response.Headers["csrf-token"];
                        }
                        else if (_error.Contains("(500) Internal Server Error"))
                        {
                            if (num <= 6)
                            {
                                Thread.Sleep(1000);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("(502) Bad Gateway"))
                        {
                            if (num <= 6)
                            {
                                Thread.Sleep(1000);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("(503) Server Unavailable"))
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag3 = true;
                        }
                        else if (_error.Contains("(504) Gateway Timeout"))
                        {
                            if (num < 6)
                            {
                                Thread.Sleep(1000);
                            }
                        }
                        else
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag3 = true;
                        }
                        goto IL_0de2;
                    }
                }
                catch (Exception ex3)
                {
                    _error = ex3.Message;
                    method_74("WebRequestPost Ex=", _error);
                    if (num > 2)
                    {
                        flag3 = true;
                    }
                    goto IL_0de2;

                }

                finally
                {
                    try
                    {
                        if (_url.Contains("https://www.irctc.co.in/eticketing/protected/mapps1/altAvlEnq/TC"))
                        {
                            webException_1 = null;
                            _error = null;

                        }
                        httpWebResponse?.Close();
                    }
                    catch
                    {
                    }
                }
                goto IL_0dc7;
            IL_0dc7:
                if (!bool_63 && !flag2)
                {
                    return result;
                }
                continue;
            IL_0de2:
                if (!string.IsNullOrEmpty(text))
                {
                    class3_0.token = text;
                }
                if (flag3)
                {
                    break;
                }
                if (num > 3)
                {
                }
                goto IL_0dc7;
            }
            return result;
        }
        return ConnectHttp(_url, _deta, null, webProxy_5, ref cookieContainer_2, bool_63: true, bool_64: true, int_28, int_29, ref _response, ref _error, ref webException_1, _type);
    }

    private bool ConnectHttp(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        if (_url.Contains("www.irctc") & (_Type_ != "Bank"))
        {
            _url = _url.Replace("www", "www.contents");
        }
        //if (_url.Contains("nlpCaptchaException=true"))
        //{
        //    _url = _url.Replace("nlpCaptchaException=true", "nlpCaptchaException=nil");
        //}
        //if (_url.Contains("validateUser?source=3"))
        //{
        //    _url = ((!s_Data_Private.Contains("3,a,")) ? _url.Replace("validateUser?source=3", "validateUser?source=1") : _url.Replace("validateUser?source=3", "validateUser"));
        //}
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        if (Request_Type == "Base")
        {
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                httpWebRequest.UserAgent = "IRCTC Rail Connect/4.2.12Android";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.Headers.Add("bmirak", "androidbm");
                httpWebRequest.Headers.Add("bmiyek", bmikey);//bmiyek: 84B79C6BB893629D26B99D123359F3CB
                if (_url.Contains("secure.paytm.in/oltp-web/processTransaction") && _data.Contains("MSISDN"))
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                    httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 7.0; SM-G925F Build/LMY47X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36";
                    httpWebRequest.Headers.Set("Accept-Language", "en-GB,en-US;q=0.8");
                    httpWebRequest.Headers.Set("Origin", "null");
                }
                if (_Type_ == "Bank")
                {
                    httpWebRequest.Headers.Set("Accept-Language", "en-US,en;q=0.8");
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*;q=0.8";
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 7.0; SM-G935F Build/NRD90M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36";
                }

                if (!string.IsNullOrEmpty(s_Data_Private))
                {
                    s_Data_Private = s_Data_Private.Replace(" ", "+");
                    if (SensorDataSend)
                    {
                        httpWebRequest.Headers.Add("X-acf-sensor-data", s_Data_Private);
                    }
                    httpWebRequest.UserAgent = "IRCTC Rail Connect/4.2.40Android";
                    httpWebRequest.Headers.Add("bmirak", "androidbm");

                }
                //else
                //{
                //    if (!string.IsNullOrEmpty(s_Data_Private))
                //    {
                //        if (SensorDataSend)
                //        {
                //            httpWebRequest.Headers.Add("X-acf-sensor-data", s_Data_Private);
                //        }
                //        httpWebRequest.UserAgent = "IRCTC Rail Connect/3.1.27iOS";
                //        httpWebRequest.Headers.Add("bmirak", "iosbm");
                //    }

                //}
                if ((_Type_ != "Bank") & (_Type_ != "pay"))
                {
                    httpWebRequest.Accept = "application/json";
                    if (_Type_ != "Login")
                    {
                        httpWebRequest.Headers.Set("greq", greq);
                        httpWebRequest.Headers.Set("mup", mup);
                    }
                }
                if (_Type_ == "pay")
                {
                    httpWebRequest.UserAgent = "Dalvik/2.1.0 (Linux; U; Android 6.0.1; SM-J500F Build/MMB29M)";
                    httpWebRequest.AllowAutoRedirect = true;
                }
                if ((_Type_ == "validateUser") | (_Type_ == "GetTrain"))
                {
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Logincnf")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                }
                if (_Type_ == "Login")
                {
                    httpWebRequest.Headers.Add("Authorization", "Basic " + _Authrization);
                }
                if (_Type_ == "air")
                {
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 8.0.0; SM-G570F Build/R16NW; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.5481.65 Mobile Safari/537.36";
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                    httpWebRequest.Headers.Add("X-Requested-With", "cris.org.in.prs.ima");
                }
                if (_Type_ == "pass")
                {
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                    httpWebRequest.Headers.Set("greq", greq);
                    httpWebRequest.Headers.Set("mup", mup);
                    httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    httpWebRequest.Accept = "application/json";
                    httpWebRequest.Headers.Add("content-language", "en");

                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }
                if (_Type_ == "json")
                {
                    httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    httpWebRequest.Accept = "application/json";
                    httpWebRequest.Headers.Add("content-language", "en");
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                }
                if (_Type_ == "Plain135text")
                {
                    httpWebRequest.ContentType = "text/plain";
                    httpWebRequest.Accept = "text/plain";
                    httpWebRequest.Headers.Add("Authorization", _Authrization);
                    httpWebRequest.Headers.Add("dss", jwtToken);
                    httpWebRequest.Headers.Set("greq", greq);
                }
                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_22)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                //s_Data_Private = method_token();
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        _reponse = "retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0dc6;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0dc6;
            IL_0dc6:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }

    private bool airpay2(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        //if (_url.Contains("www.irctc"))
        //{
        //    _url = _url.Replace("www", "www.contents");
        //}
        if (_url.Contains("validateUser?source=3"))
        {
            _url = ((!s_Data_Private.Contains("3,a,")) ? _url.Replace("validateUser?source=3", "validateUser?source=1") : _url.Replace("validateUser?source=3", "validateUser"));
        }
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        if (Request_Type == "Base")
        {
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 8.0.0; SM-G570F Build/R16NW; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.5481.65 Mobile Safari/537.36";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded; charset=UTF-8";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.ContentType = "application/x-www-form-urlencoded; charset=UTF-8";
                httpWebRequest.Accept = "*/*";//"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                httpWebRequest.Headers.Add("X-Requested-With", "XMLHttpRequest");
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }

                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_22)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (httpWebResponse.Headers["Location"] != null)
                {
                    class3_0.easebuz = httpWebResponse.Headers["Location"].ToString().Trim();
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                //s_Data_Private = method_token();
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        _reponse = "retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0dc6;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0dc6;
            IL_0dc6:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }

    private bool airpayFuck(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        //if (_url.Contains("www.irctc"))
        //{
        //    _url = _url.Replace("www", "www.contents");
        //}
        if (_url.Contains("validateUser?source=3"))
        {
            _url = ((!s_Data_Private.Contains("3,a,")) ? _url.Replace("validateUser?source=3", "validateUser?source=1") : _url.Replace("validateUser?source=3", "validateUser"));
        }
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        if (Request_Type == "Base")
        {
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 8.0.0; SM-G570F Build/R16NW; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.5481.65 Mobile Safari/537.36";
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Accept = "en-US,en;q=0.9";//"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                httpWebRequest.Headers.Add("X-Requested-With", "XMLHttpRequest");

                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }

                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_22)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (httpWebResponse.Headers["Location"] != null)
                {
                    class3_0.easebuz = httpWebResponse.Headers["Location"].ToString().Trim();
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                //s_Data_Private = method_token();
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        _reponse = "retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0dc6;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0dc6;
            IL_0dc6:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }

    private bool airpayPAYZAPP(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        //if (_url.Contains("www.irctc"))
        //{
        //    _url = _url.Replace("www", "www.contents");
        //}
        if (_url.Contains("validateUser?source=3"))
        {
            _url = ((!s_Data_Private.Contains("3,a,")) ? _url.Replace("validateUser?source=3", "validateUser?source=1") : _url.Replace("validateUser?source=3", "validateUser"));
        }
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        if (Request_Type == "Base")
        {
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 8.0.0; SM-G570F Build/R16NW; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.5481.65 Mobile Safari/537.36";
                //httpWebRequest.ContentType = "application/x-www-form-urlencoded; charset=UTF-8";
                httpWebRequest.AllowAutoRedirect = false;
                //httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.Accept = "application/json, text/plain, */*";//"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                httpWebRequest.Headers.Add("X-Requested-With", "cris.org.in.prs.ima");

                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }

                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_22)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (httpWebResponse.Headers["Location"] != null)
                {
                    class3_0.easebuz = httpWebResponse.Headers["Location"].ToString().Trim();
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                //s_Data_Private = method_token();
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        _reponse = "retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0dc6;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0dc6;
            IL_0dc6:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }

    private bool airpayF(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        //if (_url.Contains("www.irctc"))
        //{
        //    _url = _url.Replace("www", "www.contents");
        //}
        if (_url.Contains("validateUser?source=3"))
        {
            _url = ((!s_Data_Private.Contains("3,a,")) ? _url.Replace("validateUser?source=3", "validateUser?source=1") : _url.Replace("validateUser?source=3", "validateUser"));
        }
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        if (Request_Type == "Base")
        {
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 8.0.0; SM-G570F Build/R16NW; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.5481.65 Mobile Safari/537.36";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded; charset=UTF-8";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.Accept = "application/json, text/javascript, */*; q=0.01";//"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                httpWebRequest.Headers.Add("X-Requested-With", "XMLHttpRequest");
                if (_Type_ == "payment")
                {
                    httpWebRequest.Accept = "application/json, text/javascript, */*; q=0.01";

                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }

                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_22)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (httpWebResponse.Headers["Location"] != null)
                {
                    class3_0.easebuz = httpWebResponse.Headers["Location"].ToString().Trim();
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                //s_Data_Private = method_token();
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        _reponse = "retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0dc6;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0dc6;
            IL_0dc6:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }

    private bool airpay_PAYTMQR(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        //if (_url.Contains("www.irctc"))
        //{
        //    _url = _url.Replace("www", "www.contents");
        //}
        //if (_url.Contains("validateUser?source=3"))
        //{
        //    _url = ((!s_Data_Private.Contains("3,a,")) ? _url.Replace("validateUser?source=3", "validateUser?source=1") : _url.Replace("validateUser?source=3", "validateUser"));
        //}
        //if (_url.Contains("bookingData"))
        //{
        //    _url = _url.Replace("bookingData", "verifyPayment");
        //    _data = dsed;
        //}
        if (Request_Type == "Base")
        {
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                httpWebRequest.Headers.Add("X-Requested-With", "XMLHttpRequest");
                if (_Type_ == "payment")
                {
                    httpWebRequest.Accept = "application/json, text/javascript, */*; q=0.01";

                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }

                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_22)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (httpWebResponse.Headers["Location"] != null)
                {
                    class3_0.easebuz = httpWebResponse.Headers["Location"].ToString().Trim();
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                //s_Data_Private = method_token();
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        _reponse = "retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0dc6;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0dc6;
            IL_0dc6:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }

    private bool airpay(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _reponse, ref string _Error, ref WebException webExcep_, string _Type_)
    {
        int num = 0;
        long_0 = long_1;
        string text = "";
        if (bool_21)
        {
            bool_21 = false;
        }
        //if (_url.Contains("www.irctc"))
        //{
        //    _url = _url.Replace("www", "www.contents");
        //}
        if (_url.Contains("validateUser?source=3"))
        {
            _url = ((!s_Data_Private.Contains("3,a,")) ? _url.Replace("validateUser?source=3", "validateUser?source=1") : _url.Replace("validateUser?source=3", "validateUser"));
        }
        if (_url.Contains("bookingData"))
        {
            _url = _url.Replace("bookingData", "verifyPayment");
            _data = dsed;
        }
        if (Request_Type == "Base")
        {
        }
        dateTime_0 = DateTime.Now;
        _Type_ = Request_Type;
        while (true)
        {
            bool flag = false;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _Error = "";
            _reponse = "";
            webExcep_ = null;
            bool result = false;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                dateTime_3 = DateTime.Now;
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                if (bool_48)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.CookieContainer = _cookie;
                httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 8.0.0; SM-G570F Build/R16NW; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/110.0.5481.65 Mobile Safari/537.36";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded; charset=UTF-8";
                httpWebRequest.AllowAutoRedirect = false;
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                httpWebRequest.Headers.Add("X-Requested-With", "XMLHttpRequest");
                if (_Type_ == "payment")
                {
                    httpWebRequest.Accept = "application/json, text/javascript, */*; q=0.01";

                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }

                if (_data != null)
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_data);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (flag && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num < 20)
                {
                    Thread.Sleep(200);
                    num++;
                    httpWebResponse.Close();
                    httpWebResponse = null;
                    continue;
                }
                if (bool_22)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (bool_24)
                {
                    string_29 = httpWebResponse.ResponseUri.ToString();
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text2 = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                if (_Type_ == "Logincnf")
                {
                    keyFromServer = text2;
                }
                if (httpWebResponse.Headers["X-Request-For"] != null)
                {
                    text = httpWebResponse.Headers["X-Request-For"].ToString().Trim();
                    jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                }
                if (httpWebResponse.Headers["Date"] != null)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                if (httpWebResponse.Headers["Location"] != null)
                {
                    class3_0.easebuz = httpWebResponse.Headers["Location"].ToString().Trim();
                }
                _reponse = text2;
                result = true;
                stopwatch.Stop();
                long_1 = stopwatch.ElapsedMilliseconds;
                long_2 = (long_1 + long_0) / 2;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\n URL:" + _url + "\n PostData:" + _data + "\nReponse:" + _reponse);
                return result;
            }
            catch (WebException ex)
            {
                //s_Data_Private = method_token();
                WebException ex2 = (webExcep_ = ex);
                string text3 = "";
                string text4 = ex2.Message;
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        text3 = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd();
                        if (ex2.Response.Headers["X-Request-For"] != null)
                        {
                            text = ex2.Response.Headers["X-Request-For"].ToString().Trim();
                            jwtToken = jwtutils.createJwtToken(randomGeneratedKey, keyFromServer, greq, text);
                        }
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _reponse = text3;
                if (text4.Contains("(503) Server Unavailable"))
                {
                    num++;
                    if (num < 8)
                    {
                        Application.DoEvents();
                        Thread.Sleep(200);
                        continue;
                    }
                    return false;
                }
                if (text4.Contains("The remote name could not be resolved") | text4.Contains("Unable to connect to the remote server"))
                {
                    if (text4.ToUpper().Contains("SERVICEUNAVAILABLE"))
                    {
                        Thread.Sleep(2000);
                        _reponse = "retry";
                    }
                    else
                    {
                        Thread.Sleep(1000);
                        _reponse = "retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The underlying connection was closed:"))
                {
                    if (text4.Contains("An unexpected error occurred on a send"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    if (!text4.Contains("A connection that was expected to be kept alive was closed by the server") && !text4.Contains("An unexpected error occurred on a receive"))
                    {
                        _reponse = "retry";
                        continue;
                    }
                    _reponse = "retry";
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:retry";
                    }
                    goto IL_0dc6;
                }
                if (text4.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                {
                    _reponse = "retry";
                    goto IL_0dc6;
                }
                if (text4.Contains("Server error") || text4.Contains("Bad Gateway"))
                {
                    _reponse = "retry";
                    continue;
                }
                if (text4.Contains("The operation has timed out"))
                {
                    if (string.IsNullOrEmpty(text))
                    {
                        _reponse = "new:goahead";
                    }
                }
                else if (text4.Contains("(400) Bad Request"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(401) Unauthorized"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(404) Not Found"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(406) Not Acceptable"))
                {
                    _reponse = text3;
                    _reponse = "new:retry";
                    if (text3.Contains("evaluation time"))
                    {
                        try
                        {
                            string text5 = text3.Substring(text3.IndexOf("evaluation time NumericDate"));
                            text5 = text5.Substring(text5.IndexOf("->") + 3);
                            text5 = text5.Substring(0, text5.IndexOf("IST") - 1);
                            DateTime dateTime = DateTime.ParseExact(text5, "MMM d, yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
                            string string_ = dateTime.ToString("M-d-yyyy").Replace(dateTime.Year.ToString(), (dateTime.Year % 100).ToString());
                            string string_2 = dateTime.ToString("hh:mm:ss tt");
                            method_20(string_);
                            method_21(string_2);
                        }
                        catch
                        {
                        }
                    }
                }
                else if (text4.Contains("(409) Conflict"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(415) Unsupported Media Type"))
                {
                    _reponse = text3;
                }
                else if (text4.Contains("(500) Internal Server Error"))
                {
                    _reponse = "retry";
                    _reponse = "new:goahead";
                }
                else if (text4.Contains("(502) Bad Gateway"))
                {
                    _reponse = "retry";
                    _reponse = "new:retry";
                }
                else if (text4.Contains("(503) Server Unavailable"))
                {
                    _reponse = "new:retry";
                    text4 = "A connection that was expected to be kept alive was closed by the server";
                }
                else if (text4.Contains("(504) Gateway Timeout"))
                {
                    _reponse = "retry";
                }
                else if (string.IsNullOrEmpty(text))
                {
                    _reponse = "new:goahead";
                }
                goto IL_0dc6;
            IL_0dc6:
                _Error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + text4 + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=\t", _Error);
                return result;
            }
            catch (Exception ex3)
            {
                _Error = ex3.Message;
                method_74("WebRequestPost Ex=\t", _Error);
                return result;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
        }
    }



    private bool NgtHttpReq(string _url, string _data, string _reff, WebProxy webProxy_5, ref CookieContainer _cookie, bool bool_63, bool bool_64, int int_28, int int_29, ref string _resp, ref string _error, ref WebException webEx, string _type)
    {
        if (!isAPP)
        {
            int num = 0;
            int num2 = 0;
            bool flag = false;
            bool flag2 = bool_21;
            long_0 = long_1;
            if (bool_21)
            {
                bool_21 = false;
            }
            dateTime_0 = DateTime.Now;
            bool flag4;
            bool flag5;
            bool result;
            do
            {
                bool flag3 = false;
                flag4 = false;
                flag5 = false;
                Stopwatch stopwatch = new Stopwatch();
                stopwatch.Start();
                _error = "";
                _resp = "";
                webEx = null;
                result = false;
                HttpWebResponse httpWebResponse = null;
                string text = "";
                try
                {
                    Uri requestUri = new Uri(_url);
                    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUri);
                    ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                    ServicePointManager.Expect100Continue = false;
                    httpWebRequest.KeepAlive = true;
                    httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                    httpWebRequest.Proxy = webProxy_5;
                    httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                    httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                    httpWebRequest.Timeout = int_28;
                    httpWebRequest.ReadWriteTimeout = int_29;
                    httpWebRequest.CookieContainer = _cookie;
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.AllowAutoRedirect = false;
                    httpWebRequest.Connection = "keepalive";
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                    httpWebRequest.Headers.Add("bmirak", "webbm");
                    httpWebRequest.Headers.Add("sec-ch-ua", "\"Google Chrome\"; v = \"107\", \"Chromium\"; v = \"107\", \"Not=A?Brand\"; v = \"24\"");
                    httpWebRequest.Headers.Add("sec-ch-ua-mobile", "?0");
                    httpWebRequest.Headers.Add("sec-ch-ua-platform", "\"Windows\"");
                    httpWebRequest.Headers.Add("Origin", "https://www.irctc.co.in");
                    httpWebRequest.Headers.Add("Sec-Fetch-Site", "same-origin");
                    httpWebRequest.Headers.Add("Sec-Fetch-Mode", "cors");
                    httpWebRequest.Headers.Add("Sec-Fetch-Dest", "empty");
                    if (_url.Contains("secure.paytm.in/oltp-web/processTransaction") && _data.Contains("MSISDN"))
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*;q=0.8";
                        httpWebRequest.Headers.Set("X-Requested-With", "cris.org.in.prs.ima");
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                        httpWebRequest.Headers.Set("Accept-Language", "en-GB,en-US;q=0.8");
                        httpWebRequest.Headers.Set("Origin", "null");
                    }
                    if (_type == "Bank")
                    {
                        httpWebRequest.Headers.Set("Accept-Language", "en-US,en;q=0.8");
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                    }
                    if (flag2)
                    {
                        httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                        bool_21 = false;
                    }
                    if (_type.Contains("Plain"))
                    {
                        httpWebRequest.Accept = "application/json, text/plain, */*";
                        httpWebRequest.Headers.Add("Content-Language", "en");
                    }
                    else if (_type.Contains("text"))
                    {
                        httpWebRequest.Accept = "text/plain";
                    }
                    else if (_type.Contains("Java"))
                    {
                        httpWebRequest.Accept = "application/json";
                    }
                    if (!string.IsNullOrEmpty(class3_0._greq))
                    {
                        httpWebRequest.Headers.Add("greq", class3_0._greq);
                    }
                    if (!string.IsNullOrEmpty(class3_0.token))
                    {
                        httpWebRequest.Headers.Add("spa-csrf-token", class3_0.token);
                    }
                    if (!string.IsNullOrEmpty(class3_0._Authorization))
                    {
                        httpWebRequest.Headers.Add("Authorization", class3_0._Authorization);
                    }
                    if (_type.Contains("text"))
                    {
                        httpWebRequest.ContentType = "text/plain";
                    }
                    else if (_type.Contains("json"))
                    {
                        httpWebRequest.ContentType = "application/json; charset=UTF-8";
                    }
                    else
                    {
                        httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    }
                    if (!string.IsNullOrEmpty(_reff))
                    {
                        httpWebRequest.Referer = _reff;
                    }
                    if (!string.IsNullOrEmpty(_data))
                    {
                        httpWebRequest.Method = "POST";
                        byte[] bytes = Encoding.UTF8.GetBytes(_data);
                        httpWebRequest.ContentLength = bytes.Length;
                        httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                    }
                    else
                    {
                        httpWebRequest.Method = "GET";
                    }
                    httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                    if (flag3 && (httpWebResponse.StatusCode == HttpStatusCode.Found || httpWebResponse.StatusCode == HttpStatusCode.MovedPermanently) && httpWebResponse.Headers["Location"].ToString().Contains("error") && num2 < 20)
                    {
                        Thread.Sleep(200);
                        num2++;
                        httpWebResponse.Close();
                        httpWebResponse = null;
                        continue;
                    }
                    if (bool_22)
                    {
                        dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                    }
                    if (bool_24)
                    {
                        string_29 = httpWebResponse.ResponseUri.ToString();
                    }
                    using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                    {
                        if (bool_64)
                        {
                            text = streamReader.ReadToEnd();
                        }
                        else
                        {
                            httpWebRequest.Abort();
                        }
                    }
                    if (httpWebResponse.Headers["csrf-token"] != null)
                    {
                        class3_0.token = httpWebResponse.Headers["csrf-token"];
                    }
                    if (bool_22)
                    {
                        dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                    }
                    _resp = text;
                    result = true;
                    stopwatch.Stop();
                    long_1 = stopwatch.ElapsedMilliseconds;
                    long_2 = (long_1 + long_0) / 2;
                    Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\nURL:" + _url + "\nPostData:" + _data + "\nReponse:" + _resp);
                }
                catch (WebException ex)
                {
                    WebException ex2 = (webEx = ex);
                    string text2 = "";
                    HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                    if (ex2.Response != null)
                    {
                        try
                        {
                            if (ex2.Response.Headers["csrf-token"] != null)
                            {
                                class3_0.token = ex2.Response.Headers["csrf-token"];
                            }
                            text2 = (_resp = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd());
                        }
                        catch
                        {
                        }
                        httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                    }
                    _error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + ex2.Message + "</ErrorCode>\t<ResponseCode>" + text2 + "</ResponseCode>";
                    method_74("WebRequestPost WebEx=\t", _error);
                    flag4 = true;
                    if (_error.Contains("The remote name could not be resolved") | _error.Contains("Unable to connect to the remote server"))
                    {
                        if (num < 3)
                        {
                            method_74("WebRequestPost Error ", "SERVICE UNAVAILABLE Rehit = " + num);
                            if (_error.ToUpper().Contains("SERVICEUNAVAILABLE"))
                            {
                                Thread.Sleep(2000);
                            }
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("The underlying connection was closed:"))
                    {
                        if (_error.Contains("An unexpected error occurred on a send"))
                        {
                            if (num < 3)
                            {
                                Thread.Sleep(400);
                            }
                            else
                            {
                                flag5 = true;
                            }
                        }
                        else if (_error.Contains("A connection that was expected to be kept alive was closed by the server") || _error.Contains("An unexpected error occurred on a receive"))
                        {
                            _resp = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                    {
                        if (num < 3)
                        {
                            Thread.Sleep(400);
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("The operation has timed out"))
                    {
                        _resp = "new:goahead";
                        _error = "The operation has timed out";
                        flag5 = true;
                    }
                    else if (_error.Contains("(401) Unauthorized"))
                    {
                        flag5 = true;
                    }
                    else if (_error.Contains("(406) Not Acceptable"))
                    {
                        _resp = "";
                        flag5 = true;
                    }
                    else if (_error.Contains("(400) Bad Request"))
                    {
                        flag5 = true;
                    }
                    else if (_error.Contains("(404) Not Found") | _error.Contains("(409) Conflict"))
                    {
                        flag5 = true;
                    }
                    else if (_error.Contains("(500) Internal Server Error"))
                    {
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("(502) Bad Gateway"))
                    {
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag5 = true;
                        }
                    }
                    else if (_error.Contains("(503) Server Unavailable"))
                    {
                        _resp = "";
                        _error = "A connection that was expected to be kept alive was closed by the server";
                        flag5 = true;
                    }
                    else if (_error.Contains("(504) Gateway Timeout"))
                    {
                        if (num < 6)
                        {
                            Thread.Sleep(1000);
                        }
                    }
                    else
                    {
                        _resp = "new:goahead";
                        _error = "A connection that was expected to be kept alive was closed by the server";
                        flag5 = true;
                    }
                }
                catch (Exception ex3)
                {
                    _error = ex3.Message;
                    method_74("WebRequestPost Ex=\t", _error);
                }
                finally
                {
                    try
                    {
                        httpWebResponse?.Close();
                    }
                    catch
                    {
                    }
                }
            }
            while (!flag5 && (flag || flag4));
            return result;
        }
        return ConnectHttp(_url, _data, null, webProxy_5, ref _cookie, true, true, int_28, int_29, ref _resp, ref _error, ref webEx, _type);
    }


    private bool _httpRequest_Paytmqr(string _url, string _deta, string _reff, string _type, bool bool_63, WebProxy webProxy_5, ref CookieContainer cookieContainer_2, bool bool_64, bool bool_65, int int_28, int int_29, ref string _response, ref string _error, ref WebException webException_1)
    {

        int num = 0;
        bool flag = bool_21;
        if (bool_21)
        {
            bool_21 = false;
        }
        dateTime_0 = DateTime.Now;
        bool result;
        while (true)
        {
            result = false;
            bool flag2 = false;
            bool flag3 = false;
            num++;
            if (_url.Contains("bookingData") & isPremium_p)
            {
                _url = _url.Replace("bookingData", "verifyPayment");
                _deta = dsed;
            }
            long_0 = long_1;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _error = "";
            _response = "";
            string text = "";
            webException_1 = null;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                Uri uri = new Uri(_url);
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                if (_url.Contains("verifyPayment") & isPremium_p)
                {
                    uriPNR = _url;
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                httpWebRequest.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.KeepAlive = true;
                //httpWebRequest.Connection = "keepalive";
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                httpWebRequest.Accept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.AllowAutoRedirect = true;
                httpWebRequest.UserAgent = class3_0.DISHAUSERAGENT;//"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36";
                httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                httpWebRequest.Headers.Add("sec-ch-ua", "\"Google Chrome\"; v = \"111\", \"Chromium\"; v = \"111\", \"Not A(Brand\"; v = \"8\"");
                //httpWebRequest.Headers.Add("sec-ch-ua", "\"Chromium\";v=\"110\", \"Google Chrome\";v=\"110\", \"Not; A=Brand\";v=\"24\"");
                httpWebRequest.Headers.Add("sec-ch-ua-mobile", "?0");
                httpWebRequest.Headers.Add("sec-ch-ua-platform", "\"windows\"");
                if (_url.Contains("https://securegw.paytm.in/"))
                {
                    httpWebRequest.Headers.Add("Origin", "https://securegw.paytm.in");
                }
                else
                {
                    httpWebRequest.Headers.Add("Origin", "https://irctc.corover.ai");
                }
                httpWebRequest.Headers.Add("Sec-Fetch-Site", "same-origin");
                httpWebRequest.Headers.Add("Sec-Fetch-Mode", "cors");
                httpWebRequest.CookieContainer = cookieContainer_2;
                if (flag)
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                    if (webProxy_5 != null)
                    {
                        httpWebRequest.Headers.Add("Cache-Control", "no-cache");
                        httpWebRequest.Headers.Add("Pragma", "no-cache");
                    }
                    bool_21 = false;
                }
                //if (cookieContainer_2 == null)
                //{
                //    cookieContainer_2 = new CookieContainer();
                //}
                //httpWebRequest.CookieContainer = cookieContainer_2;
                if (_type.Contains("Plain"))
                {
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                }
                else if (_type.Contains("text"))
                {
                    httpWebRequest.Accept = "text/plain";
                }
                else if (_type.Contains("Java"))
                {
                    httpWebRequest.Accept = "application/json";
                }
                //if (_type.Contains("1") && !string.IsNullOrEmpty(class3_0._greq))
                //{
                //    httpWebRequest.Headers.Add("greq", class3_0._greq);
                //}
                //if (_type.Contains("2"))
                //{
                //    httpWebRequest.Headers.Add("spa-csrf-token", class3_0.token);
                //}
                //if (_type.Contains("3"))
                //{
                //    httpWebRequest.Headers.Add("Authorization", class3_0._Authorization);
                //}
                if (_type.Contains("4"))
                {
                    httpWebRequest.Headers.Add("cxtoken", class3_0.cxtoken);
                }
                if (_type.Contains("5"))
                {
                    httpWebRequest.Headers.Add("app-id", class3_0.appid);
                    httpWebRequest.Headers.Add("auth-key", class3_0.authkey);
                }
                if (_type.Contains("Final"))
                {
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                }
                else if (_type.Contains("text"))
                {
                    httpWebRequest.ContentType = "text/plain";
                }
                else if (_type.Contains("json"))
                {
                    httpWebRequest.ContentType = "application/json";
                }
                else
                {
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                }
                if (!string.IsNullOrEmpty(string_70))
                {
                    string value = string_70;
                    string_70 = null;
                    httpWebRequest.Headers.Add("lso", value);
                    string_70 = null;
                }
                if (bool_0)
                {
                    bool_0 = false;
                    httpWebRequest.Headers.Add("authority", "www.google.com");
                    httpWebRequest.Accept = "*/*";
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded;charset=UTF-8";
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                    if (!string.IsNullOrEmpty(string_64))
                    {
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/" + string_64 + " Safari/537.36";
                    }
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                    httpWebRequest.Headers.Add("origin", "https://www.google.com");
                    httpWebRequest.Headers.Add("sec-fetch-dest", "empty");
                    httpWebRequest.Headers.Add("sec-fetch-mode", "cors");
                    httpWebRequest.Headers.Add("sec-fetch-site", "same-origin");
                    httpWebRequest.Headers.Add("x-client-data", "CKG1yQEIjrbJAQimtskBCMG2yQEIqZ3KAQi3uMoBCKzHygEI9cfKAQjnyMoBCOnIygEItMvKAQiNz8oBCNvVygEYisHKAQ==");
                }
                if (_url == "https://www.irctc.co.in/eticketing/PaymentRedirect")
                {
                    httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                    RequestCachePolicy requestCachePolicy2 = (httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.NoCacheNoStore));
                    HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)requestCachePolicy2;
                }
                if (_type.Contains("akm"))
                {
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                    httpWebRequest.ContentType = "text/plain;charset=UTF-8";
                    _reff = "https://www.irctc.co.in/nget/train-search";
                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }
                if (!string.IsNullOrEmpty(_deta))
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_deta);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                switch (httpWebResponse.StatusCode)
                {
                    case HttpStatusCode.MovedPermanently:
                    case HttpStatusCode.Found:
                    case HttpStatusCode.SeeOther:
                    case HttpStatusCode.TemporaryRedirect:
                        text2 = httpWebResponse.GetResponseHeader("Location");
                        if (text2.IndexOf("https://") == 0)
                        {
                            if (num >= 4 || text2.IndexOf("booking-confirm") > 0)
                            {
                                break;
                            }
                            httpWebResponse.Close();
                            httpWebResponse = null;
                            _url = text2;
                            _deta = "";
                        }
                        else
                        {
                            if (text2.IndexOf("/") != 0 || num >= 4)
                            {
                                break;
                            }
                            httpWebResponse.Close();
                            httpWebResponse = null;
                            int num2 = text2.IndexOf("/") + 1;
                            int num3 = text2.IndexOf("/", num2);
                            string value2 = text2.Substring(num2, num3 - num2);
                            _url = _url.Substring(0, _url.IndexOf(value2) - 1) + text2;
                            _deta = "";
                        }
                        goto end_IL_00c1;
                    case HttpStatusCode.NotModified:
                    case HttpStatusCode.UseProxy:
                    case HttpStatusCode.Unused:
                        text2 = "retry";
                        break;
                    default:
                        {
                            using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                            {
                                text2 = streamReader.ReadToEnd();
                            }
                            break;
                        }
                }
                if (httpWebResponse.Headers["csrf-token"] != null)
                {
                    class3_0.token = httpWebResponse.Headers["csrf-token"];
                }
                _response = text2;
                flag3 = true;
                result = true;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\nURL:" + _url + "\nPostData:" + _deta + "\nReponse:" + _response);
                if (string.IsNullOrEmpty(_response))
                {
                    if (_url.Contains("avlFareenquiry"))
                    {
                        class3_0.bool_13 = true;
                    }
                    _response = "retry";
                }
                if (_url.Contains("avlFareenquiry") && _response.Contains("Unable to process your request"))
                {
                    class3_0.bool_13 = true;
                }
                goto IL_0e0b;
            end_IL_00c1:;
            }
            catch (WebException ex)
            {
                WebException ex2 = (webException_1 = ex);
                string text3 = "";
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        if (ex2.Response.Headers["csrf-token"] != null)
                        {
                            class3_0.token = ex2.Response.Headers["csrf-token"];
                        }
                        text3 = (_response = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd());
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + ex2.Message + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=", _error);
                flag2 = true;
                if (_error.Contains("The remote name could not be resolved") | _error.Contains("Unable to connect to the remote server"))
                {
                    if (num < 3)
                    {
                        if (_error.ToUpper().Contains("SERVICEUNAVAILABLE"))
                        {
                            Thread.Sleep(2000);
                        }
                    }
                    else
                    {
                        flag3 = true;
                    }
                }
                if (!_error.Contains("Unable to connect to the remote server"))
                {
                    if (_error.Contains("The underlying connection was closed:"))
                    {
                        if (_error.Contains("An unexpected error occurred on a send"))
                        {
                            string_52 = "Tls12";
                            if (num < 3)
                            {
                                Thread.Sleep(400);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("A connection that was expected to be kept alive was closed by the server") || _error.Contains("An unexpected error occurred on a receive"))
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag3 = true;
                        }
                    }
                    else if (_error.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                    {
                        string_52 = "Tls12";
                        if (num < 3)
                        {
                            Thread.Sleep(400);
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    else if (_error.Contains("The operation has timed out"))
                    {
                        Thread.Sleep(5000);
                        _response = "";
                        _error = "The operation has timed out";
                        flag3 = true;
                    }
                    else if (_error.Contains("(406) Not Acceptable") | _error.Contains("(401) Unauthorized"))
                    {
                        flag3 = true;
                    }
                    else if (_error.Contains("(404) Not Found") | _error.Contains("(409) Conflict"))
                    {
                        flag3 = true;
                    }
                    else if (_error.Contains("(400) Bad Request"))
                    {
                        flag3 = true;
                        text = ex2.Response.Headers["csrf-token"];
                    }
                    else if (_error.Contains("(500) Internal Server Error"))
                    {
                        flag3 = true;
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    else if (_error.Contains(""))
                    {
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    else if (_error.Contains("(503) Server Unavailable"))
                    {
                        Thread.Sleep(5000);
                        _response = "";
                        _error = "A connection that was expected to be kept alive was closed by the server";
                        flag3 = true;
                    }
                    else if (_error.Contains("(504) Gateway Timeout"))
                    {
                        if (num < 6)
                        {
                            Thread.Sleep(1000);
                        }
                    }
                    else
                    {
                        Thread.Sleep(5000);
                        _response = "";
                        _error = "A connection that was expected to be kept alive was closed by the server";
                        flag3 = true;
                    }
                    goto IL_0e0b;
                }
            }
            catch (Exception ex3)
            {
                _error = ex3.Message;
                method_74("WebRequestPost Ex=", _error);
                if (num > 2)
                {
                    flag3 = true;
                }
                goto IL_0e0b;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
            goto IL_0df0;
        IL_0df0:
            if (!bool_63 && !flag2)
            {
                return result;
            }
            continue;
        IL_0e0b:
            if (!string.IsNullOrEmpty(text))
            {
                class3_0.token = text;
            }
            if (flag3)
            {
                break;
            }
            if (num <= 3)
            {
            }
            goto IL_0df0;
        }
        return result;
    }

    private bool _httpRequest_Disha(string _url, string _deta, string _reff, string _type, bool bool_63, WebProxy webProxy_5, ref CookieContainer cookieContainer_2, bool bool_64, bool bool_65, int int_28, int int_29, ref string _response, ref string _error, ref WebException webException_1)
    {

        int num = 0;
        bool flag = bool_21;
        if (bool_21)
        {
            bool_21 = false;
        }
        dateTime_0 = DateTime.Now;
        bool result;
        while (true)
        {
            result = false;
            bool flag2 = false;
            bool flag3 = false;
            num++;
            if (_url.Contains("bookingData") & isPremium_p)
            {
                _url = _url.Replace("bookingData", "verifyPayment");
                _deta = dsed;
            }
            long_0 = long_1;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            _error = "";
            _response = "";
            string text = "";
            webException_1 = null;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                Uri uri = new Uri(_url);
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(_url);
                if (_url.Contains("verifyPayment") & isPremium_p)
                {
                    uriPNR = _url;
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                }
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                httpWebRequest.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.KeepAlive = true;
                //httpWebRequest.Connection = "keepalive";
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                httpWebRequest.Accept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.AllowAutoRedirect = true;
                httpWebRequest.UserAgent = class3_0.DISHAUSERAGENT;//"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36";
                httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                httpWebRequest.Headers.Add("sec-ch-ua", "\"Google Chrome\"; v = \"114\", \"Chromium\"; v = \"114\", \"Not.A/Brand\"; v = \"8\"");
                //httpWebRequest.Headers.Add("sec-ch-ua", "\"Chromium\";v=\"110\", \"Google Chrome\";v=\"110\", \"Not; A=Brand\";v=\"24\"");
                httpWebRequest.Headers.Add("sec-ch-ua-mobile", "?0");
                httpWebRequest.Headers.Add("sec-ch-ua-platform", "\"windows\"");
                if (_url.Contains("https://securegw.paytm.in/"))
                {
                    httpWebRequest.Headers.Add("Origin", "https://securegw.paytm.in");
                }
                else
                {
                    httpWebRequest.Headers.Add("Origin", "https://irctc.corover.ai");
                }
                httpWebRequest.Headers.Add("Sec-Fetch-Site", "same-origin");
                httpWebRequest.Headers.Add("Sec-Fetch-Mode", "cors");
                httpWebRequest.CookieContainer = cookieContainer_2;
                if (flag)
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                    if (webProxy_5 != null)
                    {
                        httpWebRequest.Headers.Add("Cache-Control", "no-cache");
                        httpWebRequest.Headers.Add("Pragma", "no-cache");
                    }
                    bool_21 = false;
                }
                //if (cookieContainer_2 == null)
                //{
                //    cookieContainer_2 = new CookieContainer();
                //}
                //httpWebRequest.CookieContainer = cookieContainer_2;
                if (_type.Contains("Plain"))
                {
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                }
                else if (_type.Contains("text"))
                {
                    httpWebRequest.Accept = "text/plain";
                }
                else if (_type.Contains("Java"))
                {
                    httpWebRequest.Accept = "application/json";
                }
                //if (_type.Contains("1") && !string.IsNullOrEmpty(class3_0._greq))
                //{
                //    httpWebRequest.Headers.Add("greq", class3_0._greq);
                //}
                //if (_type.Contains("2"))
                //{
                //    httpWebRequest.Headers.Add("spa-csrf-token", class3_0.token);
                //}
                //if (_type.Contains("3"))
                //{
                //    httpWebRequest.Headers.Add("Authorization", class3_0._Authorization);
                //}
                if (_type.Contains("4"))
                {
                    httpWebRequest.Headers.Add("cxtoken", class3_0.cxtoken);
                }
                if (_type.Contains("5"))
                {
                    httpWebRequest.Headers.Add("App-id", class3_0.appid);
                    httpWebRequest.Headers.Add("Auth-key", class3_0.authkey);
                }
                if (_type.Contains("Final"))
                {
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                }
                else if (_type.Contains("text"))
                {
                    httpWebRequest.ContentType = "text/plain";
                }
                else if (_type.Contains("json"))
                {
                    httpWebRequest.ContentType = "application/json";
                }
                else
                {
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                }
                if (!string.IsNullOrEmpty(string_70))
                {
                    string value = string_70;
                    string_70 = null;
                    httpWebRequest.Headers.Add("lso", value);
                    string_70 = null;
                }
                if (bool_0)
                {
                    bool_0 = false;
                    httpWebRequest.Headers.Add("authority", "www.google.com");
                    httpWebRequest.Accept = "*/*";
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded;charset=UTF-8";
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36";
                    if (!string.IsNullOrEmpty(string_64))
                    {
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/" + string_64 + " Safari/537.36";
                    }
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                    httpWebRequest.Headers.Add("origin", "https://www.google.com");
                    httpWebRequest.Headers.Add("sec-fetch-dest", "empty");
                    httpWebRequest.Headers.Add("sec-fetch-mode", "cors");
                    httpWebRequest.Headers.Add("sec-fetch-site", "same-origin");
                    httpWebRequest.Headers.Add("x-client-data", "CKG1yQEIjrbJAQimtskBCMG2yQEIqZ3KAQi3uMoBCKzHygEI9cfKAQjnyMoBCOnIygEItMvKAQiNz8oBCNvVygEYisHKAQ==");
                }
                if (_url == "https://www.irctc.co.in/eticketing/PaymentRedirect")
                {
                    httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                    RequestCachePolicy requestCachePolicy2 = (httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.NoCacheNoStore));
                    HttpRequestCachePolicy httpRequestCachePolicy = (HttpRequestCachePolicy)requestCachePolicy2;
                }
                if (_type.Contains("akm"))
                {
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                    httpWebRequest.ContentType = "text/plain;charset=UTF-8";
                    _reff = "https://www.irctc.co.in/nget/train-search";
                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }
                if (!string.IsNullOrEmpty(_deta))
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_deta);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                switch (httpWebResponse.StatusCode)
                {
                    case HttpStatusCode.MovedPermanently:
                    case HttpStatusCode.Found:
                    case HttpStatusCode.SeeOther:
                    case HttpStatusCode.TemporaryRedirect:
                        text2 = httpWebResponse.GetResponseHeader("Location");
                        if (text2.IndexOf("https://") == 0)
                        {
                            if (num >= 4 || text2.IndexOf("booking-confirm") > 0)
                            {
                                break;
                            }
                            httpWebResponse.Close();
                            httpWebResponse = null;
                            _url = text2;
                            _deta = "";
                        }
                        else
                        {
                            if (text2.IndexOf("/") != 0 || num >= 4)
                            {
                                break;
                            }
                            httpWebResponse.Close();
                            httpWebResponse = null;
                            int num2 = text2.IndexOf("/") + 1;
                            int num3 = text2.IndexOf("/", num2);
                            string value2 = text2.Substring(num2, num3 - num2);
                            _url = _url.Substring(0, _url.IndexOf(value2) - 1) + text2;
                            _deta = "";
                        }
                        goto end_IL_00c1;
                    case HttpStatusCode.NotModified:
                    case HttpStatusCode.UseProxy:
                    case HttpStatusCode.Unused:
                        text2 = "retry";
                        break;
                    default:
                        {
                            using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                            {
                                text2 = streamReader.ReadToEnd();
                            }
                            break;
                        }
                }
                if (httpWebResponse.Headers["csrf-token"] != null)
                {
                    class3_0.token = httpWebResponse.Headers["csrf-token"];
                }
                _response = text2;
                flag3 = true;
                result = true;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\nURL:" + _url + "\nPostData:" + _deta + "\nReponse:" + _response);
                if (string.IsNullOrEmpty(_response))
                {
                    if (_url.Contains("avlFareenquiry"))
                    {
                        class3_0.bool_13 = true;
                    }
                    _response = "retry";
                }
                if (_url.Contains("avlFareenquiry") && _response.Contains("Unable to process your request"))
                {
                    class3_0.bool_13 = true;
                }
                goto IL_0e0b;
            end_IL_00c1:;
            }
            catch (WebException ex)
            {
                WebException ex2 = (webException_1 = ex);
                string text3 = "";
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex2.Response != null)
                {
                    try
                    {
                        if (ex2.Response.Headers["csrf-token"] != null)
                        {
                            class3_0.token = ex2.Response.Headers["csrf-token"];
                        }
                        text3 = (_response = ":" + new StreamReader(ex2.Response.GetResponseStream()).ReadToEnd());
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex2.Response).StatusCode;
                }
                _error = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + ex2.Message + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=", _error);
                flag2 = true;
                if (_error.Contains("The remote name could not be resolved") | _error.Contains("Unable to connect to the remote server"))
                {
                    if (num < 3)
                    {
                        if (_error.ToUpper().Contains("SERVICEUNAVAILABLE"))
                        {
                            Thread.Sleep(2000);
                        }
                    }
                    else
                    {
                        flag3 = true;
                    }
                }
                if (!_error.Contains("Unable to connect to the remote server"))
                {
                    if (_error.Contains("The underlying connection was closed:"))
                    {
                        if (_error.Contains("An unexpected error occurred on a send"))
                        {
                            string_52 = "Tls12";
                            if (num < 3)
                            {
                                Thread.Sleep(400);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (_error.Contains("A connection that was expected to be kept alive was closed by the server") || _error.Contains("An unexpected error occurred on a receive"))
                        {
                            Thread.Sleep(5000);
                            _response = "";
                            _error = "A connection that was expected to be kept alive was closed by the server";
                            flag3 = true;
                        }
                    }
                    else if (_error.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                    {
                        string_52 = "Tls12";
                        if (num < 3)
                        {
                            Thread.Sleep(400);
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    else if (_error.Contains("The operation has timed out"))
                    {
                        Thread.Sleep(5000);
                        _response = "";
                        _error = "The operation has timed out";
                        flag3 = true;
                    }
                    else if (_error.Contains("(406) Not Acceptable") | _error.Contains("(401) Unauthorized"))
                    {
                        flag3 = true;
                    }
                    else if (_error.Contains("(404) Not Found") | _error.Contains("(409) Conflict"))
                    {
                        flag3 = true;
                    }
                    else if (_error.Contains("(400) Bad Request"))
                    {
                        flag3 = true;
                        text = ex2.Response.Headers["csrf-token"];
                    }
                    else if (_error.Contains("(500) Internal Server Error"))
                    {
                        flag3 = true;
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    else if (_error.Contains(""))
                    {
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    else if (_error.Contains("(503) Server Unavailable"))
                    {
                        Thread.Sleep(5000);
                        _response = "";
                        _error = "A connection that was expected to be kept alive was closed by the server";
                        flag3 = true;
                    }
                    else if (_error.Contains("(504) Gateway Timeout"))
                    {
                        if (num < 6)
                        {
                            Thread.Sleep(1000);
                        }
                    }
                    else
                    {
                        Thread.Sleep(5000);
                        _response = "";
                        _error = "A connection that was expected to be kept alive was closed by the server";
                        flag3 = true;
                    }
                    goto IL_0e0b;
                }
            }
            catch (Exception ex3)
            {
                _error = ex3.Message;
                method_74("WebRequestPost Ex=", _error);
                if (num > 2)
                {
                    flag3 = true;
                }
                goto IL_0e0b;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
            goto IL_0df0;
        IL_0df0:
            if (!bool_63 && !flag2)
            {
                return result;
            }
            continue;
        IL_0e0b:
            if (!string.IsNullOrEmpty(text))
            {
                class3_0.token = text;
            }
            if (flag3)
            {
                break;
            }
            if (num <= 3)
            {
            }
            goto IL_0df0;
        }
        return result;
    }

    private string method_token()
    {
        //string path3 = Directory.GetCurrentDirectory();
        //string path = Path.Combine((path3), "Token.txt");
        try
        {
            string path = Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "ProgramData"), "Token.txt");
            if (File.Exists(path))
            {
                string[] array = File.ReadAllText(path).Split(new string[1] { "||##||" }, StringSplitOptions.None);
                if (array.Length != 0)
                {
                    Random random = new Random();
                    xcrf = array[random.Next(array.Length - 1)].ToString();//array[0];
                }
                string text = "";
                if (File.Exists(path))
                {
                    string text2 = File.ReadAllText(path);
                    text = text2.Replace(xcrf + "||##||", "");
                    File.Delete(path);
                    File.WriteAllText(path, text);
                }
            }
            return xcrf.Trim();
        }
        catch
        {
            xcrf = getscafsensor();
            return xcrf.Trim();

        }
    }

    private async Task<bool> Task_httpRequest(string _url, string _deta, string _reff, string _type, bool bool_63, WebProxy webProxy_5, bool bool_64, bool bool_65, int int_28, int int_29)
    {
       
        int num = 0;
        bool flag = bool_21;
        if (bool_21)
        {
            bool_21 = false;
        }
        dateTime_0 = DateTime.Now;
        bool result;
        while (true)
        {
            result = false;
            bool flag2 = false;
            bool flag3 = false;
            num++;
            long_0 = long_1;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            Task_errormsg = "";
            Task_response = "";
            string text = "";
            Task_Exception_ = null;
            HttpWebResponse httpWebResponse = null;
            string text2 = "";
            try
            {
                Uri requestUri = new Uri(_url);
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUri);
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                ServicePointManager.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                HttpRequestCachePolicy cachePolicy = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpCacheAgeControl.MaxAge, TimeSpan.FromDays(0.0)));
                if (int_28 > 0)
                {
                    httpWebRequest.Timeout = int_28;
                }
                if (int_29 > 0)
                {
                    httpWebRequest.ReadWriteTimeout = int_29;
                }
                httpWebRequest.ServerCertificateValidationCallback = CheckCertificate;
                ServicePointManager.Expect100Continue = false;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.Timeout = int_28;
                httpWebRequest.ReadWriteTimeout = int_29;
                httpWebRequest.Accept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*";
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.AllowAutoRedirect = true;
                httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36";
                httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9,hi;q=0.8");
                httpWebRequest.Headers.Add("sec-ch-ua", "\"Google Chrome\"; v = \"111\", \"Chromium\"; v = \"111\", \"Not(A:Brand\"; v = \"8\"");
                httpWebRequest.Headers.Add("sec-ch-ua-mobile", "?0");
                httpWebRequest.Headers.Add("sec-ch-ua-platform", "\"Windows\"");
                httpWebRequest.Headers.Add("Origin", "https://www.irctc.co.in");
                httpWebRequest.Headers.Add("Sec-Fetch-Site", "same-origin");
                httpWebRequest.Headers.Add("Sec-Fetch-Mode", "cors");
                httpWebRequest.Headers.Add("Sec-Fetch-Dest", "empty");
                httpWebRequest.Headers.Add("bmirak", "webbm");
                //
                //httpWebRequest.Accept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, */*";
                //httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                //httpWebRequest.KeepAlive = true;
                //httpWebRequest.Connection = "keepalive";
                //httpWebRequest.AllowAutoRedirect = true;
                //httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36";
                //httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.8");
                //if (_url.ToLower().Contains("irctc.co.in") & !isAPP)
                //{
                //    httpWebRequest.Headers.Add("bmirak", "webbm");
                //    httpWebRequest.AllowWriteStreamBuffering = false;
                //}
                if (flag)
                {
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                    if (webProxy_5 != null)
                    {
                        httpWebRequest.Headers.Add("Cache-Control", "no-cache");
                        httpWebRequest.Headers.Add("Pragma", "no-cache");
                    }
                    bool_21 = false;
                }
                if (cookie_ == null)
                {
                    cookie_ = new CookieContainer();
                }
                httpWebRequest.CookieContainer = cookie_;
                if (_type.Contains("Plain"))
                {
                    httpWebRequest.Accept = "application/json, text/plain, */*";
                }
                else if (_type.Contains("text"))
                {
                    httpWebRequest.Accept = "text/plain";
                }
                else if (_type.Contains("Java"))
                {
                    httpWebRequest.Accept = "application/json";
                }
                if (_type.Contains("1") && !string.IsNullOrEmpty(class3_0._greq))
                {
                }
                if (_type.Contains("2"))
                {
                    httpWebRequest.Headers.Add("spa-csrf-token", class3_0.token);
                }
                if (_type.Contains("3"))
                {
                    httpWebRequest.Headers.Add("Authorization", class3_0._Authorization);
                }
                if (_type.Contains("Final"))
                {
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                }
                else if (_type.Contains("text"))
                {
                    httpWebRequest.ContentType = "text/plain";
                }
                else if (_type.Contains("json"))
                {
                    httpWebRequest.ContentType = "application/json; charset=UTF-8";
                }
                else
                {
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                }
                if (!string.IsNullOrEmpty(string_70))
                {
                    string value = string_70;
                    string_70 = null;
                    httpWebRequest.Headers.Add("lso", value);
                    string_70 = null;
                }
                if (bool_0)
                {
                    bool_0 = false;
                    httpWebRequest.Headers.Add("authority", "www.google.com");
                    httpWebRequest.Accept = "*/*";
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded;charset=UTF-8";
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36";
                    if (!string.IsNullOrEmpty(string_64))
                    {
                        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/" + string_64 + " Safari/537.36";
                    }
                    httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                    httpWebRequest.Headers.Add("origin", "https://www.google.com");
                    httpWebRequest.Headers.Add("sec-fetch-dest", "empty");
                    httpWebRequest.Headers.Add("sec-fetch-mode", "cors");
                    httpWebRequest.Headers.Add("sec-fetch-site", "same-origin");
                    httpWebRequest.Headers.Add("x-client-data", "CKG1yQEIjrbJAQimtskBCMG2yQEIqZ3KAQi3uMoBCKzHygEI9cfKAQjnyMoBCOnIygEItMvKAQiNz8oBCNvVygEYisHKAQ==");
                }
                if (_url == "https://www.irctc.co.in/eticketing/PaymentRedirect")
                {
                    httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                    HttpRequestCachePolicy cachePolicy3 = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.NoCacheNoStore));
                }
                if (!string.IsNullOrEmpty(_reff))
                {
                    httpWebRequest.Referer = _reff;
                }
                if (isAPP)
                {
                    httpWebRequest.ClientCertificates = x509Certificate2Collection_0;
                    HttpRequestCachePolicy cachePolicy2 = (HttpRequestCachePolicy)(httpWebRequest.CachePolicy = new HttpRequestCachePolicy(HttpRequestCacheLevel.NoCacheNoStore));
                    httpWebRequest.Headers.Set("upgrade-insecure-requests", "1");
                    httpWebRequest.Headers.Set("origin", "https://securegw.paytm.in");
                    httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                    httpWebRequest.UserAgent = "Mozilla/5.0 (Linux; Android 11; KB2001 Build/RP1A.201005.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/106.0.5249.126 Mobile Safari/537.36";
                    httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                    httpWebRequest.Headers.Set("x-requested-with", "cris.org.in.prs.ima");
                    httpWebRequest.Referer = "https://securegw.paytm.in/";
                    httpWebRequest.Headers.Set("accept-language", "en-IN,en-US;q=0.9,en;q=0.8");
                }
                if (!string.IsNullOrEmpty(_deta))
                {
                    httpWebRequest.Method = "POST";
                    byte[] bytes = Encoding.UTF8.GetBytes(_deta);
                    httpWebRequest.ContentLength = bytes.Length;
                    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
                }
                else
                {
                    httpWebRequest.Method = "GET";
                }
                httpWebResponse = (HttpWebResponse)(await httpWebRequest.GetResponseAsync());
                switch (httpWebResponse.StatusCode)
                {
                    case HttpStatusCode.MovedPermanently:
                    case HttpStatusCode.Found:
                    case HttpStatusCode.SeeOther:
                    case HttpStatusCode.TemporaryRedirect:
                        text2 = httpWebResponse.GetResponseHeader("Location");
                        if (text2.IndexOf("https://") == 0)
                        {
                            if (num >= 4 || text2.IndexOf("booking-confirm") > 0)
                            {
                                break;
                            }
                            httpWebResponse.Close();
                            httpWebResponse = null;
                            _url = text2;
                            _deta = "";
                        }
                        else
                        {
                            if (text2.IndexOf("/") != 0 || num >= 4)
                            {
                                break;
                            }
                            httpWebResponse.Close();
                            httpWebResponse = null;
                            int num2 = text2.IndexOf("/") + 1;
                            int num3 = text2.IndexOf("/", num2);
                            string value2 = text2.Substring(num2, num3 - num2);
                            _url = _url.Substring(0, _url.IndexOf(value2) - 1) + text2;
                            _deta = "";
                        }
                        goto end_IL_0103;
                    case HttpStatusCode.NotModified:
                    case HttpStatusCode.UseProxy:
                    case HttpStatusCode.Unused:
                        text2 = "retry";
                        break;
                    default:
                        {
                            using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                            {
                                text2 = streamReader.ReadToEnd();
                                result = true;
                            }
                            break;
                        }
                }
                if (httpWebResponse.Headers["csrf-token"] != null)
                {
                    class3_0.token = httpWebResponse.Headers["csrf-token"];
                }
                Task_response = text2;
                flag3 = true;
                Lock("\n\n\n\n\nThread Start:" + dateTime_0.ToString("hh:mm:ss") + "\nSatus:" + Status + "\nURL:" + _url + "\nPostData:" + _deta + "\nReponse:" + Task_response);
                if (string.IsNullOrEmpty(Task_response))
                {
                    if (_url.Contains("avlFareenquiry"))
                    {
                        class3_0.bool_13 = true;
                    }
                    Task_response = "retry";
                }
                if (_url.Contains("avlFareenquiry") && Task_response.Contains("Unable to process your request"))
                {
                    class3_0.bool_13 = true;
                }
                goto IL_13e0;
            end_IL_0103:;
            }
            catch (WebException task_Exception_)
            {
                WebException ex = (Task_Exception_ = task_Exception_);
                string text3 = "";
                HttpStatusCode httpStatusCode = HttpStatusCode.OK;
                if (ex.Response != null)
                {
                    try
                    {
                        if (ex.Response.Headers["csrf-token"] != null)
                        {
                            class3_0.token = ex.Response.Headers["csrf-token"];
                        }
                        clsMain obj = this;
                        string task_response;
                        string text4 = (task_response = ":" + new StreamReader(ex.Response.GetResponseStream()).ReadToEnd());
                        obj.Task_response = task_response;
                        text3 = text4;
                    }
                    catch
                    {
                    }
                    httpStatusCode = ((HttpWebResponse)ex.Response).StatusCode;
                }
                Task_errormsg = "<StatusCode>" + httpStatusCode.ToString() + "</StatusCode>\t<ErrorCode>" + ex.Message + "</ErrorCode>\t<ResponseCode>" + text3 + "</ResponseCode>";
                method_74("WebRequestPost WebEx=", Task_errormsg);
                flag2 = true;
                if (Task_errormsg.Contains("The remote name could not be resolved") | Task_errormsg.Contains("Unable to connect to the remote server"))
                {
                    if (num < 3)
                    {
                        if (Task_errormsg.ToUpper().Contains("SERVICEUNAVAILABLE"))
                        {
                            Thread.Sleep(2000);
                        }
                    }
                    else
                    {
                        flag3 = true;
                    }
                }
                if (!Task_errormsg.Contains("Unable to connect to the remote server"))
                {
                    if (Task_errormsg.Contains("The underlying connection was closed:"))
                    {
                        if (Task_errormsg.Contains("An unexpected error occurred on a send"))
                        {
                            string_52 = "Tls12";
                            if (num < 3)
                            {
                                Thread.Sleep(400);
                            }
                            else
                            {
                                flag3 = true;
                            }
                        }
                        else if (Task_errormsg.Contains("A connection that was expected to be kept alive was closed by the server") || Task_errormsg.Contains("An unexpected error occurred on a receive"))
                        {
                            Thread.Sleep(5000);
                            Task_response = "";
                            Task_errormsg = "A connection that was expected to be kept alive was closed by the server";
                            flag3 = true;
                        }
                    }
                    else if (Task_errormsg.Contains("The request was aborted: Could not create SSL/TLS secure channel."))
                    {
                        string_52 = "Tls12";
                        if (num < 3)
                        {
                            Thread.Sleep(400);
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    else if (Task_errormsg.Contains("The operation has timed out"))
                    {
                        Thread.Sleep(5000);
                        Task_response = "";
                        Task_errormsg = "The operation has timed out";
                        flag3 = true;
                    }
                    else if (Task_errormsg.Contains("(406) Not Acceptable") | Task_errormsg.Contains("(401) Unauthorized"))
                    {
                        flag3 = true;
                    }
                    else if (Task_errormsg.Contains("(404) Not Found") | Task_errormsg.Contains("(409) Conflict"))
                    {
                        flag3 = true;
                    }
                    else if (Task_errormsg.Contains("(400) Bad Request"))
                    {
                        flag3 = true;
                        text = ex.Response.Headers["csrf-token"];
                    }
                    else if (Task_errormsg.Contains("(500) Internal Server Error"))
                    {
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    else if (Task_errormsg.Contains("(502) Bad Gateway"))
                    {
                        if (num <= 6)
                        {
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            flag3 = true;
                        }
                    }
                    else if (Task_errormsg.Contains("(503) Server Unavailable"))
                    {
                        Thread.Sleep(5000);
                        Task_response = "";
                        Task_errormsg = "A connection that was expected to be kept alive was closed by the server";
                        flag3 = true;
                    }
                    else if (Task_errormsg.Contains("(504) Gateway Timeout"))
                    {
                        if (num < 6)
                        {
                            Thread.Sleep(1000);
                        }
                    }
                    else
                    {
                        Thread.Sleep(5000);
                        Task_response = "";
                        Task_errormsg = "A connection that was expected to be kept alive was closed by the server";
                        flag3 = true;
                    }
                    goto IL_13e0;
                }
            }
            catch (Exception ex3)
            {
                Exception ex2 = ex3;
                Task_errormsg = ex2.Message;
                method_74("WebRequestPost Ex=", Task_errormsg);
                if (num > 2)
                {
                    flag3 = true;
                }
                goto IL_13e0;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
            goto IL_13b9;
        IL_13e0:
            if (!string.IsNullOrEmpty(text))
            {
                class3_0.token = text;
            }
            if (flag3)
            {
                break;
            }
            if (num > 3)
            {
            }
            goto IL_13b9;
        IL_13b9:
            if (!bool_63 && !flag2)
            {
                return result;
            }
        }
        return result;
    }

    private string method_96(HttpWebResponse httpWebResponse_0, ref string string_86)
    {
        string text = "";
        try
        {
            foreach (object cookie2 in httpWebResponse_0.Cookies)
            {
                Cookie cookie = (Cookie)cookie2;
                string text2 = cookie.Name + "=" + cookie.Value;
                if (cookie.Name == string_86)
                {
                    string_86 = cookie.Value;
                }
                text = text + text2 + "&&";
            }
            class3_0.string_72 = text;
            return text;
        }
        catch
        {
            return text;
        }
    }


    private string GetString(string string_86, string string_87)
    {
        string result = "";
        try
        {
            string text = string_86.Substring(string_86.IndexOf("\"" + string_87));
            string text2 = text.Substring(text.IndexOf(string_87) + (string_87.Length + 3));
            text2 = text2.Substring(0, text2.IndexOf("\""));
            result = text2;
            return result;
        }
        catch
        {
            return result;
        }
    }

    private string Gettext(string string_86, string string_87)
    {
        string result = "";
        try
        {
            string text = string_86.Substring(string_86.IndexOf(string_87));
            string text2 = text.Substring(text.IndexOf(string_87) + string_87.Length + 1);
            text2 = text2.Substring(0, text2.IndexOf(","));
            result = text2;
            return result;
        }
        catch
        {
            return result;
        }
    }

    internal bool method_100(string string_86, string string_87, WebProxy webProxy_5, ref CookieContainer cookieContainer_2, bool bool_63, bool bool_64, int int_28, ref string string_88, ref bool bool_65, ref WebException webException_1, ref HttpStatusCode httpStatusCode_1, ref string string_89)
    {
        int num = 0;
        int num2;
        while (true)
        {
            string_89 = "";
            string_88 = "";
            webException_1 = null;
            bool_65 = false;
            num2 = 0;
            HttpWebResponse httpWebResponse = null;
            string text = "";
            try
            {
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(string_86);
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                httpWebRequest.Proxy = webProxy_5;
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                if (int_28 > 0)
                {
                    httpWebRequest.Timeout = int_28;
                    httpWebRequest.ReadWriteTimeout = int_28;
                }
                if (bool_63)
                {
                    if (cookieContainer_2 == null)
                    {
                        cookieContainer_2 = new CookieContainer();
                    }
                    httpWebRequest.CookieContainer = cookieContainer_2;
                }
                httpWebRequest.Method = "GET";
                httpWebRequest.Accept = "image/gif, */*";
                httpWebRequest.KeepAlive = true;
                httpWebRequest.ContentType = "application/x-www-form-urlencoded";
                httpWebRequest.UserAgent = "Mozilla/5.0 (Windows T 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";
                httpWebRequest.Connection = "keepalive";
                if (bool_30)
                {
                    httpWebRequest.AllowAutoRedirect = false;
                }
                if (bool_23)
                {
                    httpWebRequest.ServicePoint.BindIPEndPointDelegate = method_76;
                }
                if (string_86.Contains("UserLoginCaptcha.htm"))
                {
                    httpWebRequest.Headers.Add("X-Requested-With", "XMLHttpRequest");
                }
                if (!string.IsNullOrEmpty(string_87))
                {
                    httpWebRequest.Referer = string_87;
                }
                if (string_86 == "https://www.irctc.co.in/eticketing/protected/mapps1/logout")
                {
                    if (!string.IsNullOrEmpty(class3_0._greq))
                    {
                        httpWebRequest.Headers.Add("greq", class3_0._greq);
                    }
                    if (!string.IsNullOrEmpty(class3_0.token))
                    {
                        httpWebRequest.Headers.Add("spa-csrf-token", class3_0.token);
                    }
                    if (!string.IsNullOrEmpty(class3_0._Authorization))
                    {
                        httpWebRequest.Headers.Add("Authorization", class3_0._Authorization);
                    }
                    httpWebRequest.Method = "POST";
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (bool_22)
                {
                    dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                }
                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    if (bool_64)
                    {
                        text = streamReader.ReadToEnd();
                    }
                    else
                    {
                        httpWebRequest.Abort();
                    }
                }
                string_88 = text;
                num2 = 1;
            }
            catch (WebException ex)
            {
                num2 = 0;
                string_89 = ex.Message;
                bool_65 = true;
                webException_1 = ex;
                if (ex.Response != null)
                {
                    httpStatusCode_1 = ((HttpWebResponse)ex.Response).StatusCode;
                    string_89 = "StatusCode: " + httpStatusCode_1.ToString() + "\t" + string_89;
                }
                method_74("WebRequestGet", string_89);
            }
            catch (Exception ex2)
            {
                num2 = 0;
                string_89 = ex2.Message;
                method_74("WebRequestGet", string_89);
            }
            finally
            {
                try
                {
                    httpWebResponse?.Close();
                }
                catch
                {
                }
            }
            if (num >= 3 || !string_89.ToUpper().Contains("CONNECTION WAS CLOSED"))
            {
                break;
            }
            num++;
            Lock("WebRequestPost Rehit = " + num);
        }
        return num2 != 0;
    }

    internal Bitmap method_101(string string_86, string string_87, WebProxy webProxy_5, ref CookieContainer cookieContainer_2, bool bool_63, int int_28, ref bool bool_64, ref WebException webException_1, ref string string_88, ref DateTime dateTime_7, ref int int_29)
    {
        int num = 0;
        string text = "Ssl3";
        while (true)
        {
            int_29 = 0;
            HttpWebResponse httpWebResponse = null;
            bool_64 = false;
            int num2 = 0;
            string_88 = "";
            int num3 = ((string_86.IndexOf("https://www.irctc.co.in", StringComparison.CurrentCultureIgnoreCase) == 0) ? 1 : 0);
            try
            {
                HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(string_86);
                ServicePointManager.DefaultConnectionLimit = 9999;
                httpWebRequest.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                httpWebRequest.ProtocolVersion = HttpVersion.Version11;
                if (int_28 > 0)
                {
                    httpWebRequest.Timeout = int_28;
                }
                if (bool_63)
                {
                    if (cookieContainer_2 == null)
                    {
                        cookieContainer_2 = new CookieContainer();
                    }
                    httpWebRequest.CookieContainer = cookieContainer_2;
                }
                httpWebRequest.Method = "GET";
                httpWebRequest.Accept = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9";
                httpWebRequest.KeepAlive = true;
                httpWebRequest.Connection = "keepalive";
                httpWebRequest.UserAgent = "Mozilla/5.0 (Windows T 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36";
                httpWebRequest.Headers.Add("Cache-Control", "max-age=0");
                httpWebRequest.Headers.Add("Accept-Language", "en-US,en;q=0.9");
                httpWebRequest.Headers.Add("Upgrade-Insecure-Requests", "1");
                httpWebRequest.ConnectionGroupName = ConnectionGroupName_;
                if (num3 != 0)
                {
                    httpWebRequest.AllowAutoRedirect = false;
                }
                if (bool_23)
                {
                    httpWebRequest.ServicePoint.BindIPEndPointDelegate = method_76;
                }
                if (!string.IsNullOrEmpty(string_87))
                {
                    httpWebRequest.Referer = string_87;
                }
                if (DateTime.Now.Hour >= 7 && DateTime.Now.Hour <= 11)
                {
                    dateTime_7 = DateTime.Now.AddMilliseconds(500.0);
                    num2 = 1;
                }
                httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                if (num3 == 0 || (httpWebResponse.StatusCode != HttpStatusCode.Found && httpWebResponse.StatusCode != HttpStatusCode.MovedPermanently) || !httpWebResponse.Headers["Location"].ToString().Contains("errors.html") || num >= 10)
                {
                    if (bool_22)
                    {
                        dateTime_1 = DateTime.Parse(httpWebResponse.Headers["Date"]);
                    }
                    Bitmap result;
                    if (num3 != 0)
                    {
                        MemoryStream memoryStream = new MemoryStream();
                        using (Stream stream = httpWebResponse.GetResponseStream())
                        {
                            byte[] array = new byte[4096];
                            int num4;
                            while ((num4 = stream.Read(array, 0, array.Length)) != 0)
                            {
                                int_29 += num4;
                                memoryStream.Write(array, 0, num4);
                            }
                        }
                        memoryStream.Flush();
                        result = new Bitmap(memoryStream);
                    }
                    else
                    {
                        result = new Bitmap(httpWebResponse.GetResponseStream());
                    }
                    if (num2 == 0 || dateTime_7 > DateTime.Now)
                    {
                        dateTime_7 = DateTime.Now;
                    }
                    httpWebResponse.Close();
                    if (int_29 < 200)
                    {
                        int_29 = 1500;
                    }
                    return result;
                }
                Thread.Sleep(200);
                num++;
                httpWebResponse.Close();
                httpWebResponse = null;
            }
            catch (WebException ex)
            {
                string_88 = ex.Message;
                bool_64 = true;
                webException_1 = ex;
                if (!(string_88.Contains("The remote server returned an error: (403) Forbidden.") | string_88.Contains("The remote server returned an error: (412) Precondition Failed.") | string_88.Contains("The remote server returned an error: (429) Unknown") | string_88.Contains("internal server error")))
                {
                    if (string_88.Contains("The remote name could not be resolved:") | string_88.Contains("Unable to connect to the remote server"))
                    {
                        return null;
                    }
                    if (!(string_88.Contains("(500) Internal Server Error") | string_88.Contains("(502) Bad Gateway")))
                    {
                        break;
                    }
                    num++;
                    if (num >= 2)
                    {
                        break;
                    }
                }
            }
            catch (Exception ex2)
            {
                string_88 = ex2.Message;
                break;
            }
            finally
            {
                try
                {
                    httpWebResponse?.Dispose();
                }
                catch
                {
                }
            }
        }
        return null;
    }

    internal static string smethod_8(string string_86, string string_87, string string_88, bool bool_63)
    {
        string text = "";
        string text2 = string_86.Replace("'", "\"");
        int startIndex = text2.IndexOf(string_87, StringComparison.CurrentCultureIgnoreCase);
        int num = text2.IndexOf(string_88, StringComparison.CurrentCultureIgnoreCase);
        startIndex = text2.IndexOf("hidden", startIndex, StringComparison.CurrentCultureIgnoreCase);
        while (startIndex > 0 && startIndex < num)
        {
            string text5;
            if (bool_63)
            {
                startIndex = text2.LastIndexOf("<", startIndex, StringComparison.CurrentCultureIgnoreCase);
                string text3 = text2;
                string value = "name";
                int startIndex2 = startIndex;
                startIndex = text3.IndexOf(value, startIndex2, StringComparison.CurrentCultureIgnoreCase);
                startIndex = text2.IndexOf("\"", startIndex) + 1;
                string text4 = text2;
                string value2 = "\"";
                int num2 = text4.IndexOf(value2, startIndex);
                text5 = text2.Substring(startIndex, num2 - startIndex);
                startIndex = text2.LastIndexOf("<", startIndex, StringComparison.CurrentCultureIgnoreCase);
                startIndex = text2.IndexOf("value", startIndex, StringComparison.CurrentCultureIgnoreCase);
                string text6 = text2;
                string value3 = "\"";
                startIndex = text6.IndexOf(value3, startIndex) + 1;
                string text7 = text2;
                string value4 = "\"";
                int startIndex3 = startIndex;
                num2 = text7.IndexOf(value4, startIndex3);
                string text8 = text5;
                string text9 = "=";
                string text10 = text2;
                int startIndex4 = startIndex;
                int num3 = num2;
                int num4 = startIndex;
                int length = num3 - num4;
                string text11 = text10.Substring(startIndex4, length);
                string oldValue = "&amp;";
                text5 = text8 + text9 + HttpUtility.UrlEncode(text11.Replace(oldValue, "&"));
                startIndex = text2.IndexOf(">", startIndex, StringComparison.CurrentCultureIgnoreCase) + 1;
            }
            else
            {
                string text12 = text2;
                string value5 = "name";
                int startIndex5 = startIndex;
                startIndex = text12.IndexOf(value5, startIndex5, StringComparison.CurrentCultureIgnoreCase);
                string text13 = text2;
                string value6 = "\"";
                startIndex = text13.IndexOf(value6, startIndex) + 1;
                int num5 = text2.IndexOf("\"", startIndex);
                text5 = text2.Substring(startIndex, num5 - startIndex);
                string text14 = text2;
                string value7 = "value";
                startIndex = text14.IndexOf(value7, startIndex, StringComparison.CurrentCultureIgnoreCase);
                string text15 = text2;
                string value8 = "\"";
                int startIndex6 = startIndex;
                startIndex = text15.IndexOf(value8, startIndex6) + 1;
                string text16 = text2;
                string value9 = "\"";
                int startIndex7 = startIndex;
                num5 = text16.IndexOf(value9, startIndex7);
                string text17 = text5;
                string text18 = "=";
                string text19 = text2;
                int startIndex8 = startIndex;
                int num6 = num5;
                int num7 = startIndex;
                string text20 = text19.Substring(startIndex8, num6 - num7);
                string oldValue2 = "&amp;";
                string newValue = "&";
                string str = text20.Replace(oldValue2, newValue);
                text5 = text17 + text18 + HttpUtility.UrlEncode(str);
            }
            if (string.IsNullOrEmpty(text))
            {
                text = text5;
            }
            else
            {
                string text21 = text;
                string text22 = "&";
                string text23 = text5;
                text = text21 + text22 + text23;
            }
            string text24 = text2;
            string value10 = "hidden";
            int startIndex9 = startIndex;
            startIndex = text24.IndexOf(value10, startIndex9, StringComparison.CurrentCultureIgnoreCase);
        }
        return text;
    }

    private static string smethod_10(string string_86)
    {
        string result = "";
        try
        {
            if (string_86.Contains("_"))
            {
                string text = string_86.Substring(string_86.IndexOf("_") + 1).Trim();
                string text2 = string_86.Substring(0, string_86.IndexOf("_")).Trim();
                if (text.Contains("__"))
                {
                    text2 = text2 + "_" + text.Substring(0, text.IndexOf("__")).Trim();
                    text = text.Substring(text.IndexOf("__") + 2).Trim();
                    if (text.Contains("_"))
                    {
                        text2 = text2 + "__" + text.Substring(0, text.IndexOf("_")).Trim();
                        result = text2;
                        return result;
                    }
                    return result;
                }
                if (text.Contains("_"))
                {
                    text2 = text2 + "_" + text.Substring(0, text.IndexOf("_")).Trim();
                    result = text2;
                    return result;
                }
                result = text2;
                return result;
            }
            return result;
        }
        catch
        {
            return result;
        }
    }

    private void method_102()
    {
        class3_0.dictionary_BnkData = new Dictionary<string, string>();
        class3_0.dictionary_BnkData = Class11.smethod_7();
    }

    private string GetBankID(string A_0, ref bool A_1)
    {
        if (isAPP)
        {
            return GetBankID_APP(A_0, ref A_1);
        }
        string result = "";
        A_1 = false;
        if (A_0.Contains("_DC"))
        {
            A_1 = true;
            string text = A_0.ToUpper();
            if (text != null)
            {
                if ((text == "PAYTM_DC"))
                {
                    return "115";
                }
                if ((text == "NSDL_DC"))
                {
                    return "115";
                }
                if ((text == "AIRTEL_DC"))
                {
                    return "115";
                }
                uint num = Class46.smethod_0(text);
                if (num <= 2167229110u)
                {
                    if (num > 1560067131)
                    {
                        if (num <= 1828296518)
                        {
                            switch (num)
                            {
                                default:
                                    return result;
                                case 1828296518u:
                                    if (!(text == "HDFC_DC"))
                                    {
                                        return result;
                                    }
                                    return "115";
                                case 1728826057u:
                                    if (!(text == "PNB_DC"))
                                    {
                                        return result;
                                    }
                                    return "9";
                            }
                        }
                        switch (num)
                        {
                            default:
                                return result;
                            case 1903495377u:
                                if (!(text == "ANDHRA_DC"))
                                {
                                    return result;
                                }
                                return "25";
                            case 2167229110u:
                                break;
                        }
                        if (!(text == "CHARTED_DC"))
                        {
                            return result;
                        }
                        goto IL_08dc;
                    }
                    if (num <= 788453348)
                    {
                        if (num == 38498243)
                        {
                            if (!(text == "IOB_DC"))
                            {
                                return result;
                            }
                            goto IL_08dc;
                        }
                        if (num != 788453348)
                        {
                            return result;
                        }
                        if (!(text == "UNION_DC"))
                        {
                            return result;
                        }
                    }
                    else
                    {
                        switch (num)
                        {
                            default:
                                return result;
                            case 1560067131u:
                                if (!(text == "CANARA_DC"))
                                {
                                    return result;
                                }
                                return "26";
                            case 1536820649u:
                                break;
                        }
                        if (!(text == "PTMHDFC_DC"))
                        {
                            return result;
                        }
                    }
                }
                else if (num <= 3325055476u)
                {
                    if (num <= 2677963082u)
                    {
                        switch (num)
                        {
                            default:
                                return result;
                            case 2677963082u:
                                if (!(text == "INDIAN_DC"))
                                {
                                    return result;
                                }
                                return "15";
                            case 2656693764u:
                                if (!(text == "AXIS_DC"))
                                {
                                    return result;
                                }
                                return "115";
                        }
                    }
                    switch (num)
                    {
                        default:
                            return result;
                        case 3325055476u:
                            if (!(text == "ICICI_DC"))
                            {
                                return result;
                            }
                            return "41";
                        case 2751468383u:
                            break;
                    }
                    if (!(text == "IDBI_DC"))
                    {
                        return result;
                    }
                }
                else
                {
                    if (num <= 3415719537u)
                    {
                        switch (num)
                        {
                            default:
                                return result;
                            case 3415719537u:
                                if (!(text == "SBI_DC"))
                                {
                                    return result;
                                }
                                return "78";
                            case 3394503809u:
                                if (!(text == "CBI_DC"))
                                {
                                    return result;
                                }
                                return "69";
                        }
                    }
                    switch (num)
                    {
                        default:
                            return result;
                        case 3717236599u:
                            if (!(text == "BOI_DC"))
                            {
                                return result;
                            }
                            return "19";
                        case 3827735600u:
                            break;
                    }
                    if (text == "PAYZAP_DC")
                    {
                        return "115";
                    }
                    if (text == "PAYTM_DC")
                    {
                        return "115";
                    }
                    if (text == "AXIS_DC")
                    {
                        return "115";
                    }
                }
                result = "78";
            }
        }
        else if (A_0.Contains("_CC_"))
        {
            A_1 = true;
            if (A_0.Contains("__ICI"))
            {
                result = "4";
            }
            else if (A_0.Contains("__HDF"))
            {
                result = "21";
            }
            else if (A_0.Contains("__AXS"))
            {
                result = "30";
            }
            else if (A_0.Contains("__PTM"))
            {
                result = "78";
            }
            else if (A_0.Contains("__CIT"))
            {
                result = "17";
            }
        }
        else
        {
            switch (A_0.ToUpper())
            {
                case "PAYZAP_AIRPAY":
                    result = "121";
                    break;
                case "SAFEXUPI":
                    result = "137";
                    break;
                case "PAYTMQR":
                    result = "117";
                    break;
                case "OLAMONEY":
                    result = "85";
                    break;
                case "FREECHARGE":
                    result = "79";
                    break;
                case "JIOMONEY":
                    result = "83";
                    break;
                case "OXIGEN":
                    result = "55";
                    break;
                case "V_RUPAY":
                    result = "115";
                    break;
                case "PAYUHDFC":
                    result = "98";
                    break;
                case "SBI":
                    result = "1";
                    break;
                case "BHIMUPI":
                    result = "78";//"105";//"78";
                    break;
                case "RAZORPAYUPI":
                    result = "105";//OTOPAY
                    break;
                case "IPAYUPI":
                    result = "113";
                    break;
                case "OTOPAY":
                    result = "113";
                    break;
                case "E-WALLET":
                    result = "1000";
                    break;
                case "LOYALTY":
                    result = "0";
                    break;
                case "ICICI":
                    result = "78";
                    break;
                case "AXIS":
                    result = "39";
                    break;
                case "PTMBHIMUPI":
                    result = "78";
                    break;
                case "YES":
                    result = "60";
                    break;
                case "PHONEPE":
                    result = "116";
                    break;
                case "PHONEPEQR":
                    result = "116";
                    break;
                case "PAYUUPI":
                    result = "98";
                    break;
                case "HDFC":
                case "PAYTM":
                    result = "78";
                    break;
                case "AIRTELMONEY":
                    result = "93";
                    break;
                case "MOBIKWIK":
                    result = "68";
                    break;
                case "SBINEPAL":
                    result = "64";
                    break;
                case "IDBI":
                    result = "52";
                    break;
            }
        }
        return result;
    IL_08dc:
        return "5";
    }

    private string GetBankID_APP(string A_0, ref bool A_1)
    {
        string result = "";
        A_1 = false;
        if (A_0.Contains("_DC"))
        {
            A_1 = true;
            string text = A_0.ToUpper();
            if (text != null)
            {
                if ((text == "PAYTM_DC"))
                {
                    return PAYZAPDCID;
                }
                if ((text == "VMNSDL_DC"))
                {
                    return "101";
                }
                if ((text == "NSDL_DC"))
                {
                    return "120";
                }
                if ((text == "V_RUPAY"))
                {
                    return "120";
                }
                if ((text == "AIRTEL_DC"))
                {
                    return "120";
                }
                uint num = Class46.smethod_0(text);
                if (num <= 2167229110u)
                {
                    if (num > 1560067131)
                    {
                        if (num <= 1828296518)
                        {
                            switch (num)
                            {
                                default:
                                    return result;
                                case 1828296518u:
                                    if (!(text == "HDFC_DC"))
                                    {
                                        return result;
                                    }
                                    return "120";
                                    //return "118";
                                case 1728826057u:
                                    if (!(text == "PNB_DC"))
                                    {
                                        return result;
                                    }
                                    return "9";
                            }
                        }
                        switch (num)
                        {
                            default:
                                return result;
                            case 1903495377u:
                                if (!(text == "ANDHRA_DC"))
                                {
                                    return result;
                                }
                                return "25";
                            case 2167229110u:
                                break;
                        }
                        if (!(text == "CHARTED_DC"))
                        {
                            return result;
                        }
                        goto IL_0657;
                    }
                    if (num <= 788453348)
                    {
                        if (num == 38498243)
                        {
                            if (!(text == "IOB_DC"))
                            {
                                return result;
                            }
                            goto IL_0657;
                        }
                        if (num != 788453348)
                        {
                            return result;
                        }
                        if (!(text == "UNION_DC"))
                        {
                            return result;
                        }
                        if (!(text == "PAYTM_DC"))
                        {
                            return PAYZAPDCID;
                        }
                    }
                    else
                    {
                        switch (num)
                        {
                            default:
                                return result;
                            case 1560067131u:
                                if (!(text == "CANARA_DC"))
                                {
                                    return result;
                                }
                                return "26";
                            case 1536820649u:
                                break;
                        }
                        if (!(text == "PTMHDFC_DC"))
                        {
                            return result;
                        }
                    }
                }
                else if (num <= 3325055476u)
                {
                    if (num <= 2677963082u)
                    {
                        switch (num)
                        {
                            default:
                                return result;
                            case 2677963082u:
                                if (!(text == "INDIAN_DC"))
                                {
                                    return result;
                                }
                                return "15";
                            case 2656693764u:
                                if (!(text == "AXIS_DC"))
                                {
                                    return result;
                                }
                                return PAYZAPDCID;
                                if (!(text == "PAYTM_DC"))
                                {
                                    return result;
                                }
                                return PAYZAPDCID;
                        }
                    }
                    switch (num)
                    {
                        default:
                            return result;
                        case 3325055476u:
                            if (!(text == "ICICI_DC"))
                            {
                                return result;
                            }
                            return "120";
                        case 2751468383u:
                            break;
                    }
                    if (!(text == "IDBI_DC"))
                    {
                        return result;
                    }
                }
                else
                {
                    if (num <= 3415719537u)
                    {
                        switch (num)
                        {
                            default:
                                return result;
                            case 3415719537u:
                                if (!(text == "SBI_DC"))
                                {
                                    return result;
                                }
                                return "78";
                            case 3394503809u:
                                if (!(text == "CBI_DC"))
                                {
                                    return result;
                                }
                                return "69";
                        }
                    }
                    switch (num)
                    {
                        default:
                            return result;
                        case 3717236599u:
                            if (!(text == "BOI_DC"))
                            {
                                return result;
                            }
                            return "19";
                        case 3827735600u:
                            break;
                    }
                    if (text == "PAYZAP_DC")
                    {
                        return PAYZAPDCID;
                    }
                    if (text == "AXIS_DC")
                    {
                        return PAYZAPDCID;
                    }
                    if (text == "PAYZAP_AIRPAY")
                    {
                        return "121";
                    }
                }
                result = "78";
            }
        }
        else if (A_0.Contains("_CC_"))
        {
            A_1 = true;
            if (A_0.Contains("__ICI"))
            {
                result = "4";
            }
            else if (A_0.Contains("__HDF"))
            {
                result = "21";
            }
            else if (A_0.Contains("__AXS"))
            {
                result = "30";
            }
            else if (A_0.Contains("__PTM"))
            {
                result = "78";
            }
            else if (A_0.Contains("__CIT"))
            {
                result = "17";
            }
        }
        else
        {
            string text2 = A_0.ToUpper();
            if (text2 != null)
            {
                switch (text2)
                {
                    case "PAYUHDFC"://EAZEBUZQR
                    case "BHIMUPI":
                        result = "119";
                        break;
                    case "V_RUPAY":
                        result = "120";
                        break;

                    case "HDFCUPI":
                        result = "122";
                        break;
                    case "IPAYUPI":
                        result = "118";
                        break;
                    case "CASHFREEUPI":
                        result = "147";
                        break;
                    case "E-WALLET":
                        result = "1000";
                        break;
                    case "EAZEBUZQR":
                        result = "144";
                        break;
                    case "SBI":
                        result = "77";
                        break;
                    case "ICICI":
                        result = "77";
                        break;
                    case "INDUSIND":
                        result = "77";
                        break;
                    case "PHONEPE":
                        result = phonepeid;
                        break;
                    case "PHONEPEQR":
                        result = phonepeid;
                        break;
                    case "OTOPAY":
                        result = "118";
                        break;
                    case "RAZORPAYUPI":
                        result = "141";//"106";//AIRPAYQR
                        break;

                    case "PAYZAP_AIRPAY":
                        result = "121";
                        break;
                    case "PAYUUPI":
                        result = "119";
                        break;
                    case "PAYTMQR":
                        result = "119";
                        break;
                    case "AIRPAYQR":
                        result = "121";
                        break;
                    case "HDFC":
                        result = "77";
                        break;
                    case "AIRTELMONEY":
                        result = "91";
                        break;
                    case "PAYTM":
                        result = "104";
                        break;
                    case "MOBIKWIK":
                        result = "74";
                        break;
                }
            }
        }
        return result;
    IL_0657:
        return "5";
    }

    private void method_110(object object_18)
    {
        CookieContainer cookieContainer = object_18 as CookieContainer;
        string string_ = "";
        bool bool_ = false;
        WebException webException_ = null;
        HttpStatusCode httpStatusCode_ = HttpStatusCode.Accepted;
        method_100("https://merchant.onlinesbi.com/merchant/logout.htm", "https://merchant.onlinesbi.com/merchant/merchantinter.htm", webProxy_3, ref cookieContainer, true, false, 30000, ref string_, ref bool_, ref webException_, ref httpStatusCode_, ref string_);
    }




    private void AirtelMoneyOTP(object object_18)
    {
        int minute = DateTime.Now.Minute;
        string text = object_18.ToString();
        UpdateTStatus updateTStatus = updateTStatus_0;
        Lock("Enter ProcessAirtelMoney.");
        while (true)
        {
            string text2 = class3_0.string_70;
            string[] array = text.Split(new string[1] { "||" }, StringSplitOptions.None);
            string text3 = array[0].Trim();
            string text4 = array[1];
            string text5 = "";
            CookieContainer cookieContainer = null;
            string string_ = "";
            string string_2 = "";
            try
            {
                string text6 = DateTime.Now.ToString("hh:mm:ss");
                text2 = "https://www.airtel.in/bank/api/v1/web/content/en-us/login?ts=" + text6 + "%20GMT+0530%20(India%20Standard%20Time)";
                Lock("Airtel DETAILS: ");
                string text7 = smethod_32(11);
                Lock("First Hit Inp = " + text5);
                string_71 = "contentId=" + text7;
                if (!method_85(text2, text5, "", webProxy_3, ref cookieContainer, false, true, 60000, 60000, ref string_2, ref string_, ref Exception_))
                {
                    Lock("First Hit Failed. err = " + string_);
                    break;
                }
                Lock("First Output htm = " + string_2);
                text2 = "https://www.airtel.in/bank/api/v1/auth/login/mpin";
                text7 = smethod_32(11);
                object obj = "{\"feSessionId\":\"" + text7 + "\",\"authType\":\"mPIN\",\"authValue\":\"" + text4 + "\",\"customerId\":\"" + text3 + "\"}";
                string text8 = "Airtel";
                updateTStatus?.Invoke(1002, text8 + "||" + obj, "");
                object_13 = object_16;
                object obj2 = object_13;
                object obj3 = obj2;
                lock (obj3)
                {
                    if (dictionary_5.ContainsKey(text8))
                    {
                        string_68 = dictionary_5[text8];
                        Lock("Encrypted Data, out = " + string_68);
                        dictionary_5.Remove(text8);
                    }
                }
                text5 = string_68;
                bool_36 = true;
                Lock("First Hit Inp = " + text5);
                string_71 = "contentId=" + text7;
                if (!method_85(text2, text5, "", webProxy_3, ref cookieContainer, false, true, 60000, 60000, ref string_2, ref string_, ref Exception_))
                {
                    Lock("First Hit Failed. err = " + string_);
                    break;
                }
                Lock("First Output htm = " + string_2);
                if (!string_2.Contains("description\":\"Success"))
                {
                    continue;
                }
                frmOTP frmOTP2 = new frmOTP();
                frmOTP2.method_1(control_0, rectangle_0, false, "AIRTELMONEY", class3_0.BANKSAVEAS);
                if (frmOTP2.DialogResult != DialogResult.OK)
                {
                    Lock("OTP Cancel");
                    break;
                }
                string string_3 = frmOTP2.string_0;
                frmOTP2.Dispose();
                dictionary_5.Add(text3, string_3);
                break;
            }
            catch (Exception ex)
            {
                method_74("AirtelMoney", ex.Message);
            }
        }
    }

    private string smethod_32(int A_0)
    {
        GClass5 gClass = new GClass5();
        gClass.object_0 = new Random();
        return new string(Enumerable.Repeat("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", A_0).Select(gClass.method_0).ToArray());
    }

    private string method_139(string string_86, string string_87)
    {
        string result = "";
        try
        {
            int startIndex = string_87.IndexOf("name=\"" + string_86 + "\"", StringComparison.CurrentCultureIgnoreCase);
            startIndex = string_87.LastIndexOf("<", startIndex);
            int length = string_87.IndexOf(">", startIndex) - startIndex;
            string text = string_87.Substring(startIndex, length).Replace("'", "\"");
            startIndex = text.IndexOf("value", StringComparison.CurrentCultureIgnoreCase);
            startIndex = text.IndexOf("\"", startIndex) + 1;
            length = text.IndexOf("\"", startIndex) - startIndex;
            result = HttpUtility.UrlEncode(text.Substring(startIndex, length));
            return result;
        }
        catch
        {
            return result;
        }
    }

    private bool method_163(string string_86, ref string string_87, ref string string_88)
    {
        bool result = false;
        try
        {
            frmCaptcha frmCaptcha2 = new frmCaptcha(this, cookie_, "", "");
            frmCaptcha2.method_5(control_0, rectangle_0, "", "", string_86);
            if (frmCaptcha2.DialogResult != DialogResult.OK)
            {
                Lock("OTP Cancel" + string_86);
                string_88 = "OTP Cancelled By User";
                updateTStatus_1.BeginInvoke(2, "OTP Cancelled By User", tCntrlName_, null, null);
                result = false;
                return false;
            }
            string text = frmCaptcha2.txtImageData.Text.Trim();
            frmCaptcha2.Dispose();
            string_87 = text;
            result = true;
            return true;
        }
        catch
        {
            return result;
        }
    }

    public void Dispose()
    {
        smethod_7();
    }

    private static void smethod_13(object object_18)
    {
        try
        {
            GC.Collect();
            GC.WaitForPendingFinalizers();
            GC.Collect();
        }
        catch
        {
        }
    }
}

