using System;
using System.Drawing;
using System.IO;



public class Ocr2
{
	private int wCurrImg;

	private int hCurrImg;

	private int typesNumber = 4;

	private string[] typesNames = new string[4] { "simple", "transparent", "black", "green" };

	private int[] typesW = new int[4] { 203, 203, 203, 203 };

	private int[] typesH = new int[4] { 50, 50, 50, 50 };

	private Color[] typesLeftTopPixelColor = new Color[4]
	{
		Color.FromArgb(0, 0, 0, 0),
		Color.FromArgb(0, 0, 0, 0),
		Color.FromArgb(255, 0, 0, 0),
		Color.FromArgb(255, 4, 65, 76)
	};

	private Color[] typesMustContainsColor = new Color[4]
	{
		Color.FromArgb(255, 0, 0, 0),
		Color.FromArgb(255, 255, 255, 255),
		Color.FromArgb(255, 255, 255, 255),
		Color.FromArgb(255, 255, 255, 255)
	};

	private int fileCounter;

	private int expectedNumberLetters;

	private string[] findedLetters;

	private int[] findedXs;

	private int w1 = 203;

	private int h1 = 50;

	private int w2 = 101;

	private int h2 = 25;

	private int[,] imgAsIntArr;

	private bool[,] biteArr;

	private int[] vertDens2;

	private int numberImages_black;

	private int[] orderSearch_black;

	private int[] densSymbol_black;

	private int[] w_black;

	private int[] h_black;

	private string[] retStr_black;

	private int[][] vertDens_black;

	private bool[,,] boolTemplImage_black;

	private int numberImages_simple;

	private int[] orderSearch_simple;

	private int[] densSymbol_simple;

	private int[] w_simple;

	private int[] h_simple;

	private string[] retStr_simple;

	private int[][] vertDens_simple;

	private bool[,,] boolTemplImage_simple;

	private int numberImages_transparent;

	private int[] w_transparent;

	private int[] h_transparent;

	private string[] retStr_transparent;

	private int[][] vertDens_transparent;

	private bool[,,] boolTemplImage_transparent;

	private OCR_green greenCpt;

	public Ocr2()
	{
		imgAsIntArr = new int[203, 50];
		biteArr = new bool[w2, h2];
		numberImages_black = 50;
		orderSearch_black = new int[50]
		{
			37, 36, 43, 27, 28, 35, 49, 31, 19, 14,
			26, 30, 47, 48, 3, 45, 44, 41, 5, 10,
			6, 32, 42, 8, 0, 34, 22, 4, 13, 18,
			21, 9, 15, 46, 24, 23, 39, 2, 16, 11,
			33, 1, 17, 38, 12, 29, 7, 20, 25, 40
		};
		densSymbol_black = new int[50]
		{
			45, 26, 29, 58, 43, 50, 48, 20, 47, 39,
			50, 28, 22, 41, 68, 39, 29, 26, 41, 69,
			20, 41, 44, 30, 32, 19, 65, 77, 74, 22,
			63, 70, 48, 28, 45, 71, 115, 121, 24, 30,
			14, 51, 48, 95, 52, 53, 36, 61, 60, 71
		};
		w_black = new int[50]
		{
			10, 5, 5, 10, 8, 8, 7, 6, 10, 9,
			7, 7, 4, 8, 12, 8, 6, 5, 8, 10,
			8, 9, 9, 8, 9, 8, 10, 9, 10, 5,
			11, 11, 7, 4, 8, 13, 16, 14, 8, 9,
			7, 9, 7, 14, 9, 9, 6, 9, 9, 8
		};
		h_black = new int[50]
		{
			12, 12, 12, 13, 12, 13, 13, 13, 13, 10,
			12, 11, 15, 12, 14, 13, 11, 12, 12, 11,
			13, 12, 13, 13, 13, 12, 12, 13, 13, 12,
			13, 16, 13, 15, 13, 15, 15, 12, 10, 10,
			9, 14, 14, 12, 13, 12, 13, 13, 14, 14
		};
		retStr_black = new string[50]
		{
			"A", "L", "E", "X", "6", "9", "Z", "T", "D", "N",
			"R", "7", "J", "P", "Q", "U", "4", "F", "9", "M",
			"T", "K", "Y", "H", "H", "T", "K", "9", "6", "F",
			"D", "Q", "3", "J", "4", "JJ", "MJ", "@", "=", "=",
			"=", "Z", "Z", "W", "G", "V", "3", "Z", "Z", "Z"
		};
		vertDens_black = new int[50][]
		{
			new int[10] { 2, 3, 4, 6, 6, 5, 5, 5, 6, 3 },
			new int[5] { 11, 12, 1, 1, 1 },
			new int[5] { 10, 11, 3, 3, 2 },
			new int[10] { 2, 6, 8, 8, 6, 7, 8, 6, 5, 2 },
			new int[8] { 7, 10, 7, 3, 3, 3, 6, 4 },
			new int[8] { 4, 7, 6, 4, 5, 10, 10, 4 },
			new int[7] { 5, 7, 9, 10, 9, 6, 2 },
			new int[6] { 1, 2, 2, 12, 2, 1 },
			new int[10] { 10, 2, 1, 3, 4, 3, 4, 5, 9, 6 },
			new int[9] { 10, 2, 3, 3, 3, 2, 4, 3, 9 },
			new int[7] { 9, 11, 3, 4, 6, 9, 8 },
			new int[7] { 3, 6, 6, 6, 4, 2, 1 },
			new int[4] { 2, 2, 14, 4 },
			new int[8] { 7, 11, 3, 3, 4, 6, 5, 2 },
			new int[12]
			{
				6, 9, 8, 4, 4, 2, 2, 5, 8, 11,
				8, 1
			},
			new int[8] { 8, 11, 2, 2, 2, 2, 2, 10 },
			new int[6] { 2, 4, 5, 5, 9, 4 },
			new int[5] { 9, 12, 2, 2, 1 },
			new int[8] { 4, 6, 3, 3, 3, 5, 10, 7 },
			new int[10] { 8, 5, 7, 6, 6, 5, 6, 6, 9, 11 },
			new int[8] { 1, 1, 1, 2, 12, 1, 1, 1 },
			new int[9] { 11, 3, 3, 5, 6, 6, 3, 3, 1 },
			new int[9] { 3, 5, 6, 9, 9, 3, 3, 3, 3 },
			new int[8] { 11, 1, 1, 1, 1, 1, 3, 11 },
			new int[9] { 12, 1, 1, 1, 1, 1, 1, 8, 6 },
			new int[8] { 1, 1, 1, 8, 5, 1, 1, 1 },
			new int[10] { 11, 12, 5, 6, 8, 9, 5, 5, 3, 1 },
			new int[9] { 5, 9, 10, 7, 6, 10, 12, 10, 8 },
			new int[10] { 3, 7, 9, 11, 8, 6, 8, 10, 8, 4 },
			new int[5] { 10, 5, 3, 3, 1 },
			new int[11]
			{
				9, 12, 3, 2, 2, 4, 3, 6, 10, 8,
				4
			},
			new int[11]
			{
				8, 10, 6, 4, 3, 2, 3, 7, 13, 12,
				2
			},
			new int[7] { 3, 4, 6, 8, 12, 11, 4 },
			new int[4] { 3, 3, 14, 8 },
			new int[8] { 2, 3, 5, 5, 7, 10, 12, 1 },
			new int[13]
			{
				2, 2, 2, 15, 15, 3, 0, 1, 1, 2,
				13, 13, 2
			},
			new int[16]
			{
				9, 9, 7, 8, 7, 7, 7, 8, 9, 11,
				13, 1, 1, 1, 13, 4
			},
			new int[14]
			{
				4, 7, 9, 9, 11, 11, 10, 10, 12, 10,
				9, 8, 7, 4
			},
			new int[8] { 2, 2, 4, 4, 4, 4, 2, 2 },
			new int[9] { 2, 2, 4, 4, 4, 4, 4, 4, 2 },
			new int[7] { 2, 2, 2, 2, 2, 2, 2 },
			new int[9] { 2, 4, 6, 9, 9, 8, 8, 4, 1 },
			new int[7] { 4, 9, 9, 7, 7, 7, 5 },
			new int[14]
			{
				5, 8, 7, 7, 7, 7, 7, 8, 8, 8,
				8, 8, 5, 2
			},
			new int[9] { 5, 8, 10, 6, 4, 3, 4, 4, 8 },
			new int[9] { 6, 8, 8, 7, 6, 6, 4, 5, 3 },
			new int[6] { 3, 5, 9, 10, 7, 2 },
			new int[9] { 1, 5, 6, 8, 12, 11, 8, 6, 4 },
			new int[9] { 3, 6, 8, 10, 10, 8, 8, 6, 1 },
			new int[8] { 5, 8, 10, 12, 12, 10, 9, 5 }
		};
		long[][] array = new long[50][]
		{
			new long[10] { 3072L, 3584L, 960L, 504L, 190L, 143L, 188L, 496L, 4032L, 3584L },
			new long[5] { 2047L, 4095L, 2048L, 2048L, 2048L },
			new long[5] { 2046L, 2047L, 2081L, 2081L, 2049L },
			new long[10] { 3L, 3591L, 1950L, 1020L, 504L, 1016L, 1980L, 3852L, 7174L, 4098L },
			new long[8] { 1016L, 2046L, 3175L, 2081L, 2081L, 2081L, 4032L, 1920L },
			new long[8] { 120L, 4348L, 4302L, 4230L, 6278L, 8142L, 4092L, 480L },
			new long[7] { 7681L, 4033L, 4081L, 3327L, 3199L, 2079L, 6L },
			new long[6] { 1L, 3L, 6L, 8190L, 6L, 4L },
			new long[10] { 2046L, 2050L, 2048L, 2051L, 6147L, 6146L, 6150L, 7180L, 4088L, 2016L },
			new long[9] { 1023L, 6L, 14L, 28L, 56L, 96L, 480L, 448L, 1022L },
			new long[7] { 1022L, 4094L, 194L, 195L, 486L, 1022L, 1916L },
			new long[7] { 1537L, 1985L, 483L, 126L, 30L, 6L, 2L },
			new long[4] { 24576L, 24576L, 16383L, 15360L },
			new long[8] { 508L, 4094L, 194L, 194L, 198L, 126L, 124L, 24L },
			new long[12]
			{
				1008L, 2044L, 3870L, 3078L, 3075L, 2049L, 2049L, 7171L, 7950L, 14332L,
				9208L, 8192L
			},
			new long[8] { 1020L, 4094L, 3072L, 6144L, 6144L, 6144L, 3072L, 2046L },
			new long[6] { 96L, 120L, 94L, 79L, 511L, 1920L },
			new long[5] { 1022L, 4095L, 33L, 33L, 1L },
			new long[8] { 30L, 63L, 2113L, 2113L, 2113L, 3649L, 2046L, 508L },
			new long[10] { 1020L, 124L, 254L, 504L, 2016L, 1984L, 1008L, 504L, 1022L, 2047L },
			new long[8] { 4L, 4L, 4L, 12L, 8190L, 2L, 2L, 1L },
			new long[9] { 4094L, 224L, 224L, 496L, 504L, 910L, 1538L, 3073L, 2048L },
			new long[9] { 14L, 62L, 252L, 8176L, 8176L, 112L, 56L, 28L, 14L },
			new long[8] { 8188L, 128L, 64L, 64L, 64L, 64L, 112L, 2047L },
			new long[9] { 4095L, 64L, 64L, 64L, 64L, 64L, 64L, 510L, 8064L },
			new long[8] { 1L, 1L, 1L, 255L, 3841L, 1L, 1L, 1L },
			new long[10] { 2047L, 4095L, 496L, 504L, 1020L, 1022L, 1798L, 3587L, 3073L, 2048L },
			new long[9] { 124L, 6398L, 6399L, 6343L, 6339L, 8163L, 4095L, 2046L, 1020L },
			new long[10] { 224L, 1016L, 2044L, 4094L, 7271L, 6243L, 7395L, 8163L, 4035L, 1920L },
			new long[5] { 4092L, 103L, 67L, 67L, 2L },
			new long[11]
			{
				4088L, 8190L, 6146L, 4098L, 4098L, 6147L, 6146L, 7686L, 4092L, 2040L,
				480L
			},
			new long[11]
			{
				2040L, 4092L, 3102L, 6150L, 4102L, 4098L, 12292L, 31756L, 32764L, 61432L,
				49152L
			},
			new long[7] { 6146L, 6210L, 6339L, 6375L, 8190L, 8188L, 3840L },
			new long[4] { 28672L, 14336L, 16383L, 7695L },
			new long[8] { 384L, 448L, 496L, 376L, 892L, 2046L, 8190L, 256L },
			new long[13]
			{
				24576L, 24576L, 24576L, 32767L, 32767L, 14336L, 0L, 8192L, 8192L, 12288L,
				16382L, 16382L, 6144L
			},
			new long[16]
			{
				2044L, 6652L, 508L, 1020L, 2032L, 4064L, 4064L, 2040L, 2044L, 4094L,
				16382L, 8192L, 16384L, 16384L, 32764L, 15360L
			},
			new long[14]
			{
				240L, 1016L, 2044L, 2044L, 4094L, 4094L, 3999L, 3999L, 4095L, 1023L,
				511L, 510L, 254L, 120L
			},
			new long[8] { 576L, 576L, 864L, 864L, 864L, 864L, 288L, 288L },
			new long[9] { 288L, 288L, 864L, 864L, 864L, 864L, 864L, 864L, 576L },
			new long[7] { 288L, 288L, 288L, 288L, 288L, 288L, 288L },
			new long[9] { 3072L, 3585L, 3969L, 8162L, 5110L, 4350L, 12414L, 30L, 4L },
			new long[7] { 7680L, 16262L, 8162L, 4594L, 4222L, 2111L, 2063L },
			new long[14]
			{
				31L, 255L, 1016L, 2032L, 2032L, 508L, 254L, 255L, 1020L, 3576L,
				3576L, 2040L, 62L, 3L
			},
			new long[9] { 496L, 1020L, 2046L, 1551L, 3075L, 2051L, 6147L, 6147L, 7943L },
			new long[9] { 63L, 510L, 2040L, 4064L, 4032L, 2016L, 240L, 62L, 7L },
			new long[6] { 4162L, 4294L, 6638L, 7676L, 3992L, 1536L },
			new long[9] { 2048L, 7682L, 3969L, 4065L, 4095L, 3583L, 2175L, 4158L, 4110L },
			new long[9] { 14336L, 15876L, 16260L, 8166L, 5118L, 4350L, 2175L, 2079L, 4L },
			new long[8] { 14342L, 16134L, 16326L, 8183L, 7167L, 6399L, 6271L, 12316L }
		};
		boolTemplImage_black = new bool[numberImages_black, 16, 16];
		for (int i = 0; i < numberImages_black; i++)
		{
			int num = w_black[i];
			int num2 = h_black[i];
			for (int j = 0; j < num; j++)
			{
				long num3 = array[i][j];
				for (int k = 0; k < num2; k++)
				{
					boolTemplImage_black[i, j, k] = ((1L << (k & 0x1F)) & num3) != 0;
				}
			}
		}
		numberImages_simple = 28;
		orderSearch_simple = new int[28]
		{
			22, 26, 14, 17, 6, 4, 2, 18, 15, 23,
			5, 12, 21, 9, 10, 16, 20, 0, 25, 1,
			24, 7, 3, 8, 11, 19, 13, 27
		};
		densSymbol_simple = new int[28]
		{
			150, 143, 201, 125, 202, 183, 210, 126, 106, 168,
			168, 105, 177, 92, 259, 190, 157, 257, 194, 104,
			151, 170, 313, 185, 131, 150, 309, 68
		};
		w_simple = new int[28]
		{
			13, 16, 16, 14, 16, 21, 19, 13, 12, 18,
			18, 10, 18, 13, 21, 18, 14, 23, 16, 19,
			16, 20, 28, 20, 19, 15, 25, 17
		};
		h_simple = new int[28]
		{
			24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
			24, 29, 24, 24, 24, 24, 24, 29, 24, 24,
			24, 24, 24, 24, 24, 24, 24, 19
		};
		retStr_simple = new string[28]
		{
			"3", "4", "6", "7", "9", "A", "D", "E", "F", "G",
			"H", "J", "K", "L", "M", "N", "P", "Q", "R", "T",
			"U", "V", "W", "X", "Y", "Z", "@", "="
		};
		vertDens_simple = new int[28][]
		{
			new int[13]
			{
				6, 6, 8, 8, 8, 9, 10, 11, 18, 22,
				21, 16, 7
			},
			new int[16]
			{
				4, 6, 7, 6, 7, 7, 7, 7, 7, 7,
				24, 24, 24, 2, 2, 2
			},
			new int[16]
			{
				13, 17, 20, 20, 13, 11, 9, 9, 7, 8,
				9, 11, 16, 16, 14, 8
			},
			new int[14]
			{
				3, 7, 10, 12, 14, 11, 11, 10, 9, 9,
				10, 8, 6, 5
			},
			new int[16]
			{
				8, 14, 16, 16, 11, 9, 8, 7, 9, 10,
				12, 13, 20, 19, 17, 13
			},
			new int[21]
			{
				3, 5, 7, 7, 8, 7, 9, 10, 9, 9,
				8, 11, 13, 14, 12, 11, 12, 11, 8, 6,
				3
			},
			new int[19]
			{
				24, 24, 24, 4, 4, 4, 4, 5, 6, 6,
				6, 6, 8, 9, 12, 18, 18, 16, 12
			},
			new int[13]
			{
				24, 24, 24, 6, 6, 6, 6, 6, 6, 6,
				6, 4, 2
			},
			new int[12]
			{
				24, 24, 24, 4, 4, 4, 4, 4, 4, 4,
				4, 2
			},
			new int[18]
			{
				10, 14, 17, 17, 11, 7, 7, 5, 6, 6,
				5, 5, 6, 6, 6, 14, 13, 13
			},
			new int[18]
			{
				24, 24, 24, 2, 2, 2, 2, 2, 2, 2,
				2, 2, 2, 2, 2, 24, 24, 24
			},
			new int[10] { 3, 3, 3, 2, 3, 3, 6, 28, 28, 26 },
			new int[18]
			{
				24, 24, 24, 3, 5, 8, 10, 10, 10, 10,
				9, 9, 10, 8, 6, 4, 2, 1
			},
			new int[13]
			{
				24, 24, 24, 2, 2, 2, 2, 2, 2, 2,
				2, 2, 2
			},
			new int[21]
			{
				24, 24, 7, 10, 11, 11, 11, 11, 10, 8,
				5, 8, 8, 8, 8, 8, 8, 7, 24, 24,
				24
			},
			new int[18]
			{
				24, 24, 6, 6, 7, 7, 7, 7, 7, 7,
				7, 7, 7, 7, 6, 6, 24, 24
			},
			new int[14]
			{
				24, 24, 24, 4, 4, 5, 6, 6, 7, 9,
				12, 13, 11, 8
			},
			new int[23]
			{
				12, 16, 18, 18, 12, 8, 8, 6, 6, 6,
				4, 6, 7, 7, 10, 12, 16, 22, 22, 20,
				16, 3, 2
			},
			new int[16]
			{
				24, 24, 24, 4, 4, 5, 7, 9, 13, 19,
				19, 18, 14, 5, 3, 2
			},
			new int[19]
			{
				2, 2, 2, 2, 2, 2, 2, 2, 24, 24,
				24, 2, 2, 2, 2, 2, 2, 2, 2
			},
			new int[16]
			{
				20, 22, 23, 8, 4, 3, 3, 3, 2, 3,
				3, 3, 4, 7, 22, 21
			},
			new int[20]
			{
				3, 6, 8, 11, 12, 11, 12, 12, 11, 8,
				6, 8, 9, 9, 9, 9, 9, 8, 6, 3
			},
			new int[28]
			{
				4, 7, 11, 14, 15, 14, 14, 10, 7, 10,
				12, 12, 11, 11, 7, 11, 14, 15, 15, 14,
				11, 7, 12, 14, 15, 13, 9, 4
			},
			new int[20]
			{
				2, 4, 8, 10, 12, 13, 12, 13, 10, 8,
				8, 11, 13, 12, 13, 12, 10, 8, 4, 2
			},
			new int[19]
			{
				2, 3, 5, 7, 7, 8, 8, 7, 17, 15,
				16, 5, 6, 5, 5, 5, 5, 3, 2
			},
			new int[15]
			{
				4, 8, 9, 11, 12, 12, 12, 12, 12, 12,
				12, 11, 9, 8, 6
			},
			new int[25]
			{
				10, 14, 14, 10, 9, 8, 15, 17, 17, 14,
				11, 12, 13, 12, 12, 18, 17, 17, 11, 7,
				8, 8, 13, 12, 10
			},
			new int[17]
			{
				4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
				4, 4, 4, 4, 4, 4, 4
			}
		};
		long[][] array2 = new long[28][]
		{
			new long[13]
			{
				14680071L, 14680071L, 14686215L, 14686215L, 12598275L, 12598279L, 14695431L, 14695943L, 15761375L, 16644095L,
				8386558L, 4186620L, 2080768L
			},
			new long[16]
			{
				122880L, 129024L, 130048L, 105984L, 102272L, 100288L, 98800L, 98552L, 98366L, 98335L,
				16777215L, 16777215L, 16777215L, 98304L, 98304L, 98304L
			},
			new long[16]
			{
				524224L, 2097136L, 4194300L, 8355836L, 16260158L, 15732239L, 14683655L, 14683655L, 12584455L, 14683651L,
				14683655L, 15736327L, 8322567L, 8387591L, 4192263L, 1044480L
			},
			new long[14]
			{
				7L, 15728647L, 16646151L, 16744455L, 16769031L, 1044487L, 261127L, 32519L, 8071L, 2023L,
				1023L, 255L, 63L, 31L
			},
			new long[16]
			{
				4080L, 14688252L, 14696446L, 14712702L, 14710799L, 14708743L, 12611591L, 14704643L, 14708743L, 15757319L,
				16281615L, 8140831L, 4194046L, 2097148L, 1048568L, 262112L
			},
			new long[21]
			{
				14680064L, 16252928L, 16646144L, 4161536L, 1044480L, 130048L, 130816L, 106464L, 99320L, 98558L,
				98367L, 98815L, 100351L, 114684L, 131040L, 524032L, 4193280L, 16769024L, 16711680L, 16515072L,
				14680064L
			},
			new long[19]
			{
				16777215L, 16777215L, 16777215L, 12582915L, 12582915L, 12582915L, 12582915L, 12582919L, 14680071L, 14680071L,
				14680071L, 14680071L, 15728655L, 7864351L, 8257662L, 4188156L, 2097144L, 1048560L, 262080L
			},
			new long[13]
			{
				16777215L, 16777215L, 16777215L, 12589059L, 12589059L, 12589059L, 12589059L, 12589059L, 12589059L, 12589059L,
				12589059L, 12582915L, 12582912L
			},
			new long[12]
			{
				16777215L, 16777215L, 16777215L, 6147L, 6147L, 6147L, 6147L, 6147L, 6147L, 6147L,
				6147L, 3L
			},
			new long[18]
			{
				261888L, 1048512L, 2097136L, 4188152L, 8257660L, 7864348L, 15728654L, 14680070L, 14680071L, 14680071L,
				14680067L, 12582919L, 14680071L, 14680071L, 14680071L, 16760847L, 16760846L, 16760846L
			},
			new long[18]
			{
				16777215L, 16777215L, 16777215L, 6144L, 6144L, 6144L, 6144L, 6144L, 6144L, 6144L,
				6144L, 6144L, 6144L, 6144L, 6144L, 16777215L, 16777215L, 16777215L
			},
			new long[10] { 469762048L, 469762048L, 469762048L, 402653184L, 469762048L, 469762048L, 528482304L, 268435455L, 268435455L, 67108863L },
			new long[18]
			{
				16777215L, 16777215L, 16777215L, 7168L, 15872L, 65280L, 130944L, 259008L, 516576L, 1032312L,
				2031676L, 4063262L, 16515087L, 16252935L, 15728643L, 14680065L, 12582912L, 8388608L
			},
			new long[13]
			{
				16777215L, 16777215L, 16777215L, 12582912L, 12582912L, 12582912L, 12582912L, 12582912L, 12582912L, 12582912L,
				12582912L, 12582912L, 12582912L
			},
			new long[21]
			{
				16777215L, 16777215L, 127L, 1023L, 4094L, 32752L, 131008L, 1048064L, 4190208L, 4177920L,
				4063232L, 4177920L, 1044480L, 130560L, 32640L, 4080L, 1020L, 127L, 16777215L, 16777215L,
				16777215L
			},
			new long[18]
			{
				16777215L, 16777215L, 63L, 126L, 508L, 1016L, 4064L, 8128L, 32512L, 65024L,
				260096L, 520192L, 2080768L, 4161536L, 8257536L, 16515072L, 16777215L, 16777215L
			},
			new long[14]
			{
				16777215L, 16777215L, 16777215L, 12291L, 12291L, 14339L, 14343L, 14343L, 15367L, 15887L,
				8127L, 8191L, 4094L, 1020L
			},
			new long[23]
			{
				262080L, 1048560L, 2097144L, 4188156L, 8257662L, 7864350L, 15728655L, 14680071L, 14680071L, 14680071L,
				12582915L, 14680071L, 31457287L, 31457287L, 66060303L, 133693470L, 134086782L, 255846396L, 253755384L, 504365040L,
				503578560L, 469762048L, 201326592L
			},
			new long[16]
			{
				16777215L, 16777215L, 16777215L, 12291L, 12291L, 14339L, 30727L, 129031L, 523279L, 1048511L,
				4165631L, 8327166L, 16516092L, 16252928L, 14680064L, 12582912L
			},
			new long[19]
			{
				3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 16777215L, 16777215L,
				16777215L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L
			},
			new long[16]
			{
				1048575L, 4194303L, 8388607L, 16711680L, 15728640L, 14680064L, 14680064L, 14680064L, 12582912L, 14680064L,
				14680064L, 14680064L, 15728640L, 8323072L, 4194303L, 2097151L
			},
			new long[20]
			{
				7L, 63L, 255L, 2047L, 16380L, 65504L, 524160L, 4193280L, 16769024L, 16711680L,
				16515072L, 16711680L, 4186112L, 523264L, 65408L, 16352L, 2044L, 255L, 63L, 7L
			},
			new long[28]
			{
				15L, 127L, 2047L, 16383L, 262136L, 2097024L, 16776192L, 16760832L, 16646144L, 16760832L,
				4193280L, 262080L, 16376L, 2047L, 127L, 2047L, 16383L, 262136L, 2097088L, 16776192L,
				16769024L, 16646144L, 16773120L, 4194048L, 262136L, 8191L, 511L, 15L
			},
			new long[20]
			{
				8388609L, 12582915L, 15728655L, 16252959L, 4063359L, 2032126L, 508920L, 258032L, 65472L, 32640L,
				130560L, 262016L, 1046464L, 2081760L, 8356088L, 16646268L, 16252959L, 15728655L, 12582915L, 8388609L
			},
			new long[19]
			{
				3L, 7L, 31L, 127L, 254L, 1020L, 4080L, 8128L, 16777088L, 16776704L,
				16776960L, 3968L, 2016L, 496L, 248L, 62L, 31L, 7L, 3L
			},
			new long[15]
			{
				15728640L, 16515075L, 16646147L, 16744451L, 14671875L, 13105155L, 12844035L, 12648195L, 12599235L, 12591075L,
				12584955L, 12583423L, 12583039L, 12582975L, 12582927L
			},
			new long[25]
			{
				523776L, 2097024L, 4169664L, 3933168L, 7864568L, 15728760L, 15202364L, 15203870L, 15187854L, 15139791L,
				13042119L, 13074663L, 14926055L, 14803047L, 14741731L, 15203559L, 524263L, 524263L, 459751L, 458767L,
				491550L, 245820L, 129532L, 65520L, 32736L
			},
			new long[17]
			{
				399360L, 399360L, 399360L, 399360L, 399360L, 399360L, 399360L, 399360L, 399360L, 399360L,
				399360L, 399360L, 399360L, 399360L, 399360L, 399360L, 399360L
			}
		};
		boolTemplImage_simple = new bool[numberImages_simple, 30, 30];
		for (int l = 0; l < numberImages_simple; l++)
		{
			int num4 = w_simple[l];
			int num5 = h_simple[l];
			for (int m = 0; m < num4; m++)
			{
				long num6 = array2[l][m];
				for (int n = 0; n < num5; n++)
				{
					boolTemplImage_simple[l, m, n] = ((1L << (n & 0x1F)) & num6) != 0;
				}
			}
		}
		numberImages_transparent = 78;
		w_transparent = new int[78]
		{
			35, 37, 34, 27, 25, 31, 31, 22, 32, 20,
			30, 19, 20, 20, 26, 22, 23, 19, 20, 19,
			20, 27, 19, 19, 19, 22, 21, 24, 22, 19,
			26, 18, 20, 24, 17, 19, 19, 17, 21, 18,
			19, 17, 19, 23, 23, 19, 20, 17, 23, 21,
			24, 19, 24, 20, 21, 19, 20, 17, 17, 18,
			21, 15, 24, 10, 17, 17, 14, 14, 14, 17,
			18, 8, 8, 25, 12, 24, 19, 11
		};
		h_transparent = new int[78]
		{
			37, 30, 30, 30, 30, 30, 30, 30, 30, 38,
			30, 38, 30, 30, 35, 30, 30, 30, 38, 30,
			30, 30, 30, 38, 38, 30, 30, 30, 30, 30,
			30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
			30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
			30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
			24, 30, 30, 38, 30, 30, 30, 30, 30, 30,
			30, 36, 38, 23, 30, 23, 24, 30
		};
		retStr_transparent = new string[78]
		{
			"@", "W", "W", "M", "M", "@", "w", "N", "m", "g",
			"m", "g", "9", "6", "Q", "N", "K", "6", "q", "9",
			"d", "V", "d", "p", "q", "K", "H", "D", "H", "k",
			"V", "a", "e", "X", "3", "P", "3", "P", "4", "h",
			"b", "h", "k", "G", "y", "a", "4", "e", "x", "R",
			"Y", "z", "Y", "Z", "v", "7", "U", "u", "E", "7",
			"A", "F", "T", "J", "F", "n", "f", "t", "f", "L",
			"L", "J", "j", "=", "t", "=", "T", "r"
		};
		vertDens_transparent = new int[78][]
		{
			new int[35]
			{
				13, 17, 21, 21, 14, 12, 12, 11, 10, 19,
				22, 23, 23, 18, 16, 16, 16, 12, 14, 16,
				16, 16, 20, 26, 25, 26, 13, 13, 13, 10,
				13, 17, 17, 14, 10
			},
			new int[37]
			{
				4, 8, 12, 16, 20, 21, 21, 18, 14, 10,
				7, 11, 15, 17, 17, 17, 14, 10, 6, 10,
				14, 17, 17, 17, 15, 11, 7, 10, 14, 18,
				21, 21, 20, 16, 12, 8, 4
			},
			new int[34]
			{
				5, 9, 13, 18, 22, 23, 22, 17, 13, 8,
				13, 17, 17, 18, 18, 13, 9, 13, 18, 22,
				22, 22, 17, 13, 9, 12, 16, 15, 15, 16,
				15, 11, 7, 4
			},
			new int[27]
			{
				29, 29, 29, 29, 6, 9, 11, 14, 14, 14,
				14, 13, 10, 7, 10, 13, 14, 14, 14, 14,
				11, 9, 6, 29, 29, 29, 29
			},
			new int[25]
			{
				30, 30, 30, 9, 12, 15, 16, 16, 16, 16,
				13, 10, 7, 10, 12, 12, 12, 12, 12, 12,
				9, 30, 30, 30, 30
			},
			new int[31]
			{
				11, 15, 16, 11, 9, 8, 7, 16, 19, 19,
				19, 13, 13, 13, 13, 14, 13, 18, 21, 20,
				19, 14, 10, 7, 7, 7, 9, 10, 16, 14,
				11
			},
			new int[31]
			{
				4, 8, 12, 16, 20, 19, 15, 11, 7, 10,
				13, 13, 13, 13, 10, 7, 10, 13, 16, 16,
				16, 13, 10, 7, 11, 15, 17, 16, 12, 8,
				4
			},
			new int[22]
			{
				29, 29, 29, 29, 8, 10, 11, 10, 11, 11,
				11, 11, 11, 10, 10, 11, 10, 8, 29, 29,
				29, 29
			},
			new int[32]
			{
				22, 22, 22, 22, 7, 5, 4, 4, 4, 3,
				4, 4, 5, 9, 23, 22, 21, 20, 7, 5,
				4, 4, 4, 3, 4, 4, 5, 9, 23, 22,
				21, 19
			},
			new int[20]
			{
				11, 15, 19, 26, 23, 16, 14, 12, 12, 10,
				11, 12, 12, 13, 16, 26, 29, 28, 27, 25
			},
			new int[30]
			{
				22, 22, 22, 22, 6, 5, 5, 5, 4, 4,
				4, 4, 6, 22, 22, 21, 20, 5, 5, 5,
				5, 4, 4, 4, 4, 6, 22, 22, 21, 20
			},
			new int[19]
			{
				11, 15, 22, 24, 23, 15, 13, 12, 10, 11,
				12, 12, 13, 14, 17, 29, 28, 27, 25
			},
			new int[20]
			{
				10, 14, 21, 23, 20, 15, 13, 10, 10, 9,
				11, 11, 14, 16, 23, 27, 25, 23, 19, 15
			},
			new int[20]
			{
				15, 19, 23, 25, 27, 23, 17, 14, 11, 11,
				9, 10, 10, 13, 15, 19, 22, 20, 14, 10
			},
			new int[26]
			{
				14, 18, 20, 22, 12, 10, 10, 8, 8, 8,
				8, 8, 6, 6, 8, 9, 10, 10, 12, 13,
				13, 14, 24, 21, 18, 14
			},
			new int[22]
			{
				30, 30, 30, 8, 9, 9, 9, 9, 9, 9,
				9, 9, 9, 9, 9, 9, 9, 9, 8, 30,
				30, 30
			},
			new int[23]
			{
				29, 29, 29, 29, 7, 9, 11, 13, 14, 14,
				14, 14, 14, 14, 14, 14, 13, 11, 9, 7,
				5, 3, 1
			},
			new int[19]
			{
				15, 19, 23, 25, 26, 18, 14, 13, 12, 10,
				12, 11, 12, 16, 21, 21, 19, 17, 10
			},
			new int[20]
			{
				11, 15, 19, 21, 18, 14, 10, 8, 8, 7,
				8, 8, 8, 8, 12, 18, 30, 30, 30, 30
			},
			new int[19]
			{
				10, 17, 19, 21, 20, 15, 12, 11, 12, 10,
				12, 13, 14, 18, 26, 25, 23, 20, 14
			},
			new int[20]
			{
				11, 15, 19, 21, 18, 14, 10, 8, 8, 7,
				8, 8, 8, 8, 12, 18, 29, 29, 29, 29
			},
			new int[27]
			{
				3, 5, 8, 11, 13, 14, 14, 14, 14, 14,
				14, 12, 9, 7, 9, 12, 14, 14, 14, 14,
				14, 14, 13, 11, 8, 5, 3
			},
			new int[19]
			{
				11, 15, 18, 20, 18, 11, 9, 8, 7, 7,
				8, 8, 8, 9, 9, 30, 30, 30, 30
			},
			new int[19]
			{
				30, 30, 30, 30, 9, 9, 8, 8, 8, 7,
				7, 8, 9, 11, 18, 20, 18, 15, 11
			},
			new int[19]
			{
				11, 15, 18, 20, 18, 11, 9, 8, 7, 7,
				8, 8, 8, 9, 9, 30, 30, 30, 30
			},
			new int[22]
			{
				30, 30, 30, 30, 3, 6, 8, 10, 13, 13,
				13, 13, 12, 13, 14, 13, 11, 8, 6, 4,
				2, 1
			},
			new int[21]
			{
				30, 30, 30, 30, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 30, 30, 30,
				30
			},
			new int[24]
			{
				29, 29, 29, 6, 5, 5, 5, 5, 5, 6,
				7, 7, 7, 7, 8, 7, 8, 10, 10, 13,
				19, 20, 17, 12
			},
			new int[22]
			{
				29, 29, 29, 29, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3, 29, 29,
				29, 29
			},
			new int[19]
			{
				29, 29, 29, 29, 7, 9, 11, 13, 15, 15,
				14, 15, 14, 12, 10, 8, 6, 4, 2
			},
			new int[26]
			{
				3, 6, 8, 11, 13, 14, 14, 14, 14, 14,
				14, 12, 9, 7, 9, 11, 12, 11, 11, 12,
				11, 11, 11, 8, 5, 3
			},
			new int[18]
			{
				8, 11, 16, 17, 18, 13, 12, 12, 10, 12,
				11, 11, 13, 19, 22, 21, 20, 19
			},
			new int[20]
			{
				11, 15, 17, 19, 21, 14, 13, 12, 11, 11,
				10, 10, 11, 12, 13, 14, 15, 14, 13, 7
			},
			new int[24]
			{
				2, 5, 8, 11, 12, 14, 14, 14, 14, 14,
				11, 9, 9, 11, 14, 14, 14, 14, 14, 13,
				11, 8, 5, 2
			},
			new int[17]
			{
				8, 8, 9, 11, 11, 12, 11, 13, 13, 14,
				18, 24, 28, 26, 23, 19, 8
			},
			new int[19]
			{
				29, 29, 29, 29, 6, 6, 6, 6, 6, 6,
				8, 8, 8, 10, 16, 15, 15, 13, 9
			},
			new int[19]
			{
				5, 9, 8, 8, 7, 10, 10, 9, 8, 12,
				12, 12, 16, 22, 27, 27, 24, 19, 9
			},
			new int[17]
			{
				30, 30, 30, 30, 6, 6, 7, 8, 8, 8,
				9, 11, 16, 16, 15, 13, 10
			},
			new int[21]
			{
				6, 7, 9, 10, 11, 10, 11, 10, 11, 10,
				10, 10, 8, 29, 29, 29, 29, 3, 3, 3,
				3
			},
			new int[18]
			{
				29, 29, 29, 29, 7, 5, 4, 4, 4, 3,
				4, 4, 5, 9, 23, 22, 21, 19
			},
			new int[19]
			{
				30, 30, 30, 16, 8, 7, 5, 7, 7, 6,
				6, 7, 7, 9, 12, 19, 18, 15, 11
			},
			new int[17]
			{
				30, 30, 30, 30, 5, 4, 4, 5, 4, 4,
				4, 4, 7, 22, 22, 21, 20
			},
			new int[19]
			{
				30, 30, 30, 30, 3, 5, 8, 11, 13, 13,
				13, 14, 14, 11, 8, 6, 4, 2, 1
			},
			new int[23]
			{
				14, 18, 20, 22, 12, 10, 10, 8, 10, 8,
				8, 8, 7, 6, 6, 7, 8, 8, 8, 7,
				8, 16, 14
			},
			new int[23]
			{
				1, 3, 6, 8, 11, 14, 15, 18, 19, 20,
				17, 13, 11, 11, 10, 11, 11, 11, 11, 8,
				6, 3, 1
			},
			new int[19]
			{
				8, 10, 16, 16, 16, 12, 11, 10, 10, 11,
				10, 12, 20, 22, 21, 20, 6, 4, 3
			},
			new int[20]
			{
				5, 6, 8, 9, 10, 9, 10, 9, 10, 9,
				10, 9, 30, 30, 30, 30, 3, 3, 3, 3
			},
			new int[17]
			{
				11, 14, 17, 19, 20, 15, 12, 11, 10, 11,
				10, 11, 15, 15, 15, 13, 11
			},
			new int[23]
			{
				2, 4, 6, 10, 12, 13, 15, 15, 14, 12,
				8, 8, 9, 13, 15, 15, 15, 14, 11, 9,
				5, 3, 1
			},
			new int[21]
			{
				29, 29, 29, 6, 4, 4, 4, 5, 6, 7,
				8, 9, 10, 11, 16, 16, 14, 5, 5, 3,
				2
			},
			new int[24]
			{
				2, 3, 5, 6, 8, 9, 9, 9, 9, 9,
				21, 20, 20, 21, 9, 9, 9, 9, 9, 8,
				6, 5, 3, 2
			},
			new int[19]
			{
				4, 9, 10, 11, 12, 13, 13, 13, 14, 14,
				14, 13, 13, 13, 12, 11, 10, 9, 7
			},
			new int[24]
			{
				2, 4, 5, 7, 8, 9, 10, 9, 9, 10,
				21, 20, 18, 20, 7, 7, 7, 7, 7, 7,
				6, 5, 3, 2
			},
			new int[20]
			{
				5, 8, 10, 10, 11, 10, 11, 11, 11, 10,
				11, 11, 11, 11, 12, 12, 11, 10, 8, 7
			},
			new int[21]
			{
				3, 6, 8, 11, 14, 15, 14, 14, 12, 9,
				6, 9, 11, 10, 11, 11, 10, 10, 7, 5,
				3
			},
			new int[19]
			{
				3, 3, 3, 3, 6, 8, 11, 13, 16, 17,
				17, 17, 17, 17, 15, 12, 10, 7, 4
			},
			new int[20]
			{
				24, 26, 8, 5, 4, 4, 4, 4, 3, 3,
				3, 4, 4, 4, 5, 5, 9, 27, 26, 24
			},
			new int[17]
			{
				20, 21, 22, 8, 5, 4, 3, 3, 4, 4,
				4, 4, 5, 22, 22, 22, 22
			},
			new int[17]
			{
				29, 29, 29, 8, 8, 8, 8, 8, 8, 8,
				8, 8, 8, 8, 5, 5, 3
			},
			new int[18]
			{
				3, 3, 8, 11, 13, 15, 17, 14, 13, 12,
				12, 12, 12, 11, 10, 8, 7, 5
			},
			new int[21]
			{
				3, 5, 7, 7, 8, 7, 9, 10, 9, 9,
				8, 11, 13, 14, 12, 11, 12, 11, 8, 6,
				3
			},
			new int[15]
			{
				30, 30, 30, 30, 6, 6, 6, 6, 6, 6,
				6, 6, 6, 3, 3
			},
			new int[24]
			{
				3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
				29, 29, 29, 29, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3
			},
			new int[10] { 3, 3, 4, 4, 5, 9, 37, 36, 35, 33 },
			new int[17]
			{
				29, 29, 29, 6, 6, 6, 6, 6, 6, 6,
				6, 6, 6, 6, 6, 6, 3
			},
			new int[17]
			{
				22, 22, 22, 7, 2, 2, 2, 3, 2, 2,
				3, 3, 4, 8, 22, 21, 19
			},
			new int[14]
			{
				3, 3, 3, 29, 30, 30, 30, 8, 6, 6,
				6, 6, 3, 3
			},
			new int[14]
			{
				3, 3, 3, 26, 27, 28, 28, 9, 7, 7,
				6, 6, 6, 6
			},
			new int[14]
			{
				3, 3, 3, 28, 29, 29, 29, 8, 6, 6,
				5, 5, 5, 2
			},
			new int[17]
			{
				30, 30, 30, 30, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3
			},
			new int[18]
			{
				29, 29, 29, 29, 3, 3, 3, 3, 3, 3,
				3, 3, 3, 3, 3, 3, 3, 3
			},
			new int[8] { 4, 4, 5, 8, 35, 35, 34, 32 },
			new int[8] { 4, 4, 4, 7, 34, 33, 33, 31 },
			new int[25]
			{
				6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
				6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
				6, 6, 6, 6, 6
			},
			new int[12]
			{
				3, 3, 3, 24, 25, 26, 26, 10, 7, 7,
				6, 6
			},
			new int[24]
			{
				6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
				6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
				6, 6, 6, 6
			},
			new int[19]
			{
				2, 2, 2, 2, 2, 2, 2, 2, 24, 24,
				24, 2, 2, 2, 2, 2, 2, 2, 2
			},
			new int[11]
			{
				22, 22, 22, 8, 3, 3, 3, 3, 3, 2,
				2
			}
		};
		long[][] array3 = new long[78][]
		{
			new long[35]
			{
				67100672L, 268433408L, 1073741312L, 2146696960L, 4261429120L, 4160753600L, 4026533856L, 3758097376L, 3221225968L, 2164228344L,
				67100920L, 134213752L, 133689468L, 260110396L, 251689020L, 251689020L, 251689020L, 234895388L, 251688988L, 251689020L,
				251689020L, 125890620L, 66576444L, 268433468L, 268433528L, 2415917176L, 2399142136L, 2399142384L, 2399142896L, 125831136L,
				132128704L, 66912128L, 33554176L, 16776192L, 4190208L
			},
			new long[37]
			{
				30L, 510L, 8190L, 131070L, 2097150L, 33554416L, 536870656L, 1073737728L, 1073676288L, 1072693248L,
				1065353216L, 1073217536L, 1073709056L, 134216704L, 8388544L, 524284L, 32766L, 2046L, 126L, 2046L,
				32766L, 524284L, 8388544L, 134216704L, 1073709056L, 1073217536L, 1065353216L, 1072693248L, 1073676288L, 1073737728L,
				536870656L, 33554416L, 2097150L, 131070L, 8190L, 510L, 30L
			},
			new long[34]
			{
				31L, 511L, 8191L, 262143L, 4194303L, 134217712L, 1073741568L, 1073733632L, 1073610752L, 1069547520L,
				1073610752L, 1073733632L, 67108352L, 4194288L, 262143L, 8191L, 511L, 8191L, 262143L, 4194303L,
				67108848L, 1073741568L, 1073733632L, 1073610752L, 1071644672L, 1073479680L, 1073725440L, 67106816L, 4194176L, 524280L,
				32767L, 2047L, 127L, 15L
			},
			new long[27]
			{
				1073741822L, 1073741822L, 1073741822L, 1073741822L, 126L, 1022L, 4094L, 32766L, 262128L, 1048512L,
				8388096L, 16775168L, 16760832L, 16646144L, 16760832L, 16775168L, 8388096L, 1048512L, 262128L, 32766L,
				4094L, 1022L, 126L, 1073741822L, 1073741822L, 1073741822L, 1073741822L
			},
			new long[25]
			{
				1073741823L, 1073741823L, 1073741823L, 511L, 4095L, 32767L, 262140L, 4194240L, 33553920L, 268431360L,
				268402688L, 268173312L, 266338304L, 268173312L, 134184960L, 16773120L, 2096640L, 262080L, 32760L, 4095L,
				511L, 1073741823L, 1073741823L, 1073741823L, 1073741823L
			},
			new long[31]
			{
				8384512L, 33553408L, 66715392L, 130031488L, 251660224L, 503316960L, 469762288L, 1014988920L, 956297276L, 956299292L,
				955513886L, 952122894L, 819990287L, 821036935L, 947389319L, 943588231L, 941556103L, 956285827L, 956300163L, 16777095L,
				15728519L, 12648327L, 14681991L, 14680079L, 14680094L, 7340062L, 7864444L, 4063480L, 2093040L, 524256L,
				262016L
			},
			new long[31]
			{
				3840L, 65280L, 1048320L, 16776960L, 268435200L, 1073739776L, 1073709056L, 1073217536L, 1065353216L, 1072693248L,
				1073610752L, 134201344L, 16775168L, 2096896L, 261888L, 32512L, 261888L, 2096896L, 16776960L, 134215680L,
				1073725440L, 1073610752L, 1072693248L, 1065353216L, 1073217536L, 1073709056L, 268433408L, 16776960L, 1048320L, 65280L,
				3840L
			},
			new long[22]
			{
				1073741822L, 1073741822L, 1073741822L, 1073741822L, 510L, 2046L, 8188L, 16368L, 65504L, 262016L,
				1048064L, 4192256L, 16769024L, 33521664L, 134086656L, 536608768L, 1072693248L, 1069547520L, 1073741822L, 1073741822L,
				1073741822L, 1073741822L
			},
			new long[32]
			{
				1073741568L, 1073741568L, 1073741568L, 1073741568L, 65024L, 7936L, 3840L, 1920L, 1920L, 896L,
				1920L, 1920L, 3968L, 65408L, 1073741696L, 1073741568L, 1073741312L, 1073740800L, 65024L, 7936L,
				3840L, 1920L, 1920L, 896L, 1920L, 1920L, 3968L, 65408L, 1073741696L, 1073741568L,
				1073741312L, 1073739776L
			},
			new long[20]
			{
				16769024L, 67106816L, 268434944L, 536870656L, 535953152L, 1056972672L, 1040191360L, 1006634880L, 1006634880L, 939526016L,
				939526016L, 1006634880L, 1006634880L, 503320320L, 520101632L, 4026269184L, 4294967040L, 4294967040L, 4294967040L, 4294967040L
			},
			new long[30]
			{
				1073741568L, 1073741568L, 1073741568L, 1073741568L, 64512L, 31744L, 15872L, 7936L, 3840L, 3840L,
				3840L, 3840L, 16128L, 1073741568L, 1073741568L, 1073741312L, 1073740800L, 63488L, 31744L, 15872L,
				7936L, 3840L, 3840L, 3840L, 3840L, 16128L, 1073741568L, 1073741568L, 1073741312L, 1073740800L
			},
			new long[19]
			{
				33538048L, 134213632L, 268434432L, 536870400L, 1071906304L, 1040203520L, 1006640896L, 1006636800L, 939527936L, 1006634752L,
				1006636800L, 1006636800L, 503320320L, 520101376L, 4018158592L, 4294967040L, 4294967040L, 4294967040L, 4294967040L
			},
			new long[20]
			{
				32736L, 131064L, 1040449532L, 1040711678L, 1007155710L, 1007665214L, 1007648798L, 940507150L, 940507150L, 1007550470L,
				1007616014L, 1007616014L, 1041203230L, 521125950L, 533199358L, 268435454L, 134217724L, 67108856L, 16777184L, 4194176L
			},
			new long[20]
			{
				8388352L, 33554368L, 134217712L, 268435448L, 536870908L, 535296254L, 1057029182L, 1040219166L, 1006648334L, 1006648334L,
				939531278L, 1006648326L, 1006648326L, 1040219150L, 1057029134L, 535296014L, 536868894L, 268431390L, 134209536L, 33521664L
			},
			new long[26]
			{
				4194048L, 16777152L, 33554400L, 134168568L, 132121080L, 260046972L, 520093758L, 503316510L, 1006632975L, 1006632975L,
				1006632975L, 1006632975L, 939524103L, 939524103L, 1006632975L, 2080374799L, 4227858447L, 4227858447L, 4261412894L, 3741319230L,
				2407530620L, 132121080L, 134168568L, 33554400L, 16777152L, 4194048L
			},
			new long[22]
			{
				1073741823L, 1073741823L, 1073741823L, 255L, 511L, 2044L, 8176L, 16352L, 65408L, 130816L,
				523264L, 1046528L, 4186112L, 8372224L, 33488896L, 66977792L, 267911168L, 1071644672L, 1069547520L, 1073741823L,
				1073741823L, 1073741823L
			},
			new long[23]
			{
				1073741822L, 1073741822L, 1073741822L, 1073741822L, 260096L, 523264L, 1048064L, 2096896L, 4177792L, 8339328L,
				16654272L, 33296352L, 66586608L, 133170168L, 266338812L, 532676862L, 1065353342L, 1056964670L, 1040187422L, 1006632974L,
				939524102L, 805306370L, 536870912L
			},
			new long[19]
			{
				8388352L, 33554368L, 134217712L, 268435448L, 536346620L, 1057091838L, 1040248894L, 1006663711L, 1006663695L, 939538447L,
				1006663695L, 1006663687L, 1006663695L, 1057093647L, 535820303L, 536866831L, 268427294L, 134201374L, 33521664L
			},
			new long[20]
			{
				16769024L, 67106816L, 268434944L, 536870656L, 535953152L, 1065369472L, 1040191360L, 1006634880L, 1006634880L, 939526016L,
				1006634880L, 1006634880L, 1006634880L, 503320320L, 528498432L, 268172800L, 4294967040L, 4294967040L, 4294967040L, 4294967040L
			},
			new long[19]
			{
				32736L, 1006698488L, 1006764028L, 1006895102L, 1007156478L, 1007149087L, 940032015L, 940015631L, 1007124495L, 1007091719L,
				1007124495L, 1040678927L, 520339487L, 532930623L, 268434430L, 134217724L, 67108856L, 16777200L, 2097024L
			},
			new long[20]
			{
				16769024L, 67106816L, 268434944L, 536870656L, 535953152L, 1065369472L, 1040191360L, 1006634880L, 1006634880L, 939526016L,
				1006634880L, 1006634880L, 1006634880L, 503320320L, 528498432L, 268172800L, 1073741822L, 1073741822L, 1073741822L, 1073741822L
			},
			new long[27]
			{
				14L, 62L, 510L, 4094L, 16382L, 131064L, 524256L, 4194048L, 16776192L, 134209536L,
				1073676288L, 1073479680L, 1071644672L, 1065353216L, 1071644672L, 1073479680L, 1073676288L, 134209536L, 16776192L, 4194048L,
				524256L, 131064L, 16382L, 4094L, 510L, 62L, 14L
			},
			new long[19]
			{
				33538048L, 134213632L, 268434432L, 536870400L, 1071906304L, 1040203520L, 1006640896L, 1006636800L, 939527936L, 1006634752L,
				1006636800L, 1006636800L, 503320320L, 520101376L, 260062208L, 1073741823L, 1073741823L, 1073741823L, 1073741823L
			},
			new long[19]
			{
				4294967040L, 4294967040L, 4294967040L, 4294967040L, 251689984L, 503332352L, 1006640640L, 1006636800L, 1006636800L, 939527936L,
				1006634752L, 1006636800L, 1040191232L, 1056972544L, 535953152L, 536870400L, 268434432L, 67106816L, 16769024L
			},
			new long[19]
			{
				33538048L, 134213632L, 268434432L, 536870400L, 1071906304L, 1040203520L, 1006640896L, 1006636800L, 939527936L, 1006634752L,
				1006636800L, 1006636800L, 503320320L, 520101376L, 260062208L, 4294967040L, 4294967040L, 4294967040L, 4294967040L
			},
			new long[22]
			{
				1073741823L, 1073741823L, 1073741823L, 1073741823L, 57344L, 258048L, 522240L, 1047552L, 2096896L, 4169600L,
				16713664L, 33424352L, 66585072L, 133169404L, 534773886L, 1069547551L, 1065353231L, 1040187399L, 1006632963L, 939524097L,
				805306368L, 536870912L
			},
			new long[21]
			{
				1073741823L, 1073741823L, 1073741823L, 1073741823L, 57344L, 57344L, 57344L, 57344L, 57344L, 57344L,
				57344L, 57344L, 57344L, 57344L, 57344L, 57344L, 57344L, 1073741823L, 1073741823L, 1073741823L,
				1073741823L
			},
			new long[24]
			{
				1073741822L, 1073741822L, 1073741822L, 939524110L, 939524102L, 939524102L, 939524102L, 939524102L, 939524102L, 939524110L,
				1006632974L, 1006632974L, 1006632974L, 1006632974L, 1006632990L, 503316508L, 503316540L, 520093820L, 260047096L, 132121592L,
				66994160L, 33554400L, 16777088L, 2096640L
			},
			new long[22]
			{
				1073741822L, 1073741822L, 1073741822L, 1073741822L, 57344L, 57344L, 57344L, 57344L, 57344L, 57344L,
				57344L, 57344L, 57344L, 57344L, 57344L, 57344L, 57344L, 57344L, 1073741822L, 1073741822L,
				1073741822L, 1073741822L
			},
			new long[19]
			{
				1073741822L, 1073741822L, 1073741822L, 1073741822L, 4161536L, 8372224L, 16769024L, 33550336L, 67106816L, 133823488L,
				267451392L, 534838784L, 1065385728L, 1056980736L, 1040195328L, 1006636800L, 939525888L, 805307136L, 536871168L
			},
			new long[26]
			{
				7L, 63L, 255L, 2047L, 8191L, 65532L, 524256L, 2097024L, 16776192L, 134209536L,
				536838144L, 1073479680L, 1071644672L, 1065353216L, 1071644672L, 536608768L, 134184960L, 16769024L, 2096128L, 524160L,
				65504L, 8188L, 2047L, 255L, 31L, 7L
			},
			new long[18]
			{
				133693440L, 536608768L, 536743680L, 1073614592L, 1073678208L, 1008666496L, 1007617920L, 1007617920L, 940508032L, 1007617920L,
				1007093632L, 503777152L, 520556416L, 267878272L, 1073741568L, 1073741312L, 1073740800L, 1073739776L
			},
			new long[20]
			{
				16769024L, 67106816L, 134216704L, 268434944L, 536870656L, 528948992L, 1040650112L, 1040648064L, 1007093632L, 1007093632L,
				1007092608L, 939984768L, 1007093632L, 1007095680L, 1007099776L, 1007124224L, 1007156992L, 503840256L, 503839744L, 520192L
			},
			new long[24]
			{
				805306368L, 939524102L, 1040187406L, 1056964670L, 264241278L, 132121086L, 66585592L, 16519152L, 8273856L, 2097024L,
				1048064L, 523264L, 1046528L, 2096128L, 8388096L, 16719744L, 66850752L, 133694448L, 534774264L, 1069547644L,
				1056964670L, 1040187406L, 939524102L, 805306368L
			},
			new long[17]
			{
				503316510L, 503316510L, 1040187407L, 1006690319L, 1006690319L, 1006694415L, 939651079L, 1006759951L, 1006759951L, 1006761999L,
				1040448543L, 1057488767L, 534773759L, 536846334L, 268406780L, 134154232L, 66846720L
			},
			new long[19]
			{
				1073741822L, 1073741822L, 1073741822L, 1073741822L, 229390L, 229390L, 229390L, 229390L, 229390L, 229390L,
				245790L, 245790L, 245790L, 254014L, 261630L, 131068L, 131068L, 65528L, 16352L
			},
			new long[19]
			{
				1040187392L, 1040187422L, 1006632990L, 1006632990L, 1006632974L, 1006690318L, 1006690318L, 939581454L, 939581446L, 1006759950L,
				1006759950L, 1006759950L, 1040447518L, 1057226494L, 534773758L, 536854526L, 268410876L, 134156272L, 66977792L
			},
			new long[17]
			{
				1073741823L, 1073741823L, 1073741823L, 1073741823L, 229383L, 229383L, 245767L, 245775L, 245775L, 245775L,
				253967L, 258079L, 130815L, 65535L, 65534L, 32764L, 8184L
			},
			new long[21]
			{
				8257536L, 8323072L, 8372224L, 8380416L, 7862272L, 7470080L, 7405312L, 7356288L, 7348192L, 7342064L,
				7340540L, 7340286L, 7340094L, 1073741822L, 1073741822L, 1073741822L, 1073741822L, 7340032L, 7340032L, 7340032L,
				7340032L
			},
			new long[18]
			{
				1073741822L, 1073741822L, 1073741822L, 1073741822L, 65024L, 7936L, 3840L, 1920L, 1920L, 896L,
				1920L, 1920L, 3968L, 65408L, 1073741696L, 1073741568L, 1073741312L, 1073739776L
			},
			new long[19]
			{
				1073741823L, 1073741823L, 1073741823L, 267517440L, 251673600L, 503320064L, 469763584L, 1006634752L, 1006634752L, 939525888L,
				939525888L, 1006634752L, 1006634752L, 1040191232L, 528498432L, 536608256L, 268434432L, 67106816L, 16769024L
			},
			new long[17]
			{
				1073741823L, 1073741823L, 1073741823L, 1073741823L, 63488L, 15360L, 7680L, 7936L, 3840L, 3840L,
				3840L, 3840L, 32512L, 1073741568L, 1073741568L, 1073741312L, 1073740800L
			},
			new long[19]
			{
				1073741823L, 1073741823L, 1073741823L, 1073741823L, 917504L, 2031616L, 8355840L, 16769024L, 33550336L, 66713600L,
				133233664L, 534806016L, 1069563648L, 1065357056L, 1040189184L, 1006633728L, 939524352L, 805306368L, 536870912L
			},
			new long[23]
			{
				4194048L, 16777152L, 33554400L, 134168568L, 132121080L, 260046972L, 520093758L, 503316510L, 1040187423L, 1006632975L,
				1006632975L, 1006632975L, 939524111L, 939524103L, 939524103L, 939524111L, 1006632975L, 1006632975L, 1006632975L, 1006632974L,
				503316510L, 536739870L, 268304412L
			},
			new long[23]
			{
				256L, 1792L, 16128L, 65280L, 524032L, 4194048L, 16776192L, 134209536L, 536805376L, 4294705152L,
				4292870144L, 4286578688L, 4290772992L, 2146435072L, 268173312L, 67076096L, 16769024L, 2096128L, 524032L, 65280L,
				16128L, 1792L, 256L
			},
			new long[19]
			{
				267386880L, 536346624L, 1073487360L, 1073487360L, 1065225984L, 1008602880L, 1007554304L, 940445440L, 1007552256L, 1007554304L,
				503713536L, 252067584L, 268435200L, 1073741568L, 1073741312L, 1073740800L, 1056964608L, 1006632960L, 939524096L
			},
			new long[20]
			{
				2031616L, 2064384L, 2088960L, 2093056L, 1965056L, 1867264L, 1851264L, 1839040L, 1837040L, 1835512L,
				1835262L, 1835071L, 1073741823L, 1073741823L, 1073741823L, 1073741823L, 1835008L, 1835008L, 1835008L, 1835008L
			},
			new long[17]
			{
				16769024L, 67104768L, 134216704L, 268434944L, 536870400L, 529415936L, 1041108736L, 1007554304L, 1007552256L, 1007554304L,
				940445440L, 940449536L, 1007615744L, 1007681024L, 1007681024L, 1007679488L, 1007673344L
			},
			new long[23]
			{
				536871168L, 805307136L, 939525888L, 1040195328L, 1056980736L, 528514816L, 266403584L, 133430272L, 33552384L, 16773120L,
				4177920L, 8355840L, 16744448L, 67100672L, 134213632L, 267516928L, 1069612544L, 1065385728L, 1056972544L, 1040191232L,
				939524864L, 805306624L, 536870912L
			},
			new long[21]
			{
				1073741822L, 1073741822L, 1073741822L, 229390L, 98310L, 98310L, 98310L, 98318L, 229390L, 491534L,
				507918L, 507934L, 1032222L, 3956798L, 16268796L, 65019900L, 130027512L, 520093696L, 1040187392L, 939524096L,
				805306368L
			},
			new long[24]
			{
				6L, 14L, 62L, 126L, 510L, 1022L, 4088L, 8176L, 32704L, 65408L,
				1073741312L, 1073740800L, 1073740800L, 1073741312L, 65408L, 32704L, 8176L, 4088L, 1022L, 510L,
				126L, 62L, 14L, 6L
			},
			new long[19]
			{
				1006632960L, 1056966400L, 1065355008L, 1069549312L, 1071646464L, 1072695040L, 1006110464L, 972818176L, 956237568L, 947881728L,
				943703808L, 940566272L, 940046080L, 939785984L, 939654912L, 939589376L, 939556608L, 939540224L, 939527936L
			},
			new long[24]
			{
				3L, 15L, 31L, 127L, 255L, 1022L, 4092L, 8176L, 32704L, 130944L,
				1073741312L, 1073740800L, 1073737728L, 1073740800L, 65024L, 16256L, 8128L, 2032L, 1016L, 254L,
				63L, 31L, 7L, 3L
			},
			new long[20]
			{
				1040187392L, 1056964614L, 1069547526L, 1004535814L, 972554246L, 947650566L, 943652870L, 941588486L, 940556294L, 939778054L,
				939653126L, 939588614L, 939556358L, 939532166L, 939528142L, 939526126L, 939524606L, 939524350L, 939524158L, 939524126L
			},
			new long[21]
			{
				1792L, 16128L, 65280L, 524032L, 4194048L, 33553408L, 134209536L, 1073676288L, 1073479680L, 1071644672L,
				1056964608L, 1071644672L, 1073217536L, 134086656L, 33538048L, 8384512L, 1047552L, 261888L, 32512L, 7936L,
				1792L
			},
			new long[19]
			{
				14L, 14L, 14L, 14L, 939524110L, 1040187406L, 1069547534L, 1072693262L, 1073610766L, 268419086L,
				67104782L, 8388110L, 2097038L, 262142L, 65534L, 8190L, 2046L, 254L, 30L
			},
			new long[20]
			{
				33554430L, 134217726L, 267386880L, 520093696L, 503316480L, 1006632960L, 1006632960L, 1006632960L, 939524096L, 939524096L,
				939524096L, 1006632960L, 1006632960L, 1006632960L, 1040187392L, 520093696L, 535822336L, 268435454L, 134217726L, 33554430L
			},
			new long[17]
			{
				268435200L, 536870656L, 1073741568L, 1069547520L, 1040187392L, 1006632960L, 939524096L, 939524096L, 1006632960L, 1006632960L,
				503316480L, 251658240L, 130023424L, 1073741568L, 1073741568L, 1073741568L, 1073741568L
			},
			new long[17]
			{
				1073741822L, 1073741822L, 1073741822L, 939581446L, 939581446L, 939581446L, 939581446L, 939581446L, 939581446L, 939581446L,
				939581446L, 939581446L, 939581446L, 939581446L, 939524102L, 939524102L, 939524096L
			},
			new long[18]
			{
				7L, 7L, 1040187399L, 1069547527L, 1072693255L, 1073479687L, 1073676295L, 67076103L, 8380423L, 1046535L,
				261639L, 65415L, 16359L, 4087L, 1023L, 255L, 127L, 31L
			},
			new long[21]
			{
				14680064L, 16252928L, 16646144L, 4161536L, 1044480L, 130048L, 130816L, 106464L, 99320L, 98558L,
				98367L, 98815L, 100351L, 114684L, 131040L, 524032L, 4193280L, 16769024L, 16711680L, 16515072L,
				14680064L
			},
			new long[15]
			{
				1073741823L, 1073741823L, 1073741823L, 1073741823L, 57351L, 57351L, 57351L, 57351L, 57351L, 57351L,
				57351L, 57351L, 57351L, 7L, 7L
			},
			new long[24]
			{
				14L, 14L, 14L, 14L, 14L, 14L, 14L, 14L, 14L, 14L,
				1073741822L, 1073741822L, 1073741822L, 1073741822L, 14L, 14L, 14L, 14L, 14L, 14L,
				14L, 14L, 14L, 14L
			},
			new long[10] { 0L, 0L, 0L, 0L, 0L, 3758096384L, 4294967294L, 4294967294L, 4294967294L, 4294967294L },
			new long[17]
			{
				1073741822L, 1073741822L, 1073741822L, 57358L, 57358L, 57358L, 57358L, 57358L, 57358L, 57358L,
				57358L, 57358L, 57358L, 57358L, 57358L, 57358L, 14L
			},
			new long[17]
			{
				1073741568L, 1073741568L, 1073741568L, 65024L, 6144L, 3072L, 1536L, 1792L, 768L, 768L,
				1792L, 1792L, 3840L, 65280L, 1073741568L, 1073741312L, 1073739776L
			},
			new long[14]
			{
				1792L, 1792L, 1792L, 1073741822L, 1073741823L, 1073741823L, 1073741823L, 1823L, 1799L, 1799L,
				1799L, 1799L, 7L, 7L
			},
			new long[14]
			{
				1792L, 1792L, 1792L, 268435452L, 536870908L, 1073741820L, 1073741820L, 1056966400L, 1006634752L, 1006634752L,
				939525888L, 939525888L, 939525888L, 939525888L
			},
			new long[14]
			{
				1792L, 1792L, 1792L, 1073741820L, 1073741822L, 1073741822L, 1073741822L, 1854L, 1806L, 1806L,
				1798L, 1798L, 1798L, 6L
			},
			new long[17]
			{
				1073741823L, 1073741823L, 1073741823L, 1073741823L, 939524096L, 939524096L, 939524096L, 939524096L, 939524096L, 939524096L,
				939524096L, 939524096L, 939524096L, 939524096L, 939524096L, 939524096L, 939524096L
			},
			new long[18]
			{
				1073741822L, 1073741822L, 1073741822L, 1073741822L, 939524096L, 939524096L, 939524096L, 939524096L, 939524096L, 939524096L,
				939524096L, 939524096L, 939524096L, 939524096L, 939524096L, 939524096L, 939524096L, 939524096L
			},
			new long[8] { 0L, 0L, 2147483648L, 4026531840L, 4294967295L, 4294967295L, 4294967295L, 4294967295L },
			new long[8] { 0L, 0L, 0L, 2147483648L, 4294967055L, 4294967055L, 4294967055L, 4294967055L },
			new long[25]
			{
				7368704L, 7368704L, 7368704L, 7368704L, 7368704L, 7368704L, 7368704L, 7368704L, 7368704L, 7368704L,
				7368704L, 7368704L, 7368704L, 7368704L, 7368704L, 7368704L, 7368704L, 7368704L, 7368704L, 7368704L,
				7368704L, 7368704L, 7368704L, 7368704L, 7368704L
			},
			new long[12]
			{
				1792L, 1792L, 1792L, 268435440L, 536870896L, 1073741808L, 1073741808L, 1065355008L, 1006634752L, 1006634752L,
				939525888L, 939525888L
			},
			new long[24]
			{
				7397376L, 7397376L, 7397376L, 7397376L, 7397376L, 7397376L, 7397376L, 7397376L, 7397376L, 7397376L,
				7397376L, 7397376L, 7397376L, 7397376L, 7397376L, 7397376L, 7397376L, 7397376L, 7397376L, 7397376L,
				7397376L, 7397376L, 7397376L, 7397376L
			},
			new long[19]
			{
				3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 16777215L, 16777215L,
				16777215L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L
			},
			new long[11]
			{
				1073741568L, 1073741568L, 1073741568L, 130560L, 7168L, 3584L, 1792L, 1792L, 1792L, 768L,
				768L
			}
		};
		long[][] array4 = new long[78][]
		{
			new long[35]
			{
				0L, 0L, 0L, 0L, 1L, 3L, 7L, 15L, 15L, 31L,
				30L, 30L, 60L, 60L, 60L, 60L, 60L, 56L, 56L, 60L,
				60L, 60L, 60L, 62L, 30L, 31L, 15L, 15L, 7L, 0L,
				0L, 0L, 0L, 0L, 0L
			},
			new long[37],
			new long[34],
			new long[27],
			new long[25],
			new long[31],
			new long[31],
			new long[22],
			new long[32],
			new long[20]
			{
				0L, 0L, 0L, 124L, 124L, 120L, 120L, 120L, 120L, 112L,
				120L, 120L, 120L, 124L, 126L, 63L, 63L, 31L, 15L, 3L
			},
			new long[30],
			new long[19]
			{
				0L, 0L, 60L, 60L, 124L, 120L, 120L, 120L, 112L, 120L,
				120L, 120L, 124L, 124L, 63L, 63L, 31L, 15L, 3L
			},
			new long[20],
			new long[20],
			new long[26]
			{
				0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
				0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 3L, 3L,
				7L, 6L, 12L, 8L, 0L, 0L
			},
			new long[22],
			new long[23],
			new long[19],
			new long[20]
			{
				0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
				0L, 0L, 0L, 0L, 0L, 0L, 127L, 127L, 127L, 127L
			},
			new long[19],
			new long[20],
			new long[27],
			new long[19],
			new long[19]
			{
				127L, 127L, 127L, 127L, 0L, 0L, 0L, 0L, 0L, 0L,
				0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L
			},
			new long[19]
			{
				0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
				0L, 0L, 0L, 0L, 0L, 127L, 127L, 127L, 127L
			},
			new long[22],
			new long[21],
			new long[24],
			new long[22],
			new long[19],
			new long[26],
			new long[18],
			new long[20],
			new long[24],
			new long[17],
			new long[19],
			new long[19],
			new long[17],
			new long[21],
			new long[18],
			new long[19],
			new long[17],
			new long[19],
			new long[23],
			new long[23]
			{
				0L, 0L, 0L, 0L, 0L, 0L, 64L, 120L, 126L, 127L,
				127L, 31L, 3L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
				0L, 0L, 0L
			},
			new long[19],
			new long[20],
			new long[17],
			new long[23],
			new long[21],
			new long[24],
			new long[19],
			new long[24],
			new long[20],
			new long[21],
			new long[19],
			new long[20],
			new long[17],
			new long[17],
			new long[18],
			new long[21],
			new long[15],
			new long[24],
			new long[10] { 112L, 112L, 120L, 120L, 124L, 127L, 127L, 63L, 31L, 7L },
			new long[17],
			new long[17],
			new long[14],
			new long[14],
			new long[14],
			new long[17],
			new long[18],
			new long[8] { 30L, 30L, 31L, 31L, 15L, 15L, 7L, 1L },
			new long[8] { 120L, 120L, 120L, 127L, 127L, 63L, 63L, 15L },
			new long[25],
			new long[12],
			new long[24],
			new long[19],
			new long[11]
		};
		boolTemplImage_transparent = new bool[numberImages_transparent, 50, 50];
		for (int num7 = 0; num7 < numberImages_transparent; num7++)
		{
			int num8 = w_transparent[num7];
			int num9 = 32;
			for (int num10 = 0; num10 < num8; num10++)
			{
				long num11 = array3[num7][num10];
				for (int num12 = 0; num12 < num9; num12++)
				{
					boolTemplImage_transparent[num7, num10, num12] = ((1L << (num12 & 0x1F)) & num11) != 0;
				}
			}
		}
		for (int num13 = 0; num13 < numberImages_transparent; num13++)
		{
			int num14 = w_transparent[num13];
			int num15 = h_transparent[num13];
			for (int num16 = 0; num16 < num14; num16++)
			{
				long num17 = array4[num13][num16];
				for (int num18 = 32; num18 < num15; num18++)
				{
					boolTemplImage_transparent[num13, num16, num18] = ((1L << ((num18 - 31) & 0x1F)) & num17) != 0;
				}
			}
		}
		greenCpt = new OCR_green();
	}

	private string ocr_black(Bitmap im)
	{
		string text = "";
		prepare_black(im);
		findedLetters = new string[expectedNumberLetters];
		findedXs = new int[expectedNumberLetters];
		for (int i = 0; i < expectedNumberLetters; i++)
		{
			findedLetters[i] = "";
			findedXs[i] = -1;
		}
		fileCounter++;
		vertDens2 = getVertDens();
		int num = 0;
		int num2 = 55;
		int num3 = 0;
		for (int j = 0; j < w2; j++)
		{
			if (vertDens2[j] > 0)
			{
				num3 = j;
				break;
			}
		}
		int num4 = w2;
		for (int num5 = w2 - 1; num5 > 0; num5--)
		{
			if (vertDens2[num5] > 0)
			{
				num4 = num5;
				break;
			}
		}
		int num6 = num4 - num3;
		if (num6 < 33 || num6 > 80)
		{
			return "";
		}
		expectedNumberLetters = (int)Math.Round(0.09f * (float)(num6 + 9));
		findedLetters = new string[expectedNumberLetters];
		findedXs = new int[expectedNumberLetters];
		for (int k = 0; k < expectedNumberLetters; k++)
		{
			bool flag = false;
			for (int l = 0; l < numberImages_black; l++)
			{
				if (flag)
				{
					break;
				}
				int num7 = orderSearch_black[l];
				int num8 = w_black[num7];
				int num9 = h_black[num7];
				for (int m = num3; m <= num4; m++)
				{
					if (flag)
					{
						break;
					}
					if (m > w2 - num8)
					{
						break;
					}
					bool flag2 = true;
					for (int n = 0; n < num8 && flag2; n++)
					{
						if (vertDens_black[num7][n] > vertDens2[n + m])
						{
							flag2 = false;
						}
					}
					if (!flag2)
					{
						continue;
					}
					for (int num10 = num; num10 <= num2 && num10 <= h2 - num9 && flag2; num10++)
					{
						if (flag)
						{
							break;
						}
						bool flag3 = true;
						for (int n = 0; n < num8 && flag3; n++)
						{
							for (int num11 = 0; num11 < num9 && flag3; num11++)
							{
								if (boolTemplImage_black[num7, n, num11] && !biteArr[n + m, num11 + num10])
								{
									flag3 = false;
								}
							}
						}
						if (!flag3)
						{
							continue;
						}
						text += retStr_black[num7];
						findedLetters[k] = retStr_black[num7];
						findedXs[k] = m + (int)Math.Round(0.5f * (float)w_black[num7]);
						if (k == expectedNumberLetters)
						{
							return orderedString();
						}
						for (int n = 0; n < num8; n++)
						{
							for (int num12 = 0; num12 < num9; num12++)
							{
								if (boolTemplImage_black[num7, n, num12])
								{
									biteArr[n + m, num12 + num10] = false;
								}
							}
						}
						for (int num13 = 0; num13 < h2; num13++)
						{
							for (int n = m + 1; n < m + w_black[num7] - 1; n++)
							{
								biteArr[n, num13] = false;
							}
						}
						vertDens2 = getVertDens();
						flag = true;
					}
				}
			}
		}
		return orderedString();
	}

	private string orderedString()
	{
		string text = "";
		int num = findedXs.Length;
		for (int i = 0; i < num - 1; i++)
		{
			for (int j = 0; j < num - 1; j++)
			{
				if (findedXs[j] > findedXs[j + 1])
				{
					int num2 = findedXs[j + 1];
					findedXs[j + 1] = findedXs[j];
					findedXs[j] = num2;
					string text2 = findedLetters[j + 1];
					findedLetters[j + 1] = findedLetters[j];
					findedLetters[j] = text2;
				}
			}
		}
		for (int k = 0; k < num; k++)
		{
			text += findedLetters[k];
		}
		if (text.Length < 4)
		{
			return "";
		}
		if (text.Length + 1 < expectedNumberLetters)
		{
			return "";
		}
		return text;
	}

	private string ocr_simple(Bitmap img)
	{
		string text = "";
		Color color = Color.FromArgb(0, 0, 0, 0);
		int[] array = new int[wCurrImg + 5];
		bool[,] array2 = new bool[wCurrImg + 5, hCurrImg];
		for (int i = 0; i < wCurrImg; i++)
		{
			array[i] = 0;
			for (int j = 0; j < hCurrImg; j++)
			{
				array2[i, j] = !img.GetPixel(i, j).Equals(color);
				if (array2[i, j])
				{
					array[i]++;
				}
			}
		}
		for (int k = wCurrImg; k < wCurrImg + 5; k++)
		{
			array[k] = 0;
			for (int l = 0; l < hCurrImg; l++)
			{
				array2[k, l] = true;
				if (array2[k, l])
				{
					array[k]++;
				}
			}
		}
		for (int m = 0; m <= wCurrImg - 10; m++)
		{
			if (array[m] == 0)
			{
				continue;
			}
			bool flag = false;
			for (int n = 0; n < numberImages_simple; n++)
			{
				if (flag)
				{
					break;
				}
				int num = orderSearch_simple[n];
				int num2 = w_simple[num];
				if (m + num2 > wCurrImg + 5)
				{
					continue;
				}
				int num3 = h_simple[num];
				bool flag2 = true;
				for (int num4 = 0; num4 < num2 && flag2; num4++)
				{
					if (vertDens_simple[num][num4] > array[num4 + m])
					{
						flag2 = false;
					}
				}
				if (!flag2)
				{
					continue;
				}
				for (int num5 = 5; num5 < 15; num5++)
				{
					if (flag)
					{
						break;
					}
					bool flag3 = true;
					for (int num4 = 0; num4 < num2 && flag3; num4++)
					{
						for (int num6 = 0; num6 < num3 && flag3; num6++)
						{
							if (boolTemplImage_simple[num, num4, num6] && !array2[num4 + m, num6 + num5])
							{
								flag3 = false;
							}
						}
					}
					if (flag3)
					{
						flag = true;
						text += retStr_simple[num];
						m += w_simple[num] - 1;
						break;
					}
				}
			}
		}
		return text;
	}

	public string ocr_transparent(string base64String)
	{
		Bitmap img = null;
		using (MemoryStream memoryStream = new MemoryStream(Convert.FromBase64String(base64String)))
		{
			memoryStream.Position = 0L;
			img = (Bitmap)Image.FromStream(memoryStream);
		}
		return ocr_transparent(img);
	}

	private string ocr_transparent(Bitmap img)
	{
		string text = "";
		Color color = Color.FromArgb(0, 0, 0, 0);
		int[] array = new int[wCurrImg - 13];
		bool[,] array2 = new bool[wCurrImg - 13, hCurrImg - 10];
		for (int i = 0; i < wCurrImg - 13; i++)
		{
			array[i] = 0;
			for (int j = 0; j < hCurrImg - 10; j++)
			{
				array2[i, j] = !img.GetPixel(i, j + 7).Equals(color);
				if (array2[i, j])
				{
					array[i]++;
				}
			}
		}
		for (int k = 0; k <= wCurrImg - 20; k++)
		{
			if (array[k] == 0)
			{
				continue;
			}
			bool flag = false;
			for (int l = 0; l < numberImages_transparent; l++)
			{
				if (flag)
				{
					break;
				}
				int num = w_transparent[l];
				if (k + num > wCurrImg - 13)
				{
					continue;
				}
				int num2 = h_transparent[l];
				bool flag2 = true;
				for (int m = 0; m < num && flag2; m++)
				{
					if (vertDens_transparent[l][m] > array[m + k])
					{
						flag2 = false;
					}
				}
				if (!flag2)
				{
					continue;
				}
				bool flag3 = true;
				for (int m = 0; m < num && flag3; m++)
				{
					for (int n = 0; n < num2 && flag3; n++)
					{
						if (boolTemplImage_transparent[l, m, n] && !array2[m + k, n])
						{
							flag3 = false;
						}
					}
				}
				if (flag3)
				{
					text += retStr_transparent[l];
					k += w_transparent[l] - 2;
					break;
				}
			}
		}
		return text;
	}

	public string solve(Bitmap img)
	{
		wCurrImg = img.Width;
		hCurrImg = img.Height;
		string text = detectType(img);
		if (text.Equals(""))
		{
			return "";
		}
		return text switch
		{
			"simple" => ocr_simple(img), 
			"black" => ocr_black(img), 
			"transparent" => ocr_transparent(img), 
			"green" => greenCpt.solve(img), 
			_ => "", 
		};
	}

	private string detectType(Bitmap img)
	{
		bool[] array = new bool[typesNumber];
		for (int i = 0; i < typesNumber; i++)
		{
			array[i] = true;
		}
		for (int j = 0; j < typesNumber; j++)
		{
			if (array[j])
			{
				array[j] = wCurrImg == typesW[j];
			}
		}
		int lastOneTypeNumber = getLastOneTypeNumber(array);
		if (lastOneTypeNumber == -2)
		{
			return "";
		}
		if (lastOneTypeNumber >= 0)
		{
			return typesNames[lastOneTypeNumber];
		}
		for (int k = 0; k < typesNumber; k++)
		{
			if (array[k])
			{
				array[k] = hCurrImg == typesH[k];
			}
		}
		lastOneTypeNumber = getLastOneTypeNumber(array);
		if (lastOneTypeNumber == -2)
		{
			return "";
		}
		if (lastOneTypeNumber >= 0)
		{
			return typesNames[lastOneTypeNumber];
		}
		Color pixel = img.GetPixel(0, 0);
		for (int l = 0; l < typesNumber; l++)
		{
			if (array[l])
			{
				array[l] = pixel == typesLeftTopPixelColor[l];
			}
		}
		lastOneTypeNumber = getLastOneTypeNumber(array);
		if (lastOneTypeNumber == -2)
		{
			return "";
		}
		if (lastOneTypeNumber >= 0)
		{
			return typesNames[lastOneTypeNumber];
		}
		for (int m = 0; m < wCurrImg; m++)
		{
			for (int n = 0; n < hCurrImg; n++)
			{
				pixel = img.GetPixel(m, n);
				for (int num = 0; num < typesNumber; num++)
				{
					if (array[num] && pixel == typesMustContainsColor[num])
					{
						return typesNames[num];
					}
				}
			}
		}
		return "";
	}

	private int getLastOneTypeNumber(bool[] boolArr)
	{
		int num = 0;
		int num2 = 0;
		for (int i = 0; i < typesNumber; i++)
		{
			if (boolArr[i])
			{
				num++;
				num2 = i;
			}
		}
		return num switch
		{
			0 => -2, 
			1 => num2, 
			_ => -1, 
		};
	}

	private int[] getVertDens(bool[][] bool2Arr)
	{
		int num = bool2Arr.Length;
		int num2 = bool2Arr[0].Length;
		int[] array = new int[num];
		for (int i = 0; i < num; i++)
		{
			array[i] = 0;
			for (int j = 0; j < num2; j++)
			{
				if (bool2Arr[i][j])
				{
					array[i]++;
				}
			}
		}
		return array;
	}

	private int[] getVertDens()
	{
		int[] array = new int[w2];
		for (int i = 0; i < w2; i++)
		{
			array[i] = 0;
			for (int j = 0; j < h2; j++)
			{
				if (biteArr[i, j])
				{
					array[i]++;
				}
			}
		}
		return array;
	}

	private void prepare_black(Bitmap img)
	{
		for (int i = 0; i < w1; i++)
		{
			for (int j = 0; j < h1; j++)
			{
				int r = img.GetPixel(i, j).R;
				if (r < 1 || r == 230)
				{
					imgAsIntArr[i, j] = 255;
				}
				else
				{
					imgAsIntArr[i, j] = 0;
				}
			}
		}
		for (int k = 1; k < w1 - 2; k++)
		{
			for (int l = 1; l < h1 - 1; l++)
			{
				if (imgAsIntArr[k, l] == 255 && imgAsIntArr[k - 1, l] == 0 && imgAsIntArr[k + 2, l] == 0)
				{
					imgAsIntArr[k, l] = 0;
					imgAsIntArr[k + 1, l] = 0;
				}
			}
		}
		for (int m = 1; m < h1 - 2; m++)
		{
			for (int n = 1; n < w1 - 1; n++)
			{
				if (imgAsIntArr[n, m] == 255 && imgAsIntArr[n, m - 1] == 0 && imgAsIntArr[n, m + 2] == 0)
				{
					imgAsIntArr[n, m] = 0;
					imgAsIntArr[n, m + 1] = 0;
				}
			}
		}
		for (int num = 1; num < w1 - 1; num++)
		{
			for (int num2 = 1; num2 < h1 - 1; num2++)
			{
				int num3 = 0;
				bool flag = false;
				if (imgAsIntArr[num, num2] != 255)
				{
					continue;
				}
				for (int num4 = -1; num4 < 2; num4++)
				{
					if (flag)
					{
						break;
					}
					for (int num5 = -1; num5 < 2; num5++)
					{
						if (flag)
						{
							break;
						}
						if (imgAsIntArr[num + num4, num2 + num5] > 100)
						{
							num3++;
							if (num3 > 8)
							{
								imgAsIntArr[num, num2] = 200;
								flag = true;
							}
						}
					}
				}
			}
		}
		for (int num6 = 1; num6 < w1 - 1; num6++)
		{
			for (int num7 = 1; num7 < h1 - 1; num7++)
			{
				if (imgAsIntArr[num6, num7] != 255)
				{
					continue;
				}
				int num8 = 0;
				bool flag2 = false;
				for (int num9 = -1; num9 < 2; num9++)
				{
					if (flag2)
					{
						break;
					}
					for (int num10 = -1; num10 < 2; num10++)
					{
						if (flag2)
						{
							break;
						}
						if (imgAsIntArr[num6 + num9, num7 + num10] == 0)
						{
							num8++;
							if (num8 > 3)
							{
								imgAsIntArr[num6, num7] = 100;
								flag2 = true;
							}
						}
					}
				}
			}
		}
		for (int num11 = 0; num11 < w1; num11++)
		{
			imgAsIntArr[num11, 0] = 200;
			imgAsIntArr[num11, h1 - 1] = 200;
		}
		for (int num12 = 0; num12 < h1; num12++)
		{
			imgAsIntArr[0, num12] = 200;
			imgAsIntArr[w1 - 1, num12] = 200;
		}
		for (int num13 = 1; num13 < w1 - 1; num13++)
		{
			for (int num14 = 1; num14 < h1 - 1; num14++)
			{
				if (imgAsIntArr[num13, num14] == 255 && (imgAsIntArr[num13 - 1, num14] == 200 || imgAsIntArr[num13 + 1, num14] == 200 || imgAsIntArr[num13, num14 - 1] == 200 || imgAsIntArr[num13, num14 + 1] == 200))
				{
					imgAsIntArr[num13, num14] = 200;
				}
			}
		}
		for (int num15 = 1; num15 < w1 - 1; num15++)
		{
			for (int num16 = h1 - 2; num16 > 0; num16--)
			{
				if (imgAsIntArr[num15, num16] == 255 && (imgAsIntArr[num15 - 1, num16] == 200 || imgAsIntArr[num15 + 1, num16] == 200 || imgAsIntArr[num15, num16 - 1] == 200 || imgAsIntArr[num15, num16 + 1] == 200))
				{
					imgAsIntArr[num15, num16] = 200;
				}
			}
		}
		for (int num17 = w1 - 2; num17 > 0; num17--)
		{
			for (int num18 = 1; num18 < h1 - 1; num18++)
			{
				if (imgAsIntArr[num17, num18] == 255 && (imgAsIntArr[num17 - 1, num18] == 200 || imgAsIntArr[num17 + 1, num18] == 200 || imgAsIntArr[num17, num18 - 1] == 200 || imgAsIntArr[num17, num18 + 1] == 200))
				{
					imgAsIntArr[num17, num18] = 200;
				}
			}
		}
		for (int num19 = w1 - 2; num19 > 0; num19--)
		{
			for (int num20 = h1 - 2; num20 > 0; num20--)
			{
				if (imgAsIntArr[num19, num20] == 255 && (imgAsIntArr[num19 - 1, num20] == 200 || imgAsIntArr[num19 + 1, num20] == 200 || imgAsIntArr[num19, num20 - 1] == 200 || imgAsIntArr[num19, num20 + 1] == 200))
				{
					imgAsIntArr[num19, num20] = 200;
				}
			}
		}
		for (int num21 = 0; num21 < w1; num21++)
		{
			for (int num22 = 0; num22 < h1; num22++)
			{
				if (imgAsIntArr[num21, num22] == 200)
				{
					imgAsIntArr[num21, num22] = 255;
				}
				else
				{
					imgAsIntArr[num21, num22] = 0;
				}
			}
		}
		for (int num23 = 0; num23 < w2; num23++)
		{
			for (int num24 = 0; num24 < h2; num24++)
			{
				if (imgAsIntArr[2 * num23, 2 * num24] < 101 || imgAsIntArr[2 * num23 + 1, 2 * num24] < 101 || imgAsIntArr[2 * num23 + 1, 2 * num24 + 1] < 101 || imgAsIntArr[2 * num23, 2 * num24 + 1] < 101)
				{
					biteArr[num23, num24] = true;
				}
				else
				{
					biteArr[num23, num24] = false;
				}
			}
		}
	}
}
